"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.listEffectiveVirtualNetworkByNetworkManagerOutput = exports.listEffectiveVirtualNetworkByNetworkManager = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * List effective virtual networks in a network manager.
 */
function listEffectiveVirtualNetworkByNetworkManager(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:network/v20220401preview:listEffectiveVirtualNetworkByNetworkManager", {
        "conditionalMembers": args.conditionalMembers,
        "networkManagerName": args.networkManagerName,
        "resourceGroupName": args.resourceGroupName,
        "skipToken": args.skipToken,
        "top": args.top,
    }, opts);
}
exports.listEffectiveVirtualNetworkByNetworkManager = listEffectiveVirtualNetworkByNetworkManager;
/**
 * List effective virtual networks in a network manager.
 */
function listEffectiveVirtualNetworkByNetworkManagerOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure-native:network/v20220401preview:listEffectiveVirtualNetworkByNetworkManager", {
        "conditionalMembers": args.conditionalMembers,
        "networkManagerName": args.networkManagerName,
        "resourceGroupName": args.resourceGroupName,
        "skipToken": args.skipToken,
        "top": args.top,
    }, opts);
}
exports.listEffectiveVirtualNetworkByNetworkManagerOutput = listEffectiveVirtualNetworkByNetworkManagerOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdEVmZmVjdGl2ZVZpcnR1YWxOZXR3b3JrQnlOZXR3b3JrTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25ldHdvcmsvdjIwMjIwNDAxcHJldmlldy9saXN0RWZmZWN0aXZlVmlydHVhbE5ldHdvcmtCeU5ldHdvcmtNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzRUFBc0U7QUFDdEUsaUZBQWlGOzs7QUFFakYseUNBQXlDO0FBSXpDLDZDQUE2QztBQUU3Qzs7R0FFRztBQUNILFNBQWdCLDJDQUEyQyxDQUFDLElBQXFELEVBQUUsSUFBMkI7SUFDMUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsbUZBQW1GLEVBQUU7UUFDOUcsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQjtRQUM3QyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1FBQzdDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7UUFDM0MsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTO1FBQzNCLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRztLQUNsQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQVRELGtHQVNDO0FBc0NEOztHQUVHO0FBQ0gsU0FBZ0IsaURBQWlELENBQUMsSUFBMkQsRUFBRSxJQUFpQztJQUM1SixJQUFJLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxtRkFBbUYsRUFBRTtRQUNwSCxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1FBQzdDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7UUFDN0MsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtRQUMzQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVM7UUFDM0IsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHO0tBQ2xCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDYixDQUFDO0FBVEQsOEdBU0MifQ==