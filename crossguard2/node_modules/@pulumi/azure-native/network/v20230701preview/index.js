"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listDnsResolverByVirtualNetwork = exports.listDnsForwardingRulesetByVirtualNetworkOutput = exports.listDnsForwardingRulesetByVirtualNetwork = exports.InboundEndpoint = exports.getZoneOutput = exports.getZone = exports.getRecordSetOutput = exports.getRecordSet = exports.getPrivateResolverVirtualNetworkLinkOutput = exports.getPrivateResolverVirtualNetworkLink = exports.getOutboundEndpointOutput = exports.getOutboundEndpoint = exports.getNspProfileOutput = exports.getNspProfile = exports.getNspLinkOutput = exports.getNspLink = exports.getNspAssociationOutput = exports.getNspAssociation = exports.getNspAccessRuleOutput = exports.getNspAccessRule = exports.getNetworkSecurityPerimeterOutput = exports.getNetworkSecurityPerimeter = exports.getInboundEndpointOutput = exports.getInboundEndpoint = exports.getForwardingRuleOutput = exports.getForwardingRule = exports.getDnssecConfigOutput = exports.getDnssecConfig = exports.getDnsSecurityRuleOutput = exports.getDnsSecurityRule = exports.getDnsResourceReferenceByTarResourcesOutput = exports.getDnsResourceReferenceByTarResources = exports.getDnsResolverPolicyVirtualNetworkLinkOutput = exports.getDnsResolverPolicyVirtualNetworkLink = exports.getDnsResolverPolicyOutput = exports.getDnsResolverPolicy = exports.getDnsResolverDomainListOutput = exports.getDnsResolverDomainList = exports.getDnsResolverOutput = exports.getDnsResolver = exports.getDnsForwardingRulesetOutput = exports.getDnsForwardingRuleset = exports.ForwardingRule = exports.DnssecConfig = exports.DnsSecurityRule = exports.DnsResolverPolicyVirtualNetworkLink = exports.DnsResolverPolicy = exports.DnsResolverDomainList = exports.DnsResolver = exports.DnsForwardingRuleset = void 0;
exports.Zone = exports.RecordSet = exports.PrivateResolverVirtualNetworkLink = exports.OutboundEndpoint = exports.NspProfile = exports.NspLink = exports.NspAssociation = exports.NspAccessRule = exports.NetworkSecurityPerimeter = exports.listDnsResolverPolicyByVirtualNetworkOutput = exports.listDnsResolverPolicyByVirtualNetwork = exports.listDnsResolverByVirtualNetworkOutput = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.DnsForwardingRuleset = null;
utilities.lazyLoad(exports, ["DnsForwardingRuleset"], () => require("./dnsForwardingRuleset"));
exports.DnsResolver = null;
utilities.lazyLoad(exports, ["DnsResolver"], () => require("./dnsResolver"));
exports.DnsResolverDomainList = null;
utilities.lazyLoad(exports, ["DnsResolverDomainList"], () => require("./dnsResolverDomainList"));
exports.DnsResolverPolicy = null;
utilities.lazyLoad(exports, ["DnsResolverPolicy"], () => require("./dnsResolverPolicy"));
exports.DnsResolverPolicyVirtualNetworkLink = null;
utilities.lazyLoad(exports, ["DnsResolverPolicyVirtualNetworkLink"], () => require("./dnsResolverPolicyVirtualNetworkLink"));
exports.DnsSecurityRule = null;
utilities.lazyLoad(exports, ["DnsSecurityRule"], () => require("./dnsSecurityRule"));
exports.DnssecConfig = null;
utilities.lazyLoad(exports, ["DnssecConfig"], () => require("./dnssecConfig"));
exports.ForwardingRule = null;
utilities.lazyLoad(exports, ["ForwardingRule"], () => require("./forwardingRule"));
exports.getDnsForwardingRuleset = null;
exports.getDnsForwardingRulesetOutput = null;
utilities.lazyLoad(exports, ["getDnsForwardingRuleset", "getDnsForwardingRulesetOutput"], () => require("./getDnsForwardingRuleset"));
exports.getDnsResolver = null;
exports.getDnsResolverOutput = null;
utilities.lazyLoad(exports, ["getDnsResolver", "getDnsResolverOutput"], () => require("./getDnsResolver"));
exports.getDnsResolverDomainList = null;
exports.getDnsResolverDomainListOutput = null;
utilities.lazyLoad(exports, ["getDnsResolverDomainList", "getDnsResolverDomainListOutput"], () => require("./getDnsResolverDomainList"));
exports.getDnsResolverPolicy = null;
exports.getDnsResolverPolicyOutput = null;
utilities.lazyLoad(exports, ["getDnsResolverPolicy", "getDnsResolverPolicyOutput"], () => require("./getDnsResolverPolicy"));
exports.getDnsResolverPolicyVirtualNetworkLink = null;
exports.getDnsResolverPolicyVirtualNetworkLinkOutput = null;
utilities.lazyLoad(exports, ["getDnsResolverPolicyVirtualNetworkLink", "getDnsResolverPolicyVirtualNetworkLinkOutput"], () => require("./getDnsResolverPolicyVirtualNetworkLink"));
exports.getDnsResourceReferenceByTarResources = null;
exports.getDnsResourceReferenceByTarResourcesOutput = null;
utilities.lazyLoad(exports, ["getDnsResourceReferenceByTarResources", "getDnsResourceReferenceByTarResourcesOutput"], () => require("./getDnsResourceReferenceByTarResources"));
exports.getDnsSecurityRule = null;
exports.getDnsSecurityRuleOutput = null;
utilities.lazyLoad(exports, ["getDnsSecurityRule", "getDnsSecurityRuleOutput"], () => require("./getDnsSecurityRule"));
exports.getDnssecConfig = null;
exports.getDnssecConfigOutput = null;
utilities.lazyLoad(exports, ["getDnssecConfig", "getDnssecConfigOutput"], () => require("./getDnssecConfig"));
exports.getForwardingRule = null;
exports.getForwardingRuleOutput = null;
utilities.lazyLoad(exports, ["getForwardingRule", "getForwardingRuleOutput"], () => require("./getForwardingRule"));
exports.getInboundEndpoint = null;
exports.getInboundEndpointOutput = null;
utilities.lazyLoad(exports, ["getInboundEndpoint", "getInboundEndpointOutput"], () => require("./getInboundEndpoint"));
exports.getNetworkSecurityPerimeter = null;
exports.getNetworkSecurityPerimeterOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeter", "getNetworkSecurityPerimeterOutput"], () => require("./getNetworkSecurityPerimeter"));
exports.getNspAccessRule = null;
exports.getNspAccessRuleOutput = null;
utilities.lazyLoad(exports, ["getNspAccessRule", "getNspAccessRuleOutput"], () => require("./getNspAccessRule"));
exports.getNspAssociation = null;
exports.getNspAssociationOutput = null;
utilities.lazyLoad(exports, ["getNspAssociation", "getNspAssociationOutput"], () => require("./getNspAssociation"));
exports.getNspLink = null;
exports.getNspLinkOutput = null;
utilities.lazyLoad(exports, ["getNspLink", "getNspLinkOutput"], () => require("./getNspLink"));
exports.getNspProfile = null;
exports.getNspProfileOutput = null;
utilities.lazyLoad(exports, ["getNspProfile", "getNspProfileOutput"], () => require("./getNspProfile"));
exports.getOutboundEndpoint = null;
exports.getOutboundEndpointOutput = null;
utilities.lazyLoad(exports, ["getOutboundEndpoint", "getOutboundEndpointOutput"], () => require("./getOutboundEndpoint"));
exports.getPrivateResolverVirtualNetworkLink = null;
exports.getPrivateResolverVirtualNetworkLinkOutput = null;
utilities.lazyLoad(exports, ["getPrivateResolverVirtualNetworkLink", "getPrivateResolverVirtualNetworkLinkOutput"], () => require("./getPrivateResolverVirtualNetworkLink"));
exports.getRecordSet = null;
exports.getRecordSetOutput = null;
utilities.lazyLoad(exports, ["getRecordSet", "getRecordSetOutput"], () => require("./getRecordSet"));
exports.getZone = null;
exports.getZoneOutput = null;
utilities.lazyLoad(exports, ["getZone", "getZoneOutput"], () => require("./getZone"));
exports.InboundEndpoint = null;
utilities.lazyLoad(exports, ["InboundEndpoint"], () => require("./inboundEndpoint"));
exports.listDnsForwardingRulesetByVirtualNetwork = null;
exports.listDnsForwardingRulesetByVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["listDnsForwardingRulesetByVirtualNetwork", "listDnsForwardingRulesetByVirtualNetworkOutput"], () => require("./listDnsForwardingRulesetByVirtualNetwork"));
exports.listDnsResolverByVirtualNetwork = null;
exports.listDnsResolverByVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["listDnsResolverByVirtualNetwork", "listDnsResolverByVirtualNetworkOutput"], () => require("./listDnsResolverByVirtualNetwork"));
exports.listDnsResolverPolicyByVirtualNetwork = null;
exports.listDnsResolverPolicyByVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["listDnsResolverPolicyByVirtualNetwork", "listDnsResolverPolicyByVirtualNetworkOutput"], () => require("./listDnsResolverPolicyByVirtualNetwork"));
exports.NetworkSecurityPerimeter = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeter"], () => require("./networkSecurityPerimeter"));
exports.NspAccessRule = null;
utilities.lazyLoad(exports, ["NspAccessRule"], () => require("./nspAccessRule"));
exports.NspAssociation = null;
utilities.lazyLoad(exports, ["NspAssociation"], () => require("./nspAssociation"));
exports.NspLink = null;
utilities.lazyLoad(exports, ["NspLink"], () => require("./nspLink"));
exports.NspProfile = null;
utilities.lazyLoad(exports, ["NspProfile"], () => require("./nspProfile"));
exports.OutboundEndpoint = null;
utilities.lazyLoad(exports, ["OutboundEndpoint"], () => require("./outboundEndpoint"));
exports.PrivateResolverVirtualNetworkLink = null;
utilities.lazyLoad(exports, ["PrivateResolverVirtualNetworkLink"], () => require("./privateResolverVirtualNetworkLink"));
exports.RecordSet = null;
utilities.lazyLoad(exports, ["RecordSet"], () => require("./recordSet"));
exports.Zone = null;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));
// Export enums:
__exportStar(require("../../types/enums/network/v20230701preview"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:network/v20230701preview:DnsForwardingRuleset":
                return new exports.DnsForwardingRuleset(name, undefined, { urn });
            case "azure-native:network/v20230701preview:DnsResolver":
                return new exports.DnsResolver(name, undefined, { urn });
            case "azure-native:network/v20230701preview:DnsResolverDomainList":
                return new exports.DnsResolverDomainList(name, undefined, { urn });
            case "azure-native:network/v20230701preview:DnsResolverPolicy":
                return new exports.DnsResolverPolicy(name, undefined, { urn });
            case "azure-native:network/v20230701preview:DnsResolverPolicyVirtualNetworkLink":
                return new exports.DnsResolverPolicyVirtualNetworkLink(name, undefined, { urn });
            case "azure-native:network/v20230701preview:DnsSecurityRule":
                return new exports.DnsSecurityRule(name, undefined, { urn });
            case "azure-native:network/v20230701preview:DnssecConfig":
                return new exports.DnssecConfig(name, undefined, { urn });
            case "azure-native:network/v20230701preview:ForwardingRule":
                return new exports.ForwardingRule(name, undefined, { urn });
            case "azure-native:network/v20230701preview:InboundEndpoint":
                return new exports.InboundEndpoint(name, undefined, { urn });
            case "azure-native:network/v20230701preview:NetworkSecurityPerimeter":
                return new exports.NetworkSecurityPerimeter(name, undefined, { urn });
            case "azure-native:network/v20230701preview:NspAccessRule":
                return new exports.NspAccessRule(name, undefined, { urn });
            case "azure-native:network/v20230701preview:NspAssociation":
                return new exports.NspAssociation(name, undefined, { urn });
            case "azure-native:network/v20230701preview:NspLink":
                return new exports.NspLink(name, undefined, { urn });
            case "azure-native:network/v20230701preview:NspProfile":
                return new exports.NspProfile(name, undefined, { urn });
            case "azure-native:network/v20230701preview:OutboundEndpoint":
                return new exports.OutboundEndpoint(name, undefined, { urn });
            case "azure-native:network/v20230701preview:PrivateResolverVirtualNetworkLink":
                return new exports.PrivateResolverVirtualNetworkLink(name, undefined, { urn });
            case "azure-native:network/v20230701preview:RecordSet":
                return new exports.RecordSet(name, undefined, { urn });
            case "azure-native:network/v20230701preview:Zone":
                return new exports.Zone(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network/v20230701preview", _module);
//# sourceMappingURL=data:application/json;base64,