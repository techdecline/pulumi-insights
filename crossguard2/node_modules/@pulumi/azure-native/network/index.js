"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApplicationGatewayOutput = exports.getApplicationGateway = exports.getAdminRuleCollectionOutput = exports.getAdminRuleCollection = exports.getAdminRuleOutput = exports.getAdminRule = exports.getActiveSessionsOutput = exports.getActiveSessions = exports.FrontDoor = exports.ForwardingRule = exports.FlowLog = exports.FirewallPolicyRuleGroup = exports.FirewallPolicyRuleCollectionGroupDraft = exports.FirewallPolicyRuleCollectionGroup = exports.FirewallPolicyDraft = exports.FirewallPolicy = exports.ExpressRoutePortAuthorization = exports.ExpressRoutePort = exports.ExpressRouteGateway = exports.ExpressRouteCrossConnectionPeering = exports.ExpressRouteConnection = exports.ExpressRouteCircuitPeering = exports.ExpressRouteCircuitConnection = exports.ExpressRouteCircuitAuthorization = exports.ExpressRouteCircuit = exports.Experiment = exports.Endpoint = exports.DscpConfiguration = exports.DnssecConfig = exports.DnsSecurityRule = exports.DnsResolverPolicyVirtualNetworkLink = exports.DnsResolverPolicy = exports.DnsResolverDomainList = exports.DnsResolver = exports.DnsForwardingRuleset = exports.DefaultUserRule = exports.DefaultAdminRule = exports.DdosProtectionPlan = exports.DdosCustomPolicy = exports.CustomIPPrefix = exports.ConnectivityConfiguration = exports.ConnectionMonitor = exports.ConfigurationPolicyGroup = exports.BastionHost = exports.AzureFirewall = exports.ApplicationSecurityGroup = exports.ApplicationGatewayPrivateEndpointConnection = exports.ApplicationGateway = exports.AdminRuleCollection = exports.AdminRule = void 0;
exports.getExperimentOutput = exports.getExperiment = exports.getEndpointOutput = exports.getEndpoint = exports.getDscpConfigurationOutput = exports.getDscpConfiguration = exports.getDnssecConfigOutput = exports.getDnssecConfig = exports.getDnsSecurityRuleOutput = exports.getDnsSecurityRule = exports.getDnsResourceReferenceByTarResourcesOutput = exports.getDnsResourceReferenceByTarResources = exports.getDnsResolverPolicyVirtualNetworkLinkOutput = exports.getDnsResolverPolicyVirtualNetworkLink = exports.getDnsResolverPolicyOutput = exports.getDnsResolverPolicy = exports.getDnsResolverDomainListOutput = exports.getDnsResolverDomainList = exports.getDnsResolverOutput = exports.getDnsResolver = exports.getDnsForwardingRulesetOutput = exports.getDnsForwardingRuleset = exports.getDefaultUserRuleOutput = exports.getDefaultUserRule = exports.getDefaultAdminRuleOutput = exports.getDefaultAdminRule = exports.getDdosProtectionPlanOutput = exports.getDdosProtectionPlan = exports.getDdosCustomPolicyOutput = exports.getDdosCustomPolicy = exports.getCustomIPPrefixOutput = exports.getCustomIPPrefix = exports.getConnectivityConfigurationOutput = exports.getConnectivityConfiguration = exports.getConnectionMonitorOutput = exports.getConnectionMonitor = exports.getConfigurationPolicyGroupOutput = exports.getConfigurationPolicyGroup = exports.getBastionShareableLinkOutput = exports.getBastionShareableLink = exports.getBastionHostOutput = exports.getBastionHost = exports.getAzureFirewallOutput = exports.getAzureFirewall = exports.getApplicationSecurityGroupOutput = exports.getApplicationSecurityGroup = exports.getApplicationGatewayPrivateEndpointConnectionOutput = exports.getApplicationGatewayPrivateEndpointConnection = exports.getApplicationGatewayBackendHealthOnDemandOutput = exports.getApplicationGatewayBackendHealthOnDemand = void 0;
exports.getIpamPoolOutput = exports.getIpamPool = exports.getIpGroupOutput = exports.getIpGroup = exports.getIpAllocationOutput = exports.getIpAllocation = exports.getInterfaceEndpointOutput = exports.getInterfaceEndpoint = exports.getInboundNatRuleOutput = exports.getInboundNatRule = exports.getInboundEndpointOutput = exports.getInboundEndpoint = exports.getHubVirtualNetworkConnectionOutput = exports.getHubVirtualNetworkConnection = exports.getHubRouteTableOutput = exports.getHubRouteTable = exports.getFrontDoorOutput = exports.getFrontDoor = exports.getForwardingRuleOutput = exports.getForwardingRule = exports.getFlowLogOutput = exports.getFlowLog = exports.getFirewallPolicyRuleGroupOutput = exports.getFirewallPolicyRuleGroup = exports.getFirewallPolicyRuleCollectionGroupDraftOutput = exports.getFirewallPolicyRuleCollectionGroupDraft = exports.getFirewallPolicyRuleCollectionGroupOutput = exports.getFirewallPolicyRuleCollectionGroup = exports.getFirewallPolicyDraftOutput = exports.getFirewallPolicyDraft = exports.getFirewallPolicyOutput = exports.getFirewallPolicy = exports.getExpressRoutePortAuthorizationOutput = exports.getExpressRoutePortAuthorization = exports.getExpressRoutePortOutput = exports.getExpressRoutePort = exports.getExpressRouteGatewayOutput = exports.getExpressRouteGateway = exports.getExpressRouteCrossConnectionPeeringOutput = exports.getExpressRouteCrossConnectionPeering = exports.getExpressRouteConnectionOutput = exports.getExpressRouteConnection = exports.getExpressRouteCircuitPeeringOutput = exports.getExpressRouteCircuitPeering = exports.getExpressRouteCircuitConnectionOutput = exports.getExpressRouteCircuitConnection = exports.getExpressRouteCircuitAuthorizationOutput = exports.getExpressRouteCircuitAuthorization = exports.getExpressRouteCircuitOutput = exports.getExpressRouteCircuit = void 0;
exports.getNspAccessRuleOutput = exports.getNspAccessRule = exports.getNetworkWatcherOutput = exports.getNetworkWatcher = exports.getNetworkVirtualApplianceConnectionOutput = exports.getNetworkVirtualApplianceConnection = exports.getNetworkVirtualApplianceOutput = exports.getNetworkVirtualAppliance = exports.getNetworkSecurityPerimeterProfileOutput = exports.getNetworkSecurityPerimeterProfile = exports.getNetworkSecurityPerimeterLoggingConfigurationOutput = exports.getNetworkSecurityPerimeterLoggingConfiguration = exports.getNetworkSecurityPerimeterLinkOutput = exports.getNetworkSecurityPerimeterLink = exports.getNetworkSecurityPerimeterAssociationOutput = exports.getNetworkSecurityPerimeterAssociation = exports.getNetworkSecurityPerimeterAccessRuleOutput = exports.getNetworkSecurityPerimeterAccessRule = exports.getNetworkSecurityPerimeterOutput = exports.getNetworkSecurityPerimeter = exports.getNetworkSecurityGroupOutput = exports.getNetworkSecurityGroup = exports.getNetworkProfileOutput = exports.getNetworkProfile = exports.getNetworkManagerRoutingConfigurationOutput = exports.getNetworkManagerRoutingConfiguration = exports.getNetworkManagerOutput = exports.getNetworkManager = exports.getNetworkInterfaceTapConfigurationOutput = exports.getNetworkInterfaceTapConfiguration = exports.getNetworkInterfaceOutput = exports.getNetworkInterface = exports.getNetworkGroupOutput = exports.getNetworkGroup = exports.getNetworkExperimentProfileOutput = exports.getNetworkExperimentProfile = exports.getNatRuleOutput = exports.getNatRule = exports.getNatGatewayOutput = exports.getNatGateway = exports.getManagementGroupNetworkManagerConnectionOutput = exports.getManagementGroupNetworkManagerConnection = exports.getLocalNetworkGatewayOutput = exports.getLocalNetworkGateway = exports.getLoadBalancerBackendAddressPoolOutput = exports.getLoadBalancerBackendAddressPool = exports.getLoadBalancerOutput = exports.getLoadBalancer = exports.getIpamPoolUsageOutput = exports.getIpamPoolUsage = void 0;
exports.getRouteFilterOutput = exports.getRouteFilter = exports.getRouteOutput = exports.getRoute = exports.getRecordSetOutput = exports.getRecordSet = exports.getReachabilityAnalysisRunOutput = exports.getReachabilityAnalysisRun = exports.getReachabilityAnalysisIntentOutput = exports.getReachabilityAnalysisIntent = exports.getPublicIPPrefixOutput = exports.getPublicIPPrefix = exports.getPublicIPAddressOutput = exports.getPublicIPAddress = exports.getProfileOutput = exports.getProfile = exports.getPrivateZoneOutput = exports.getPrivateZone = exports.getPrivateResolverVirtualNetworkLinkOutput = exports.getPrivateResolverVirtualNetworkLink = exports.getPrivateRecordSetOutput = exports.getPrivateRecordSet = exports.getPrivateLinkServicePrivateEndpointConnectionOutput = exports.getPrivateLinkServicePrivateEndpointConnection = exports.getPrivateLinkServiceOutput = exports.getPrivateLinkService = exports.getPrivateEndpointOutput = exports.getPrivateEndpoint = exports.getPrivateDnsZoneGroupOutput = exports.getPrivateDnsZoneGroup = exports.getPolicyOutput = exports.getPolicy = exports.getPacketCaptureOutput = exports.getPacketCapture = exports.getP2sVpnServerConfigurationOutput = exports.getP2sVpnServerConfiguration = exports.getP2sVpnGatewayP2sVpnConnectionHealthDetailedOutput = exports.getP2sVpnGatewayP2sVpnConnectionHealthDetailed = exports.getP2sVpnGatewayP2sVpnConnectionHealthOutput = exports.getP2sVpnGatewayP2sVpnConnectionHealth = exports.getP2sVpnGatewayOutput = exports.getP2sVpnGateway = exports.getOutboundEndpointOutput = exports.getOutboundEndpoint = exports.getNspProfileOutput = exports.getNspProfile = exports.getNspLinkOutput = exports.getNspLink = exports.getNspAssociationOutput = exports.getNspAssociation = void 0;
exports.getVirtualApplianceSiteOutput = exports.getVirtualApplianceSite = exports.getVerifierWorkspaceOutput = exports.getVerifierWorkspace = exports.getUserRuleCollectionOutput = exports.getUserRuleCollection = exports.getUserRuleOutput = exports.getUserRule = exports.getTrafficManagerUserMetricsKeyOutput = exports.getTrafficManagerUserMetricsKey = exports.getSubscriptionNetworkManagerConnectionOutput = exports.getSubscriptionNetworkManagerConnection = exports.getSubnetOutput = exports.getSubnet = exports.getStaticMemberOutput = exports.getStaticMember = exports.getStaticCidrOutput = exports.getStaticCidr = exports.getServiceEndpointPolicyDefinitionOutput = exports.getServiceEndpointPolicyDefinition = exports.getServiceEndpointPolicyOutput = exports.getServiceEndpointPolicy = exports.getSecurityUserRuleCollectionOutput = exports.getSecurityUserRuleCollection = exports.getSecurityUserRuleOutput = exports.getSecurityUserRule = exports.getSecurityUserConfigurationOutput = exports.getSecurityUserConfiguration = exports.getSecurityRuleOutput = exports.getSecurityRule = exports.getSecurityPartnerProviderOutput = exports.getSecurityPartnerProvider = exports.getSecurityAdminConfigurationOutput = exports.getSecurityAdminConfiguration = exports.getScopeConnectionOutput = exports.getScopeConnection = exports.getRulesEngineOutput = exports.getRulesEngine = exports.getRoutingRuleCollectionOutput = exports.getRoutingRuleCollection = exports.getRoutingRuleOutput = exports.getRoutingRule = exports.getRoutingIntentOutput = exports.getRoutingIntent = exports.getRouteTableOutput = exports.getRouteTable = exports.getRouteMapOutput = exports.getRouteMap = exports.getRouteFilterRuleOutput = exports.getRouteFilterRule = void 0;
exports.getVpnServerConfigurationOutput = exports.getVpnServerConfiguration = exports.getVpnLinkConnectionIkeSasOutput = exports.getVpnLinkConnectionIkeSas = exports.getVpnGatewayOutput = exports.getVpnGateway = exports.getVpnConnectionOutput = exports.getVpnConnection = exports.getVirtualWanOutput = exports.getVirtualWan = exports.getVirtualRouterPeeringOutput = exports.getVirtualRouterPeering = exports.getVirtualRouterOutput = exports.getVirtualRouter = exports.getVirtualNetworkTapOutput = exports.getVirtualNetworkTap = exports.getVirtualNetworkPeeringOutput = exports.getVirtualNetworkPeering = exports.getVirtualNetworkLinkOutput = exports.getVirtualNetworkLink = exports.getVirtualNetworkGatewayVpnclientIpsecParametersOutput = exports.getVirtualNetworkGatewayVpnclientIpsecParameters = exports.getVirtualNetworkGatewayVpnclientConnectionHealthOutput = exports.getVirtualNetworkGatewayVpnclientConnectionHealth = exports.getVirtualNetworkGatewayVpnProfilePackageUrlOutput = exports.getVirtualNetworkGatewayVpnProfilePackageUrl = exports.getVirtualNetworkGatewayNatRuleOutput = exports.getVirtualNetworkGatewayNatRule = exports.getVirtualNetworkGatewayLearnedRoutesOutput = exports.getVirtualNetworkGatewayLearnedRoutes = exports.getVirtualNetworkGatewayConnectionIkeSasOutput = exports.getVirtualNetworkGatewayConnectionIkeSas = exports.getVirtualNetworkGatewayConnectionOutput = exports.getVirtualNetworkGatewayConnection = exports.getVirtualNetworkGatewayBgpPeerStatusOutput = exports.getVirtualNetworkGatewayBgpPeerStatus = exports.getVirtualNetworkGatewayAdvertisedRoutesOutput = exports.getVirtualNetworkGatewayAdvertisedRoutes = exports.getVirtualNetworkGatewayOutput = exports.getVirtualNetworkGateway = exports.getVirtualNetworkOutput = exports.getVirtualNetwork = exports.getVirtualHubRouteTableV2Output = exports.getVirtualHubRouteTableV2 = exports.getVirtualHubIpConfigurationOutput = exports.getVirtualHubIpConfiguration = exports.getVirtualHubBgpConnectionOutput = exports.getVirtualHubBgpConnection = exports.getVirtualHubOutput = exports.getVirtualHub = void 0;
exports.listNetworkManagerEffectiveConnectivityConfigurationsOutput = exports.listNetworkManagerEffectiveConnectivityConfigurations = exports.listNetworkManagerDeploymentStatusOutput = exports.listNetworkManagerDeploymentStatus = exports.listListEffectiveVirtualNetworkByNetworkGroupOutput = exports.listListEffectiveVirtualNetworkByNetworkGroup = exports.listIpamPoolAssociatedResourcesOutput = exports.listIpamPoolAssociatedResources = exports.listFirewallPolicyIdpsSignaturesFilterValueOutput = exports.listFirewallPolicyIdpsSignaturesFilterValue = exports.listFirewallPolicyIdpsSignatureOutput = exports.listFirewallPolicyIdpsSignature = exports.listEffectiveVirtualNetworkByNetworkManagerOutput = exports.listEffectiveVirtualNetworkByNetworkManager = exports.listEffectiveVirtualNetworkByNetworkGroupOutput = exports.listEffectiveVirtualNetworkByNetworkGroup = exports.listEffectiveConnectivityConfigurationOutput = exports.listEffectiveConnectivityConfiguration = exports.listDnsResolverPolicyByVirtualNetworkOutput = exports.listDnsResolverPolicyByVirtualNetwork = exports.listDnsResolverByVirtualNetworkOutput = exports.listDnsResolverByVirtualNetwork = exports.listDnsForwardingRulesetByVirtualNetworkOutput = exports.listDnsForwardingRulesetByVirtualNetwork = exports.listActiveSecurityUserRulesOutput = exports.listActiveSecurityUserRules = exports.listActiveSecurityUserRuleOutput = exports.listActiveSecurityUserRule = exports.listActiveSecurityAdminRulesOutput = exports.listActiveSecurityAdminRules = exports.listActiveSecurityAdminRuleOutput = exports.listActiveSecurityAdminRule = exports.listActiveConnectivityConfigurationsOutput = exports.listActiveConnectivityConfigurations = exports.listActiveConnectivityConfigurationOutput = exports.listActiveConnectivityConfiguration = exports.IpamPool = exports.IpGroup = exports.IpAllocation = exports.InterfaceEndpoint = exports.InboundNatRule = exports.InboundEndpoint = exports.HubVirtualNetworkConnection = exports.HubRouteTable = exports.getZoneOutput = exports.getZone = exports.getWebApplicationFirewallPolicyOutput = exports.getWebApplicationFirewallPolicy = exports.getVpnSiteOutput = exports.getVpnSite = void 0;
exports.ReachabilityAnalysisRun = exports.ReachabilityAnalysisIntent = exports.PublicIPPrefix = exports.PublicIPAddress = exports.Profile = exports.PrivateZone = exports.PrivateResolverVirtualNetworkLink = exports.PrivateRecordSet = exports.PrivateLinkServicePrivateEndpointConnection = exports.PrivateLinkService = exports.PrivateEndpoint = exports.PrivateDnsZoneGroup = exports.Policy = exports.PacketCapture = exports.P2sVpnServerConfiguration = exports.P2sVpnGateway = exports.OutboundEndpoint = exports.NspProfile = exports.NspLink = exports.NspAssociation = exports.NspAccessRule = exports.NetworkWatcher = exports.NetworkVirtualApplianceConnection = exports.NetworkVirtualAppliance = exports.NetworkSecurityPerimeterProfile = exports.NetworkSecurityPerimeterLoggingConfiguration = exports.NetworkSecurityPerimeterLink = exports.NetworkSecurityPerimeterAssociation = exports.NetworkSecurityPerimeterAccessRule = exports.NetworkSecurityPerimeter = exports.NetworkSecurityGroup = exports.NetworkProfile = exports.NetworkManagerRoutingConfiguration = exports.NetworkManager = exports.NetworkInterfaceTapConfiguration = exports.NetworkInterface = exports.NetworkGroup = exports.NetworkExperimentProfile = exports.NatRule = exports.NatGateway = exports.ManagementGroupNetworkManagerConnection = exports.LocalNetworkGateway = exports.LoadBalancerBackendAddressPool = exports.LoadBalancer = exports.listVpnLinkConnectionDefaultSharedKeyOutput = exports.listVpnLinkConnectionDefaultSharedKey = exports.listNetworkManagerEffectiveSecurityAdminRulesOutput = exports.listNetworkManagerEffectiveSecurityAdminRules = exports.listNetworkManagerEffectiveSecurityAdminRuleOutput = exports.listNetworkManagerEffectiveSecurityAdminRule = void 0;
exports.v20180601 = exports.v20180501 = exports.Zone = exports.WebApplicationFirewallPolicy = exports.VpnSite = exports.VpnServerConfiguration = exports.VpnGateway = exports.VpnConnection = exports.VirtualWan = exports.VirtualRouterPeering = exports.VirtualRouter = exports.VirtualNetworkTap = exports.VirtualNetworkPeering = exports.VirtualNetworkLink = exports.VirtualNetworkGatewayNatRule = exports.VirtualNetworkGatewayConnection = exports.VirtualNetworkGateway = exports.VirtualNetwork = exports.VirtualHubRouteTableV2 = exports.VirtualHubIpConfiguration = exports.VirtualHubBgpConnection = exports.VirtualHub = exports.VirtualApplianceSite = exports.VerifierWorkspace = exports.UserRuleCollection = exports.UserRule = exports.TrafficManagerUserMetricsKey = exports.SubscriptionNetworkManagerConnection = exports.Subnet = exports.StaticMember = exports.StaticCidr = exports.ServiceEndpointPolicyDefinition = exports.ServiceEndpointPolicy = exports.SecurityUserRuleCollection = exports.SecurityUserRule = exports.SecurityUserConfiguration = exports.SecurityRule = exports.SecurityPartnerProvider = exports.SecurityAdminConfiguration = exports.ScopeConnection = exports.RulesEngine = exports.RoutingRuleCollection = exports.RoutingRule = exports.RoutingIntent = exports.RouteTable = exports.RouteMap = exports.RouteFilterRule = exports.RouteFilter = exports.Route = exports.RecordSet = void 0;
exports.v20240601preview = exports.v20240601 = exports.v20240501 = exports.v20240301 = exports.v20240201 = exports.v20240101preview = exports.v20240101 = exports.v20231101 = exports.v20230901 = exports.v20230801preview = exports.v20230701preview = exports.v20230601 = exports.v20230501 = exports.v20230401 = exports.v20230201 = exports.v20220701 = exports.v20220501 = exports.v20220401preview = exports.v20220401 = exports.v20220201preview = exports.v20220101 = exports.v20210801 = exports.v20210601 = exports.v20210501preview = exports.v20210301preview = exports.v20210301 = exports.v20210201preview = exports.v20210201 = exports.v20200601 = exports.v20200401preview = exports.v20200401 = exports.v20191101 = exports.v20190901 = exports.v20190801 = exports.v20190701 = exports.v20190601 = exports.v20190201 = exports.v20181201 = exports.v20180701 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AdminRule = null;
utilities.lazyLoad(exports, ["AdminRule"], () => require("./adminRule"));
exports.AdminRuleCollection = null;
utilities.lazyLoad(exports, ["AdminRuleCollection"], () => require("./adminRuleCollection"));
exports.ApplicationGateway = null;
utilities.lazyLoad(exports, ["ApplicationGateway"], () => require("./applicationGateway"));
exports.ApplicationGatewayPrivateEndpointConnection = null;
utilities.lazyLoad(exports, ["ApplicationGatewayPrivateEndpointConnection"], () => require("./applicationGatewayPrivateEndpointConnection"));
exports.ApplicationSecurityGroup = null;
utilities.lazyLoad(exports, ["ApplicationSecurityGroup"], () => require("./applicationSecurityGroup"));
exports.AzureFirewall = null;
utilities.lazyLoad(exports, ["AzureFirewall"], () => require("./azureFirewall"));
exports.BastionHost = null;
utilities.lazyLoad(exports, ["BastionHost"], () => require("./bastionHost"));
exports.ConfigurationPolicyGroup = null;
utilities.lazyLoad(exports, ["ConfigurationPolicyGroup"], () => require("./configurationPolicyGroup"));
exports.ConnectionMonitor = null;
utilities.lazyLoad(exports, ["ConnectionMonitor"], () => require("./connectionMonitor"));
exports.ConnectivityConfiguration = null;
utilities.lazyLoad(exports, ["ConnectivityConfiguration"], () => require("./connectivityConfiguration"));
exports.CustomIPPrefix = null;
utilities.lazyLoad(exports, ["CustomIPPrefix"], () => require("./customIPPrefix"));
exports.DdosCustomPolicy = null;
utilities.lazyLoad(exports, ["DdosCustomPolicy"], () => require("./ddosCustomPolicy"));
exports.DdosProtectionPlan = null;
utilities.lazyLoad(exports, ["DdosProtectionPlan"], () => require("./ddosProtectionPlan"));
exports.DefaultAdminRule = null;
utilities.lazyLoad(exports, ["DefaultAdminRule"], () => require("./defaultAdminRule"));
exports.DefaultUserRule = null;
utilities.lazyLoad(exports, ["DefaultUserRule"], () => require("./defaultUserRule"));
exports.DnsForwardingRuleset = null;
utilities.lazyLoad(exports, ["DnsForwardingRuleset"], () => require("./dnsForwardingRuleset"));
exports.DnsResolver = null;
utilities.lazyLoad(exports, ["DnsResolver"], () => require("./dnsResolver"));
exports.DnsResolverDomainList = null;
utilities.lazyLoad(exports, ["DnsResolverDomainList"], () => require("./dnsResolverDomainList"));
exports.DnsResolverPolicy = null;
utilities.lazyLoad(exports, ["DnsResolverPolicy"], () => require("./dnsResolverPolicy"));
exports.DnsResolverPolicyVirtualNetworkLink = null;
utilities.lazyLoad(exports, ["DnsResolverPolicyVirtualNetworkLink"], () => require("./dnsResolverPolicyVirtualNetworkLink"));
exports.DnsSecurityRule = null;
utilities.lazyLoad(exports, ["DnsSecurityRule"], () => require("./dnsSecurityRule"));
exports.DnssecConfig = null;
utilities.lazyLoad(exports, ["DnssecConfig"], () => require("./dnssecConfig"));
exports.DscpConfiguration = null;
utilities.lazyLoad(exports, ["DscpConfiguration"], () => require("./dscpConfiguration"));
exports.Endpoint = null;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));
exports.Experiment = null;
utilities.lazyLoad(exports, ["Experiment"], () => require("./experiment"));
exports.ExpressRouteCircuit = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuit"], () => require("./expressRouteCircuit"));
exports.ExpressRouteCircuitAuthorization = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuitAuthorization"], () => require("./expressRouteCircuitAuthorization"));
exports.ExpressRouteCircuitConnection = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuitConnection"], () => require("./expressRouteCircuitConnection"));
exports.ExpressRouteCircuitPeering = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuitPeering"], () => require("./expressRouteCircuitPeering"));
exports.ExpressRouteConnection = null;
utilities.lazyLoad(exports, ["ExpressRouteConnection"], () => require("./expressRouteConnection"));
exports.ExpressRouteCrossConnectionPeering = null;
utilities.lazyLoad(exports, ["ExpressRouteCrossConnectionPeering"], () => require("./expressRouteCrossConnectionPeering"));
exports.ExpressRouteGateway = null;
utilities.lazyLoad(exports, ["ExpressRouteGateway"], () => require("./expressRouteGateway"));
exports.ExpressRoutePort = null;
utilities.lazyLoad(exports, ["ExpressRoutePort"], () => require("./expressRoutePort"));
exports.ExpressRoutePortAuthorization = null;
utilities.lazyLoad(exports, ["ExpressRoutePortAuthorization"], () => require("./expressRoutePortAuthorization"));
exports.FirewallPolicy = null;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));
exports.FirewallPolicyDraft = null;
utilities.lazyLoad(exports, ["FirewallPolicyDraft"], () => require("./firewallPolicyDraft"));
exports.FirewallPolicyRuleCollectionGroup = null;
utilities.lazyLoad(exports, ["FirewallPolicyRuleCollectionGroup"], () => require("./firewallPolicyRuleCollectionGroup"));
exports.FirewallPolicyRuleCollectionGroupDraft = null;
utilities.lazyLoad(exports, ["FirewallPolicyRuleCollectionGroupDraft"], () => require("./firewallPolicyRuleCollectionGroupDraft"));
exports.FirewallPolicyRuleGroup = null;
utilities.lazyLoad(exports, ["FirewallPolicyRuleGroup"], () => require("./firewallPolicyRuleGroup"));
exports.FlowLog = null;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));
exports.ForwardingRule = null;
utilities.lazyLoad(exports, ["ForwardingRule"], () => require("./forwardingRule"));
exports.FrontDoor = null;
utilities.lazyLoad(exports, ["FrontDoor"], () => require("./frontDoor"));
exports.getActiveSessions = null;
exports.getActiveSessionsOutput = null;
utilities.lazyLoad(exports, ["getActiveSessions", "getActiveSessionsOutput"], () => require("./getActiveSessions"));
exports.getAdminRule = null;
exports.getAdminRuleOutput = null;
utilities.lazyLoad(exports, ["getAdminRule", "getAdminRuleOutput"], () => require("./getAdminRule"));
exports.getAdminRuleCollection = null;
exports.getAdminRuleCollectionOutput = null;
utilities.lazyLoad(exports, ["getAdminRuleCollection", "getAdminRuleCollectionOutput"], () => require("./getAdminRuleCollection"));
exports.getApplicationGateway = null;
exports.getApplicationGatewayOutput = null;
utilities.lazyLoad(exports, ["getApplicationGateway", "getApplicationGatewayOutput"], () => require("./getApplicationGateway"));
exports.getApplicationGatewayBackendHealthOnDemand = null;
exports.getApplicationGatewayBackendHealthOnDemandOutput = null;
utilities.lazyLoad(exports, ["getApplicationGatewayBackendHealthOnDemand", "getApplicationGatewayBackendHealthOnDemandOutput"], () => require("./getApplicationGatewayBackendHealthOnDemand"));
exports.getApplicationGatewayPrivateEndpointConnection = null;
exports.getApplicationGatewayPrivateEndpointConnectionOutput = null;
utilities.lazyLoad(exports, ["getApplicationGatewayPrivateEndpointConnection", "getApplicationGatewayPrivateEndpointConnectionOutput"], () => require("./getApplicationGatewayPrivateEndpointConnection"));
exports.getApplicationSecurityGroup = null;
exports.getApplicationSecurityGroupOutput = null;
utilities.lazyLoad(exports, ["getApplicationSecurityGroup", "getApplicationSecurityGroupOutput"], () => require("./getApplicationSecurityGroup"));
exports.getAzureFirewall = null;
exports.getAzureFirewallOutput = null;
utilities.lazyLoad(exports, ["getAzureFirewall", "getAzureFirewallOutput"], () => require("./getAzureFirewall"));
exports.getBastionHost = null;
exports.getBastionHostOutput = null;
utilities.lazyLoad(exports, ["getBastionHost", "getBastionHostOutput"], () => require("./getBastionHost"));
exports.getBastionShareableLink = null;
exports.getBastionShareableLinkOutput = null;
utilities.lazyLoad(exports, ["getBastionShareableLink", "getBastionShareableLinkOutput"], () => require("./getBastionShareableLink"));
exports.getConfigurationPolicyGroup = null;
exports.getConfigurationPolicyGroupOutput = null;
utilities.lazyLoad(exports, ["getConfigurationPolicyGroup", "getConfigurationPolicyGroupOutput"], () => require("./getConfigurationPolicyGroup"));
exports.getConnectionMonitor = null;
exports.getConnectionMonitorOutput = null;
utilities.lazyLoad(exports, ["getConnectionMonitor", "getConnectionMonitorOutput"], () => require("./getConnectionMonitor"));
exports.getConnectivityConfiguration = null;
exports.getConnectivityConfigurationOutput = null;
utilities.lazyLoad(exports, ["getConnectivityConfiguration", "getConnectivityConfigurationOutput"], () => require("./getConnectivityConfiguration"));
exports.getCustomIPPrefix = null;
exports.getCustomIPPrefixOutput = null;
utilities.lazyLoad(exports, ["getCustomIPPrefix", "getCustomIPPrefixOutput"], () => require("./getCustomIPPrefix"));
exports.getDdosCustomPolicy = null;
exports.getDdosCustomPolicyOutput = null;
utilities.lazyLoad(exports, ["getDdosCustomPolicy", "getDdosCustomPolicyOutput"], () => require("./getDdosCustomPolicy"));
exports.getDdosProtectionPlan = null;
exports.getDdosProtectionPlanOutput = null;
utilities.lazyLoad(exports, ["getDdosProtectionPlan", "getDdosProtectionPlanOutput"], () => require("./getDdosProtectionPlan"));
exports.getDefaultAdminRule = null;
exports.getDefaultAdminRuleOutput = null;
utilities.lazyLoad(exports, ["getDefaultAdminRule", "getDefaultAdminRuleOutput"], () => require("./getDefaultAdminRule"));
exports.getDefaultUserRule = null;
exports.getDefaultUserRuleOutput = null;
utilities.lazyLoad(exports, ["getDefaultUserRule", "getDefaultUserRuleOutput"], () => require("./getDefaultUserRule"));
exports.getDnsForwardingRuleset = null;
exports.getDnsForwardingRulesetOutput = null;
utilities.lazyLoad(exports, ["getDnsForwardingRuleset", "getDnsForwardingRulesetOutput"], () => require("./getDnsForwardingRuleset"));
exports.getDnsResolver = null;
exports.getDnsResolverOutput = null;
utilities.lazyLoad(exports, ["getDnsResolver", "getDnsResolverOutput"], () => require("./getDnsResolver"));
exports.getDnsResolverDomainList = null;
exports.getDnsResolverDomainListOutput = null;
utilities.lazyLoad(exports, ["getDnsResolverDomainList", "getDnsResolverDomainListOutput"], () => require("./getDnsResolverDomainList"));
exports.getDnsResolverPolicy = null;
exports.getDnsResolverPolicyOutput = null;
utilities.lazyLoad(exports, ["getDnsResolverPolicy", "getDnsResolverPolicyOutput"], () => require("./getDnsResolverPolicy"));
exports.getDnsResolverPolicyVirtualNetworkLink = null;
exports.getDnsResolverPolicyVirtualNetworkLinkOutput = null;
utilities.lazyLoad(exports, ["getDnsResolverPolicyVirtualNetworkLink", "getDnsResolverPolicyVirtualNetworkLinkOutput"], () => require("./getDnsResolverPolicyVirtualNetworkLink"));
exports.getDnsResourceReferenceByTarResources = null;
exports.getDnsResourceReferenceByTarResourcesOutput = null;
utilities.lazyLoad(exports, ["getDnsResourceReferenceByTarResources", "getDnsResourceReferenceByTarResourcesOutput"], () => require("./getDnsResourceReferenceByTarResources"));
exports.getDnsSecurityRule = null;
exports.getDnsSecurityRuleOutput = null;
utilities.lazyLoad(exports, ["getDnsSecurityRule", "getDnsSecurityRuleOutput"], () => require("./getDnsSecurityRule"));
exports.getDnssecConfig = null;
exports.getDnssecConfigOutput = null;
utilities.lazyLoad(exports, ["getDnssecConfig", "getDnssecConfigOutput"], () => require("./getDnssecConfig"));
exports.getDscpConfiguration = null;
exports.getDscpConfigurationOutput = null;
utilities.lazyLoad(exports, ["getDscpConfiguration", "getDscpConfigurationOutput"], () => require("./getDscpConfiguration"));
exports.getEndpoint = null;
exports.getEndpointOutput = null;
utilities.lazyLoad(exports, ["getEndpoint", "getEndpointOutput"], () => require("./getEndpoint"));
exports.getExperiment = null;
exports.getExperimentOutput = null;
utilities.lazyLoad(exports, ["getExperiment", "getExperimentOutput"], () => require("./getExperiment"));
exports.getExpressRouteCircuit = null;
exports.getExpressRouteCircuitOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteCircuit", "getExpressRouteCircuitOutput"], () => require("./getExpressRouteCircuit"));
exports.getExpressRouteCircuitAuthorization = null;
exports.getExpressRouteCircuitAuthorizationOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteCircuitAuthorization", "getExpressRouteCircuitAuthorizationOutput"], () => require("./getExpressRouteCircuitAuthorization"));
exports.getExpressRouteCircuitConnection = null;
exports.getExpressRouteCircuitConnectionOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteCircuitConnection", "getExpressRouteCircuitConnectionOutput"], () => require("./getExpressRouteCircuitConnection"));
exports.getExpressRouteCircuitPeering = null;
exports.getExpressRouteCircuitPeeringOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteCircuitPeering", "getExpressRouteCircuitPeeringOutput"], () => require("./getExpressRouteCircuitPeering"));
exports.getExpressRouteConnection = null;
exports.getExpressRouteConnectionOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteConnection", "getExpressRouteConnectionOutput"], () => require("./getExpressRouteConnection"));
exports.getExpressRouteCrossConnectionPeering = null;
exports.getExpressRouteCrossConnectionPeeringOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteCrossConnectionPeering", "getExpressRouteCrossConnectionPeeringOutput"], () => require("./getExpressRouteCrossConnectionPeering"));
exports.getExpressRouteGateway = null;
exports.getExpressRouteGatewayOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteGateway", "getExpressRouteGatewayOutput"], () => require("./getExpressRouteGateway"));
exports.getExpressRoutePort = null;
exports.getExpressRoutePortOutput = null;
utilities.lazyLoad(exports, ["getExpressRoutePort", "getExpressRoutePortOutput"], () => require("./getExpressRoutePort"));
exports.getExpressRoutePortAuthorization = null;
exports.getExpressRoutePortAuthorizationOutput = null;
utilities.lazyLoad(exports, ["getExpressRoutePortAuthorization", "getExpressRoutePortAuthorizationOutput"], () => require("./getExpressRoutePortAuthorization"));
exports.getFirewallPolicy = null;
exports.getFirewallPolicyOutput = null;
utilities.lazyLoad(exports, ["getFirewallPolicy", "getFirewallPolicyOutput"], () => require("./getFirewallPolicy"));
exports.getFirewallPolicyDraft = null;
exports.getFirewallPolicyDraftOutput = null;
utilities.lazyLoad(exports, ["getFirewallPolicyDraft", "getFirewallPolicyDraftOutput"], () => require("./getFirewallPolicyDraft"));
exports.getFirewallPolicyRuleCollectionGroup = null;
exports.getFirewallPolicyRuleCollectionGroupOutput = null;
utilities.lazyLoad(exports, ["getFirewallPolicyRuleCollectionGroup", "getFirewallPolicyRuleCollectionGroupOutput"], () => require("./getFirewallPolicyRuleCollectionGroup"));
exports.getFirewallPolicyRuleCollectionGroupDraft = null;
exports.getFirewallPolicyRuleCollectionGroupDraftOutput = null;
utilities.lazyLoad(exports, ["getFirewallPolicyRuleCollectionGroupDraft", "getFirewallPolicyRuleCollectionGroupDraftOutput"], () => require("./getFirewallPolicyRuleCollectionGroupDraft"));
exports.getFirewallPolicyRuleGroup = null;
exports.getFirewallPolicyRuleGroupOutput = null;
utilities.lazyLoad(exports, ["getFirewallPolicyRuleGroup", "getFirewallPolicyRuleGroupOutput"], () => require("./getFirewallPolicyRuleGroup"));
exports.getFlowLog = null;
exports.getFlowLogOutput = null;
utilities.lazyLoad(exports, ["getFlowLog", "getFlowLogOutput"], () => require("./getFlowLog"));
exports.getForwardingRule = null;
exports.getForwardingRuleOutput = null;
utilities.lazyLoad(exports, ["getForwardingRule", "getForwardingRuleOutput"], () => require("./getForwardingRule"));
exports.getFrontDoor = null;
exports.getFrontDoorOutput = null;
utilities.lazyLoad(exports, ["getFrontDoor", "getFrontDoorOutput"], () => require("./getFrontDoor"));
exports.getHubRouteTable = null;
exports.getHubRouteTableOutput = null;
utilities.lazyLoad(exports, ["getHubRouteTable", "getHubRouteTableOutput"], () => require("./getHubRouteTable"));
exports.getHubVirtualNetworkConnection = null;
exports.getHubVirtualNetworkConnectionOutput = null;
utilities.lazyLoad(exports, ["getHubVirtualNetworkConnection", "getHubVirtualNetworkConnectionOutput"], () => require("./getHubVirtualNetworkConnection"));
exports.getInboundEndpoint = null;
exports.getInboundEndpointOutput = null;
utilities.lazyLoad(exports, ["getInboundEndpoint", "getInboundEndpointOutput"], () => require("./getInboundEndpoint"));
exports.getInboundNatRule = null;
exports.getInboundNatRuleOutput = null;
utilities.lazyLoad(exports, ["getInboundNatRule", "getInboundNatRuleOutput"], () => require("./getInboundNatRule"));
exports.getInterfaceEndpoint = null;
exports.getInterfaceEndpointOutput = null;
utilities.lazyLoad(exports, ["getInterfaceEndpoint", "getInterfaceEndpointOutput"], () => require("./getInterfaceEndpoint"));
exports.getIpAllocation = null;
exports.getIpAllocationOutput = null;
utilities.lazyLoad(exports, ["getIpAllocation", "getIpAllocationOutput"], () => require("./getIpAllocation"));
exports.getIpGroup = null;
exports.getIpGroupOutput = null;
utilities.lazyLoad(exports, ["getIpGroup", "getIpGroupOutput"], () => require("./getIpGroup"));
exports.getIpamPool = null;
exports.getIpamPoolOutput = null;
utilities.lazyLoad(exports, ["getIpamPool", "getIpamPoolOutput"], () => require("./getIpamPool"));
exports.getIpamPoolUsage = null;
exports.getIpamPoolUsageOutput = null;
utilities.lazyLoad(exports, ["getIpamPoolUsage", "getIpamPoolUsageOutput"], () => require("./getIpamPoolUsage"));
exports.getLoadBalancer = null;
exports.getLoadBalancerOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancer", "getLoadBalancerOutput"], () => require("./getLoadBalancer"));
exports.getLoadBalancerBackendAddressPool = null;
exports.getLoadBalancerBackendAddressPoolOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancerBackendAddressPool", "getLoadBalancerBackendAddressPoolOutput"], () => require("./getLoadBalancerBackendAddressPool"));
exports.getLocalNetworkGateway = null;
exports.getLocalNetworkGatewayOutput = null;
utilities.lazyLoad(exports, ["getLocalNetworkGateway", "getLocalNetworkGatewayOutput"], () => require("./getLocalNetworkGateway"));
exports.getManagementGroupNetworkManagerConnection = null;
exports.getManagementGroupNetworkManagerConnectionOutput = null;
utilities.lazyLoad(exports, ["getManagementGroupNetworkManagerConnection", "getManagementGroupNetworkManagerConnectionOutput"], () => require("./getManagementGroupNetworkManagerConnection"));
exports.getNatGateway = null;
exports.getNatGatewayOutput = null;
utilities.lazyLoad(exports, ["getNatGateway", "getNatGatewayOutput"], () => require("./getNatGateway"));
exports.getNatRule = null;
exports.getNatRuleOutput = null;
utilities.lazyLoad(exports, ["getNatRule", "getNatRuleOutput"], () => require("./getNatRule"));
exports.getNetworkExperimentProfile = null;
exports.getNetworkExperimentProfileOutput = null;
utilities.lazyLoad(exports, ["getNetworkExperimentProfile", "getNetworkExperimentProfileOutput"], () => require("./getNetworkExperimentProfile"));
exports.getNetworkGroup = null;
exports.getNetworkGroupOutput = null;
utilities.lazyLoad(exports, ["getNetworkGroup", "getNetworkGroupOutput"], () => require("./getNetworkGroup"));
exports.getNetworkInterface = null;
exports.getNetworkInterfaceOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterface", "getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));
exports.getNetworkInterfaceTapConfiguration = null;
exports.getNetworkInterfaceTapConfigurationOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterfaceTapConfiguration", "getNetworkInterfaceTapConfigurationOutput"], () => require("./getNetworkInterfaceTapConfiguration"));
exports.getNetworkManager = null;
exports.getNetworkManagerOutput = null;
utilities.lazyLoad(exports, ["getNetworkManager", "getNetworkManagerOutput"], () => require("./getNetworkManager"));
exports.getNetworkManagerRoutingConfiguration = null;
exports.getNetworkManagerRoutingConfigurationOutput = null;
utilities.lazyLoad(exports, ["getNetworkManagerRoutingConfiguration", "getNetworkManagerRoutingConfigurationOutput"], () => require("./getNetworkManagerRoutingConfiguration"));
exports.getNetworkProfile = null;
exports.getNetworkProfileOutput = null;
utilities.lazyLoad(exports, ["getNetworkProfile", "getNetworkProfileOutput"], () => require("./getNetworkProfile"));
exports.getNetworkSecurityGroup = null;
exports.getNetworkSecurityGroupOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityGroup", "getNetworkSecurityGroupOutput"], () => require("./getNetworkSecurityGroup"));
exports.getNetworkSecurityPerimeter = null;
exports.getNetworkSecurityPerimeterOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeter", "getNetworkSecurityPerimeterOutput"], () => require("./getNetworkSecurityPerimeter"));
exports.getNetworkSecurityPerimeterAccessRule = null;
exports.getNetworkSecurityPerimeterAccessRuleOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeterAccessRule", "getNetworkSecurityPerimeterAccessRuleOutput"], () => require("./getNetworkSecurityPerimeterAccessRule"));
exports.getNetworkSecurityPerimeterAssociation = null;
exports.getNetworkSecurityPerimeterAssociationOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeterAssociation", "getNetworkSecurityPerimeterAssociationOutput"], () => require("./getNetworkSecurityPerimeterAssociation"));
exports.getNetworkSecurityPerimeterLink = null;
exports.getNetworkSecurityPerimeterLinkOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeterLink", "getNetworkSecurityPerimeterLinkOutput"], () => require("./getNetworkSecurityPerimeterLink"));
exports.getNetworkSecurityPerimeterLoggingConfiguration = null;
exports.getNetworkSecurityPerimeterLoggingConfigurationOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeterLoggingConfiguration", "getNetworkSecurityPerimeterLoggingConfigurationOutput"], () => require("./getNetworkSecurityPerimeterLoggingConfiguration"));
exports.getNetworkSecurityPerimeterProfile = null;
exports.getNetworkSecurityPerimeterProfileOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeterProfile", "getNetworkSecurityPerimeterProfileOutput"], () => require("./getNetworkSecurityPerimeterProfile"));
exports.getNetworkVirtualAppliance = null;
exports.getNetworkVirtualApplianceOutput = null;
utilities.lazyLoad(exports, ["getNetworkVirtualAppliance", "getNetworkVirtualApplianceOutput"], () => require("./getNetworkVirtualAppliance"));
exports.getNetworkVirtualApplianceConnection = null;
exports.getNetworkVirtualApplianceConnectionOutput = null;
utilities.lazyLoad(exports, ["getNetworkVirtualApplianceConnection", "getNetworkVirtualApplianceConnectionOutput"], () => require("./getNetworkVirtualApplianceConnection"));
exports.getNetworkWatcher = null;
exports.getNetworkWatcherOutput = null;
utilities.lazyLoad(exports, ["getNetworkWatcher", "getNetworkWatcherOutput"], () => require("./getNetworkWatcher"));
exports.getNspAccessRule = null;
exports.getNspAccessRuleOutput = null;
utilities.lazyLoad(exports, ["getNspAccessRule", "getNspAccessRuleOutput"], () => require("./getNspAccessRule"));
exports.getNspAssociation = null;
exports.getNspAssociationOutput = null;
utilities.lazyLoad(exports, ["getNspAssociation", "getNspAssociationOutput"], () => require("./getNspAssociation"));
exports.getNspLink = null;
exports.getNspLinkOutput = null;
utilities.lazyLoad(exports, ["getNspLink", "getNspLinkOutput"], () => require("./getNspLink"));
exports.getNspProfile = null;
exports.getNspProfileOutput = null;
utilities.lazyLoad(exports, ["getNspProfile", "getNspProfileOutput"], () => require("./getNspProfile"));
exports.getOutboundEndpoint = null;
exports.getOutboundEndpointOutput = null;
utilities.lazyLoad(exports, ["getOutboundEndpoint", "getOutboundEndpointOutput"], () => require("./getOutboundEndpoint"));
exports.getP2sVpnGateway = null;
exports.getP2sVpnGatewayOutput = null;
utilities.lazyLoad(exports, ["getP2sVpnGateway", "getP2sVpnGatewayOutput"], () => require("./getP2sVpnGateway"));
exports.getP2sVpnGatewayP2sVpnConnectionHealth = null;
exports.getP2sVpnGatewayP2sVpnConnectionHealthOutput = null;
utilities.lazyLoad(exports, ["getP2sVpnGatewayP2sVpnConnectionHealth", "getP2sVpnGatewayP2sVpnConnectionHealthOutput"], () => require("./getP2sVpnGatewayP2sVpnConnectionHealth"));
exports.getP2sVpnGatewayP2sVpnConnectionHealthDetailed = null;
exports.getP2sVpnGatewayP2sVpnConnectionHealthDetailedOutput = null;
utilities.lazyLoad(exports, ["getP2sVpnGatewayP2sVpnConnectionHealthDetailed", "getP2sVpnGatewayP2sVpnConnectionHealthDetailedOutput"], () => require("./getP2sVpnGatewayP2sVpnConnectionHealthDetailed"));
exports.getP2sVpnServerConfiguration = null;
exports.getP2sVpnServerConfigurationOutput = null;
utilities.lazyLoad(exports, ["getP2sVpnServerConfiguration", "getP2sVpnServerConfigurationOutput"], () => require("./getP2sVpnServerConfiguration"));
exports.getPacketCapture = null;
exports.getPacketCaptureOutput = null;
utilities.lazyLoad(exports, ["getPacketCapture", "getPacketCaptureOutput"], () => require("./getPacketCapture"));
exports.getPolicy = null;
exports.getPolicyOutput = null;
utilities.lazyLoad(exports, ["getPolicy", "getPolicyOutput"], () => require("./getPolicy"));
exports.getPrivateDnsZoneGroup = null;
exports.getPrivateDnsZoneGroupOutput = null;
utilities.lazyLoad(exports, ["getPrivateDnsZoneGroup", "getPrivateDnsZoneGroupOutput"], () => require("./getPrivateDnsZoneGroup"));
exports.getPrivateEndpoint = null;
exports.getPrivateEndpointOutput = null;
utilities.lazyLoad(exports, ["getPrivateEndpoint", "getPrivateEndpointOutput"], () => require("./getPrivateEndpoint"));
exports.getPrivateLinkService = null;
exports.getPrivateLinkServiceOutput = null;
utilities.lazyLoad(exports, ["getPrivateLinkService", "getPrivateLinkServiceOutput"], () => require("./getPrivateLinkService"));
exports.getPrivateLinkServicePrivateEndpointConnection = null;
exports.getPrivateLinkServicePrivateEndpointConnectionOutput = null;
utilities.lazyLoad(exports, ["getPrivateLinkServicePrivateEndpointConnection", "getPrivateLinkServicePrivateEndpointConnectionOutput"], () => require("./getPrivateLinkServicePrivateEndpointConnection"));
exports.getPrivateRecordSet = null;
exports.getPrivateRecordSetOutput = null;
utilities.lazyLoad(exports, ["getPrivateRecordSet", "getPrivateRecordSetOutput"], () => require("./getPrivateRecordSet"));
exports.getPrivateResolverVirtualNetworkLink = null;
exports.getPrivateResolverVirtualNetworkLinkOutput = null;
utilities.lazyLoad(exports, ["getPrivateResolverVirtualNetworkLink", "getPrivateResolverVirtualNetworkLinkOutput"], () => require("./getPrivateResolverVirtualNetworkLink"));
exports.getPrivateZone = null;
exports.getPrivateZoneOutput = null;
utilities.lazyLoad(exports, ["getPrivateZone", "getPrivateZoneOutput"], () => require("./getPrivateZone"));
exports.getProfile = null;
exports.getProfileOutput = null;
utilities.lazyLoad(exports, ["getProfile", "getProfileOutput"], () => require("./getProfile"));
exports.getPublicIPAddress = null;
exports.getPublicIPAddressOutput = null;
utilities.lazyLoad(exports, ["getPublicIPAddress", "getPublicIPAddressOutput"], () => require("./getPublicIPAddress"));
exports.getPublicIPPrefix = null;
exports.getPublicIPPrefixOutput = null;
utilities.lazyLoad(exports, ["getPublicIPPrefix", "getPublicIPPrefixOutput"], () => require("./getPublicIPPrefix"));
exports.getReachabilityAnalysisIntent = null;
exports.getReachabilityAnalysisIntentOutput = null;
utilities.lazyLoad(exports, ["getReachabilityAnalysisIntent", "getReachabilityAnalysisIntentOutput"], () => require("./getReachabilityAnalysisIntent"));
exports.getReachabilityAnalysisRun = null;
exports.getReachabilityAnalysisRunOutput = null;
utilities.lazyLoad(exports, ["getReachabilityAnalysisRun", "getReachabilityAnalysisRunOutput"], () => require("./getReachabilityAnalysisRun"));
exports.getRecordSet = null;
exports.getRecordSetOutput = null;
utilities.lazyLoad(exports, ["getRecordSet", "getRecordSetOutput"], () => require("./getRecordSet"));
exports.getRoute = null;
exports.getRouteOutput = null;
utilities.lazyLoad(exports, ["getRoute", "getRouteOutput"], () => require("./getRoute"));
exports.getRouteFilter = null;
exports.getRouteFilterOutput = null;
utilities.lazyLoad(exports, ["getRouteFilter", "getRouteFilterOutput"], () => require("./getRouteFilter"));
exports.getRouteFilterRule = null;
exports.getRouteFilterRuleOutput = null;
utilities.lazyLoad(exports, ["getRouteFilterRule", "getRouteFilterRuleOutput"], () => require("./getRouteFilterRule"));
exports.getRouteMap = null;
exports.getRouteMapOutput = null;
utilities.lazyLoad(exports, ["getRouteMap", "getRouteMapOutput"], () => require("./getRouteMap"));
exports.getRouteTable = null;
exports.getRouteTableOutput = null;
utilities.lazyLoad(exports, ["getRouteTable", "getRouteTableOutput"], () => require("./getRouteTable"));
exports.getRoutingIntent = null;
exports.getRoutingIntentOutput = null;
utilities.lazyLoad(exports, ["getRoutingIntent", "getRoutingIntentOutput"], () => require("./getRoutingIntent"));
exports.getRoutingRule = null;
exports.getRoutingRuleOutput = null;
utilities.lazyLoad(exports, ["getRoutingRule", "getRoutingRuleOutput"], () => require("./getRoutingRule"));
exports.getRoutingRuleCollection = null;
exports.getRoutingRuleCollectionOutput = null;
utilities.lazyLoad(exports, ["getRoutingRuleCollection", "getRoutingRuleCollectionOutput"], () => require("./getRoutingRuleCollection"));
exports.getRulesEngine = null;
exports.getRulesEngineOutput = null;
utilities.lazyLoad(exports, ["getRulesEngine", "getRulesEngineOutput"], () => require("./getRulesEngine"));
exports.getScopeConnection = null;
exports.getScopeConnectionOutput = null;
utilities.lazyLoad(exports, ["getScopeConnection", "getScopeConnectionOutput"], () => require("./getScopeConnection"));
exports.getSecurityAdminConfiguration = null;
exports.getSecurityAdminConfigurationOutput = null;
utilities.lazyLoad(exports, ["getSecurityAdminConfiguration", "getSecurityAdminConfigurationOutput"], () => require("./getSecurityAdminConfiguration"));
exports.getSecurityPartnerProvider = null;
exports.getSecurityPartnerProviderOutput = null;
utilities.lazyLoad(exports, ["getSecurityPartnerProvider", "getSecurityPartnerProviderOutput"], () => require("./getSecurityPartnerProvider"));
exports.getSecurityRule = null;
exports.getSecurityRuleOutput = null;
utilities.lazyLoad(exports, ["getSecurityRule", "getSecurityRuleOutput"], () => require("./getSecurityRule"));
exports.getSecurityUserConfiguration = null;
exports.getSecurityUserConfigurationOutput = null;
utilities.lazyLoad(exports, ["getSecurityUserConfiguration", "getSecurityUserConfigurationOutput"], () => require("./getSecurityUserConfiguration"));
exports.getSecurityUserRule = null;
exports.getSecurityUserRuleOutput = null;
utilities.lazyLoad(exports, ["getSecurityUserRule", "getSecurityUserRuleOutput"], () => require("./getSecurityUserRule"));
exports.getSecurityUserRuleCollection = null;
exports.getSecurityUserRuleCollectionOutput = null;
utilities.lazyLoad(exports, ["getSecurityUserRuleCollection", "getSecurityUserRuleCollectionOutput"], () => require("./getSecurityUserRuleCollection"));
exports.getServiceEndpointPolicy = null;
exports.getServiceEndpointPolicyOutput = null;
utilities.lazyLoad(exports, ["getServiceEndpointPolicy", "getServiceEndpointPolicyOutput"], () => require("./getServiceEndpointPolicy"));
exports.getServiceEndpointPolicyDefinition = null;
exports.getServiceEndpointPolicyDefinitionOutput = null;
utilities.lazyLoad(exports, ["getServiceEndpointPolicyDefinition", "getServiceEndpointPolicyDefinitionOutput"], () => require("./getServiceEndpointPolicyDefinition"));
exports.getStaticCidr = null;
exports.getStaticCidrOutput = null;
utilities.lazyLoad(exports, ["getStaticCidr", "getStaticCidrOutput"], () => require("./getStaticCidr"));
exports.getStaticMember = null;
exports.getStaticMemberOutput = null;
utilities.lazyLoad(exports, ["getStaticMember", "getStaticMemberOutput"], () => require("./getStaticMember"));
exports.getSubnet = null;
exports.getSubnetOutput = null;
utilities.lazyLoad(exports, ["getSubnet", "getSubnetOutput"], () => require("./getSubnet"));
exports.getSubscriptionNetworkManagerConnection = null;
exports.getSubscriptionNetworkManagerConnectionOutput = null;
utilities.lazyLoad(exports, ["getSubscriptionNetworkManagerConnection", "getSubscriptionNetworkManagerConnectionOutput"], () => require("./getSubscriptionNetworkManagerConnection"));
exports.getTrafficManagerUserMetricsKey = null;
exports.getTrafficManagerUserMetricsKeyOutput = null;
utilities.lazyLoad(exports, ["getTrafficManagerUserMetricsKey", "getTrafficManagerUserMetricsKeyOutput"], () => require("./getTrafficManagerUserMetricsKey"));
exports.getUserRule = null;
exports.getUserRuleOutput = null;
utilities.lazyLoad(exports, ["getUserRule", "getUserRuleOutput"], () => require("./getUserRule"));
exports.getUserRuleCollection = null;
exports.getUserRuleCollectionOutput = null;
utilities.lazyLoad(exports, ["getUserRuleCollection", "getUserRuleCollectionOutput"], () => require("./getUserRuleCollection"));
exports.getVerifierWorkspace = null;
exports.getVerifierWorkspaceOutput = null;
utilities.lazyLoad(exports, ["getVerifierWorkspace", "getVerifierWorkspaceOutput"], () => require("./getVerifierWorkspace"));
exports.getVirtualApplianceSite = null;
exports.getVirtualApplianceSiteOutput = null;
utilities.lazyLoad(exports, ["getVirtualApplianceSite", "getVirtualApplianceSiteOutput"], () => require("./getVirtualApplianceSite"));
exports.getVirtualHub = null;
exports.getVirtualHubOutput = null;
utilities.lazyLoad(exports, ["getVirtualHub", "getVirtualHubOutput"], () => require("./getVirtualHub"));
exports.getVirtualHubBgpConnection = null;
exports.getVirtualHubBgpConnectionOutput = null;
utilities.lazyLoad(exports, ["getVirtualHubBgpConnection", "getVirtualHubBgpConnectionOutput"], () => require("./getVirtualHubBgpConnection"));
exports.getVirtualHubIpConfiguration = null;
exports.getVirtualHubIpConfigurationOutput = null;
utilities.lazyLoad(exports, ["getVirtualHubIpConfiguration", "getVirtualHubIpConfigurationOutput"], () => require("./getVirtualHubIpConfiguration"));
exports.getVirtualHubRouteTableV2 = null;
exports.getVirtualHubRouteTableV2Output = null;
utilities.lazyLoad(exports, ["getVirtualHubRouteTableV2", "getVirtualHubRouteTableV2Output"], () => require("./getVirtualHubRouteTableV2"));
exports.getVirtualNetwork = null;
exports.getVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetwork", "getVirtualNetworkOutput"], () => require("./getVirtualNetwork"));
exports.getVirtualNetworkGateway = null;
exports.getVirtualNetworkGatewayOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGateway", "getVirtualNetworkGatewayOutput"], () => require("./getVirtualNetworkGateway"));
exports.getVirtualNetworkGatewayAdvertisedRoutes = null;
exports.getVirtualNetworkGatewayAdvertisedRoutesOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayAdvertisedRoutes", "getVirtualNetworkGatewayAdvertisedRoutesOutput"], () => require("./getVirtualNetworkGatewayAdvertisedRoutes"));
exports.getVirtualNetworkGatewayBgpPeerStatus = null;
exports.getVirtualNetworkGatewayBgpPeerStatusOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayBgpPeerStatus", "getVirtualNetworkGatewayBgpPeerStatusOutput"], () => require("./getVirtualNetworkGatewayBgpPeerStatus"));
exports.getVirtualNetworkGatewayConnection = null;
exports.getVirtualNetworkGatewayConnectionOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayConnection", "getVirtualNetworkGatewayConnectionOutput"], () => require("./getVirtualNetworkGatewayConnection"));
exports.getVirtualNetworkGatewayConnectionIkeSas = null;
exports.getVirtualNetworkGatewayConnectionIkeSasOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayConnectionIkeSas", "getVirtualNetworkGatewayConnectionIkeSasOutput"], () => require("./getVirtualNetworkGatewayConnectionIkeSas"));
exports.getVirtualNetworkGatewayLearnedRoutes = null;
exports.getVirtualNetworkGatewayLearnedRoutesOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayLearnedRoutes", "getVirtualNetworkGatewayLearnedRoutesOutput"], () => require("./getVirtualNetworkGatewayLearnedRoutes"));
exports.getVirtualNetworkGatewayNatRule = null;
exports.getVirtualNetworkGatewayNatRuleOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayNatRule", "getVirtualNetworkGatewayNatRuleOutput"], () => require("./getVirtualNetworkGatewayNatRule"));
exports.getVirtualNetworkGatewayVpnProfilePackageUrl = null;
exports.getVirtualNetworkGatewayVpnProfilePackageUrlOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayVpnProfilePackageUrl", "getVirtualNetworkGatewayVpnProfilePackageUrlOutput"], () => require("./getVirtualNetworkGatewayVpnProfilePackageUrl"));
exports.getVirtualNetworkGatewayVpnclientConnectionHealth = null;
exports.getVirtualNetworkGatewayVpnclientConnectionHealthOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayVpnclientConnectionHealth", "getVirtualNetworkGatewayVpnclientConnectionHealthOutput"], () => require("./getVirtualNetworkGatewayVpnclientConnectionHealth"));
exports.getVirtualNetworkGatewayVpnclientIpsecParameters = null;
exports.getVirtualNetworkGatewayVpnclientIpsecParametersOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayVpnclientIpsecParameters", "getVirtualNetworkGatewayVpnclientIpsecParametersOutput"], () => require("./getVirtualNetworkGatewayVpnclientIpsecParameters"));
exports.getVirtualNetworkLink = null;
exports.getVirtualNetworkLinkOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkLink", "getVirtualNetworkLinkOutput"], () => require("./getVirtualNetworkLink"));
exports.getVirtualNetworkPeering = null;
exports.getVirtualNetworkPeeringOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkPeering", "getVirtualNetworkPeeringOutput"], () => require("./getVirtualNetworkPeering"));
exports.getVirtualNetworkTap = null;
exports.getVirtualNetworkTapOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkTap", "getVirtualNetworkTapOutput"], () => require("./getVirtualNetworkTap"));
exports.getVirtualRouter = null;
exports.getVirtualRouterOutput = null;
utilities.lazyLoad(exports, ["getVirtualRouter", "getVirtualRouterOutput"], () => require("./getVirtualRouter"));
exports.getVirtualRouterPeering = null;
exports.getVirtualRouterPeeringOutput = null;
utilities.lazyLoad(exports, ["getVirtualRouterPeering", "getVirtualRouterPeeringOutput"], () => require("./getVirtualRouterPeering"));
exports.getVirtualWan = null;
exports.getVirtualWanOutput = null;
utilities.lazyLoad(exports, ["getVirtualWan", "getVirtualWanOutput"], () => require("./getVirtualWan"));
exports.getVpnConnection = null;
exports.getVpnConnectionOutput = null;
utilities.lazyLoad(exports, ["getVpnConnection", "getVpnConnectionOutput"], () => require("./getVpnConnection"));
exports.getVpnGateway = null;
exports.getVpnGatewayOutput = null;
utilities.lazyLoad(exports, ["getVpnGateway", "getVpnGatewayOutput"], () => require("./getVpnGateway"));
exports.getVpnLinkConnectionIkeSas = null;
exports.getVpnLinkConnectionIkeSasOutput = null;
utilities.lazyLoad(exports, ["getVpnLinkConnectionIkeSas", "getVpnLinkConnectionIkeSasOutput"], () => require("./getVpnLinkConnectionIkeSas"));
exports.getVpnServerConfiguration = null;
exports.getVpnServerConfigurationOutput = null;
utilities.lazyLoad(exports, ["getVpnServerConfiguration", "getVpnServerConfigurationOutput"], () => require("./getVpnServerConfiguration"));
exports.getVpnSite = null;
exports.getVpnSiteOutput = null;
utilities.lazyLoad(exports, ["getVpnSite", "getVpnSiteOutput"], () => require("./getVpnSite"));
exports.getWebApplicationFirewallPolicy = null;
exports.getWebApplicationFirewallPolicyOutput = null;
utilities.lazyLoad(exports, ["getWebApplicationFirewallPolicy", "getWebApplicationFirewallPolicyOutput"], () => require("./getWebApplicationFirewallPolicy"));
exports.getZone = null;
exports.getZoneOutput = null;
utilities.lazyLoad(exports, ["getZone", "getZoneOutput"], () => require("./getZone"));
exports.HubRouteTable = null;
utilities.lazyLoad(exports, ["HubRouteTable"], () => require("./hubRouteTable"));
exports.HubVirtualNetworkConnection = null;
utilities.lazyLoad(exports, ["HubVirtualNetworkConnection"], () => require("./hubVirtualNetworkConnection"));
exports.InboundEndpoint = null;
utilities.lazyLoad(exports, ["InboundEndpoint"], () => require("./inboundEndpoint"));
exports.InboundNatRule = null;
utilities.lazyLoad(exports, ["InboundNatRule"], () => require("./inboundNatRule"));
exports.InterfaceEndpoint = null;
utilities.lazyLoad(exports, ["InterfaceEndpoint"], () => require("./interfaceEndpoint"));
exports.IpAllocation = null;
utilities.lazyLoad(exports, ["IpAllocation"], () => require("./ipAllocation"));
exports.IpGroup = null;
utilities.lazyLoad(exports, ["IpGroup"], () => require("./ipGroup"));
exports.IpamPool = null;
utilities.lazyLoad(exports, ["IpamPool"], () => require("./ipamPool"));
exports.listActiveConnectivityConfiguration = null;
exports.listActiveConnectivityConfigurationOutput = null;
utilities.lazyLoad(exports, ["listActiveConnectivityConfiguration", "listActiveConnectivityConfigurationOutput"], () => require("./listActiveConnectivityConfiguration"));
exports.listActiveConnectivityConfigurations = null;
exports.listActiveConnectivityConfigurationsOutput = null;
utilities.lazyLoad(exports, ["listActiveConnectivityConfigurations", "listActiveConnectivityConfigurationsOutput"], () => require("./listActiveConnectivityConfigurations"));
exports.listActiveSecurityAdminRule = null;
exports.listActiveSecurityAdminRuleOutput = null;
utilities.lazyLoad(exports, ["listActiveSecurityAdminRule", "listActiveSecurityAdminRuleOutput"], () => require("./listActiveSecurityAdminRule"));
exports.listActiveSecurityAdminRules = null;
exports.listActiveSecurityAdminRulesOutput = null;
utilities.lazyLoad(exports, ["listActiveSecurityAdminRules", "listActiveSecurityAdminRulesOutput"], () => require("./listActiveSecurityAdminRules"));
exports.listActiveSecurityUserRule = null;
exports.listActiveSecurityUserRuleOutput = null;
utilities.lazyLoad(exports, ["listActiveSecurityUserRule", "listActiveSecurityUserRuleOutput"], () => require("./listActiveSecurityUserRule"));
exports.listActiveSecurityUserRules = null;
exports.listActiveSecurityUserRulesOutput = null;
utilities.lazyLoad(exports, ["listActiveSecurityUserRules", "listActiveSecurityUserRulesOutput"], () => require("./listActiveSecurityUserRules"));
exports.listDnsForwardingRulesetByVirtualNetwork = null;
exports.listDnsForwardingRulesetByVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["listDnsForwardingRulesetByVirtualNetwork", "listDnsForwardingRulesetByVirtualNetworkOutput"], () => require("./listDnsForwardingRulesetByVirtualNetwork"));
exports.listDnsResolverByVirtualNetwork = null;
exports.listDnsResolverByVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["listDnsResolverByVirtualNetwork", "listDnsResolverByVirtualNetworkOutput"], () => require("./listDnsResolverByVirtualNetwork"));
exports.listDnsResolverPolicyByVirtualNetwork = null;
exports.listDnsResolverPolicyByVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["listDnsResolverPolicyByVirtualNetwork", "listDnsResolverPolicyByVirtualNetworkOutput"], () => require("./listDnsResolverPolicyByVirtualNetwork"));
exports.listEffectiveConnectivityConfiguration = null;
exports.listEffectiveConnectivityConfigurationOutput = null;
utilities.lazyLoad(exports, ["listEffectiveConnectivityConfiguration", "listEffectiveConnectivityConfigurationOutput"], () => require("./listEffectiveConnectivityConfiguration"));
exports.listEffectiveVirtualNetworkByNetworkGroup = null;
exports.listEffectiveVirtualNetworkByNetworkGroupOutput = null;
utilities.lazyLoad(exports, ["listEffectiveVirtualNetworkByNetworkGroup", "listEffectiveVirtualNetworkByNetworkGroupOutput"], () => require("./listEffectiveVirtualNetworkByNetworkGroup"));
exports.listEffectiveVirtualNetworkByNetworkManager = null;
exports.listEffectiveVirtualNetworkByNetworkManagerOutput = null;
utilities.lazyLoad(exports, ["listEffectiveVirtualNetworkByNetworkManager", "listEffectiveVirtualNetworkByNetworkManagerOutput"], () => require("./listEffectiveVirtualNetworkByNetworkManager"));
exports.listFirewallPolicyIdpsSignature = null;
exports.listFirewallPolicyIdpsSignatureOutput = null;
utilities.lazyLoad(exports, ["listFirewallPolicyIdpsSignature", "listFirewallPolicyIdpsSignatureOutput"], () => require("./listFirewallPolicyIdpsSignature"));
exports.listFirewallPolicyIdpsSignaturesFilterValue = null;
exports.listFirewallPolicyIdpsSignaturesFilterValueOutput = null;
utilities.lazyLoad(exports, ["listFirewallPolicyIdpsSignaturesFilterValue", "listFirewallPolicyIdpsSignaturesFilterValueOutput"], () => require("./listFirewallPolicyIdpsSignaturesFilterValue"));
exports.listIpamPoolAssociatedResources = null;
exports.listIpamPoolAssociatedResourcesOutput = null;
utilities.lazyLoad(exports, ["listIpamPoolAssociatedResources", "listIpamPoolAssociatedResourcesOutput"], () => require("./listIpamPoolAssociatedResources"));
exports.listListEffectiveVirtualNetworkByNetworkGroup = null;
exports.listListEffectiveVirtualNetworkByNetworkGroupOutput = null;
utilities.lazyLoad(exports, ["listListEffectiveVirtualNetworkByNetworkGroup", "listListEffectiveVirtualNetworkByNetworkGroupOutput"], () => require("./listListEffectiveVirtualNetworkByNetworkGroup"));
exports.listNetworkManagerDeploymentStatus = null;
exports.listNetworkManagerDeploymentStatusOutput = null;
utilities.lazyLoad(exports, ["listNetworkManagerDeploymentStatus", "listNetworkManagerDeploymentStatusOutput"], () => require("./listNetworkManagerDeploymentStatus"));
exports.listNetworkManagerEffectiveConnectivityConfigurations = null;
exports.listNetworkManagerEffectiveConnectivityConfigurationsOutput = null;
utilities.lazyLoad(exports, ["listNetworkManagerEffectiveConnectivityConfigurations", "listNetworkManagerEffectiveConnectivityConfigurationsOutput"], () => require("./listNetworkManagerEffectiveConnectivityConfigurations"));
exports.listNetworkManagerEffectiveSecurityAdminRule = null;
exports.listNetworkManagerEffectiveSecurityAdminRuleOutput = null;
utilities.lazyLoad(exports, ["listNetworkManagerEffectiveSecurityAdminRule", "listNetworkManagerEffectiveSecurityAdminRuleOutput"], () => require("./listNetworkManagerEffectiveSecurityAdminRule"));
exports.listNetworkManagerEffectiveSecurityAdminRules = null;
exports.listNetworkManagerEffectiveSecurityAdminRulesOutput = null;
utilities.lazyLoad(exports, ["listNetworkManagerEffectiveSecurityAdminRules", "listNetworkManagerEffectiveSecurityAdminRulesOutput"], () => require("./listNetworkManagerEffectiveSecurityAdminRules"));
exports.listVpnLinkConnectionDefaultSharedKey = null;
exports.listVpnLinkConnectionDefaultSharedKeyOutput = null;
utilities.lazyLoad(exports, ["listVpnLinkConnectionDefaultSharedKey", "listVpnLinkConnectionDefaultSharedKeyOutput"], () => require("./listVpnLinkConnectionDefaultSharedKey"));
exports.LoadBalancer = null;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));
exports.LoadBalancerBackendAddressPool = null;
utilities.lazyLoad(exports, ["LoadBalancerBackendAddressPool"], () => require("./loadBalancerBackendAddressPool"));
exports.LocalNetworkGateway = null;
utilities.lazyLoad(exports, ["LocalNetworkGateway"], () => require("./localNetworkGateway"));
exports.ManagementGroupNetworkManagerConnection = null;
utilities.lazyLoad(exports, ["ManagementGroupNetworkManagerConnection"], () => require("./managementGroupNetworkManagerConnection"));
exports.NatGateway = null;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));
exports.NatRule = null;
utilities.lazyLoad(exports, ["NatRule"], () => require("./natRule"));
exports.NetworkExperimentProfile = null;
utilities.lazyLoad(exports, ["NetworkExperimentProfile"], () => require("./networkExperimentProfile"));
exports.NetworkGroup = null;
utilities.lazyLoad(exports, ["NetworkGroup"], () => require("./networkGroup"));
exports.NetworkInterface = null;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));
exports.NetworkInterfaceTapConfiguration = null;
utilities.lazyLoad(exports, ["NetworkInterfaceTapConfiguration"], () => require("./networkInterfaceTapConfiguration"));
exports.NetworkManager = null;
utilities.lazyLoad(exports, ["NetworkManager"], () => require("./networkManager"));
exports.NetworkManagerRoutingConfiguration = null;
utilities.lazyLoad(exports, ["NetworkManagerRoutingConfiguration"], () => require("./networkManagerRoutingConfiguration"));
exports.NetworkProfile = null;
utilities.lazyLoad(exports, ["NetworkProfile"], () => require("./networkProfile"));
exports.NetworkSecurityGroup = null;
utilities.lazyLoad(exports, ["NetworkSecurityGroup"], () => require("./networkSecurityGroup"));
exports.NetworkSecurityPerimeter = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeter"], () => require("./networkSecurityPerimeter"));
exports.NetworkSecurityPerimeterAccessRule = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeterAccessRule"], () => require("./networkSecurityPerimeterAccessRule"));
exports.NetworkSecurityPerimeterAssociation = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeterAssociation"], () => require("./networkSecurityPerimeterAssociation"));
exports.NetworkSecurityPerimeterLink = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeterLink"], () => require("./networkSecurityPerimeterLink"));
exports.NetworkSecurityPerimeterLoggingConfiguration = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeterLoggingConfiguration"], () => require("./networkSecurityPerimeterLoggingConfiguration"));
exports.NetworkSecurityPerimeterProfile = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeterProfile"], () => require("./networkSecurityPerimeterProfile"));
exports.NetworkVirtualAppliance = null;
utilities.lazyLoad(exports, ["NetworkVirtualAppliance"], () => require("./networkVirtualAppliance"));
exports.NetworkVirtualApplianceConnection = null;
utilities.lazyLoad(exports, ["NetworkVirtualApplianceConnection"], () => require("./networkVirtualApplianceConnection"));
exports.NetworkWatcher = null;
utilities.lazyLoad(exports, ["NetworkWatcher"], () => require("./networkWatcher"));
exports.NspAccessRule = null;
utilities.lazyLoad(exports, ["NspAccessRule"], () => require("./nspAccessRule"));
exports.NspAssociation = null;
utilities.lazyLoad(exports, ["NspAssociation"], () => require("./nspAssociation"));
exports.NspLink = null;
utilities.lazyLoad(exports, ["NspLink"], () => require("./nspLink"));
exports.NspProfile = null;
utilities.lazyLoad(exports, ["NspProfile"], () => require("./nspProfile"));
exports.OutboundEndpoint = null;
utilities.lazyLoad(exports, ["OutboundEndpoint"], () => require("./outboundEndpoint"));
exports.P2sVpnGateway = null;
utilities.lazyLoad(exports, ["P2sVpnGateway"], () => require("./p2sVpnGateway"));
exports.P2sVpnServerConfiguration = null;
utilities.lazyLoad(exports, ["P2sVpnServerConfiguration"], () => require("./p2sVpnServerConfiguration"));
exports.PacketCapture = null;
utilities.lazyLoad(exports, ["PacketCapture"], () => require("./packetCapture"));
exports.Policy = null;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));
exports.PrivateDnsZoneGroup = null;
utilities.lazyLoad(exports, ["PrivateDnsZoneGroup"], () => require("./privateDnsZoneGroup"));
exports.PrivateEndpoint = null;
utilities.lazyLoad(exports, ["PrivateEndpoint"], () => require("./privateEndpoint"));
exports.PrivateLinkService = null;
utilities.lazyLoad(exports, ["PrivateLinkService"], () => require("./privateLinkService"));
exports.PrivateLinkServicePrivateEndpointConnection = null;
utilities.lazyLoad(exports, ["PrivateLinkServicePrivateEndpointConnection"], () => require("./privateLinkServicePrivateEndpointConnection"));
exports.PrivateRecordSet = null;
utilities.lazyLoad(exports, ["PrivateRecordSet"], () => require("./privateRecordSet"));
exports.PrivateResolverVirtualNetworkLink = null;
utilities.lazyLoad(exports, ["PrivateResolverVirtualNetworkLink"], () => require("./privateResolverVirtualNetworkLink"));
exports.PrivateZone = null;
utilities.lazyLoad(exports, ["PrivateZone"], () => require("./privateZone"));
exports.Profile = null;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));
exports.PublicIPAddress = null;
utilities.lazyLoad(exports, ["PublicIPAddress"], () => require("./publicIPAddress"));
exports.PublicIPPrefix = null;
utilities.lazyLoad(exports, ["PublicIPPrefix"], () => require("./publicIPPrefix"));
exports.ReachabilityAnalysisIntent = null;
utilities.lazyLoad(exports, ["ReachabilityAnalysisIntent"], () => require("./reachabilityAnalysisIntent"));
exports.ReachabilityAnalysisRun = null;
utilities.lazyLoad(exports, ["ReachabilityAnalysisRun"], () => require("./reachabilityAnalysisRun"));
exports.RecordSet = null;
utilities.lazyLoad(exports, ["RecordSet"], () => require("./recordSet"));
exports.Route = null;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
exports.RouteFilter = null;
utilities.lazyLoad(exports, ["RouteFilter"], () => require("./routeFilter"));
exports.RouteFilterRule = null;
utilities.lazyLoad(exports, ["RouteFilterRule"], () => require("./routeFilterRule"));
exports.RouteMap = null;
utilities.lazyLoad(exports, ["RouteMap"], () => require("./routeMap"));
exports.RouteTable = null;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));
exports.RoutingIntent = null;
utilities.lazyLoad(exports, ["RoutingIntent"], () => require("./routingIntent"));
exports.RoutingRule = null;
utilities.lazyLoad(exports, ["RoutingRule"], () => require("./routingRule"));
exports.RoutingRuleCollection = null;
utilities.lazyLoad(exports, ["RoutingRuleCollection"], () => require("./routingRuleCollection"));
exports.RulesEngine = null;
utilities.lazyLoad(exports, ["RulesEngine"], () => require("./rulesEngine"));
exports.ScopeConnection = null;
utilities.lazyLoad(exports, ["ScopeConnection"], () => require("./scopeConnection"));
exports.SecurityAdminConfiguration = null;
utilities.lazyLoad(exports, ["SecurityAdminConfiguration"], () => require("./securityAdminConfiguration"));
exports.SecurityPartnerProvider = null;
utilities.lazyLoad(exports, ["SecurityPartnerProvider"], () => require("./securityPartnerProvider"));
exports.SecurityRule = null;
utilities.lazyLoad(exports, ["SecurityRule"], () => require("./securityRule"));
exports.SecurityUserConfiguration = null;
utilities.lazyLoad(exports, ["SecurityUserConfiguration"], () => require("./securityUserConfiguration"));
exports.SecurityUserRule = null;
utilities.lazyLoad(exports, ["SecurityUserRule"], () => require("./securityUserRule"));
exports.SecurityUserRuleCollection = null;
utilities.lazyLoad(exports, ["SecurityUserRuleCollection"], () => require("./securityUserRuleCollection"));
exports.ServiceEndpointPolicy = null;
utilities.lazyLoad(exports, ["ServiceEndpointPolicy"], () => require("./serviceEndpointPolicy"));
exports.ServiceEndpointPolicyDefinition = null;
utilities.lazyLoad(exports, ["ServiceEndpointPolicyDefinition"], () => require("./serviceEndpointPolicyDefinition"));
exports.StaticCidr = null;
utilities.lazyLoad(exports, ["StaticCidr"], () => require("./staticCidr"));
exports.StaticMember = null;
utilities.lazyLoad(exports, ["StaticMember"], () => require("./staticMember"));
exports.Subnet = null;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));
exports.SubscriptionNetworkManagerConnection = null;
utilities.lazyLoad(exports, ["SubscriptionNetworkManagerConnection"], () => require("./subscriptionNetworkManagerConnection"));
exports.TrafficManagerUserMetricsKey = null;
utilities.lazyLoad(exports, ["TrafficManagerUserMetricsKey"], () => require("./trafficManagerUserMetricsKey"));
exports.UserRule = null;
utilities.lazyLoad(exports, ["UserRule"], () => require("./userRule"));
exports.UserRuleCollection = null;
utilities.lazyLoad(exports, ["UserRuleCollection"], () => require("./userRuleCollection"));
exports.VerifierWorkspace = null;
utilities.lazyLoad(exports, ["VerifierWorkspace"], () => require("./verifierWorkspace"));
exports.VirtualApplianceSite = null;
utilities.lazyLoad(exports, ["VirtualApplianceSite"], () => require("./virtualApplianceSite"));
exports.VirtualHub = null;
utilities.lazyLoad(exports, ["VirtualHub"], () => require("./virtualHub"));
exports.VirtualHubBgpConnection = null;
utilities.lazyLoad(exports, ["VirtualHubBgpConnection"], () => require("./virtualHubBgpConnection"));
exports.VirtualHubIpConfiguration = null;
utilities.lazyLoad(exports, ["VirtualHubIpConfiguration"], () => require("./virtualHubIpConfiguration"));
exports.VirtualHubRouteTableV2 = null;
utilities.lazyLoad(exports, ["VirtualHubRouteTableV2"], () => require("./virtualHubRouteTableV2"));
exports.VirtualNetwork = null;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));
exports.VirtualNetworkGateway = null;
utilities.lazyLoad(exports, ["VirtualNetworkGateway"], () => require("./virtualNetworkGateway"));
exports.VirtualNetworkGatewayConnection = null;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayConnection"], () => require("./virtualNetworkGatewayConnection"));
exports.VirtualNetworkGatewayNatRule = null;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayNatRule"], () => require("./virtualNetworkGatewayNatRule"));
exports.VirtualNetworkLink = null;
utilities.lazyLoad(exports, ["VirtualNetworkLink"], () => require("./virtualNetworkLink"));
exports.VirtualNetworkPeering = null;
utilities.lazyLoad(exports, ["VirtualNetworkPeering"], () => require("./virtualNetworkPeering"));
exports.VirtualNetworkTap = null;
utilities.lazyLoad(exports, ["VirtualNetworkTap"], () => require("./virtualNetworkTap"));
exports.VirtualRouter = null;
utilities.lazyLoad(exports, ["VirtualRouter"], () => require("./virtualRouter"));
exports.VirtualRouterPeering = null;
utilities.lazyLoad(exports, ["VirtualRouterPeering"], () => require("./virtualRouterPeering"));
exports.VirtualWan = null;
utilities.lazyLoad(exports, ["VirtualWan"], () => require("./virtualWan"));
exports.VpnConnection = null;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));
exports.VpnGateway = null;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));
exports.VpnServerConfiguration = null;
utilities.lazyLoad(exports, ["VpnServerConfiguration"], () => require("./vpnServerConfiguration"));
exports.VpnSite = null;
utilities.lazyLoad(exports, ["VpnSite"], () => require("./vpnSite"));
exports.WebApplicationFirewallPolicy = null;
utilities.lazyLoad(exports, ["WebApplicationFirewallPolicy"], () => require("./webApplicationFirewallPolicy"));
exports.Zone = null;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));
// Export enums:
__exportStar(require("../types/enums/network"), exports);
// Export sub-modules:
const v20180501 = require("./v20180501");
exports.v20180501 = v20180501;
const v20180601 = require("./v20180601");
exports.v20180601 = v20180601;
const v20180701 = require("./v20180701");
exports.v20180701 = v20180701;
const v20181201 = require("./v20181201");
exports.v20181201 = v20181201;
const v20190201 = require("./v20190201");
exports.v20190201 = v20190201;
const v20190601 = require("./v20190601");
exports.v20190601 = v20190601;
const v20190701 = require("./v20190701");
exports.v20190701 = v20190701;
const v20190801 = require("./v20190801");
exports.v20190801 = v20190801;
const v20190901 = require("./v20190901");
exports.v20190901 = v20190901;
const v20191101 = require("./v20191101");
exports.v20191101 = v20191101;
const v20200401 = require("./v20200401");
exports.v20200401 = v20200401;
const v20200401preview = require("./v20200401preview");
exports.v20200401preview = v20200401preview;
const v20200601 = require("./v20200601");
exports.v20200601 = v20200601;
const v20210201 = require("./v20210201");
exports.v20210201 = v20210201;
const v20210201preview = require("./v20210201preview");
exports.v20210201preview = v20210201preview;
const v20210301 = require("./v20210301");
exports.v20210301 = v20210301;
const v20210301preview = require("./v20210301preview");
exports.v20210301preview = v20210301preview;
const v20210501preview = require("./v20210501preview");
exports.v20210501preview = v20210501preview;
const v20210601 = require("./v20210601");
exports.v20210601 = v20210601;
const v20210801 = require("./v20210801");
exports.v20210801 = v20210801;
const v20220101 = require("./v20220101");
exports.v20220101 = v20220101;
const v20220201preview = require("./v20220201preview");
exports.v20220201preview = v20220201preview;
const v20220401 = require("./v20220401");
exports.v20220401 = v20220401;
const v20220401preview = require("./v20220401preview");
exports.v20220401preview = v20220401preview;
const v20220501 = require("./v20220501");
exports.v20220501 = v20220501;
const v20220701 = require("./v20220701");
exports.v20220701 = v20220701;
const v20230201 = require("./v20230201");
exports.v20230201 = v20230201;
const v20230401 = require("./v20230401");
exports.v20230401 = v20230401;
const v20230501 = require("./v20230501");
exports.v20230501 = v20230501;
const v20230601 = require("./v20230601");
exports.v20230601 = v20230601;
const v20230701preview = require("./v20230701preview");
exports.v20230701preview = v20230701preview;
const v20230801preview = require("./v20230801preview");
exports.v20230801preview = v20230801preview;
const v20230901 = require("./v20230901");
exports.v20230901 = v20230901;
const v20231101 = require("./v20231101");
exports.v20231101 = v20231101;
const v20240101 = require("./v20240101");
exports.v20240101 = v20240101;
const v20240101preview = require("./v20240101preview");
exports.v20240101preview = v20240101preview;
const v20240201 = require("./v20240201");
exports.v20240201 = v20240201;
const v20240301 = require("./v20240301");
exports.v20240301 = v20240301;
const v20240501 = require("./v20240501");
exports.v20240501 = v20240501;
const v20240601 = require("./v20240601");
exports.v20240601 = v20240601;
const v20240601preview = require("./v20240601preview");
exports.v20240601preview = v20240601preview;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:network:AdminRule":
                return new exports.AdminRule(name, undefined, { urn });
            case "azure-native:network:AdminRuleCollection":
                return new exports.AdminRuleCollection(name, undefined, { urn });
            case "azure-native:network:ApplicationGateway":
                return new exports.ApplicationGateway(name, undefined, { urn });
            case "azure-native:network:ApplicationGatewayPrivateEndpointConnection":
                return new exports.ApplicationGatewayPrivateEndpointConnection(name, undefined, { urn });
            case "azure-native:network:ApplicationSecurityGroup":
                return new exports.ApplicationSecurityGroup(name, undefined, { urn });
            case "azure-native:network:AzureFirewall":
                return new exports.AzureFirewall(name, undefined, { urn });
            case "azure-native:network:BastionHost":
                return new exports.BastionHost(name, undefined, { urn });
            case "azure-native:network:ConfigurationPolicyGroup":
                return new exports.ConfigurationPolicyGroup(name, undefined, { urn });
            case "azure-native:network:ConnectionMonitor":
                return new exports.ConnectionMonitor(name, undefined, { urn });
            case "azure-native:network:ConnectivityConfiguration":
                return new exports.ConnectivityConfiguration(name, undefined, { urn });
            case "azure-native:network:CustomIPPrefix":
                return new exports.CustomIPPrefix(name, undefined, { urn });
            case "azure-native:network:DdosCustomPolicy":
                return new exports.DdosCustomPolicy(name, undefined, { urn });
            case "azure-native:network:DdosProtectionPlan":
                return new exports.DdosProtectionPlan(name, undefined, { urn });
            case "azure-native:network:DefaultAdminRule":
                return new exports.DefaultAdminRule(name, undefined, { urn });
            case "azure-native:network:DefaultUserRule":
                return new exports.DefaultUserRule(name, undefined, { urn });
            case "azure-native:network:DnsForwardingRuleset":
                return new exports.DnsForwardingRuleset(name, undefined, { urn });
            case "azure-native:network:DnsResolver":
                return new exports.DnsResolver(name, undefined, { urn });
            case "azure-native:network:DnsResolverDomainList":
                return new exports.DnsResolverDomainList(name, undefined, { urn });
            case "azure-native:network:DnsResolverPolicy":
                return new exports.DnsResolverPolicy(name, undefined, { urn });
            case "azure-native:network:DnsResolverPolicyVirtualNetworkLink":
                return new exports.DnsResolverPolicyVirtualNetworkLink(name, undefined, { urn });
            case "azure-native:network:DnsSecurityRule":
                return new exports.DnsSecurityRule(name, undefined, { urn });
            case "azure-native:network:DnssecConfig":
                return new exports.DnssecConfig(name, undefined, { urn });
            case "azure-native:network:DscpConfiguration":
                return new exports.DscpConfiguration(name, undefined, { urn });
            case "azure-native:network:Endpoint":
                return new exports.Endpoint(name, undefined, { urn });
            case "azure-native:network:Experiment":
                return new exports.Experiment(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuit":
                return new exports.ExpressRouteCircuit(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuitAuthorization":
                return new exports.ExpressRouteCircuitAuthorization(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuitConnection":
                return new exports.ExpressRouteCircuitConnection(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuitPeering":
                return new exports.ExpressRouteCircuitPeering(name, undefined, { urn });
            case "azure-native:network:ExpressRouteConnection":
                return new exports.ExpressRouteConnection(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCrossConnectionPeering":
                return new exports.ExpressRouteCrossConnectionPeering(name, undefined, { urn });
            case "azure-native:network:ExpressRouteGateway":
                return new exports.ExpressRouteGateway(name, undefined, { urn });
            case "azure-native:network:ExpressRoutePort":
                return new exports.ExpressRoutePort(name, undefined, { urn });
            case "azure-native:network:ExpressRoutePortAuthorization":
                return new exports.ExpressRoutePortAuthorization(name, undefined, { urn });
            case "azure-native:network:FirewallPolicy":
                return new exports.FirewallPolicy(name, undefined, { urn });
            case "azure-native:network:FirewallPolicyDraft":
                return new exports.FirewallPolicyDraft(name, undefined, { urn });
            case "azure-native:network:FirewallPolicyRuleCollectionGroup":
                return new exports.FirewallPolicyRuleCollectionGroup(name, undefined, { urn });
            case "azure-native:network:FirewallPolicyRuleCollectionGroupDraft":
                return new exports.FirewallPolicyRuleCollectionGroupDraft(name, undefined, { urn });
            case "azure-native:network:FirewallPolicyRuleGroup":
                return new exports.FirewallPolicyRuleGroup(name, undefined, { urn });
            case "azure-native:network:FlowLog":
                return new exports.FlowLog(name, undefined, { urn });
            case "azure-native:network:ForwardingRule":
                return new exports.ForwardingRule(name, undefined, { urn });
            case "azure-native:network:FrontDoor":
                return new exports.FrontDoor(name, undefined, { urn });
            case "azure-native:network:HubRouteTable":
                return new exports.HubRouteTable(name, undefined, { urn });
            case "azure-native:network:HubVirtualNetworkConnection":
                return new exports.HubVirtualNetworkConnection(name, undefined, { urn });
            case "azure-native:network:InboundEndpoint":
                return new exports.InboundEndpoint(name, undefined, { urn });
            case "azure-native:network:InboundNatRule":
                return new exports.InboundNatRule(name, undefined, { urn });
            case "azure-native:network:InterfaceEndpoint":
                return new exports.InterfaceEndpoint(name, undefined, { urn });
            case "azure-native:network:IpAllocation":
                return new exports.IpAllocation(name, undefined, { urn });
            case "azure-native:network:IpGroup":
                return new exports.IpGroup(name, undefined, { urn });
            case "azure-native:network:IpamPool":
                return new exports.IpamPool(name, undefined, { urn });
            case "azure-native:network:LoadBalancer":
                return new exports.LoadBalancer(name, undefined, { urn });
            case "azure-native:network:LoadBalancerBackendAddressPool":
                return new exports.LoadBalancerBackendAddressPool(name, undefined, { urn });
            case "azure-native:network:LocalNetworkGateway":
                return new exports.LocalNetworkGateway(name, undefined, { urn });
            case "azure-native:network:ManagementGroupNetworkManagerConnection":
                return new exports.ManagementGroupNetworkManagerConnection(name, undefined, { urn });
            case "azure-native:network:NatGateway":
                return new exports.NatGateway(name, undefined, { urn });
            case "azure-native:network:NatRule":
                return new exports.NatRule(name, undefined, { urn });
            case "azure-native:network:NetworkExperimentProfile":
                return new exports.NetworkExperimentProfile(name, undefined, { urn });
            case "azure-native:network:NetworkGroup":
                return new exports.NetworkGroup(name, undefined, { urn });
            case "azure-native:network:NetworkInterface":
                return new exports.NetworkInterface(name, undefined, { urn });
            case "azure-native:network:NetworkInterfaceTapConfiguration":
                return new exports.NetworkInterfaceTapConfiguration(name, undefined, { urn });
            case "azure-native:network:NetworkManager":
                return new exports.NetworkManager(name, undefined, { urn });
            case "azure-native:network:NetworkManagerRoutingConfiguration":
                return new exports.NetworkManagerRoutingConfiguration(name, undefined, { urn });
            case "azure-native:network:NetworkProfile":
                return new exports.NetworkProfile(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityGroup":
                return new exports.NetworkSecurityGroup(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityPerimeter":
                return new exports.NetworkSecurityPerimeter(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityPerimeterAccessRule":
                return new exports.NetworkSecurityPerimeterAccessRule(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityPerimeterAssociation":
                return new exports.NetworkSecurityPerimeterAssociation(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityPerimeterLink":
                return new exports.NetworkSecurityPerimeterLink(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityPerimeterLoggingConfiguration":
                return new exports.NetworkSecurityPerimeterLoggingConfiguration(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityPerimeterProfile":
                return new exports.NetworkSecurityPerimeterProfile(name, undefined, { urn });
            case "azure-native:network:NetworkVirtualAppliance":
                return new exports.NetworkVirtualAppliance(name, undefined, { urn });
            case "azure-native:network:NetworkVirtualApplianceConnection":
                return new exports.NetworkVirtualApplianceConnection(name, undefined, { urn });
            case "azure-native:network:NetworkWatcher":
                return new exports.NetworkWatcher(name, undefined, { urn });
            case "azure-native:network:NspAccessRule":
                return new exports.NspAccessRule(name, undefined, { urn });
            case "azure-native:network:NspAssociation":
                return new exports.NspAssociation(name, undefined, { urn });
            case "azure-native:network:NspLink":
                return new exports.NspLink(name, undefined, { urn });
            case "azure-native:network:NspProfile":
                return new exports.NspProfile(name, undefined, { urn });
            case "azure-native:network:OutboundEndpoint":
                return new exports.OutboundEndpoint(name, undefined, { urn });
            case "azure-native:network:P2sVpnGateway":
                return new exports.P2sVpnGateway(name, undefined, { urn });
            case "azure-native:network:P2sVpnServerConfiguration":
                return new exports.P2sVpnServerConfiguration(name, undefined, { urn });
            case "azure-native:network:PacketCapture":
                return new exports.PacketCapture(name, undefined, { urn });
            case "azure-native:network:Policy":
                return new exports.Policy(name, undefined, { urn });
            case "azure-native:network:PrivateDnsZoneGroup":
                return new exports.PrivateDnsZoneGroup(name, undefined, { urn });
            case "azure-native:network:PrivateEndpoint":
                return new exports.PrivateEndpoint(name, undefined, { urn });
            case "azure-native:network:PrivateLinkService":
                return new exports.PrivateLinkService(name, undefined, { urn });
            case "azure-native:network:PrivateLinkServicePrivateEndpointConnection":
                return new exports.PrivateLinkServicePrivateEndpointConnection(name, undefined, { urn });
            case "azure-native:network:PrivateRecordSet":
                return new exports.PrivateRecordSet(name, undefined, { urn });
            case "azure-native:network:PrivateResolverVirtualNetworkLink":
                return new exports.PrivateResolverVirtualNetworkLink(name, undefined, { urn });
            case "azure-native:network:PrivateZone":
                return new exports.PrivateZone(name, undefined, { urn });
            case "azure-native:network:Profile":
                return new exports.Profile(name, undefined, { urn });
            case "azure-native:network:PublicIPAddress":
                return new exports.PublicIPAddress(name, undefined, { urn });
            case "azure-native:network:PublicIPPrefix":
                return new exports.PublicIPPrefix(name, undefined, { urn });
            case "azure-native:network:ReachabilityAnalysisIntent":
                return new exports.ReachabilityAnalysisIntent(name, undefined, { urn });
            case "azure-native:network:ReachabilityAnalysisRun":
                return new exports.ReachabilityAnalysisRun(name, undefined, { urn });
            case "azure-native:network:RecordSet":
                return new exports.RecordSet(name, undefined, { urn });
            case "azure-native:network:Route":
                return new exports.Route(name, undefined, { urn });
            case "azure-native:network:RouteFilter":
                return new exports.RouteFilter(name, undefined, { urn });
            case "azure-native:network:RouteFilterRule":
                return new exports.RouteFilterRule(name, undefined, { urn });
            case "azure-native:network:RouteMap":
                return new exports.RouteMap(name, undefined, { urn });
            case "azure-native:network:RouteTable":
                return new exports.RouteTable(name, undefined, { urn });
            case "azure-native:network:RoutingIntent":
                return new exports.RoutingIntent(name, undefined, { urn });
            case "azure-native:network:RoutingRule":
                return new exports.RoutingRule(name, undefined, { urn });
            case "azure-native:network:RoutingRuleCollection":
                return new exports.RoutingRuleCollection(name, undefined, { urn });
            case "azure-native:network:RulesEngine":
                return new exports.RulesEngine(name, undefined, { urn });
            case "azure-native:network:ScopeConnection":
                return new exports.ScopeConnection(name, undefined, { urn });
            case "azure-native:network:SecurityAdminConfiguration":
                return new exports.SecurityAdminConfiguration(name, undefined, { urn });
            case "azure-native:network:SecurityPartnerProvider":
                return new exports.SecurityPartnerProvider(name, undefined, { urn });
            case "azure-native:network:SecurityRule":
                return new exports.SecurityRule(name, undefined, { urn });
            case "azure-native:network:SecurityUserConfiguration":
                return new exports.SecurityUserConfiguration(name, undefined, { urn });
            case "azure-native:network:SecurityUserRule":
                return new exports.SecurityUserRule(name, undefined, { urn });
            case "azure-native:network:SecurityUserRuleCollection":
                return new exports.SecurityUserRuleCollection(name, undefined, { urn });
            case "azure-native:network:ServiceEndpointPolicy":
                return new exports.ServiceEndpointPolicy(name, undefined, { urn });
            case "azure-native:network:ServiceEndpointPolicyDefinition":
                return new exports.ServiceEndpointPolicyDefinition(name, undefined, { urn });
            case "azure-native:network:StaticCidr":
                return new exports.StaticCidr(name, undefined, { urn });
            case "azure-native:network:StaticMember":
                return new exports.StaticMember(name, undefined, { urn });
            case "azure-native:network:Subnet":
                return new exports.Subnet(name, undefined, { urn });
            case "azure-native:network:SubscriptionNetworkManagerConnection":
                return new exports.SubscriptionNetworkManagerConnection(name, undefined, { urn });
            case "azure-native:network:TrafficManagerUserMetricsKey":
                return new exports.TrafficManagerUserMetricsKey(name, undefined, { urn });
            case "azure-native:network:UserRule":
                return new exports.UserRule(name, undefined, { urn });
            case "azure-native:network:UserRuleCollection":
                return new exports.UserRuleCollection(name, undefined, { urn });
            case "azure-native:network:VerifierWorkspace":
                return new exports.VerifierWorkspace(name, undefined, { urn });
            case "azure-native:network:VirtualApplianceSite":
                return new exports.VirtualApplianceSite(name, undefined, { urn });
            case "azure-native:network:VirtualHub":
                return new exports.VirtualHub(name, undefined, { urn });
            case "azure-native:network:VirtualHubBgpConnection":
                return new exports.VirtualHubBgpConnection(name, undefined, { urn });
            case "azure-native:network:VirtualHubIpConfiguration":
                return new exports.VirtualHubIpConfiguration(name, undefined, { urn });
            case "azure-native:network:VirtualHubRouteTableV2":
                return new exports.VirtualHubRouteTableV2(name, undefined, { urn });
            case "azure-native:network:VirtualNetwork":
                return new exports.VirtualNetwork(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkGateway":
                return new exports.VirtualNetworkGateway(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkGatewayConnection":
                return new exports.VirtualNetworkGatewayConnection(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkGatewayNatRule":
                return new exports.VirtualNetworkGatewayNatRule(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkLink":
                return new exports.VirtualNetworkLink(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkPeering":
                return new exports.VirtualNetworkPeering(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkTap":
                return new exports.VirtualNetworkTap(name, undefined, { urn });
            case "azure-native:network:VirtualRouter":
                return new exports.VirtualRouter(name, undefined, { urn });
            case "azure-native:network:VirtualRouterPeering":
                return new exports.VirtualRouterPeering(name, undefined, { urn });
            case "azure-native:network:VirtualWan":
                return new exports.VirtualWan(name, undefined, { urn });
            case "azure-native:network:VpnConnection":
                return new exports.VpnConnection(name, undefined, { urn });
            case "azure-native:network:VpnGateway":
                return new exports.VpnGateway(name, undefined, { urn });
            case "azure-native:network:VpnServerConfiguration":
                return new exports.VpnServerConfiguration(name, undefined, { urn });
            case "azure-native:network:VpnSite":
                return new exports.VpnSite(name, undefined, { urn });
            case "azure-native:network:WebApplicationFirewallPolicy":
                return new exports.WebApplicationFirewallPolicy(name, undefined, { urn });
            case "azure-native:network:Zone":
                return new exports.Zone(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network", _module);
//# sourceMappingURL=data:application/json;base64,