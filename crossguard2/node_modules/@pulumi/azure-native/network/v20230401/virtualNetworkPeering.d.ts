import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Peerings in a virtual network resource.
 */
export declare class VirtualNetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualNetworkPeering;
    /**
     * Returns true if the given object is an instance of VirtualNetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VirtualNetworkPeering;
    /**
     * Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     */
    readonly allowForwardedTraffic: pulumi.Output<boolean | undefined>;
    /**
     * If gateway links can be used in remote virtual networking to link to this virtual network.
     */
    readonly allowGatewayTransit: pulumi.Output<boolean | undefined>;
    /**
     * Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     */
    readonly allowVirtualNetworkAccess: pulumi.Output<boolean | undefined>;
    /**
     * If we need to verify the provisioning state of the remote gateway.
     */
    readonly doNotVerifyRemoteGateways: pulumi.Output<boolean | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The status of the virtual network peering.
     */
    readonly peeringState: pulumi.Output<string | undefined>;
    /**
     * The peering sync status of the virtual network peering.
     */
    readonly peeringSyncLevel: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the virtual network peering resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * The reference to the address space peered with the remote virtual network.
     */
    readonly remoteAddressSpace: pulumi.Output<outputs.network.v20230401.AddressSpaceResponse | undefined>;
    /**
     * The reference to the remote virtual network's Bgp Communities.
     */
    readonly remoteBgpCommunities: pulumi.Output<outputs.network.v20230401.VirtualNetworkBgpCommunitiesResponse | undefined>;
    /**
     * The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     */
    readonly remoteVirtualNetwork: pulumi.Output<outputs.network.v20230401.SubResourceResponse | undefined>;
    /**
     * The reference to the current address space of the remote virtual network.
     */
    readonly remoteVirtualNetworkAddressSpace: pulumi.Output<outputs.network.v20230401.AddressSpaceResponse | undefined>;
    /**
     * The reference to the remote virtual network's encryption
     */
    readonly remoteVirtualNetworkEncryption: pulumi.Output<outputs.network.v20230401.VirtualNetworkEncryptionResponse>;
    /**
     * The resourceGuid property of the Virtual Network peering resource.
     */
    readonly resourceGuid: pulumi.Output<string>;
    /**
     * Resource type.
     */
    readonly type: pulumi.Output<string | undefined>;
    /**
     * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     */
    readonly useRemoteGateways: pulumi.Output<boolean | undefined>;
    /**
     * Create a VirtualNetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkPeeringArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a VirtualNetworkPeering resource.
 */
export interface VirtualNetworkPeeringArgs {
    /**
     * Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     */
    allowForwardedTraffic?: pulumi.Input<boolean>;
    /**
     * If gateway links can be used in remote virtual networking to link to this virtual network.
     */
    allowGatewayTransit?: pulumi.Input<boolean>;
    /**
     * Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     */
    allowVirtualNetworkAccess?: pulumi.Input<boolean>;
    /**
     * If we need to verify the provisioning state of the remote gateway.
     */
    doNotVerifyRemoteGateways?: pulumi.Input<boolean>;
    /**
     * Resource ID.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the virtual network peering.
     */
    peeringState?: pulumi.Input<string | enums.network.v20230401.VirtualNetworkPeeringState>;
    /**
     * The peering sync status of the virtual network peering.
     */
    peeringSyncLevel?: pulumi.Input<string | enums.network.v20230401.VirtualNetworkPeeringLevel>;
    /**
     * The reference to the address space peered with the remote virtual network.
     */
    remoteAddressSpace?: pulumi.Input<inputs.network.v20230401.AddressSpaceArgs>;
    /**
     * The reference to the remote virtual network's Bgp Communities.
     */
    remoteBgpCommunities?: pulumi.Input<inputs.network.v20230401.VirtualNetworkBgpCommunitiesArgs>;
    /**
     * The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     */
    remoteVirtualNetwork?: pulumi.Input<inputs.network.v20230401.SubResourceArgs>;
    /**
     * The reference to the current address space of the remote virtual network.
     */
    remoteVirtualNetworkAddressSpace?: pulumi.Input<inputs.network.v20230401.AddressSpaceArgs>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Parameter indicates the intention to sync the peering with the current address space on the remote vNet after it's updated.
     */
    syncRemoteAddressSpace?: pulumi.Input<string>;
    /**
     * Resource type.
     */
    type?: pulumi.Input<string>;
    /**
     * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     */
    useRemoteGateways?: pulumi.Input<boolean>;
    /**
     * The name of the virtual network.
     */
    virtualNetworkName: pulumi.Input<string>;
    /**
     * The name of the peering.
     */
    virtualNetworkPeeringName?: pulumi.Input<string>;
}
