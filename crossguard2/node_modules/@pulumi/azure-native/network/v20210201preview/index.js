"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserRuleCollection = exports.NspProfile = exports.NspLink = exports.NspAssociation = exports.NspAccessRule = exports.NetworkSecurityPerimeter = exports.NetworkManager = exports.NetworkGroup = exports.listNetworkManagerEffectiveSecurityAdminRuleOutput = exports.listNetworkManagerEffectiveSecurityAdminRule = exports.listNetworkManagerDeploymentStatusOutput = exports.listNetworkManagerDeploymentStatus = exports.listEffectiveVirtualNetworkByNetworkManagerOutput = exports.listEffectiveVirtualNetworkByNetworkManager = exports.listEffectiveVirtualNetworkByNetworkGroupOutput = exports.listEffectiveVirtualNetworkByNetworkGroup = exports.listEffectiveConnectivityConfigurationOutput = exports.listEffectiveConnectivityConfiguration = exports.listActiveSecurityUserRuleOutput = exports.listActiveSecurityUserRule = exports.listActiveSecurityAdminRuleOutput = exports.listActiveSecurityAdminRule = exports.listActiveConnectivityConfigurationOutput = exports.listActiveConnectivityConfiguration = exports.getUserRuleCollectionOutput = exports.getUserRuleCollection = exports.getNspProfileOutput = exports.getNspProfile = exports.getNspLinkOutput = exports.getNspLink = exports.getNspAssociationOutput = exports.getNspAssociation = exports.getNspAccessRuleOutput = exports.getNspAccessRule = exports.getNetworkSecurityPerimeterOutput = exports.getNetworkSecurityPerimeter = exports.getNetworkManagerOutput = exports.getNetworkManager = exports.getNetworkGroupOutput = exports.getNetworkGroup = exports.getConnectivityConfigurationOutput = exports.getConnectivityConfiguration = exports.getAdminRuleCollectionOutput = exports.getAdminRuleCollection = exports.getAdminRuleOutput = exports.getAdminRule = exports.ConnectivityConfiguration = exports.AdminRuleCollection = exports.AdminRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.AdminRule = null;
utilities.lazyLoad(exports, ["AdminRule"], () => require("./adminRule"));
exports.AdminRuleCollection = null;
utilities.lazyLoad(exports, ["AdminRuleCollection"], () => require("./adminRuleCollection"));
exports.ConnectivityConfiguration = null;
utilities.lazyLoad(exports, ["ConnectivityConfiguration"], () => require("./connectivityConfiguration"));
exports.getAdminRule = null;
exports.getAdminRuleOutput = null;
utilities.lazyLoad(exports, ["getAdminRule", "getAdminRuleOutput"], () => require("./getAdminRule"));
exports.getAdminRuleCollection = null;
exports.getAdminRuleCollectionOutput = null;
utilities.lazyLoad(exports, ["getAdminRuleCollection", "getAdminRuleCollectionOutput"], () => require("./getAdminRuleCollection"));
exports.getConnectivityConfiguration = null;
exports.getConnectivityConfigurationOutput = null;
utilities.lazyLoad(exports, ["getConnectivityConfiguration", "getConnectivityConfigurationOutput"], () => require("./getConnectivityConfiguration"));
exports.getNetworkGroup = null;
exports.getNetworkGroupOutput = null;
utilities.lazyLoad(exports, ["getNetworkGroup", "getNetworkGroupOutput"], () => require("./getNetworkGroup"));
exports.getNetworkManager = null;
exports.getNetworkManagerOutput = null;
utilities.lazyLoad(exports, ["getNetworkManager", "getNetworkManagerOutput"], () => require("./getNetworkManager"));
exports.getNetworkSecurityPerimeter = null;
exports.getNetworkSecurityPerimeterOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityPerimeter", "getNetworkSecurityPerimeterOutput"], () => require("./getNetworkSecurityPerimeter"));
exports.getNspAccessRule = null;
exports.getNspAccessRuleOutput = null;
utilities.lazyLoad(exports, ["getNspAccessRule", "getNspAccessRuleOutput"], () => require("./getNspAccessRule"));
exports.getNspAssociation = null;
exports.getNspAssociationOutput = null;
utilities.lazyLoad(exports, ["getNspAssociation", "getNspAssociationOutput"], () => require("./getNspAssociation"));
exports.getNspLink = null;
exports.getNspLinkOutput = null;
utilities.lazyLoad(exports, ["getNspLink", "getNspLinkOutput"], () => require("./getNspLink"));
exports.getNspProfile = null;
exports.getNspProfileOutput = null;
utilities.lazyLoad(exports, ["getNspProfile", "getNspProfileOutput"], () => require("./getNspProfile"));
exports.getUserRuleCollection = null;
exports.getUserRuleCollectionOutput = null;
utilities.lazyLoad(exports, ["getUserRuleCollection", "getUserRuleCollectionOutput"], () => require("./getUserRuleCollection"));
exports.listActiveConnectivityConfiguration = null;
exports.listActiveConnectivityConfigurationOutput = null;
utilities.lazyLoad(exports, ["listActiveConnectivityConfiguration", "listActiveConnectivityConfigurationOutput"], () => require("./listActiveConnectivityConfiguration"));
exports.listActiveSecurityAdminRule = null;
exports.listActiveSecurityAdminRuleOutput = null;
utilities.lazyLoad(exports, ["listActiveSecurityAdminRule", "listActiveSecurityAdminRuleOutput"], () => require("./listActiveSecurityAdminRule"));
exports.listActiveSecurityUserRule = null;
exports.listActiveSecurityUserRuleOutput = null;
utilities.lazyLoad(exports, ["listActiveSecurityUserRule", "listActiveSecurityUserRuleOutput"], () => require("./listActiveSecurityUserRule"));
exports.listEffectiveConnectivityConfiguration = null;
exports.listEffectiveConnectivityConfigurationOutput = null;
utilities.lazyLoad(exports, ["listEffectiveConnectivityConfiguration", "listEffectiveConnectivityConfigurationOutput"], () => require("./listEffectiveConnectivityConfiguration"));
exports.listEffectiveVirtualNetworkByNetworkGroup = null;
exports.listEffectiveVirtualNetworkByNetworkGroupOutput = null;
utilities.lazyLoad(exports, ["listEffectiveVirtualNetworkByNetworkGroup", "listEffectiveVirtualNetworkByNetworkGroupOutput"], () => require("./listEffectiveVirtualNetworkByNetworkGroup"));
exports.listEffectiveVirtualNetworkByNetworkManager = null;
exports.listEffectiveVirtualNetworkByNetworkManagerOutput = null;
utilities.lazyLoad(exports, ["listEffectiveVirtualNetworkByNetworkManager", "listEffectiveVirtualNetworkByNetworkManagerOutput"], () => require("./listEffectiveVirtualNetworkByNetworkManager"));
exports.listNetworkManagerDeploymentStatus = null;
exports.listNetworkManagerDeploymentStatusOutput = null;
utilities.lazyLoad(exports, ["listNetworkManagerDeploymentStatus", "listNetworkManagerDeploymentStatusOutput"], () => require("./listNetworkManagerDeploymentStatus"));
exports.listNetworkManagerEffectiveSecurityAdminRule = null;
exports.listNetworkManagerEffectiveSecurityAdminRuleOutput = null;
utilities.lazyLoad(exports, ["listNetworkManagerEffectiveSecurityAdminRule", "listNetworkManagerEffectiveSecurityAdminRuleOutput"], () => require("./listNetworkManagerEffectiveSecurityAdminRule"));
exports.NetworkGroup = null;
utilities.lazyLoad(exports, ["NetworkGroup"], () => require("./networkGroup"));
exports.NetworkManager = null;
utilities.lazyLoad(exports, ["NetworkManager"], () => require("./networkManager"));
exports.NetworkSecurityPerimeter = null;
utilities.lazyLoad(exports, ["NetworkSecurityPerimeter"], () => require("./networkSecurityPerimeter"));
exports.NspAccessRule = null;
utilities.lazyLoad(exports, ["NspAccessRule"], () => require("./nspAccessRule"));
exports.NspAssociation = null;
utilities.lazyLoad(exports, ["NspAssociation"], () => require("./nspAssociation"));
exports.NspLink = null;
utilities.lazyLoad(exports, ["NspLink"], () => require("./nspLink"));
exports.NspProfile = null;
utilities.lazyLoad(exports, ["NspProfile"], () => require("./nspProfile"));
exports.UserRuleCollection = null;
utilities.lazyLoad(exports, ["UserRuleCollection"], () => require("./userRuleCollection"));
// Export enums:
__exportStar(require("../../types/enums/network/v20210201preview"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:network/v20210201preview:AdminRule":
                return new exports.AdminRule(name, undefined, { urn });
            case "azure-native:network/v20210201preview:AdminRuleCollection":
                return new exports.AdminRuleCollection(name, undefined, { urn });
            case "azure-native:network/v20210201preview:ConnectivityConfiguration":
                return new exports.ConnectivityConfiguration(name, undefined, { urn });
            case "azure-native:network/v20210201preview:NetworkGroup":
                return new exports.NetworkGroup(name, undefined, { urn });
            case "azure-native:network/v20210201preview:NetworkManager":
                return new exports.NetworkManager(name, undefined, { urn });
            case "azure-native:network/v20210201preview:NetworkSecurityPerimeter":
                return new exports.NetworkSecurityPerimeter(name, undefined, { urn });
            case "azure-native:network/v20210201preview:NspAccessRule":
                return new exports.NspAccessRule(name, undefined, { urn });
            case "azure-native:network/v20210201preview:NspAssociation":
                return new exports.NspAssociation(name, undefined, { urn });
            case "azure-native:network/v20210201preview:NspLink":
                return new exports.NspLink(name, undefined, { urn });
            case "azure-native:network/v20210201preview:NspProfile":
                return new exports.NspProfile(name, undefined, { urn });
            case "azure-native:network/v20210201preview:UserRuleCollection":
                return new exports.UserRuleCollection(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network/v20210201preview", _module);
//# sourceMappingURL=data:application/json;base64,