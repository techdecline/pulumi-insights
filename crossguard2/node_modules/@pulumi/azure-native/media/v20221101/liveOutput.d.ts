import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * The Live Output.
 */
export declare class LiveOutput extends pulumi.CustomResource {
    /**
     * Get an existing LiveOutput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LiveOutput;
    /**
     * Returns true if the given object is an instance of LiveOutput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LiveOutput;
    /**
     * ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window.
     */
    readonly archiveWindowLength: pulumi.Output<string>;
    /**
     * The asset that the live output will write to.
     */
    readonly assetName: pulumi.Output<string>;
    /**
     * The creation time the live output.
     */
    readonly created: pulumi.Output<string>;
    /**
     * The description of the live output.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * HTTP Live Streaming (HLS) packing setting for the live output.
     */
    readonly hls: pulumi.Output<outputs.media.v20221101.HlsResponse | undefined>;
    /**
     * The time the live output was last modified.
     */
    readonly lastModified: pulumi.Output<string>;
    /**
     * The manifest file name. If not provided, the service will generate one automatically.
     */
    readonly manifestName: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The initial timestamp that the live output will start at, any content before this value will not be archived.
     */
    readonly outputSnapTime: pulumi.Output<number | undefined>;
    /**
     * The provisioning state of the live output.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * The resource state of the live output.
     */
    readonly resourceState: pulumi.Output<string>;
    /**
     * ISO 8601 time between 1 minute to the duration of archiveWindowLength to control seek-able window length during Live. The service won't use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use PT1H30M to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL.
     */
    readonly rewindWindowLength: pulumi.Output<string | undefined>;
    /**
     * The system metadata relating to this resource.
     */
    readonly systemData: pulumi.Output<outputs.media.v20221101.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a LiveOutput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LiveOutputArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LiveOutput resource.
 */
export interface LiveOutputArgs {
    /**
     * The Media Services account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window.
     */
    archiveWindowLength: pulumi.Input<string>;
    /**
     * The asset that the live output will write to.
     */
    assetName: pulumi.Input<string>;
    /**
     * The description of the live output.
     */
    description?: pulumi.Input<string>;
    /**
     * HTTP Live Streaming (HLS) packing setting for the live output.
     */
    hls?: pulumi.Input<inputs.media.v20221101.HlsArgs>;
    /**
     * The name of the live event, maximum length is 32.
     */
    liveEventName: pulumi.Input<string>;
    /**
     * The name of the live output.
     */
    liveOutputName?: pulumi.Input<string>;
    /**
     * The manifest file name. If not provided, the service will generate one automatically.
     */
    manifestName?: pulumi.Input<string>;
    /**
     * The initial timestamp that the live output will start at, any content before this value will not be archived.
     */
    outputSnapTime?: pulumi.Input<number>;
    /**
     * The name of the resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * ISO 8601 time between 1 minute to the duration of archiveWindowLength to control seek-able window length during Live. The service won't use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use PT1H30M to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL.
     */
    rewindWindowLength?: pulumi.Input<string>;
}
