"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240927 = exports.v20240911 = exports.v20240507 = exports.v20240125 = exports.v20231011preview = exports.Pipeline = exports.listListSchemaOutput = exports.listListSchema = exports.listListPendingFlowOutput = exports.listListPendingFlow = exports.listListPendingConnectionOutput = exports.listListPendingConnection = exports.listAzureDataTransferApprovedSchemasOutput = exports.listAzureDataTransferApprovedSchemas = exports.getPipelineOutput = exports.getPipeline = exports.getFlowStreamConnectionStringOutput = exports.getFlowStreamConnectionString = exports.getFlowSourceAddressesOutput = exports.getFlowSourceAddresses = exports.getFlowDestinationEndpointsOutput = exports.getFlowDestinationEndpoints = exports.getFlowDestinationEndpointPortsOutput = exports.getFlowDestinationEndpointPorts = exports.getFlowOutput = exports.getFlow = exports.getConnectionOutput = exports.getConnection = exports.Flow = exports.Connection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Connection = null;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));
exports.Flow = null;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));
exports.getConnection = null;
exports.getConnectionOutput = null;
utilities.lazyLoad(exports, ["getConnection", "getConnectionOutput"], () => require("./getConnection"));
exports.getFlow = null;
exports.getFlowOutput = null;
utilities.lazyLoad(exports, ["getFlow", "getFlowOutput"], () => require("./getFlow"));
exports.getFlowDestinationEndpointPorts = null;
exports.getFlowDestinationEndpointPortsOutput = null;
utilities.lazyLoad(exports, ["getFlowDestinationEndpointPorts", "getFlowDestinationEndpointPortsOutput"], () => require("./getFlowDestinationEndpointPorts"));
exports.getFlowDestinationEndpoints = null;
exports.getFlowDestinationEndpointsOutput = null;
utilities.lazyLoad(exports, ["getFlowDestinationEndpoints", "getFlowDestinationEndpointsOutput"], () => require("./getFlowDestinationEndpoints"));
exports.getFlowSourceAddresses = null;
exports.getFlowSourceAddressesOutput = null;
utilities.lazyLoad(exports, ["getFlowSourceAddresses", "getFlowSourceAddressesOutput"], () => require("./getFlowSourceAddresses"));
exports.getFlowStreamConnectionString = null;
exports.getFlowStreamConnectionStringOutput = null;
utilities.lazyLoad(exports, ["getFlowStreamConnectionString", "getFlowStreamConnectionStringOutput"], () => require("./getFlowStreamConnectionString"));
exports.getPipeline = null;
exports.getPipelineOutput = null;
utilities.lazyLoad(exports, ["getPipeline", "getPipelineOutput"], () => require("./getPipeline"));
exports.listAzureDataTransferApprovedSchemas = null;
exports.listAzureDataTransferApprovedSchemasOutput = null;
utilities.lazyLoad(exports, ["listAzureDataTransferApprovedSchemas", "listAzureDataTransferApprovedSchemasOutput"], () => require("./listAzureDataTransferApprovedSchemas"));
exports.listListPendingConnection = null;
exports.listListPendingConnectionOutput = null;
utilities.lazyLoad(exports, ["listListPendingConnection", "listListPendingConnectionOutput"], () => require("./listListPendingConnection"));
exports.listListPendingFlow = null;
exports.listListPendingFlowOutput = null;
utilities.lazyLoad(exports, ["listListPendingFlow", "listListPendingFlowOutput"], () => require("./listListPendingFlow"));
exports.listListSchema = null;
exports.listListSchemaOutput = null;
utilities.lazyLoad(exports, ["listListSchema", "listListSchemaOutput"], () => require("./listListSchema"));
exports.Pipeline = null;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));
// Export enums:
__exportStar(require("../types/enums/azuredatatransfer"), exports);
// Export sub-modules:
const v20231011preview = require("./v20231011preview");
exports.v20231011preview = v20231011preview;
const v20240125 = require("./v20240125");
exports.v20240125 = v20240125;
const v20240507 = require("./v20240507");
exports.v20240507 = v20240507;
const v20240911 = require("./v20240911");
exports.v20240911 = v20240911;
const v20240927 = require("./v20240927");
exports.v20240927 = v20240927;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:azuredatatransfer:Connection":
                return new exports.Connection(name, undefined, { urn });
            case "azure-native:azuredatatransfer:Flow":
                return new exports.Flow(name, undefined, { urn });
            case "azure-native:azuredatatransfer:Pipeline":
                return new exports.Pipeline(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "azuredatatransfer", _module);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9henVyZWRhdGF0cmFuc2Zlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0VBQXNFO0FBQ3RFLGlGQUFpRjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFakYseUNBQXlDO0FBQ3pDLDBDQUEwQztBQUs3QixRQUFBLFVBQVUsR0FBNkMsSUFBVyxDQUFDO0FBQ2hGLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFJOUQsUUFBQSxJQUFJLEdBQWlDLElBQVcsQ0FBQztBQUM5RCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBR2xELFFBQUEsYUFBYSxHQUFtRCxJQUFXLENBQUM7QUFDNUUsUUFBQSxtQkFBbUIsR0FBeUQsSUFBVyxDQUFDO0FBQ3JHLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFDLHFCQUFxQixDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztBQUcxRixRQUFBLE9BQU8sR0FBdUMsSUFBVyxDQUFDO0FBQzFELFFBQUEsYUFBYSxHQUE2QyxJQUFXLENBQUM7QUFDbkYsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUMsZUFBZSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFHeEUsUUFBQSwrQkFBK0IsR0FBdUYsSUFBVyxDQUFDO0FBQ2xJLFFBQUEscUNBQXFDLEdBQTZGLElBQVcsQ0FBQztBQUMzSixTQUFTLENBQUMsUUFBUSxDQUFD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