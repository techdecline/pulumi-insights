import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Pool resource
 * Azure REST API version: 2023-07-01-preview. Prior API version in Azure Native 1.x: 2023-03-01-preview.
 */
export declare class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pool;
    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Pool;
    /**
     * List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For ElasticSAN there can be many.
     */
    readonly assignments: pulumi.Output<outputs.containerstorage.AssignmentResponse[] | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.
     */
    readonly poolType: pulumi.Output<outputs.containerstorage.PoolTypeResponse>;
    /**
     * The status of the last operation.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * ReclaimPolicy defines what happens to the backend storage when StoragePool is deleted
     */
    readonly reclaimPolicy: pulumi.Output<string | undefined>;
    /**
     * Resources represent the resources the pool should have.
     */
    readonly resources: pulumi.Output<outputs.containerstorage.ResourcesResponse | undefined>;
    /**
     * The operational status of the resource
     */
    readonly status: pulumi.Output<outputs.containerstorage.ResourceOperationalStatusResponse>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.containerstorage.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * List of availability zones that resources can be created in.
     */
    readonly zones: pulumi.Output<string[] | undefined>;
    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    /**
     * List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For ElasticSAN there can be many.
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.containerstorage.AssignmentArgs>[]>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Pool Object
     */
    poolName?: pulumi.Input<string>;
    /**
     * Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.
     */
    poolType: pulumi.Input<inputs.containerstorage.PoolTypeArgs>;
    /**
     * ReclaimPolicy defines what happens to the backend storage when StoragePool is deleted
     */
    reclaimPolicy?: pulumi.Input<string | enums.containerstorage.ReclaimPolicy>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resources represent the resources the pool should have.
     */
    resources?: pulumi.Input<inputs.containerstorage.ResourcesArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * List of availability zones that resources can be created in.
     */
    zones?: pulumi.Input<pulumi.Input<string | enums.containerstorage.Zone>[]>;
}
