import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Describes a license profile in a hybrid machine.
 */
export declare class LicenseProfile extends pulumi.CustomResource {
    /**
     * Get an existing LicenseProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LicenseProfile;
    /**
     * Returns true if the given object is an instance of LicenseProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LicenseProfile;
    /**
     * The resource id of the license.
     */
    readonly assignedLicense: pulumi.Output<string | undefined>;
    /**
     * The guid id of the license.
     */
    readonly assignedLicenseImmutableId: pulumi.Output<string>;
    /**
     * Indicates the eligibility state of Esu.
     */
    readonly esuEligibility: pulumi.Output<string>;
    /**
     * Indicates whether there is an ESU Key currently active for the machine.
     */
    readonly esuKeyState: pulumi.Output<string>;
    /**
     * The list of ESU keys.
     */
    readonly esuKeys: pulumi.Output<outputs.hybridcompute.v20230620preview.EsuKeyResponse[]>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The provisioning state, which only appears in the response.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * The type of the Esu servers.
     */
    readonly serverType: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.hybridcompute.v20230620preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a LicenseProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseProfileArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LicenseProfile resource.
 */
export interface LicenseProfileArgs {
    /**
     * The resource id of the license.
     */
    assignedLicense?: pulumi.Input<string>;
    /**
     * The name of the license profile.
     */
    licenseProfileName?: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the hybrid machine.
     */
    machineName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
