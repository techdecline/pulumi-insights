import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
export declare class KubernetesClusterFeature extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesClusterFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KubernetesClusterFeature;
    /**
     * Returns true if the given object is an instance of KubernetesClusterFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is KubernetesClusterFeature;
    /**
     * The lifecycle indicator of the feature.
     */
    readonly availabilityLifecycle: pulumi.Output<string>;
    /**
     * The detailed status of the feature.
     */
    readonly detailedStatus: pulumi.Output<string>;
    /**
     * The descriptive message for the detailed status of the feature.
     */
    readonly detailedStatusMessage: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The configured options for the feature.
     */
    readonly options: pulumi.Output<outputs.networkcloud.v20240601preview.StringKeyValuePairResponse[] | undefined>;
    /**
     * The provisioning state of the Kubernetes cluster feature.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * The indicator of if the feature is required or optional. Optional features may be deleted by the user, while required features are managed with the kubernetes cluster lifecycle.
     */
    readonly required: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.networkcloud.v20240601preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * The version of the feature.
     */
    readonly version: pulumi.Output<string>;
    /**
     * Create a KubernetesClusterFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterFeatureArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a KubernetesClusterFeature resource.
 */
export interface KubernetesClusterFeatureArgs {
    /**
     * The name of the feature.
     */
    featureName?: pulumi.Input<string>;
    /**
     * The name of the Kubernetes cluster.
     */
    kubernetesClusterName: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The configured options for the feature.
     */
    options?: pulumi.Input<pulumi.Input<inputs.networkcloud.v20240601preview.StringKeyValuePairArgs>[]>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
