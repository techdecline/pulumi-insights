import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Concrete tracked resource types can be created by aliasing this type using a specific property type.
 */
export declare class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pool;
    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Pool;
    /**
     * Defines how the machine will be handled once it executed a job.
     */
    readonly agentProfile: pulumi.Output<outputs.devopsinfrastructure.v20240326preview.StatefulResponse | outputs.devopsinfrastructure.v20240326preview.StatelessAgentProfileResponse>;
    /**
     * The resource id of the DevCenter Project the pool belongs to.
     */
    readonly devCenterProjectResourceId: pulumi.Output<string>;
    /**
     * Defines the type of fabric the agent will run on.
     */
    readonly fabricProfile: pulumi.Output<outputs.devopsinfrastructure.v20240326preview.VmssFabricProfileResponse>;
    /**
     * The managed service identities assigned to this resource.
     */
    readonly identity: pulumi.Output<outputs.devopsinfrastructure.v20240326preview.ManagedServiceIdentityResponse | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * Defines how many resources can there be created at any given time.
     */
    readonly maximumConcurrency: pulumi.Output<number>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Defines the organization in which the pool will be used.
     */
    readonly organizationProfile: pulumi.Output<outputs.devopsinfrastructure.v20240326preview.AzureDevOpsOrganizationProfileResponse | outputs.devopsinfrastructure.v20240326preview.GitHubOrganizationProfileResponse>;
    /**
     * The status of the current operation.
     */
    readonly provisioningState: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.devopsinfrastructure.v20240326preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    /**
     * Defines how the machine will be handled once it executed a job.
     */
    agentProfile: pulumi.Input<inputs.devopsinfrastructure.v20240326preview.StatefulArgs | inputs.devopsinfrastructure.v20240326preview.StatelessAgentProfileArgs>;
    /**
     * The resource id of the DevCenter Project the pool belongs to.
     */
    devCenterProjectResourceId: pulumi.Input<string>;
    /**
     * Defines the type of fabric the agent will run on.
     */
    fabricProfile: pulumi.Input<inputs.devopsinfrastructure.v20240326preview.VmssFabricProfileArgs>;
    /**
     * The managed service identities assigned to this resource.
     */
    identity?: pulumi.Input<inputs.devopsinfrastructure.v20240326preview.ManagedServiceIdentityArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Defines how many resources can there be created at any given time.
     */
    maximumConcurrency: pulumi.Input<number>;
    /**
     * Defines the organization in which the pool will be used.
     */
    organizationProfile: pulumi.Input<inputs.devopsinfrastructure.v20240326preview.AzureDevOpsOrganizationProfileArgs | inputs.devopsinfrastructure.v20240326preview.GitHubOrganizationProfileArgs>;
    /**
     * Name of the pool. It needs to be globally unique.
     */
    poolName?: pulumi.Input<string>;
    /**
     * The status of the current operation.
     */
    provisioningState?: pulumi.Input<string | enums.devopsinfrastructure.v20240326preview.ProvisioningState>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
