import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Metadata resource definition.
 */
export declare class Metadata extends pulumi.CustomResource {
    /**
     * Get an existing Metadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Metadata;
    /**
     * Returns true if the given object is an instance of Metadata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Metadata;
    /**
     * The creator of the content item.
     */
    readonly author: pulumi.Output<outputs.securityinsights.v20230901preview.MetadataAuthorResponse | undefined>;
    /**
     * Categories for the solution content item
     */
    readonly categories: pulumi.Output<outputs.securityinsights.v20230901preview.MetadataCategoriesResponse | undefined>;
    /**
     * Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
     */
    readonly contentId: pulumi.Output<string | undefined>;
    /**
     * Schema version of the content. Can be used to distinguish between different flow based on the schema version
     */
    readonly contentSchemaVersion: pulumi.Output<string | undefined>;
    /**
     * The custom version of the content. A optional free text
     */
    readonly customVersion: pulumi.Output<string | undefined>;
    /**
     * Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
     */
    readonly dependencies: pulumi.Output<outputs.securityinsights.v20230901preview.MetadataDependenciesResponse | undefined>;
    /**
     * Etag of the azure resource
     */
    readonly etag: pulumi.Output<string | undefined>;
    /**
     * first publish date solution content item
     */
    readonly firstPublishDate: pulumi.Output<string | undefined>;
    /**
     * the icon identifier. this id can later be fetched from the solution template
     */
    readonly icon: pulumi.Output<string | undefined>;
    /**
     * The kind of content the metadata is for.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * last publish date for the solution content item
     */
    readonly lastPublishDate: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
     */
    readonly parentId: pulumi.Output<string>;
    /**
     * preview image file names. These will be taken from the solution artifacts
     */
    readonly previewImages: pulumi.Output<string[] | undefined>;
    /**
     * preview image file names. These will be taken from the solution artifacts. used for dark theme support
     */
    readonly previewImagesDark: pulumi.Output<string[] | undefined>;
    /**
     * Providers for the solution content item
     */
    readonly providers: pulumi.Output<string[] | undefined>;
    /**
     * Source of the content.  This is where/how it was created.
     */
    readonly source: pulumi.Output<outputs.securityinsights.v20230901preview.MetadataSourceResponse | undefined>;
    /**
     * Support information for the metadata - type, name, contact information
     */
    readonly support: pulumi.Output<outputs.securityinsights.v20230901preview.MetadataSupportResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.securityinsights.v20230901preview.SystemDataResponse>;
    /**
     * the tactics the resource covers
     */
    readonly threatAnalysisTactics: pulumi.Output<string[] | undefined>;
    /**
     * the techniques the resource covers, these have to be aligned with the tactics being used
     */
    readonly threatAnalysisTechniques: pulumi.Output<string[] | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
     */
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a Metadata resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Metadata resource.
 */
export interface MetadataArgs {
    /**
     * The creator of the content item.
     */
    author?: pulumi.Input<inputs.securityinsights.v20230901preview.MetadataAuthorArgs>;
    /**
     * Categories for the solution content item
     */
    categories?: pulumi.Input<inputs.securityinsights.v20230901preview.MetadataCategoriesArgs>;
    /**
     * Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
     */
    contentId?: pulumi.Input<string>;
    /**
     * Schema version of the content. Can be used to distinguish between different flow based on the schema version
     */
    contentSchemaVersion?: pulumi.Input<string>;
    /**
     * The custom version of the content. A optional free text
     */
    customVersion?: pulumi.Input<string>;
    /**
     * Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
     */
    dependencies?: pulumi.Input<inputs.securityinsights.v20230901preview.MetadataDependenciesArgs>;
    /**
     * first publish date solution content item
     */
    firstPublishDate?: pulumi.Input<string>;
    /**
     * the icon identifier. this id can later be fetched from the solution template
     */
    icon?: pulumi.Input<string>;
    /**
     * The kind of content the metadata is for.
     */
    kind: pulumi.Input<string>;
    /**
     * last publish date for the solution content item
     */
    lastPublishDate?: pulumi.Input<string>;
    /**
     * The Metadata name.
     */
    metadataName?: pulumi.Input<string>;
    /**
     * Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
     */
    parentId: pulumi.Input<string>;
    /**
     * preview image file names. These will be taken from the solution artifacts
     */
    previewImages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * preview image file names. These will be taken from the solution artifacts. used for dark theme support
     */
    previewImagesDark?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Providers for the solution content item
     */
    providers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Source of the content.  This is where/how it was created.
     */
    source?: pulumi.Input<inputs.securityinsights.v20230901preview.MetadataSourceArgs>;
    /**
     * Support information for the metadata - type, name, contact information
     */
    support?: pulumi.Input<inputs.securityinsights.v20230901preview.MetadataSupportArgs>;
    /**
     * the tactics the resource covers
     */
    threatAnalysisTactics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the techniques the resource covers, these have to be aligned with the tactics being used
     */
    threatAnalysisTechniques?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
     */
    version?: pulumi.Input<string>;
    /**
     * The name of the workspace.
     */
    workspaceName: pulumi.Input<string>;
}
