import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Threat intelligence information object.
 */
export declare class ThreatIntelligenceIndicator extends pulumi.CustomResource {
    /**
     * Get an existing ThreatIntelligenceIndicator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ThreatIntelligenceIndicator;
    /**
     * Returns true if the given object is an instance of ThreatIntelligenceIndicator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ThreatIntelligenceIndicator;
    /**
     * Etag of the azure resource
     */
    readonly etag: pulumi.Output<string | undefined>;
    /**
     * The kind of the entity.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.securityinsights.v20231201preview.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a ThreatIntelligenceIndicator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThreatIntelligenceIndicatorArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ThreatIntelligenceIndicator resource.
 */
export interface ThreatIntelligenceIndicatorArgs {
    /**
     * Confidence of threat intelligence entity
     */
    confidence?: pulumi.Input<number>;
    /**
     * Created by
     */
    created?: pulumi.Input<string>;
    /**
     * Created by reference of threat intelligence entity
     */
    createdByRef?: pulumi.Input<string>;
    /**
     * Is threat intelligence entity defanged
     */
    defanged?: pulumi.Input<boolean>;
    /**
     * Description of a threat intelligence entity
     */
    description?: pulumi.Input<string>;
    /**
     * Display name of a threat intelligence entity
     */
    displayName?: pulumi.Input<string>;
    /**
     * Extensions map
     */
    extensions?: any;
    /**
     * External ID of threat intelligence entity
     */
    externalId?: pulumi.Input<string>;
    /**
     * External last updated time in UTC
     */
    externalLastUpdatedTimeUtc?: pulumi.Input<string>;
    /**
     * External References
     */
    externalReferences?: pulumi.Input<pulumi.Input<inputs.securityinsights.v20231201preview.ThreatIntelligenceExternalReferenceArgs>[]>;
    /**
     * Granular Markings
     */
    granularMarkings?: pulumi.Input<pulumi.Input<inputs.securityinsights.v20231201preview.ThreatIntelligenceGranularMarkingModelArgs>[]>;
    /**
     * Indicator types of threat intelligence entities
     */
    indicatorTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kill chain phases
     */
    killChainPhases?: pulumi.Input<pulumi.Input<inputs.securityinsights.v20231201preview.ThreatIntelligenceKillChainPhaseArgs>[]>;
    /**
     * The kind of the threat intelligence entity
     * Expected value is 'indicator'.
     */
    kind: pulumi.Input<"indicator">;
    /**
     * Labels  of threat intelligence entity
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Language of threat intelligence entity
     */
    language?: pulumi.Input<string>;
    /**
     * Last updated time in UTC
     */
    lastUpdatedTimeUtc?: pulumi.Input<string>;
    /**
     * Modified by
     */
    modified?: pulumi.Input<string>;
    /**
     * Threat intelligence indicator name field.
     */
    name?: pulumi.Input<string>;
    /**
     * Threat intelligence entity object marking references
     */
    objectMarkingRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Parsed patterns
     */
    parsedPattern?: pulumi.Input<pulumi.Input<inputs.securityinsights.v20231201preview.ThreatIntelligenceParsedPatternArgs>[]>;
    /**
     * Pattern of a threat intelligence entity
     */
    pattern?: pulumi.Input<string>;
    /**
     * Pattern type of a threat intelligence entity
     */
    patternType?: pulumi.Input<string>;
    /**
     * Pattern version of a threat intelligence entity
     */
    patternVersion?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Is threat intelligence entity revoked
     */
    revoked?: pulumi.Input<boolean>;
    /**
     * Source of a threat intelligence entity
     */
    source?: pulumi.Input<string>;
    /**
     * List of tags
     */
    threatIntelligenceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threat types
     */
    threatTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Valid from
     */
    validFrom?: pulumi.Input<string>;
    /**
     * Valid until
     */
    validUntil?: pulumi.Input<string>;
    /**
     * The name of the workspace.
     */
    workspaceName: pulumi.Input<string>;
}
