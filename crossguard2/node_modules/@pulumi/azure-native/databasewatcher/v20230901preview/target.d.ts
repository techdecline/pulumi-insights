import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Concrete proxy resource types can be created by aliasing this type using a specific property type.
 */
export declare class Target extends pulumi.CustomResource {
    /**
     * Get an existing Target resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Target;
    /**
     * Returns true if the given object is an instance of Target.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Target;
    /**
     * The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
     */
    readonly connectionServerName: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.databasewatcher.v20230901preview.SystemDataResponse>;
    /**
     * The type of authentication to use when connecting to a target.
     */
    readonly targetAuthenticationType: pulumi.Output<string>;
    /**
     * Discriminator property for TargetProperties.
     */
    readonly targetType: pulumi.Output<string>;
    /**
     * To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
     */
    readonly targetVault: pulumi.Output<outputs.databasewatcher.v20230901preview.VaultSecretResponse | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Target resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Target resource.
 */
export interface TargetArgs {
    /**
     * The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
     */
    connectionServerName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The type of authentication to use when connecting to a target.
     */
    targetAuthenticationType: pulumi.Input<string | enums.databasewatcher.v20230901preview.TargetAuthenticationType>;
    /**
     * The target resource name.
     */
    targetName?: pulumi.Input<string>;
    /**
     * Discriminator property for TargetProperties.
     */
    targetType: pulumi.Input<string>;
    /**
     * To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
     */
    targetVault?: pulumi.Input<inputs.databasewatcher.v20230901preview.VaultSecretArgs>;
    /**
     * The database watcher name.
     */
    watcherName: pulumi.Input<string>;
}
