import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Packet capture session resource.
 */
export declare class PacketCapture extends pulumi.CustomResource {
    /**
     * Get an existing PacketCapture resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PacketCapture;
    /**
     * Returns true if the given object is an instance of PacketCapture.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PacketCapture;
    /**
     * Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
     */
    readonly bytesToCapturePerPacket: pulumi.Output<number | undefined>;
    /**
     * The start time of the packet capture session.
     */
    readonly captureStartTime: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * List of network interfaces to capture on.
     */
    readonly networkInterfaces: pulumi.Output<string[] | undefined>;
    /**
     * The list of output files of a packet capture session.
     */
    readonly outputFiles: pulumi.Output<string[]>;
    /**
     * The provisioning state of the packet capture session resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * The reason the current packet capture session state.
     */
    readonly reason: pulumi.Output<string>;
    /**
     * The status of the packet capture session.
     */
    readonly status: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.mobilenetwork.v20230901.SystemDataResponse>;
    /**
     * Maximum duration of the capture session in seconds.
     */
    readonly timeLimitInSeconds: pulumi.Output<number | undefined>;
    /**
     * Maximum size of the capture output.
     */
    readonly totalBytesPerSession: pulumi.Output<number | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a PacketCapture resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PacketCaptureArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PacketCapture resource.
 */
export interface PacketCaptureArgs {
    /**
     * Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
     */
    bytesToCapturePerPacket?: pulumi.Input<number>;
    /**
     * List of network interfaces to capture on.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the packet capture session.
     */
    packetCaptureName?: pulumi.Input<string>;
    /**
     * The name of the packet core control plane.
     */
    packetCoreControlPlaneName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Maximum duration of the capture session in seconds.
     */
    timeLimitInSeconds?: pulumi.Input<number>;
    /**
     * Maximum size of the capture output.
     */
    totalBytesPerSession?: pulumi.Input<number>;
}
