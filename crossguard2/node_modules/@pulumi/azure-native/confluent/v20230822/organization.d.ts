import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Organization resource.
 */
export declare class Organization extends pulumi.CustomResource {
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Organization;
    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Organization;
    /**
     * The creation time of the resource.
     */
    readonly createdTime: pulumi.Output<string>;
    /**
     * Location of Organization resource
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Confluent offer detail
     */
    readonly offerDetail: pulumi.Output<outputs.confluent.v20230822.OfferDetailResponse>;
    /**
     * Id of the Confluent organization.
     */
    readonly organizationId: pulumi.Output<string>;
    /**
     * Provision states for confluent RP
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * SSO url for the Confluent organization.
     */
    readonly ssoUrl: pulumi.Output<string>;
    /**
     * Metadata pertaining to creation and last modification of the resource
     */
    readonly systemData: pulumi.Output<outputs.confluent.v20230822.SystemDataResponse>;
    /**
     * Organization resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Subscriber detail
     */
    readonly userDetail: pulumi.Output<outputs.confluent.v20230822.UserDetailResponse>;
    /**
     * Create a Organization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Organization resource.
 */
export interface OrganizationArgs {
    /**
     * Link an existing Confluent organization
     */
    linkOrganization?: pulumi.Input<inputs.confluent.v20230822.LinkOrganizationArgs>;
    /**
     * Location of Organization resource
     */
    location?: pulumi.Input<string>;
    /**
     * Confluent offer detail
     */
    offerDetail: pulumi.Input<inputs.confluent.v20230822.OfferDetailArgs>;
    /**
     * Organization resource name
     */
    organizationName?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Organization resource tags
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Subscriber detail
     */
    userDetail: pulumi.Input<inputs.confluent.v20230822.UserDetailArgs>;
}
