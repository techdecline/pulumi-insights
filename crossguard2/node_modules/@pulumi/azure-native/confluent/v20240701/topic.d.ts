import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Details of topic record
 */
export declare class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Topic;
    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Topic;
    /**
     * Config Specification of the topic
     */
    readonly configs: pulumi.Output<outputs.confluent.v20240701.TopicsRelatedLinkResponse | undefined>;
    /**
     * Input Config Specification of the topic
     */
    readonly inputConfigs: pulumi.Output<outputs.confluent.v20240701.TopicsInputConfigResponse[] | undefined>;
    /**
     * Type of topic
     */
    readonly kind: pulumi.Output<string | undefined>;
    /**
     * Metadata of the record
     */
    readonly metadata: pulumi.Output<outputs.confluent.v20240701.TopicMetadataEntityResponse | undefined>;
    /**
     * Display name of the topic
     */
    readonly name: pulumi.Output<string>;
    /**
     * Partition Specification of the topic
     */
    readonly partitions: pulumi.Output<outputs.confluent.v20240701.TopicsRelatedLinkResponse | undefined>;
    /**
     * Partition count of the topic
     */
    readonly partitionsCount: pulumi.Output<string | undefined>;
    /**
     * Partition Reassignment Specification of the topic
     */
    readonly partitionsReassignments: pulumi.Output<outputs.confluent.v20240701.TopicsRelatedLinkResponse | undefined>;
    /**
     * Replication factor of the topic
     */
    readonly replicationFactor: pulumi.Output<string | undefined>;
    /**
     * Topic Id returned by Confluent
     */
    readonly topicId: pulumi.Output<string | undefined>;
    /**
     * The type of the resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * Confluent kafka or schema registry cluster id
     */
    clusterId: pulumi.Input<string>;
    /**
     * Config Specification of the topic
     */
    configs?: pulumi.Input<inputs.confluent.v20240701.TopicsRelatedLinkArgs>;
    /**
     * Confluent environment id
     */
    environmentId: pulumi.Input<string>;
    /**
     * Input Config Specification of the topic
     */
    inputConfigs?: pulumi.Input<pulumi.Input<inputs.confluent.v20240701.TopicsInputConfigArgs>[]>;
    /**
     * Type of topic
     */
    kind?: pulumi.Input<string>;
    /**
     * Metadata of the record
     */
    metadata?: pulumi.Input<inputs.confluent.v20240701.TopicMetadataEntityArgs>;
    /**
     * Organization resource name
     */
    organizationName: pulumi.Input<string>;
    /**
     * Partition Specification of the topic
     */
    partitions?: pulumi.Input<inputs.confluent.v20240701.TopicsRelatedLinkArgs>;
    /**
     * Partition count of the topic
     */
    partitionsCount?: pulumi.Input<string>;
    /**
     * Partition Reassignment Specification of the topic
     */
    partitionsReassignments?: pulumi.Input<inputs.confluent.v20240701.TopicsRelatedLinkArgs>;
    /**
     * Replication factor of the topic
     */
    replicationFactor?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Topic Id returned by Confluent
     */
    topicId?: pulumi.Input<string>;
    /**
     * Confluent kafka or schema registry topic name
     */
    topicName?: pulumi.Input<string>;
}
