import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Details of cluster record
 */
export declare class OrganizationClusterById extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationClusterById resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OrganizationClusterById;
    /**
     * Returns true if the given object is an instance of OrganizationClusterById.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is OrganizationClusterById;
    /**
     * Type of cluster
     */
    readonly kind: pulumi.Output<string | undefined>;
    /**
     * Metadata of the record
     */
    readonly metadata: pulumi.Output<outputs.confluent.v20240701.SCMetadataEntityResponse | undefined>;
    /**
     * Display name of the cluster
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * Specification of the cluster
     */
    readonly spec: pulumi.Output<outputs.confluent.v20240701.SCClusterSpecEntityResponse | undefined>;
    /**
     * Specification of the cluster status
     */
    readonly status: pulumi.Output<outputs.confluent.v20240701.ClusterStatusEntityResponse | undefined>;
    /**
     * Type of the resource
     */
    readonly type: pulumi.Output<string | undefined>;
    /**
     * Create a OrganizationClusterById resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationClusterByIdArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a OrganizationClusterById resource.
 */
export interface OrganizationClusterByIdArgs {
    /**
     * Confluent kafka or schema registry cluster id
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Confluent environment id
     */
    environmentId: pulumi.Input<string>;
    /**
     * Id of the cluster
     */
    id?: pulumi.Input<string>;
    /**
     * Type of cluster
     */
    kind?: pulumi.Input<string>;
    /**
     * Metadata of the record
     */
    metadata?: pulumi.Input<inputs.confluent.v20240701.SCMetadataEntityArgs>;
    /**
     * Display name of the cluster
     */
    name?: pulumi.Input<string>;
    /**
     * Organization resource name
     */
    organizationName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specification of the cluster
     */
    spec?: pulumi.Input<inputs.confluent.v20240701.SCClusterSpecEntityArgs>;
    /**
     * Specification of the cluster status
     */
    status?: pulumi.Input<inputs.confluent.v20240701.ClusterStatusEntityArgs>;
    /**
     * Type of the resource
     */
    type?: pulumi.Input<string>;
}
