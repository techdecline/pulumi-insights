import * as pulumi from "@pulumi/pulumi";
/**
 * The key-value resource along with all resource properties.
 */
export declare class KeyValue extends pulumi.CustomResource {
    /**
     * Get an existing KeyValue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KeyValue;
    /**
     * Returns true if the given object is an instance of KeyValue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is KeyValue;
    /**
     * The content type of the key-value's value.
     * Providing a proper content-type can enable transformations of values when they are retrieved by applications.
     */
    readonly contentType: pulumi.Output<string | undefined>;
    /**
     * An ETag indicating the state of a key-value within a configuration store.
     */
    readonly eTag: pulumi.Output<string>;
    /**
     * The primary identifier of a key-value.
     * The key is used in unison with the label to uniquely identify a key-value.
     */
    readonly key: pulumi.Output<string>;
    /**
     * A value used to group key-values.
     * The label is used in unison with the key to uniquely identify a key-value.
     */
    readonly label: pulumi.Output<string>;
    /**
     * The last time a modifying operation was performed on the given key-value.
     */
    readonly lastModified: pulumi.Output<string>;
    /**
     * A value indicating whether the key-value is locked.
     * A locked key-value may not be modified until it is unlocked.
     */
    readonly locked: pulumi.Output<boolean>;
    /**
     * The name of the resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * A dictionary of tags that can help identify what a key-value may be applicable for.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * The value of the key-value.
     */
    readonly value: pulumi.Output<string | undefined>;
    /**
     * Create a KeyValue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyValueArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a KeyValue resource.
 */
export interface KeyValueArgs {
    /**
     * The name of the configuration store.
     */
    configStoreName: pulumi.Input<string>;
    /**
     * The content type of the key-value's value.
     * Providing a proper content-type can enable transformations of values when they are retrieved by applications.
     */
    contentType?: pulumi.Input<string>;
    /**
     * Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     */
    keyValueName?: pulumi.Input<string>;
    /**
     * The name of the resource group to which the container registry belongs.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A dictionary of tags that can help identify what a key-value may be applicable for.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The value of the key-value.
     */
    value?: pulumi.Input<string>;
}
