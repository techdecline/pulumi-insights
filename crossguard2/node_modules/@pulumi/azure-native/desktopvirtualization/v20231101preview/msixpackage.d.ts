import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Schema for MSIX Package properties.
 */
export declare class MSIXPackage extends pulumi.CustomResource {
    /**
     * Get an existing MSIXPackage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MSIXPackage;
    /**
     * Returns true if the given object is an instance of MSIXPackage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MSIXPackage;
    /**
     * User friendly Name to be displayed in the portal.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * VHD/CIM image path on Network Share.
     */
    readonly imagePath: pulumi.Output<string | undefined>;
    /**
     * Make this version of the package the active one across the hostpool.
     */
    readonly isActive: pulumi.Output<boolean | undefined>;
    /**
     * Specifies how to register Package in feed.
     */
    readonly isRegularRegistration: pulumi.Output<boolean | undefined>;
    /**
     * Date Package was last updated, found in the appxmanifest.xml.
     */
    readonly lastUpdated: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * List of package applications.
     */
    readonly packageApplications: pulumi.Output<outputs.desktopvirtualization.v20231101preview.MsixPackageApplicationsResponse[] | undefined>;
    /**
     * List of package dependencies.
     */
    readonly packageDependencies: pulumi.Output<outputs.desktopvirtualization.v20231101preview.MsixPackageDependenciesResponse[] | undefined>;
    /**
     * Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
     */
    readonly packageFamilyName: pulumi.Output<string | undefined>;
    /**
     * Package Name from appxmanifest.xml.
     */
    readonly packageName: pulumi.Output<string | undefined>;
    /**
     * Relative Path to the package inside the image.
     */
    readonly packageRelativePath: pulumi.Output<string | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.desktopvirtualization.v20231101preview.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Package Version found in the appxmanifest.xml.
     */
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a MSIXPackage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MSIXPackageArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a MSIXPackage resource.
 */
export interface MSIXPackageArgs {
    /**
     * User friendly Name to be displayed in the portal.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The name of the host pool within the specified resource group
     */
    hostPoolName: pulumi.Input<string>;
    /**
     * VHD/CIM image path on Network Share.
     */
    imagePath?: pulumi.Input<string>;
    /**
     * Make this version of the package the active one across the hostpool.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Specifies how to register Package in feed.
     */
    isRegularRegistration?: pulumi.Input<boolean>;
    /**
     * Date Package was last updated, found in the appxmanifest.xml.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * The version specific package full name of the MSIX package within specified hostpool
     */
    msixPackageFullName?: pulumi.Input<string>;
    /**
     * List of package applications.
     */
    packageApplications?: pulumi.Input<pulumi.Input<inputs.desktopvirtualization.v20231101preview.MsixPackageApplicationsArgs>[]>;
    /**
     * List of package dependencies.
     */
    packageDependencies?: pulumi.Input<pulumi.Input<inputs.desktopvirtualization.v20231101preview.MsixPackageDependenciesArgs>[]>;
    /**
     * Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
     */
    packageFamilyName?: pulumi.Input<string>;
    /**
     * Package Name from appxmanifest.xml.
     */
    packageName?: pulumi.Input<string>;
    /**
     * Relative Path to the package inside the image.
     */
    packageRelativePath?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Package Version found in the appxmanifest.xml.
     */
    version?: pulumi.Input<string>;
}
