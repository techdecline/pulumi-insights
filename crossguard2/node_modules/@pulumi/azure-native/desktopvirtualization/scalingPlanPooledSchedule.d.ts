import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Represents a ScalingPlanPooledSchedule definition.
 * Azure REST API version: 2022-09-09. Prior API version in Azure Native 1.x: 2022-04-01-preview.
 *
 * Other available API versions: 2022-10-14-preview, 2023-07-07-preview, 2023-09-05, 2023-10-04-preview, 2023-11-01-preview, 2024-01-16-preview, 2024-03-06-preview, 2024-04-03, 2024-04-08-preview, 2024-08-08-preview.
 */
export declare class ScalingPlanPooledSchedule extends pulumi.CustomResource {
    /**
     * Get an existing ScalingPlanPooledSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ScalingPlanPooledSchedule;
    /**
     * Returns true if the given object is an instance of ScalingPlanPooledSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ScalingPlanPooledSchedule;
    /**
     * Set of days of the week on which this schedule is active.
     */
    readonly daysOfWeek: pulumi.Output<string[] | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Load balancing algorithm for off-peak period.
     */
    readonly offPeakLoadBalancingAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Starting time for off-peak period.
     */
    readonly offPeakStartTime: pulumi.Output<outputs.desktopvirtualization.TimeResponse | undefined>;
    /**
     * Load balancing algorithm for peak period.
     */
    readonly peakLoadBalancingAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Starting time for peak period.
     */
    readonly peakStartTime: pulumi.Output<outputs.desktopvirtualization.TimeResponse | undefined>;
    /**
     * Capacity threshold for ramp down period.
     */
    readonly rampDownCapacityThresholdPct: pulumi.Output<number | undefined>;
    /**
     * Should users be logged off forcefully from hosts.
     */
    readonly rampDownForceLogoffUsers: pulumi.Output<boolean | undefined>;
    /**
     * Load balancing algorithm for ramp down period.
     */
    readonly rampDownLoadBalancingAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Minimum host percentage for ramp down period.
     */
    readonly rampDownMinimumHostsPct: pulumi.Output<number | undefined>;
    /**
     * Notification message for users during ramp down period.
     */
    readonly rampDownNotificationMessage: pulumi.Output<string | undefined>;
    /**
     * Starting time for ramp down period.
     */
    readonly rampDownStartTime: pulumi.Output<outputs.desktopvirtualization.TimeResponse | undefined>;
    /**
     * Specifies when to stop hosts during ramp down period.
     */
    readonly rampDownStopHostsWhen: pulumi.Output<string | undefined>;
    /**
     * Number of minutes to wait to stop hosts during ramp down period.
     */
    readonly rampDownWaitTimeMinutes: pulumi.Output<number | undefined>;
    /**
     * Capacity threshold for ramp up period.
     */
    readonly rampUpCapacityThresholdPct: pulumi.Output<number | undefined>;
    /**
     * Load balancing algorithm for ramp up period.
     */
    readonly rampUpLoadBalancingAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Minimum host percentage for ramp up period.
     */
    readonly rampUpMinimumHostsPct: pulumi.Output<number | undefined>;
    /**
     * Starting time for ramp up period.
     */
    readonly rampUpStartTime: pulumi.Output<outputs.desktopvirtualization.TimeResponse | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.desktopvirtualization.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a ScalingPlanPooledSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScalingPlanPooledScheduleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ScalingPlanPooledSchedule resource.
 */
export interface ScalingPlanPooledScheduleArgs {
    /**
     * Set of days of the week on which this schedule is active.
     */
    daysOfWeek?: pulumi.Input<pulumi.Input<string | enums.desktopvirtualization.DayOfWeek>[]>;
    /**
     * Load balancing algorithm for off-peak period.
     */
    offPeakLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.SessionHostLoadBalancingAlgorithm>;
    /**
     * Starting time for off-peak period.
     */
    offPeakStartTime?: pulumi.Input<inputs.desktopvirtualization.TimeArgs>;
    /**
     * Load balancing algorithm for peak period.
     */
    peakLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.SessionHostLoadBalancingAlgorithm>;
    /**
     * Starting time for peak period.
     */
    peakStartTime?: pulumi.Input<inputs.desktopvirtualization.TimeArgs>;
    /**
     * Capacity threshold for ramp down period.
     */
    rampDownCapacityThresholdPct?: pulumi.Input<number>;
    /**
     * Should users be logged off forcefully from hosts.
     */
    rampDownForceLogoffUsers?: pulumi.Input<boolean>;
    /**
     * Load balancing algorithm for ramp down period.
     */
    rampDownLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.SessionHostLoadBalancingAlgorithm>;
    /**
     * Minimum host percentage for ramp down period.
     */
    rampDownMinimumHostsPct?: pulumi.Input<number>;
    /**
     * Notification message for users during ramp down period.
     */
    rampDownNotificationMessage?: pulumi.Input<string>;
    /**
     * Starting time for ramp down period.
     */
    rampDownStartTime?: pulumi.Input<inputs.desktopvirtualization.TimeArgs>;
    /**
     * Specifies when to stop hosts during ramp down period.
     */
    rampDownStopHostsWhen?: pulumi.Input<string | enums.desktopvirtualization.StopHostsWhen>;
    /**
     * Number of minutes to wait to stop hosts during ramp down period.
     */
    rampDownWaitTimeMinutes?: pulumi.Input<number>;
    /**
     * Capacity threshold for ramp up period.
     */
    rampUpCapacityThresholdPct?: pulumi.Input<number>;
    /**
     * Load balancing algorithm for ramp up period.
     */
    rampUpLoadBalancingAlgorithm?: pulumi.Input<string | enums.desktopvirtualization.SessionHostLoadBalancingAlgorithm>;
    /**
     * Minimum host percentage for ramp up period.
     */
    rampUpMinimumHostsPct?: pulumi.Input<number>;
    /**
     * Starting time for ramp up period.
     */
    rampUpStartTime?: pulumi.Input<inputs.desktopvirtualization.TimeArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the scaling plan.
     */
    scalingPlanName: pulumi.Input<string>;
    /**
     * The name of the ScalingPlanSchedule
     */
    scalingPlanScheduleName?: pulumi.Input<string>;
}
