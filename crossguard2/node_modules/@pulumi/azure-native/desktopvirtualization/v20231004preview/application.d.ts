import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Schema for Application properties.
 */
export declare class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application;
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Application;
    /**
     * Resource Type of Application.
     */
    readonly applicationType: pulumi.Output<string | undefined>;
    /**
     * Command Line Arguments for Application.
     */
    readonly commandLineArguments: pulumi.Output<string | undefined>;
    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
     */
    readonly commandLineSetting: pulumi.Output<string>;
    /**
     * Description of Application.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies a path for the executable file for the application.
     */
    readonly filePath: pulumi.Output<string | undefined>;
    /**
     * Friendly name of Application.
     */
    readonly friendlyName: pulumi.Output<string | undefined>;
    /**
     * the icon a 64 bit string as a byte array.
     */
    readonly iconContent: pulumi.Output<string>;
    /**
     * Hash of the icon.
     */
    readonly iconHash: pulumi.Output<string>;
    /**
     * Index of the icon.
     */
    readonly iconIndex: pulumi.Output<number | undefined>;
    /**
     * Path to icon.
     */
    readonly iconPath: pulumi.Output<string | undefined>;
    /**
     * Specifies the package application Id for MSIX applications
     */
    readonly msixPackageApplicationId: pulumi.Output<string | undefined>;
    /**
     * Specifies the package family name for MSIX applications
     */
    readonly msixPackageFamilyName: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * ObjectId of Application. (internal use)
     */
    readonly objectId: pulumi.Output<string>;
    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     */
    readonly showInPortal: pulumi.Output<boolean | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.desktopvirtualization.v20231004preview.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The name of the application group
     */
    applicationGroupName: pulumi.Input<string>;
    /**
     * The name of the application within the specified application group
     */
    applicationName?: pulumi.Input<string>;
    /**
     * Resource Type of Application.
     */
    applicationType?: pulumi.Input<string | enums.desktopvirtualization.v20231004preview.RemoteApplicationType>;
    /**
     * Command Line Arguments for Application.
     */
    commandLineArguments?: pulumi.Input<string>;
    /**
     * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
     */
    commandLineSetting: pulumi.Input<string | enums.desktopvirtualization.v20231004preview.CommandLineSetting>;
    /**
     * Description of Application.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies a path for the executable file for the application.
     */
    filePath?: pulumi.Input<string>;
    /**
     * Friendly name of Application.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Index of the icon.
     */
    iconIndex?: pulumi.Input<number>;
    /**
     * Path to icon.
     */
    iconPath?: pulumi.Input<string>;
    /**
     * Specifies the package application Id for MSIX applications
     */
    msixPackageApplicationId?: pulumi.Input<string>;
    /**
     * Specifies the package family name for MSIX applications
     */
    msixPackageFamilyName?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies whether to show the RemoteApp program in the RD Web Access server.
     */
    showInPortal?: pulumi.Input<boolean>;
}
