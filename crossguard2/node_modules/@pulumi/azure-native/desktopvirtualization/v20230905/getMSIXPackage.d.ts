import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Get a msixpackage.
 */
export declare function getMSIXPackage(args: GetMSIXPackageArgs, opts?: pulumi.InvokeOptions): Promise<GetMSIXPackageResult>;
export interface GetMSIXPackageArgs {
    /**
     * The name of the host pool within the specified resource group
     */
    hostPoolName: string;
    /**
     * The version specific package full name of the MSIX package within specified hostpool
     */
    msixPackageFullName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}
/**
 * Schema for MSIX Package properties.
 */
export interface GetMSIXPackageResult {
    /**
     * User friendly Name to be displayed in the portal.
     */
    readonly displayName?: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * VHD/CIM image path on Network Share.
     */
    readonly imagePath?: string;
    /**
     * Make this version of the package the active one across the hostpool.
     */
    readonly isActive?: boolean;
    /**
     * Specifies how to register Package in feed.
     */
    readonly isRegularRegistration?: boolean;
    /**
     * Date Package was last updated, found in the appxmanifest.xml.
     */
    readonly lastUpdated?: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * List of package applications.
     */
    readonly packageApplications?: outputs.desktopvirtualization.v20230905.MsixPackageApplicationsResponse[];
    /**
     * List of package dependencies.
     */
    readonly packageDependencies?: outputs.desktopvirtualization.v20230905.MsixPackageDependenciesResponse[];
    /**
     * Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
     */
    readonly packageFamilyName?: string;
    /**
     * Package Name from appxmanifest.xml.
     */
    readonly packageName?: string;
    /**
     * Relative Path to the package inside the image.
     */
    readonly packageRelativePath?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: outputs.desktopvirtualization.v20230905.SystemDataResponse;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
    /**
     * Package Version found in the appxmanifest.xml.
     */
    readonly version?: string;
}
/**
 * Get a msixpackage.
 */
export declare function getMSIXPackageOutput(args: GetMSIXPackageOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMSIXPackageResult>;
export interface GetMSIXPackageOutputArgs {
    /**
     * The name of the host pool within the specified resource group
     */
    hostPoolName: pulumi.Input<string>;
    /**
     * The version specific package full name of the MSIX package within specified hostpool
     */
    msixPackageFullName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
