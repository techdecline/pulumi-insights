import * as pulumi from "@pulumi/pulumi";
/**
 * Gateway hostname configuration details.
 */
export declare class GatewayHostnameConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing GatewayHostnameConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GatewayHostnameConfiguration;
    /**
     * Returns true if the given object is an instance of GatewayHostnameConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GatewayHostnameConfiguration;
    /**
     * Identifier of Certificate entity that will be used for TLS connection establishment
     */
    readonly certificateId: pulumi.Output<string | undefined>;
    /**
     * Hostname value. Supports valid domain name, partial or full wildcard
     */
    readonly hostname: pulumi.Output<string | undefined>;
    /**
     * Specifies if HTTP/2.0 is supported
     */
    readonly http2Enabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Determines whether gateway requests client certificate
     */
    readonly negotiateClientCertificate: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if TLS 1.0 is supported
     */
    readonly tls10Enabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if TLS 1.1 is supported
     */
    readonly tls11Enabled: pulumi.Output<boolean | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a GatewayHostnameConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayHostnameConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a GatewayHostnameConfiguration resource.
 */
export interface GatewayHostnameConfigurationArgs {
    /**
     * Identifier of Certificate entity that will be used for TLS connection establishment
     */
    certificateId?: pulumi.Input<string>;
    /**
     * Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     */
    gatewayId: pulumi.Input<string>;
    /**
     * Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     */
    hcId?: pulumi.Input<string>;
    /**
     * Hostname value. Supports valid domain name, partial or full wildcard
     */
    hostname?: pulumi.Input<string>;
    /**
     * Specifies if HTTP/2.0 is supported
     */
    http2Enabled?: pulumi.Input<boolean>;
    /**
     * Determines whether gateway requests client certificate
     */
    negotiateClientCertificate?: pulumi.Input<boolean>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the API Management service.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Specifies if TLS 1.0 is supported
     */
    tls10Enabled?: pulumi.Input<boolean>;
    /**
     * Specifies if TLS 1.1 is supported
     */
    tls11Enabled?: pulumi.Input<boolean>;
}
