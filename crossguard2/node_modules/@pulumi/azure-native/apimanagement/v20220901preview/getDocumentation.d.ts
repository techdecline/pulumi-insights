import * as pulumi from "@pulumi/pulumi";
/**
 * Gets the details of the Documentation specified by its identifier.
 */
export declare function getDocumentation(args: GetDocumentationArgs, opts?: pulumi.InvokeOptions): Promise<GetDocumentationResult>;
export interface GetDocumentationArgs {
    /**
     * Documentation identifier. Must be unique in the current API Management service instance.
     */
    documentationId: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
    /**
     * The name of the API Management service.
     */
    serviceName: string;
}
/**
 * Markdown documentation details.
 */
export interface GetDocumentationResult {
    /**
     * Markdown documentation content.
     */
    readonly content?: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * documentation title.
     */
    readonly title?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
/**
 * Gets the details of the Documentation specified by its identifier.
 */
export declare function getDocumentationOutput(args: GetDocumentationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDocumentationResult>;
export interface GetDocumentationOutputArgs {
    /**
     * Documentation identifier. Must be unique in the current API Management service instance.
     */
    documentationId: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the API Management service.
     */
    serviceName: pulumi.Input<string>;
}
