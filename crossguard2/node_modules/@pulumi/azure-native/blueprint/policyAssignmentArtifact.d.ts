import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Blueprint artifact that applies a Policy assignment.
 * Azure REST API version: 2018-11-01-preview. Prior API version in Azure Native 1.x: 2018-11-01-preview.
 */
export declare class PolicyAssignmentArtifact extends pulumi.CustomResource {
    /**
     * Get an existing PolicyAssignmentArtifact resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PolicyAssignmentArtifact;
    /**
     * Returns true if the given object is an instance of PolicyAssignmentArtifact.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PolicyAssignmentArtifact;
    /**
     * Artifacts which need to be deployed before the specified artifact.
     */
    readonly dependsOn: pulumi.Output<string[] | undefined>;
    /**
     * Multi-line explain this resource.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * One-liner string explain this resource.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Specifies the kind of blueprint artifact.
     * Expected value is 'policyAssignment'.
     */
    readonly kind: pulumi.Output<"policyAssignment">;
    /**
     * Name of this resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Parameter values for the policy definition.
     */
    readonly parameters: pulumi.Output<{
        [key: string]: outputs.blueprint.ParameterValueResponse;
    }>;
    /**
     * Azure resource ID of the policy definition.
     */
    readonly policyDefinitionId: pulumi.Output<string>;
    /**
     * Name of the resource group placeholder to which the policy will be assigned.
     */
    readonly resourceGroup: pulumi.Output<string | undefined>;
    /**
     * Type of this resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a PolicyAssignmentArtifact resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyAssignmentArtifactArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PolicyAssignmentArtifact resource.
 */
export interface PolicyAssignmentArtifactArgs {
    /**
     * Name of the blueprint artifact.
     */
    artifactName?: pulumi.Input<string>;
    /**
     * Name of the blueprint definition.
     */
    blueprintName: pulumi.Input<string>;
    /**
     * Artifacts which need to be deployed before the specified artifact.
     */
    dependsOn?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Multi-line explain this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * One-liner string explain this resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Specifies the kind of blueprint artifact.
     * Expected value is 'policyAssignment'.
     */
    kind: pulumi.Input<"policyAssignment">;
    /**
     * Parameter values for the policy definition.
     */
    parameters: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.blueprint.ParameterValueArgs>;
    }>;
    /**
     * Azure resource ID of the policy definition.
     */
    policyDefinitionId: pulumi.Input<string>;
    /**
     * Name of the resource group placeholder to which the policy will be assigned.
     */
    resourceGroup?: pulumi.Input<string>;
    /**
     * The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}').
     */
    resourceScope: pulumi.Input<string>;
}
