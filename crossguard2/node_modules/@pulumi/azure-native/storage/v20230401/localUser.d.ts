import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * The local user associated with the storage accounts.
 */
export declare class LocalUser extends pulumi.CustomResource {
    /**
     * Get an existing LocalUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LocalUser;
    /**
     * Returns true if the given object is an instance of LocalUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LocalUser;
    /**
     * Indicates whether shared key exists. Set it to false to remove existing shared key.
     */
    readonly hasSharedKey: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether ssh key exists. Set it to false to remove existing SSH key.
     */
    readonly hasSshKey: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether ssh password exists. Set it to false to remove existing SSH password.
     */
    readonly hasSshPassword: pulumi.Output<boolean | undefined>;
    /**
     * Optional, local user home directory.
     */
    readonly homeDirectory: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The permission scopes of the local user.
     */
    readonly permissionScopes: pulumi.Output<outputs.storage.v20230401.PermissionScopeResponse[] | undefined>;
    /**
     * A unique Security Identifier that is generated by the server.
     */
    readonly sid: pulumi.Output<string>;
    /**
     * Optional, local user ssh authorized keys for SFTP.
     */
    readonly sshAuthorizedKeys: pulumi.Output<outputs.storage.v20230401.SshPublicKeyResponse[] | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.storage.v20230401.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a LocalUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalUserArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LocalUser resource.
 */
export interface LocalUserArgs {
    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     */
    accountName: pulumi.Input<string>;
    /**
     * Indicates whether shared key exists. Set it to false to remove existing shared key.
     */
    hasSharedKey?: pulumi.Input<boolean>;
    /**
     * Indicates whether ssh key exists. Set it to false to remove existing SSH key.
     */
    hasSshKey?: pulumi.Input<boolean>;
    /**
     * Indicates whether ssh password exists. Set it to false to remove existing SSH password.
     */
    hasSshPassword?: pulumi.Input<boolean>;
    /**
     * Optional, local user home directory.
     */
    homeDirectory?: pulumi.Input<string>;
    /**
     * The permission scopes of the local user.
     */
    permissionScopes?: pulumi.Input<pulumi.Input<inputs.storage.v20230401.PermissionScopeArgs>[]>;
    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Optional, local user ssh authorized keys for SFTP.
     */
    sshAuthorizedKeys?: pulumi.Input<pulumi.Input<inputs.storage.v20230401.SshPublicKeyArgs>[]>;
    /**
     * The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
     */
    username?: pulumi.Input<string>;
}
