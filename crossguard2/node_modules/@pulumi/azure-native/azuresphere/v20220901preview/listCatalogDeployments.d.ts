import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Lists deployments for catalog.
 */
export declare function listCatalogDeployments(args: ListCatalogDeploymentsArgs, opts?: pulumi.InvokeOptions): Promise<ListCatalogDeploymentsResult>;
export interface ListCatalogDeploymentsArgs {
    /**
     * Name of catalog
     */
    catalogName: string;
    /**
     * Filter the result list using the given expression
     */
    filter?: string;
    /**
     * The maximum number of result items per page.
     */
    maxpagesize?: number;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
    /**
     * The number of result items to skip.
     */
    skip?: number;
    /**
     * The number of result items to return.
     */
    top?: number;
}
/**
 * The response of a Deployment list operation.
 */
export interface ListCatalogDeploymentsResult {
    /**
     * The link to the next page of items
     */
    readonly nextLink: string;
    /**
     * The Deployment items on this page
     */
    readonly value: outputs.azuresphere.v20220901preview.DeploymentResponse[];
}
/**
 * Lists deployments for catalog.
 */
export declare function listCatalogDeploymentsOutput(args: ListCatalogDeploymentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<ListCatalogDeploymentsResult>;
export interface ListCatalogDeploymentsOutputArgs {
    /**
     * Name of catalog
     */
    catalogName: pulumi.Input<string>;
    /**
     * Filter the result list using the given expression
     */
    filter?: pulumi.Input<string>;
    /**
     * The maximum number of result items per page.
     */
    maxpagesize?: pulumi.Input<number>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The number of result items to skip.
     */
    skip?: pulumi.Input<number>;
    /**
     * The number of result items to return.
     */
    top?: pulumi.Input<number>;
}
