import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Specifies information about the Shared Image Gallery that you want to create or update.
 */
export declare class Gallery extends pulumi.CustomResource {
    /**
     * Get an existing Gallery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Gallery;
    /**
     * Returns true if the given object is an instance of Gallery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Gallery;
    /**
     * The description of this Shared Image Gallery resource. This property is updatable.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Describes the gallery unique name.
     */
    readonly identifier: pulumi.Output<outputs.compute.v20220803.GalleryIdentifierResponse | undefined>;
    /**
     * Resource location
     */
    readonly location: pulumi.Output<string>;
    /**
     * Resource name
     */
    readonly name: pulumi.Output<string>;
    /**
     * The provisioning state, which only appears in the response.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Profile for gallery sharing to subscription or tenant
     */
    readonly sharingProfile: pulumi.Output<outputs.compute.v20220803.SharingProfileResponse | undefined>;
    /**
     * Sharing status of current gallery.
     */
    readonly sharingStatus: pulumi.Output<outputs.compute.v20220803.SharingStatusResponse>;
    /**
     * Contains information about the soft deletion policy of the gallery.
     */
    readonly softDeletePolicy: pulumi.Output<outputs.compute.v20220803.SoftDeletePolicyResponse | undefined>;
    /**
     * Resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Resource type
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Gallery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GalleryArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Gallery resource.
 */
export interface GalleryArgs {
    /**
     * The description of this Shared Image Gallery resource. This property is updatable.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Shared Image Gallery. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
     */
    galleryName?: pulumi.Input<string>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Profile for gallery sharing to subscription or tenant
     */
    sharingProfile?: pulumi.Input<inputs.compute.v20220803.SharingProfileArgs>;
    /**
     * Contains information about the soft deletion policy of the gallery.
     */
    softDeletePolicy?: pulumi.Input<inputs.compute.v20220803.SoftDeletePolicyArgs>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
