import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * disk encryption set resource.
 */
export declare class DiskEncryptionSet extends pulumi.CustomResource {
    /**
     * Get an existing DiskEncryptionSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DiskEncryptionSet;
    /**
     * Returns true if the given object is an instance of DiskEncryptionSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DiskEncryptionSet;
    /**
     * The key vault key which is currently used by this disk encryption set.
     */
    readonly activeKey: pulumi.Output<outputs.compute.v20220702.KeyForDiskEncryptionSetResponse | undefined>;
    /**
     * The error that was encountered during auto-key rotation. If an error is present, then auto-key rotation will not be attempted until the error on this disk encryption set is fixed.
     */
    readonly autoKeyRotationError: pulumi.Output<outputs.compute.v20220702.ApiErrorResponse>;
    /**
     * The type of key used to encrypt the data of the disk.
     */
    readonly encryptionType: pulumi.Output<string | undefined>;
    /**
     * Multi-tenant application client id to access key vault in a different tenant. Setting the value to 'None' will clear the property.
     */
    readonly federatedClientId: pulumi.Output<string | undefined>;
    /**
     * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
     */
    readonly identity: pulumi.Output<outputs.compute.v20220702.EncryptionSetIdentityResponse | undefined>;
    /**
     * The time when the active key of this disk encryption set was updated.
     */
    readonly lastKeyRotationTimestamp: pulumi.Output<string>;
    /**
     * Resource location
     */
    readonly location: pulumi.Output<string>;
    /**
     * Resource name
     */
    readonly name: pulumi.Output<string>;
    /**
     * A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
     */
    readonly previousKeys: pulumi.Output<outputs.compute.v20220702.KeyForDiskEncryptionSetResponse[]>;
    /**
     * The disk encryption set provisioning state.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
     */
    readonly rotationToLatestKeyVersionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Resource type
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a DiskEncryptionSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskEncryptionSetArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DiskEncryptionSet resource.
 */
export interface DiskEncryptionSetArgs {
    /**
     * The key vault key which is currently used by this disk encryption set.
     */
    activeKey?: pulumi.Input<inputs.compute.v20220702.KeyForDiskEncryptionSetArgs>;
    /**
     * The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
     */
    diskEncryptionSetName?: pulumi.Input<string>;
    /**
     * The type of key used to encrypt the data of the disk.
     */
    encryptionType?: pulumi.Input<string | enums.compute.v20220702.DiskEncryptionSetType>;
    /**
     * Multi-tenant application client id to access key vault in a different tenant. Setting the value to 'None' will clear the property.
     */
    federatedClientId?: pulumi.Input<string>;
    /**
     * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
     */
    identity?: pulumi.Input<inputs.compute.v20220702.EncryptionSetIdentityArgs>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
     */
    rotationToLatestKeyVersionEnabled?: pulumi.Input<boolean>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
