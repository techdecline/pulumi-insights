import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * An Azure Cosmos DB User Definition
 */
export declare class MongoDBResourceMongoUserDefinition extends pulumi.CustomResource {
    /**
     * Get an existing MongoDBResourceMongoUserDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MongoDBResourceMongoUserDefinition;
    /**
     * Returns true if the given object is an instance of MongoDBResourceMongoUserDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MongoDBResourceMongoUserDefinition;
    /**
     * A custom definition for the USer Definition.
     */
    readonly customData: pulumi.Output<string | undefined>;
    /**
     * The database name for which access is being granted for this User Definition.
     */
    readonly databaseName: pulumi.Output<string | undefined>;
    /**
     * The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
     */
    readonly mechanisms: pulumi.Output<string | undefined>;
    /**
     * The name of the database account.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The password for User Definition. Response does not contain user password.
     */
    readonly password: pulumi.Output<string | undefined>;
    /**
     * The set of roles inherited by the User Definition.
     */
    readonly roles: pulumi.Output<outputs.documentdb.v20231115preview.RoleResponse[] | undefined>;
    /**
     * The type of Azure resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * The user name for User Definition.
     */
    readonly userName: pulumi.Output<string | undefined>;
    /**
     * Create a MongoDBResourceMongoUserDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongoDBResourceMongoUserDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a MongoDBResourceMongoUserDefinition resource.
 */
export interface MongoDBResourceMongoUserDefinitionArgs {
    /**
     * Cosmos DB database account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * A custom definition for the USer Definition.
     */
    customData?: pulumi.Input<string>;
    /**
     * The database name for which access is being granted for this User Definition.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
     */
    mechanisms?: pulumi.Input<string>;
    /**
     * The ID for the User Definition {dbName.userName}.
     */
    mongoUserDefinitionId?: pulumi.Input<string>;
    /**
     * The password for User Definition. Response does not contain user password.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The set of roles inherited by the User Definition.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.documentdb.v20231115preview.RoleArgs>[]>;
    /**
     * The user name for User Definition.
     */
    userName?: pulumi.Input<string>;
}
