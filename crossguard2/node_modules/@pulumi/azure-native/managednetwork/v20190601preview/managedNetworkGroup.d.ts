import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * The Managed Network Group resource
 */
export declare class ManagedNetworkGroup extends pulumi.CustomResource {
    /**
     * Get an existing ManagedNetworkGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ManagedNetworkGroup;
    /**
     * Returns true if the given object is an instance of ManagedNetworkGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ManagedNetworkGroup;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * Responsibility role under which this Managed Network Group will be created
     */
    readonly kind: pulumi.Output<string | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The collection of management groups covered by the Managed Network
     */
    readonly managementGroups: pulumi.Output<outputs.managednetwork.v20190601preview.ResourceIdResponse[] | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Provisioning state of the ManagedNetwork resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * The collection of  subnets covered by the Managed Network
     */
    readonly subnets: pulumi.Output<outputs.managednetwork.v20190601preview.ResourceIdResponse[] | undefined>;
    /**
     * The collection of subscriptions covered by the Managed Network
     */
    readonly subscriptions: pulumi.Output<outputs.managednetwork.v20190601preview.ResourceIdResponse[] | undefined>;
    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     */
    readonly type: pulumi.Output<string>;
    /**
     * The collection of virtual nets covered by the Managed Network
     */
    readonly virtualNetworks: pulumi.Output<outputs.managednetwork.v20190601preview.ResourceIdResponse[] | undefined>;
    /**
     * Create a ManagedNetworkGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedNetworkGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ManagedNetworkGroup resource.
 */
export interface ManagedNetworkGroupArgs {
    /**
     * Responsibility role under which this Managed Network Group will be created
     */
    kind?: pulumi.Input<string | enums.managednetwork.v20190601preview.Kind>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Managed Network Group.
     */
    managedNetworkGroupName?: pulumi.Input<string>;
    /**
     * The name of the Managed Network.
     */
    managedNetworkName: pulumi.Input<string>;
    /**
     * The collection of management groups covered by the Managed Network
     */
    managementGroups?: pulumi.Input<pulumi.Input<inputs.managednetwork.v20190601preview.ResourceIdArgs>[]>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The collection of  subnets covered by the Managed Network
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.managednetwork.v20190601preview.ResourceIdArgs>[]>;
    /**
     * The collection of subscriptions covered by the Managed Network
     */
    subscriptions?: pulumi.Input<pulumi.Input<inputs.managednetwork.v20190601preview.ResourceIdArgs>[]>;
    /**
     * The collection of virtual nets covered by the Managed Network
     */
    virtualNetworks?: pulumi.Input<pulumi.Input<inputs.managednetwork.v20190601preview.ResourceIdArgs>[]>;
}
