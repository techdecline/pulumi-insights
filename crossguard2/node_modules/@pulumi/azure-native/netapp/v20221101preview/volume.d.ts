import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Volume resource
 */
export declare class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Volume;
    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Volume;
    /**
     * Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel
     */
    readonly actualThroughputMibps: pulumi.Output<number>;
    /**
     * Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
     */
    readonly avsDataStore: pulumi.Output<string | undefined>;
    /**
     * UUID v4 or resource identifier used to identify the Backup.
     */
    readonly backupId: pulumi.Output<string | undefined>;
    /**
     * Unique Baremetal Tenant Identifier.
     */
    readonly baremetalTenantId: pulumi.Output<string>;
    /**
     * Pool Resource Id used in case of creating a volume through volume group
     */
    readonly capacityPoolResourceId: pulumi.Output<string | undefined>;
    /**
     * When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
     */
    readonly cloneProgress: pulumi.Output<number>;
    /**
     * Specifies whether Cool Access(tiering) is enabled for the volume.
     */
    readonly coolAccess: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the number of days after which data that is not accessed by clients will be tiered.
     */
    readonly coolnessPeriod: pulumi.Output<number | undefined>;
    /**
     * A unique file path for the volume. Used when creating mount targets
     */
    readonly creationToken: pulumi.Output<string>;
    /**
     * DataProtection type volumes include an object containing details of the replication
     */
    readonly dataProtection: pulumi.Output<outputs.netapp.v20221101preview.VolumePropertiesResponseDataProtection | undefined>;
    /**
     * Data store resource unique identifier
     */
    readonly dataStoreResourceId: pulumi.Output<string[]>;
    /**
     * Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
     */
    readonly defaultGroupQuotaInKiBs: pulumi.Output<number | undefined>;
    /**
     * Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
     */
    readonly defaultUserQuotaInKiBs: pulumi.Output<number | undefined>;
    /**
     * If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false
     */
    readonly deleteBaseSnapshot: pulumi.Output<boolean | undefined>;
    /**
     * Flag indicating whether subvolume operations are enabled on the volume
     */
    readonly enableSubvolumes: pulumi.Output<string | undefined>;
    /**
     * Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01.
     */
    readonly encrypted: pulumi.Output<boolean>;
    /**
     * Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
     */
    readonly encryptionKeySource: pulumi.Output<string | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * Set of export policy rules
     */
    readonly exportPolicy: pulumi.Output<outputs.netapp.v20221101preview.VolumePropertiesResponseExportPolicy | undefined>;
    /**
     * Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume.
     */
    readonly fileAccessLogs: pulumi.Output<string>;
    /**
     * Unique FileSystem Identifier.
     */
    readonly fileSystemId: pulumi.Output<string>;
    /**
     * Specifies if default quota is enabled for the volume.
     */
    readonly isDefaultQuotaEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether volume is a Large Volume or Regular Volume.
     */
    readonly isLargeVolume: pulumi.Output<boolean | undefined>;
    /**
     * Restoring
     */
    readonly isRestoring: pulumi.Output<boolean | undefined>;
    /**
     * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     */
    readonly kerberosEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
     */
    readonly keyVaultPrivateEndpointResourceId: pulumi.Output<string | undefined>;
    /**
     * Specifies whether LDAP is enabled or not for a given NFS volume.
     */
    readonly ldapEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
     */
    readonly maximumNumberOfFiles: pulumi.Output<number>;
    /**
     * List of mount targets
     */
    readonly mountTargets: pulumi.Output<outputs.netapp.v20221101preview.MountTargetPropertiesResponse[]>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Basic network, or Standard features available to the volume.
     */
    readonly networkFeatures: pulumi.Output<string | undefined>;
    /**
     * Network Sibling Set ID for the the group of volumes sharing networking resources.
     */
    readonly networkSiblingSetId: pulumi.Output<string>;
    /**
     * Id of the snapshot or backup that the volume is restored from.
     */
    readonly originatingResourceId: pulumi.Output<string>;
    /**
     * Application specific placement rules for the particular volume
     */
    readonly placementRules: pulumi.Output<outputs.netapp.v20221101preview.PlacementKeyValuePairsResponse[] | undefined>;
    /**
     * Set of protocol types, default NFSv3, CIFS for SMB protocol
     */
    readonly protocolTypes: pulumi.Output<string[] | undefined>;
    /**
     * The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides.
     */
    readonly provisionedAvailabilityZone: pulumi.Output<string>;
    /**
     * Azure lifecycle management
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Proximity placement group associated with the volume
     */
    readonly proximityPlacementGroup: pulumi.Output<string | undefined>;
    /**
     * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     */
    readonly securityStyle: pulumi.Output<string | undefined>;
    /**
     * The service level of the file system
     */
    readonly serviceLevel: pulumi.Output<string | undefined>;
    /**
     * Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
     */
    readonly smbAccessBasedEnumeration: pulumi.Output<string | undefined>;
    /**
     * Enables continuously available share property for smb volume. Only applicable for SMB volume
     */
    readonly smbContinuouslyAvailable: pulumi.Output<boolean | undefined>;
    /**
     * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     */
    readonly smbEncryption: pulumi.Output<boolean | undefined>;
    /**
     * Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
     */
    readonly smbNonBrowsable: pulumi.Output<string | undefined>;
    /**
     * If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true).
     */
    readonly snapshotDirectoryVisible: pulumi.Output<boolean | undefined>;
    /**
     * UUID v4 or resource identifier used to identify the Snapshot.
     */
    readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * Provides storage to network proximity information for the volume.
     */
    readonly storageToNetworkProximity: pulumi.Output<string>;
    /**
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     */
    readonly subnetId: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.netapp.v20221101preview.SystemDataResponse>;
    /**
     * T2 network information
     */
    readonly t2Network: pulumi.Output<string>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly throughputMibps: pulumi.Output<number | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
     */
    readonly unixPermissions: pulumi.Output<string | undefined>;
    /**
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes.
     */
    readonly usageThreshold: pulumi.Output<number>;
    /**
     * Volume Group Name
     */
    readonly volumeGroupName: pulumi.Output<string>;
    /**
     * Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
     */
    readonly volumeSpecName: pulumi.Output<string | undefined>;
    /**
     * What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
     */
    readonly volumeType: pulumi.Output<string | undefined>;
    /**
     * Availability Zone
     */
    readonly zones: pulumi.Output<string[] | undefined>;
    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The name of the NetApp account
     */
    accountName: pulumi.Input<string>;
    /**
     * Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
     */
    avsDataStore?: pulumi.Input<string | enums.netapp.v20221101preview.AvsDataStore>;
    /**
     * UUID v4 or resource identifier used to identify the Backup.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Pool Resource Id used in case of creating a volume through volume group
     */
    capacityPoolResourceId?: pulumi.Input<string>;
    /**
     * Specifies whether Cool Access(tiering) is enabled for the volume.
     */
    coolAccess?: pulumi.Input<boolean>;
    /**
     * Specifies the number of days after which data that is not accessed by clients will be tiered.
     */
    coolnessPeriod?: pulumi.Input<number>;
    /**
     * A unique file path for the volume. Used when creating mount targets
     */
    creationToken: pulumi.Input<string>;
    /**
     * DataProtection type volumes include an object containing details of the replication
     */
    dataProtection?: pulumi.Input<inputs.netapp.v20221101preview.VolumePropertiesDataProtectionArgs>;
    /**
     * Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
     */
    defaultGroupQuotaInKiBs?: pulumi.Input<number>;
    /**
     * Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
     */
    defaultUserQuotaInKiBs?: pulumi.Input<number>;
    /**
     * If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false
     */
    deleteBaseSnapshot?: pulumi.Input<boolean>;
    /**
     * Flag indicating whether subvolume operations are enabled on the volume
     */
    enableSubvolumes?: pulumi.Input<string | enums.netapp.v20221101preview.EnableSubvolumes>;
    /**
     * Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
     */
    encryptionKeySource?: pulumi.Input<string | enums.netapp.v20221101preview.EncryptionKeySource>;
    /**
     * Set of export policy rules
     */
    exportPolicy?: pulumi.Input<inputs.netapp.v20221101preview.VolumePropertiesExportPolicyArgs>;
    /**
     * Specifies if default quota is enabled for the volume.
     */
    isDefaultQuotaEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether volume is a Large Volume or Regular Volume.
     */
    isLargeVolume?: pulumi.Input<boolean>;
    /**
     * Restoring
     */
    isRestoring?: pulumi.Input<boolean>;
    /**
     * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     */
    kerberosEnabled?: pulumi.Input<boolean>;
    /**
     * The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
     */
    keyVaultPrivateEndpointResourceId?: pulumi.Input<string>;
    /**
     * Specifies whether LDAP is enabled or not for a given NFS volume.
     */
    ldapEnabled?: pulumi.Input<boolean>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Basic network, or Standard features available to the volume.
     */
    networkFeatures?: pulumi.Input<string | enums.netapp.v20221101preview.NetworkFeatures>;
    /**
     * Application specific placement rules for the particular volume
     */
    placementRules?: pulumi.Input<pulumi.Input<inputs.netapp.v20221101preview.PlacementKeyValuePairsArgs>[]>;
    /**
     * The name of the capacity pool
     */
    poolName: pulumi.Input<string>;
    /**
     * Set of protocol types, default NFSv3, CIFS for SMB protocol
     */
    protocolTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Proximity placement group associated with the volume
     */
    proximityPlacementGroup?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     */
    securityStyle?: pulumi.Input<string | enums.netapp.v20221101preview.SecurityStyle>;
    /**
     * The service level of the file system
     */
    serviceLevel?: pulumi.Input<string | enums.netapp.v20221101preview.ServiceLevel>;
    /**
     * Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
     */
    smbAccessBasedEnumeration?: pulumi.Input<string | enums.netapp.v20221101preview.SmbAccessBasedEnumeration>;
    /**
     * Enables continuously available share property for smb volume. Only applicable for SMB volume
     */
    smbContinuouslyAvailable?: pulumi.Input<boolean>;
    /**
     * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     */
    smbEncryption?: pulumi.Input<boolean>;
    /**
     * Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
     */
    smbNonBrowsable?: pulumi.Input<string | enums.netapp.v20221101preview.SmbNonBrowsable>;
    /**
     * If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true).
     */
    snapshotDirectoryVisible?: pulumi.Input<boolean>;
    /**
     * UUID v4 or resource identifier used to identify the Snapshot.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     */
    subnetId: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    throughputMibps?: pulumi.Input<number>;
    /**
     * UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
     */
    unixPermissions?: pulumi.Input<string>;
    /**
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes.
     */
    usageThreshold: pulumi.Input<number>;
    /**
     * The name of the volume
     */
    volumeName?: pulumi.Input<string>;
    /**
     * Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
     */
    volumeSpecName?: pulumi.Input<string>;
    /**
     * What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
     */
    volumeType?: pulumi.Input<string>;
    /**
     * Availability Zone
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
