import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Distributed availability group between box and Sql Managed Instance.
 */
export declare class DistributedAvailabilityGroup extends pulumi.CustomResource {
    /**
     * Get an existing DistributedAvailabilityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DistributedAvailabilityGroup;
    /**
     * Returns true if the given object is an instance of DistributedAvailabilityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DistributedAvailabilityGroup;
    /**
     * Databases in the distributed availability group
     */
    readonly databases: pulumi.Output<outputs.sql.v20230201preview.DistributedAvailabilityGroupDatabaseResponse[]>;
    /**
     * ID of the distributed availability group
     */
    readonly distributedAvailabilityGroupId: pulumi.Output<string>;
    /**
     * Name of the distributed availability group
     */
    readonly distributedAvailabilityGroupName: pulumi.Output<string>;
    /**
     * Managed instance side availability group name
     */
    readonly instanceAvailabilityGroupName: pulumi.Output<string>;
    /**
     * Managed instance side link role
     */
    readonly instanceLinkRole: pulumi.Output<string>;
    /**
     * Resource name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * SQL server side availability group name
     */
    readonly partnerAvailabilityGroupName: pulumi.Output<string>;
    /**
     * SQL server side endpoint - IP or DNS resolvable name
     */
    readonly partnerEndpoint: pulumi.Output<string>;
    /**
     * SQL server side link role
     */
    readonly partnerLinkRole: pulumi.Output<string>;
    /**
     * Replication mode of the link
     */
    readonly replicationMode: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a DistributedAvailabilityGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DistributedAvailabilityGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DistributedAvailabilityGroup resource.
 */
export interface DistributedAvailabilityGroupArgs {
    /**
     * The distributed availability group name.
     */
    distributedAvailabilityGroupName?: pulumi.Input<string>;
    /**
     * The name of the managed instance.
     */
    managedInstanceName: pulumi.Input<string>;
    /**
     * The primary availability group name
     */
    primaryAvailabilityGroupName?: pulumi.Input<string>;
    /**
     * The replication mode of a distributed availability group. Parameter will be ignored during link creation.
     */
    replicationMode?: pulumi.Input<string | enums.sql.v20230201preview.ReplicationModeType>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The secondary availability group name
     */
    secondaryAvailabilityGroupName?: pulumi.Input<string>;
    /**
     * The source endpoint
     */
    sourceEndpoint?: pulumi.Input<string>;
    /**
     * The name of the target database
     */
    targetDatabase?: pulumi.Input<string>;
}
