import * as pulumi from "@pulumi/pulumi";
import * as enums from "../types/enums";
/**
 * Contains information about a database Threat Detection policy.
 * Azure REST API version: 2014-04-01.
 */
export declare class DatabaseThreatDetectionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseThreatDetectionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabaseThreatDetectionPolicy;
    /**
     * Returns true if the given object is an instance of DatabaseThreatDetectionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DatabaseThreatDetectionPolicy;
    /**
     * Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action.
     */
    readonly disabledAlerts: pulumi.Output<string | undefined>;
    /**
     * Specifies that the alert is sent to the account administrators.
     */
    readonly emailAccountAdmins: pulumi.Output<string | undefined>;
    /**
     * Specifies the semicolon-separated list of e-mail addresses to which the alert is sent.
     */
    readonly emailAddresses: pulumi.Output<string | undefined>;
    /**
     * Resource kind.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * Resource name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Specifies the number of days to keep in the Threat Detection audit logs.
     */
    readonly retentionDays: pulumi.Output<number | undefined>;
    /**
     * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
     */
    readonly state: pulumi.Output<string>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is required.
     */
    readonly storageEndpoint: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Specifies whether to use the default server policy.
     */
    readonly useServerDefault: pulumi.Output<string | undefined>;
    /**
     * Create a DatabaseThreatDetectionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseThreatDetectionPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DatabaseThreatDetectionPolicy resource.
 */
export interface DatabaseThreatDetectionPolicyArgs {
    /**
     * The name of the database for which database Threat Detection policy is defined.
     */
    databaseName: pulumi.Input<string>;
    /**
     * Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action.
     */
    disabledAlerts?: pulumi.Input<string>;
    /**
     * Specifies that the alert is sent to the account administrators.
     */
    emailAccountAdmins?: pulumi.Input<string | enums.sql.SecurityAlertPolicyEmailAccountAdmins>;
    /**
     * Specifies the semicolon-separated list of e-mail addresses to which the alert is sent.
     */
    emailAddresses?: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the number of days to keep in the Threat Detection audit logs.
     */
    retentionDays?: pulumi.Input<number>;
    /**
     * The name of the security alert policy.
     */
    securityAlertPolicyName?: pulumi.Input<string>;
    /**
     * The name of the server.
     */
    serverName: pulumi.Input<string>;
    /**
     * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
     */
    state: pulumi.Input<string | enums.sql.SecurityAlertPolicyState>;
    /**
     * Specifies the identifier key of the Threat Detection audit storage account. If state is Enabled, storageAccountAccessKey is required.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is required.
     */
    storageEndpoint?: pulumi.Input<string>;
    /**
     * Specifies whether to use the default server policy.
     */
    useServerDefault?: pulumi.Input<string | enums.sql.SecurityAlertPolicyUseServerDefault>;
}
