export declare const AccessKeyPermissions: {
    readonly Read: "Read";
    readonly Write: "Write";
    readonly Listen: "Listen";
    readonly Send: "Send";
    readonly Manage: "Manage";
};
export type AccessKeyPermissions = (typeof AccessKeyPermissions)[keyof typeof AccessKeyPermissions];
export declare const ActionType: {
    readonly Enable: "enable";
    readonly OptOut: "optOut";
};
/**
 * Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
 */
export type ActionType = (typeof ActionType)[keyof typeof ActionType];
export declare const AllowType: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
 */
export type AllowType = (typeof AllowType)[keyof typeof AllowType];
export declare const AuthType: {
    readonly SystemAssignedIdentity: "systemAssignedIdentity";
    readonly UserAssignedIdentity: "userAssignedIdentity";
    readonly ServicePrincipalSecret: "servicePrincipalSecret";
    readonly ServicePrincipalCertificate: "servicePrincipalCertificate";
    readonly Secret: "secret";
    readonly AccessKey: "accessKey";
    readonly UserAccount: "userAccount";
};
/**
 * The authentication type.
 */
export type AuthType = (typeof AuthType)[keyof typeof AuthType];
export declare const AzureResourceType: {
    readonly KeyVault: "KeyVault";
};
/**
 * The azure resource type.
 */
export type AzureResourceType = (typeof AzureResourceType)[keyof typeof AzureResourceType];
export declare const ClientType: {
    readonly None: "none";
    readonly Dotnet: "dotnet";
    readonly Java: "java";
    readonly Python: "python";
    readonly Go: "go";
    readonly Php: "php";
    readonly Ruby: "ruby";
    readonly Django: "django";
    readonly Nodejs: "nodejs";
    readonly SpringBoot: "springBoot";
    readonly Kafka_springBoot: "kafka-springBoot";
    readonly Dapr: "dapr";
};
/**
 * The application client type
 */
export type ClientType = (typeof ClientType)[keyof typeof ClientType];
export declare const DeleteOrUpdateBehavior: {
    readonly Default: "Default";
    readonly ForcedCleanup: "ForcedCleanup";
};
/**
 * Indicates whether to clean up previous operation when Linker is updating or deleting
 */
export type DeleteOrUpdateBehavior = (typeof DeleteOrUpdateBehavior)[keyof typeof DeleteOrUpdateBehavior];
export declare const DryrunActionName: {
    readonly CreateOrUpdate: "createOrUpdate";
};
/**
 * The name of action for you dryrun job.
 */
export type DryrunActionName = (typeof DryrunActionName)[keyof typeof DryrunActionName];
export declare const SecretType: {
    readonly RawValue: "rawValue";
    readonly KeyVaultSecretUri: "keyVaultSecretUri";
    readonly KeyVaultSecretReference: "keyVaultSecretReference";
};
/**
 * The secret type.
 */
export type SecretType = (typeof SecretType)[keyof typeof SecretType];
export declare const TargetServiceType: {
    readonly AzureResource: "AzureResource";
    readonly ConfluentBootstrapServer: "ConfluentBootstrapServer";
    readonly ConfluentSchemaRegistry: "ConfluentSchemaRegistry";
    readonly SelfHostedServer: "SelfHostedServer";
};
/**
 * The target service type.
 */
export type TargetServiceType = (typeof TargetServiceType)[keyof typeof TargetServiceType];
export declare const VNetSolutionType: {
    readonly ServiceEndpoint: "serviceEndpoint";
    readonly PrivateLink: "privateLink";
};
/**
 * Type of VNet solution.
 */
export type VNetSolutionType = (typeof VNetSolutionType)[keyof typeof VNetSolutionType];
