export declare const AutomationRuleActionType: {
    /**
     * Modify an object's properties
     */
    readonly ModifyProperties: "ModifyProperties";
    /**
     * Run a playbook on an object
     */
    readonly RunPlaybook: "RunPlaybook";
};
/**
 * The type of the automation rule action
 */
export type AutomationRuleActionType = (typeof AutomationRuleActionType)[keyof typeof AutomationRuleActionType];
export declare const AutomationRuleConditionType: {
    /**
     * Evaluate an object property value
     */
    readonly Property: "Property";
};
/**
 * The type of the automation rule condition
 */
export type AutomationRuleConditionType = (typeof AutomationRuleConditionType)[keyof typeof AutomationRuleConditionType];
export declare const AutomationRulePropertyConditionSupportedOperator: {
    /**
     * Evaluates if the property equals at least one of the condition values
     */
    readonly Equals: "Equals";
    /**
     * Evaluates if the property does not equal any of the condition values
     */
    readonly NotEquals: "NotEquals";
    /**
     * Evaluates if the property contains at least one of the condition values
     */
    readonly Contains: "Contains";
    /**
     * Evaluates if the property does not contain any of the condition values
     */
    readonly NotContains: "NotContains";
    /**
     * Evaluates if the property starts with any of the condition values
     */
    readonly StartsWith: "StartsWith";
    /**
     * Evaluates if the property does not start with any of the condition values
     */
    readonly NotStartsWith: "NotStartsWith";
    /**
     * Evaluates if the property ends with any of the condition values
     */
    readonly EndsWith: "EndsWith";
    /**
     * Evaluates if the property does not end with any of the condition values
     */
    readonly NotEndsWith: "NotEndsWith";
};
/**
 * The operator to use for evaluation the condition
 */
export type AutomationRulePropertyConditionSupportedOperator = (typeof AutomationRulePropertyConditionSupportedOperator)[keyof typeof AutomationRulePropertyConditionSupportedOperator];
export declare const AutomationRulePropertyConditionSupportedProperty: {
    /**
     * The title of the incident
     */
    readonly IncidentTitle: "IncidentTitle";
    /**
     * The description of the incident
     */
    readonly IncidentDescription: "IncidentDescription";
    /**
     * The severity of the incident
     */
    readonly IncidentSeverity: "IncidentSeverity";
    /**
     * The status of the incident
     */
    readonly IncidentStatus: "IncidentStatus";
    /**
     * The tactics of the incident
     */
    readonly IncidentTactics: "IncidentTactics";
    /**
     * The related Analytic rule ids of the incident
     */
    readonly IncidentRelatedAnalyticRuleIds: "IncidentRelatedAnalyticRuleIds";
    /**
     * The provider name of the incident
     */
    readonly IncidentProviderName: "IncidentProviderName";
    /**
     * The account Azure Active Directory tenant id
     */
    readonly AccountAadTenantId: "AccountAadTenantId";
    /**
     * The account Azure Active Directory user id.
     */
    readonly AccountAadUserId: "AccountAadUserId";
    /**
     * The account name
     */
    readonly AccountName: "AccountName";
    /**
     * The account NetBIOS domain name
     */
    readonly AccountNTDomain: "AccountNTDomain";
    /**
     * The account Azure Active Directory Passport User ID
     */
    readonly AccountPUID: "AccountPUID";
    /**
     * The account security identifier
     */
    readonly AccountSid: "AccountSid";
    /**
     * The account unique identifier
     */
    readonly AccountObjectGuid: "AccountObjectGuid";
    /**
     * The account user principal name suffix
     */
    readonly AccountUPNSuffix: "AccountUPNSuffix";
    /**
     * The Azure resource id
     */
    readonly AzureResourceResourceId: "AzureResourceResourceId";
    /**
     * The Azure resource subscription id
     */
    readonly AzureResourceSubscriptionId: "AzureResourceSubscriptionId";
    /**
     * The cloud application identifier
     */
    readonly CloudApplicationAppId: "CloudApplicationAppId";
    /**
     * The cloud application name
     */
    readonly CloudApplicationAppName: "CloudApplicationAppName";
    /**
     * The dns record domain name
     */
    readonly DNSDomainName: "DNSDomainName";
    /**
     * The file directory full path
     */
    readonly FileDirectory: "FileDirectory";
    /**
     * The file name without path
     */
    readonly FileName: "FileName";
    /**
     * The file hash value
     */
    readonly FileHashValue: "FileHashValue";
    /**
     * The host Azure resource id
     */
    readonly HostAzureID: "HostAzureID";
    /**
     * The host name without domain
     */
    readonly HostName: "HostName";
    /**
     * The host NetBIOS name
     */
    readonly HostNetBiosName: "HostNetBiosName";
    /**
     * The host NT domain
     */
    readonly HostNTDomain: "HostNTDomain";
    /**
     * The host operating system
     */
    readonly HostOSVersion: "HostOSVersion";
    /**
     * The IoT device id
     */
    readonly IoTDeviceId: "IoTDeviceId";
    /**
     * The IoT device name
     */
    readonly IoTDeviceName: "IoTDeviceName";
    /**
     * The IoT device type
     */
    readonly IoTDeviceType: "IoTDeviceType";
    /**
     * The IoT device vendor
     */
    readonly IoTDeviceVendor: "IoTDeviceVendor";
    /**
     * The IoT device model
     */
    readonly IoTDeviceModel: "IoTDeviceModel";
    /**
     * The IoT device operating system
     */
    readonly IoTDeviceOperatingSystem: "IoTDeviceOperatingSystem";
    /**
     * The IP address
     */
    readonly IPAddress: "IPAddress";
    /**
     * The mailbox display name
     */
    readonly MailboxDisplayName: "MailboxDisplayName";
    /**
     * The mailbox primary address
     */
    readonly MailboxPrimaryAddress: "MailboxPrimaryAddress";
    /**
     * The mailbox user principal name
     */
    readonly MailboxUPN: "MailboxUPN";
    /**
     * The mail message delivery action
     */
    readonly MailMessageDeliveryAction: "MailMessageDeliveryAction";
    /**
     * The mail message delivery location
     */
    readonly MailMessageDeliveryLocation: "MailMessageDeliveryLocation";
    /**
     * The mail message recipient
     */
    readonly MailMessageRecipient: "MailMessageRecipient";
    /**
     * The mail message sender IP address
     */
    readonly MailMessageSenderIP: "MailMessageSenderIP";
    /**
     * The mail message subject
     */
    readonly MailMessageSubject: "MailMessageSubject";
    /**
     * The mail message P1 sender
     */
    readonly MailMessageP1Sender: "MailMessageP1Sender";
    /**
     * The mail message P2 sender
     */
    readonly MailMessageP2Sender: "MailMessageP2Sender";
    /**
     * The malware category
     */
    readonly MalwareCategory: "MalwareCategory";
    /**
     * The malware name
     */
    readonly MalwareName: "MalwareName";
    /**
     * The process execution command line
     */
    readonly ProcessCommandLine: "ProcessCommandLine";
    /**
     * The process id
     */
    readonly ProcessId: "ProcessId";
    /**
     * The registry key path
     */
    readonly RegistryKey: "RegistryKey";
    /**
     * The registry key value in string formatted representation
     */
    readonly RegistryValueData: "RegistryValueData";
    /**
     * The url
     */
    readonly Url: "Url";
};
/**
 * The property to evaluate
 */
export type AutomationRulePropertyConditionSupportedProperty = (typeof AutomationRulePropertyConditionSupportedProperty)[keyof typeof AutomationRulePropertyConditionSupportedProperty];
export declare const EntityTimelineKind: {
    /**
     * activity
     */
    readonly Activity: "Activity";
    /**
     * bookmarks
     */
    readonly Bookmark: "Bookmark";
    /**
     * security alerts
     */
    readonly SecurityAlert: "SecurityAlert";
};
/**
 * The entity query kind
 */
export type EntityTimelineKind = (typeof EntityTimelineKind)[keyof typeof EntityTimelineKind];
export declare const IncidentClassification: {
    /**
     * Incident classification was undetermined
     */
    readonly Undetermined: "Undetermined";
    /**
     * Incident was true positive
     */
    readonly TruePositive: "TruePositive";
    /**
     * Incident was benign positive
     */
    readonly BenignPositive: "BenignPositive";
    /**
     * Incident was false positive
     */
    readonly FalsePositive: "FalsePositive";
};
/**
 * The reason the incident was closed
 */
export type IncidentClassification = (typeof IncidentClassification)[keyof typeof IncidentClassification];
export declare const IncidentClassificationReason: {
    /**
     * Classification reason was suspicious activity
     */
    readonly SuspiciousActivity: "SuspiciousActivity";
    /**
     * Classification reason was suspicious but expected
     */
    readonly SuspiciousButExpected: "SuspiciousButExpected";
    /**
     * Classification reason was incorrect alert logic
     */
    readonly IncorrectAlertLogic: "IncorrectAlertLogic";
    /**
     * Classification reason was inaccurate data
     */
    readonly InaccurateData: "InaccurateData";
};
/**
 * The classification reason to close the incident with
 */
export type IncidentClassificationReason = (typeof IncidentClassificationReason)[keyof typeof IncidentClassificationReason];
export declare const IncidentSeverity: {
    /**
     * High severity
     */
    readonly High: "High";
    /**
     * Medium severity
     */
    readonly Medium: "Medium";
    /**
     * Low severity
     */
    readonly Low: "Low";
    /**
     * Informational severity
     */
    readonly Informational: "Informational";
};
/**
 * The severity of the incident
 */
export type IncidentSeverity = (typeof IncidentSeverity)[keyof typeof IncidentSeverity];
export declare const IncidentStatus: {
    /**
     * An active incident which isn't being handled currently
     */
    readonly New: "New";
    /**
     * An active incident which is being handled
     */
    readonly Active: "Active";
    /**
     * A non-active incident
     */
    readonly Closed: "Closed";
};
/**
 * The status of the incident
 */
export type IncidentStatus = (typeof IncidentStatus)[keyof typeof IncidentStatus];
export declare const SettingKind: {
    readonly Anomalies: "Anomalies";
    readonly EyesOn: "EyesOn";
    readonly EntityAnalytics: "EntityAnalytics";
    readonly Ueba: "Ueba";
};
/**
 * The kind of the setting
 */
export type SettingKind = (typeof SettingKind)[keyof typeof SettingKind];
export declare const Source: {
    readonly Local_file: "Local file";
    readonly Remote_storage: "Remote storage";
};
/**
 * The source of the watchlist
 */
export type Source = (typeof Source)[keyof typeof Source];
export declare const TriggersOn: {
    /**
     * Trigger on Incidents
     */
    readonly Incidents: "Incidents";
};
/**
 * The type of object the automation rule triggers on
 */
export type TriggersOn = (typeof TriggersOn)[keyof typeof TriggersOn];
export declare const TriggersWhen: {
    /**
     * Trigger on created objects
     */
    readonly Created: "Created";
};
/**
 * The type of event the automation rule triggers on
 */
export type TriggersWhen = (typeof TriggersWhen)[keyof typeof TriggersWhen];
