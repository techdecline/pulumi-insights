export declare const EntityTimelineKind: {
    /**
     * activity
     */
    readonly Activity: "Activity";
    /**
     * bookmarks
     */
    readonly Bookmark: "Bookmark";
    /**
     * security alerts
     */
    readonly SecurityAlert: "SecurityAlert";
    /**
     * anomaly
     */
    readonly Anomaly: "Anomaly";
};
/**
 * The entity query kind
 */
export type EntityTimelineKind = (typeof EntityTimelineKind)[keyof typeof EntityTimelineKind];
export declare const IncidentClassification: {
    /**
     * Incident classification was undetermined
     */
    readonly Undetermined: "Undetermined";
    /**
     * Incident was true positive
     */
    readonly TruePositive: "TruePositive";
    /**
     * Incident was benign positive
     */
    readonly BenignPositive: "BenignPositive";
    /**
     * Incident was false positive
     */
    readonly FalsePositive: "FalsePositive";
};
/**
 * The reason the incident was closed
 */
export type IncidentClassification = (typeof IncidentClassification)[keyof typeof IncidentClassification];
export declare const IncidentClassificationReason: {
    /**
     * Classification reason was suspicious activity
     */
    readonly SuspiciousActivity: "SuspiciousActivity";
    /**
     * Classification reason was suspicious but expected
     */
    readonly SuspiciousButExpected: "SuspiciousButExpected";
    /**
     * Classification reason was incorrect alert logic
     */
    readonly IncorrectAlertLogic: "IncorrectAlertLogic";
    /**
     * Classification reason was inaccurate data
     */
    readonly InaccurateData: "InaccurateData";
};
/**
 * The classification reason the incident was closed with
 */
export type IncidentClassificationReason = (typeof IncidentClassificationReason)[keyof typeof IncidentClassificationReason];
export declare const IncidentSeverity: {
    /**
     * High severity
     */
    readonly High: "High";
    /**
     * Medium severity
     */
    readonly Medium: "Medium";
    /**
     * Low severity
     */
    readonly Low: "Low";
    /**
     * Informational severity
     */
    readonly Informational: "Informational";
};
/**
 * The severity of the incident
 */
export type IncidentSeverity = (typeof IncidentSeverity)[keyof typeof IncidentSeverity];
export declare const IncidentStatus: {
    /**
     * An active incident which isn't being handled currently
     */
    readonly New: "New";
    /**
     * An active incident which is being handled
     */
    readonly Active: "Active";
    /**
     * A non-active incident
     */
    readonly Closed: "Closed";
};
/**
 * The status of the incident
 */
export type IncidentStatus = (typeof IncidentStatus)[keyof typeof IncidentStatus];
export declare const Kind: {
    readonly DataConnector: "DataConnector";
    readonly DataType: "DataType";
    readonly Workbook: "Workbook";
    readonly WorkbookTemplate: "WorkbookTemplate";
    readonly Playbook: "Playbook";
    readonly PlaybookTemplate: "PlaybookTemplate";
    readonly AnalyticsRuleTemplate: "AnalyticsRuleTemplate";
    readonly AnalyticsRule: "AnalyticsRule";
    readonly HuntingQuery: "HuntingQuery";
    readonly InvestigationQuery: "InvestigationQuery";
    readonly Parser: "Parser";
    readonly Watchlist: "Watchlist";
    readonly WatchlistTemplate: "WatchlistTemplate";
    readonly Solution: "Solution";
    readonly AzureFunction: "AzureFunction";
    readonly LogicAppsCustomConnector: "LogicAppsCustomConnector";
    readonly AutomationRule: "AutomationRule";
};
/**
 * The kind of content the metadata is for.
 */
export type Kind = (typeof Kind)[keyof typeof Kind];
export declare const Operator: {
    readonly AND: "AND";
    readonly OR: "OR";
};
/**
 * Operator used for list of dependencies in criteria array.
 */
export type Operator = (typeof Operator)[keyof typeof Operator];
export declare const OwnerType: {
    /**
     * The incident owner type is unknown
     */
    readonly Unknown: "Unknown";
    /**
     * The incident owner type is an AAD user
     */
    readonly User: "User";
    /**
     * The incident owner type is an AAD group
     */
    readonly Group: "Group";
};
/**
 * The type of the owner the incident is assigned to.
 */
export type OwnerType = (typeof OwnerType)[keyof typeof OwnerType];
export declare const SourceKind: {
    readonly LocalWorkspace: "LocalWorkspace";
    readonly Community: "Community";
    readonly Solution: "Solution";
    readonly SourceRepository: "SourceRepository";
};
/**
 * Source type of the content
 */
export type SourceKind = (typeof SourceKind)[keyof typeof SourceKind];
export declare const SupportTier: {
    readonly Microsoft: "Microsoft";
    readonly Partner: "Partner";
    readonly Community: "Community";
};
/**
 * Type of support for content item
 */
export type SupportTier = (typeof SupportTier)[keyof typeof SupportTier];
