export declare const AlertDetail: {
    /**
     * Alert display name
     */
    readonly DisplayName: "DisplayName";
    /**
     * Alert severity
     */
    readonly Severity: "Severity";
};
/**
 * Alert detail
 */
export type AlertDetail = (typeof AlertDetail)[keyof typeof AlertDetail];
export declare const AlertRuleKind: {
    readonly Scheduled: "Scheduled";
    readonly MicrosoftSecurityIncidentCreation: "MicrosoftSecurityIncidentCreation";
    readonly Fusion: "Fusion";
    readonly MLBehaviorAnalytics: "MLBehaviorAnalytics";
    readonly ThreatIntelligence: "ThreatIntelligence";
};
/**
 * The kind of the alert rule
 */
export type AlertRuleKind = (typeof AlertRuleKind)[keyof typeof AlertRuleKind];
export declare const AlertSeverity: {
    /**
     * High severity
     */
    readonly High: "High";
    /**
     * Medium severity
     */
    readonly Medium: "Medium";
    /**
     * Low severity
     */
    readonly Low: "Low";
    /**
     * Informational severity
     */
    readonly Informational: "Informational";
};
/**
 * The severity for alerts created by this alert rule.
 */
export type AlertSeverity = (typeof AlertSeverity)[keyof typeof AlertSeverity];
export declare const AttackTactic: {
    readonly InitialAccess: "InitialAccess";
    readonly Execution: "Execution";
    readonly Persistence: "Persistence";
    readonly PrivilegeEscalation: "PrivilegeEscalation";
    readonly DefenseEvasion: "DefenseEvasion";
    readonly CredentialAccess: "CredentialAccess";
    readonly Discovery: "Discovery";
    readonly LateralMovement: "LateralMovement";
    readonly Collection: "Collection";
    readonly Exfiltration: "Exfiltration";
    readonly CommandAndControl: "CommandAndControl";
    readonly Impact: "Impact";
    readonly PreAttack: "PreAttack";
};
/**
 * The severity for alerts created by this alert rule.
 */
export type AttackTactic = (typeof AttackTactic)[keyof typeof AttackTactic];
export declare const ConnectivityType: {
    readonly IsConnectedQuery: "IsConnectedQuery";
};
/**
 * type of connectivity
 */
export type ConnectivityType = (typeof ConnectivityType)[keyof typeof ConnectivityType];
export declare const ContentType: {
    readonly AnalyticsRule: "AnalyticsRule";
    readonly Workbook: "Workbook";
};
/**
 * Content type.
 */
export type ContentType = (typeof ContentType)[keyof typeof ContentType];
export declare const CreatedByType: {
    readonly User: "User";
    readonly Application: "Application";
    readonly ManagedIdentity: "ManagedIdentity";
    readonly Key: "Key";
};
/**
 * The type of identity that last modified the resource.
 */
export type CreatedByType = (typeof CreatedByType)[keyof typeof CreatedByType];
export declare const CustomEntityQueryKind: {
    readonly Activity: "Activity";
};
/**
 * the entity query kind
 */
export type CustomEntityQueryKind = (typeof CustomEntityQueryKind)[keyof typeof CustomEntityQueryKind];
export declare const DataConnectorKind: {
    readonly AzureActiveDirectory: "AzureActiveDirectory";
    readonly AzureSecurityCenter: "AzureSecurityCenter";
    readonly MicrosoftCloudAppSecurity: "MicrosoftCloudAppSecurity";
    readonly ThreatIntelligence: "ThreatIntelligence";
    readonly ThreatIntelligenceTaxii: "ThreatIntelligenceTaxii";
    readonly Office365: "Office365";
    readonly OfficeATP: "OfficeATP";
    readonly AmazonWebServicesCloudTrail: "AmazonWebServicesCloudTrail";
    readonly AzureAdvancedThreatProtection: "AzureAdvancedThreatProtection";
    readonly MicrosoftDefenderAdvancedThreatProtection: "MicrosoftDefenderAdvancedThreatProtection";
    readonly Dynamics365: "Dynamics365";
    readonly MicrosoftThreatProtection: "MicrosoftThreatProtection";
    readonly MicrosoftThreatIntelligence: "MicrosoftThreatIntelligence";
    readonly GenericUI: "GenericUI";
};
/**
 * The data connector kind
 */
export type DataConnectorKind = (typeof DataConnectorKind)[keyof typeof DataConnectorKind];
export declare const DataTypeState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Describe whether this data type connection is enabled or not.
 */
export type DataTypeState = (typeof DataTypeState)[keyof typeof DataTypeState];
export declare const EntityMappingType: {
    /**
     * User account entity type
     */
    readonly Account: "Account";
    /**
     * Host entity type
     */
    readonly Host: "Host";
    /**
     * IP address entity type
     */
    readonly IP: "IP";
    /**
     * Malware entity type
     */
    readonly Malware: "Malware";
    /**
     * System file entity type
     */
    readonly File: "File";
    /**
     * Process entity type
     */
    readonly Process: "Process";
    /**
     * Cloud app entity type
     */
    readonly CloudApplication: "CloudApplication";
    /**
     * DNS entity type
     */
    readonly DNS: "DNS";
    /**
     * Azure resource entity type
     */
    readonly AzureResource: "AzureResource";
    /**
     * File-hash entity type
     */
    readonly FileHash: "FileHash";
    /**
     * Registry key entity type
     */
    readonly RegistryKey: "RegistryKey";
    /**
     * Registry value entity type
     */
    readonly RegistryValue: "RegistryValue";
    /**
     * Security group entity type
     */
    readonly SecurityGroup: "SecurityGroup";
    /**
     * URL entity type
     */
    readonly URL: "URL";
    /**
     * Mailbox entity type
     */
    readonly Mailbox: "Mailbox";
    /**
     * Mail cluster entity type
     */
    readonly MailCluster: "MailCluster";
    /**
     * Mail message entity type
     */
    readonly MailMessage: "MailMessage";
    /**
     * Submission mail entity type
     */
    readonly SubmissionMail: "SubmissionMail";
};
/**
 * The V3 type of the mapped entity
 */
export type EntityMappingType = (typeof EntityMappingType)[keyof typeof EntityMappingType];
export declare const EntityType: {
    /**
     * Entity represents account in the system.
     */
    readonly Account: "Account";
    /**
     * Entity represents host in the system.
     */
    readonly Host: "Host";
    /**
     * Entity represents file in the system.
     */
    readonly File: "File";
    /**
     * Entity represents azure resource in the system.
     */
    readonly AzureResource: "AzureResource";
    /**
     * Entity represents cloud application in the system.
     */
    readonly CloudApplication: "CloudApplication";
    /**
     * Entity represents dns in the system.
     */
    readonly DNS: "DNS";
    /**
     * Entity represents file hash in the system.
     */
    readonly FileHash: "FileHash";
    /**
     * Entity represents ip in the system.
     */
    readonly IP: "IP";
    /**
     * Entity represents malware in the system.
     */
    readonly Malware: "Malware";
    /**
     * Entity represents process in the system.
     */
    readonly Process: "Process";
    /**
     * Entity represents registry key in the system.
     */
    readonly RegistryKey: "RegistryKey";
    /**
     * Entity represents registry value in the system.
     */
    readonly RegistryValue: "RegistryValue";
    /**
     * Entity represents security group in the system.
     */
    readonly SecurityGroup: "SecurityGroup";
    /**
     * Entity represents url in the system.
     */
    readonly URL: "URL";
    /**
     * Entity represents IoT device in the system.
     */
    readonly IoTDevice: "IoTDevice";
    /**
     * Entity represents security alert in the system.
     */
    readonly SecurityAlert: "SecurityAlert";
    /**
     * Entity represents HuntingBookmark in the system.
     */
    readonly HuntingBookmark: "HuntingBookmark";
    /**
     * Entity represents mail cluster in the system.
     */
    readonly MailCluster: "MailCluster";
    /**
     * Entity represents mail message in the system.
     */
    readonly MailMessage: "MailMessage";
    /**
     * Entity represents mailbox in the system.
     */
    readonly Mailbox: "Mailbox";
    /**
     * Entity represents submission mail in the system.
     */
    readonly SubmissionMail: "SubmissionMail";
};
/**
 * The type of the query's source entity
 */
export type EntityType = (typeof EntityType)[keyof typeof EntityType];
export declare const EventGroupingAggregationKind: {
    readonly SingleAlert: "SingleAlert";
    readonly AlertPerResult: "AlertPerResult";
};
/**
 * The event grouping aggregation kinds
 */
export type EventGroupingAggregationKind = (typeof EventGroupingAggregationKind)[keyof typeof EventGroupingAggregationKind];
export declare const IncidentClassification: {
    /**
     * Incident classification was undetermined
     */
    readonly Undetermined: "Undetermined";
    /**
     * Incident was true positive
     */
    readonly TruePositive: "TruePositive";
    /**
     * Incident was benign positive
     */
    readonly BenignPositive: "BenignPositive";
    /**
     * Incident was false positive
     */
    readonly FalsePositive: "FalsePositive";
};
/**
 * The reason the incident was closed
 */
export type IncidentClassification = (typeof IncidentClassification)[keyof typeof IncidentClassification];
export declare const IncidentClassificationReason: {
    /**
     * Classification reason was suspicious activity
     */
    readonly SuspiciousActivity: "SuspiciousActivity";
    /**
     * Classification reason was suspicious but expected
     */
    readonly SuspiciousButExpected: "SuspiciousButExpected";
    /**
     * Classification reason was incorrect alert logic
     */
    readonly IncorrectAlertLogic: "IncorrectAlertLogic";
    /**
     * Classification reason was inaccurate data
     */
    readonly InaccurateData: "InaccurateData";
};
/**
 * The classification reason the incident was closed with
 */
export type IncidentClassificationReason = (typeof IncidentClassificationReason)[keyof typeof IncidentClassificationReason];
export declare const IncidentSeverity: {
    /**
     * High severity
     */
    readonly High: "High";
    /**
     * Medium severity
     */
    readonly Medium: "Medium";
    /**
     * Low severity
     */
    readonly Low: "Low";
    /**
     * Informational severity
     */
    readonly Informational: "Informational";
};
/**
 * The severity of the incident
 */
export type IncidentSeverity = (typeof IncidentSeverity)[keyof typeof IncidentSeverity];
export declare const IncidentStatus: {
    /**
     * An active incident which isn't being handled currently
     */
    readonly New: "New";
    /**
     * An active incident which is being handled
     */
    readonly Active: "Active";
    /**
     * A non-active incident
     */
    readonly Closed: "Closed";
};
/**
 * The status of the incident
 */
export type IncidentStatus = (typeof IncidentStatus)[keyof typeof IncidentStatus];
export declare const Kind: {
    readonly DataConnector: "DataConnector";
    readonly DataType: "DataType";
    readonly Workbook: "Workbook";
    readonly WorkbookTemplate: "WorkbookTemplate";
    readonly Playbook: "Playbook";
    readonly PlaybookTemplate: "PlaybookTemplate";
    readonly AnalyticsRuleTemplate: "AnalyticsRuleTemplate";
    readonly AnalyticsRule: "AnalyticsRule";
    readonly HuntingQuery: "HuntingQuery";
    readonly InvestigationQuery: "InvestigationQuery";
    readonly Parser: "Parser";
    readonly Watchlist: "Watchlist";
    readonly WatchlistTemplate: "WatchlistTemplate";
    readonly Solution: "Solution";
};
/**
 * The kind of content the metadata is for.
 */
export type Kind = (typeof Kind)[keyof typeof Kind];
export declare const MatchingMethod: {
    /**
     * Grouping alerts into a single incident if all the entities match
     */
    readonly AllEntities: "AllEntities";
    /**
     * Grouping any alerts triggered by this rule into a single incident
     */
    readonly AnyAlert: "AnyAlert";
    /**
     * Grouping alerts into a single incident if the selected entities, custom details and alert details match
     */
    readonly Selected: "Selected";
};
/**
 * Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
 */
export type MatchingMethod = (typeof MatchingMethod)[keyof typeof MatchingMethod];
export declare const MicrosoftSecurityProductName: {
    readonly Microsoft_Cloud_App_Security: "Microsoft Cloud App Security";
    readonly Azure_Security_Center: "Azure Security Center";
    readonly Azure_Advanced_Threat_Protection: "Azure Advanced Threat Protection";
    readonly Azure_Active_Directory_Identity_Protection: "Azure Active Directory Identity Protection";
    readonly Azure_Security_Center_for_IoT: "Azure Security Center for IoT";
    readonly Office_365_Advanced_Threat_Protection: "Office 365 Advanced Threat Protection";
    readonly Microsoft_Defender_Advanced_Threat_Protection: "Microsoft Defender Advanced Threat Protection";
};
/**
 * The alerts' productName on which the cases will be generated
 */
export type MicrosoftSecurityProductName = (typeof MicrosoftSecurityProductName)[keyof typeof MicrosoftSecurityProductName];
export declare const Operator: {
    readonly AND: "AND";
    readonly OR: "OR";
};
/**
 * Operator used for list of dependencies in criteria array.
 */
export type Operator = (typeof Operator)[keyof typeof Operator];
export declare const PermissionProviderScope: {
    readonly ResourceGroup: "ResourceGroup";
    readonly Subscription: "Subscription";
    readonly Workspace: "Workspace";
};
/**
 * Permission provider scope
 */
export type PermissionProviderScope = (typeof PermissionProviderScope)[keyof typeof PermissionProviderScope];
export declare const PollingFrequency: {
    /**
     * Once a minute
     */
    readonly OnceAMinute: "OnceAMinute";
    /**
     * Once an hour
     */
    readonly OnceAnHour: "OnceAnHour";
    /**
     * Once a day
     */
    readonly OnceADay: "OnceADay";
};
/**
 * The polling frequency for the TAXII server.
 */
export type PollingFrequency = (typeof PollingFrequency)[keyof typeof PollingFrequency];
export declare const ProviderName: {
    readonly Microsoft_OperationalInsights_solutions: "Microsoft.OperationalInsights/solutions";
    readonly Microsoft_OperationalInsights_workspaces: "Microsoft.OperationalInsights/workspaces";
    readonly Microsoft_OperationalInsights_workspaces_datasources: "Microsoft.OperationalInsights/workspaces/datasources";
    readonly Microsoft_aadiam_diagnosticSettings: "microsoft.aadiam/diagnosticSettings";
    readonly Microsoft_OperationalInsights_workspaces_sharedKeys: "Microsoft.OperationalInsights/workspaces/sharedKeys";
    readonly Microsoft_Authorization_policyAssignments: "Microsoft.Authorization/policyAssignments";
};
/**
 * Provider name
 */
export type ProviderName = (typeof ProviderName)[keyof typeof ProviderName];
export declare const RepoType: {
    readonly Github: "Github";
    readonly DevOps: "DevOps";
};
/**
 * The repository type of the source control
 */
export type RepoType = (typeof RepoType)[keyof typeof RepoType];
export declare const SettingKind: {
    readonly Anomalies: "Anomalies";
    readonly EyesOn: "EyesOn";
    readonly EntityAnalytics: "EntityAnalytics";
    readonly Ueba: "Ueba";
};
/**
 * The kind of the setting
 */
export type SettingKind = (typeof SettingKind)[keyof typeof SettingKind];
export declare const SettingType: {
    readonly CopyableLabel: "CopyableLabel";
    readonly InstructionStepsGroup: "InstructionStepsGroup";
    readonly InfoMessage: "InfoMessage";
};
/**
 * The kind of the setting
 */
export type SettingType = (typeof SettingType)[keyof typeof SettingType];
export declare const Source: {
    readonly Local_file: "Local file";
    readonly Remote_storage: "Remote storage";
};
/**
 * The source of the watchlist
 */
export type Source = (typeof Source)[keyof typeof Source];
export declare const SourceKind: {
    readonly LocalWorkspace: "LocalWorkspace";
    readonly Community: "Community";
    readonly Solution: "Solution";
    readonly SourceRepository: "SourceRepository";
};
/**
 * Source type of the content
 */
export type SourceKind = (typeof SourceKind)[keyof typeof SourceKind];
export declare const SupportTier: {
    readonly Microsoft: "Microsoft";
    readonly Partner: "Partner";
    readonly Community: "Community";
};
/**
 * Type of support for content item
 */
export type SupportTier = (typeof SupportTier)[keyof typeof SupportTier];
export declare const TriggerOperator: {
    readonly GreaterThan: "GreaterThan";
    readonly LessThan: "LessThan";
    readonly Equal: "Equal";
    readonly NotEqual: "NotEqual";
};
/**
 * The operation against the threshold that triggers alert rule.
 */
export type TriggerOperator = (typeof TriggerOperator)[keyof typeof TriggerOperator];
export declare const UebaDataSources: {
    readonly AuditLogs: "AuditLogs";
    readonly AzureActivity: "AzureActivity";
    readonly SecurityEvent: "SecurityEvent";
    readonly SigninLogs: "SigninLogs";
};
/**
 * The data source that enriched by ueba.
 */
export type UebaDataSources = (typeof UebaDataSources)[keyof typeof UebaDataSources];
