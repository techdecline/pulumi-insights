export declare const DaysOfWeek: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
};
export type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek];
export declare const DirectoryType: {
    readonly ActiveDirectory: "ActiveDirectory";
};
/**
 * The directory type.
 */
export type DirectoryType = (typeof DirectoryType)[keyof typeof DirectoryType];
export declare const JsonWebKeyEncryptionAlgorithm: {
    readonly RSA_OAEP: "RSA-OAEP";
    readonly RSA_OAEP_256: "RSA-OAEP-256";
    readonly RSA1_5: "RSA1_5";
};
/**
 * Algorithm identifier for encryption, default RSA-OAEP.
 */
export type JsonWebKeyEncryptionAlgorithm = (typeof JsonWebKeyEncryptionAlgorithm)[keyof typeof JsonWebKeyEncryptionAlgorithm];
export declare const OSType: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * The type of operating system.
 */
export type OSType = (typeof OSType)[keyof typeof OSType];
export declare const PrivateIPAllocationMethod: {
    readonly Dynamic: "dynamic";
    readonly Static: "static";
};
/**
 * The method that private IP address is allocated.
 */
export type PrivateIPAllocationMethod = (typeof PrivateIPAllocationMethod)[keyof typeof PrivateIPAllocationMethod];
export declare const PrivateLink: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Indicates whether or not private link is enabled.
 */
export type PrivateLink = (typeof PrivateLink)[keyof typeof PrivateLink];
export declare const PrivateLinkServiceConnectionStatus: {
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Pending: "Pending";
    readonly Removed: "Removed";
};
/**
 * The concrete private link service connection.
 */
export type PrivateLinkServiceConnectionStatus = (typeof PrivateLinkServiceConnectionStatus)[keyof typeof PrivateLinkServiceConnectionStatus];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const ResourceProviderConnection: {
    readonly Inbound: "Inbound";
    readonly Outbound: "Outbound";
};
/**
 * The direction for the resource provider connection.
 */
export type ResourceProviderConnection = (typeof ResourceProviderConnection)[keyof typeof ResourceProviderConnection];
export declare const Tier: {
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * The cluster tier.
 */
export type Tier = (typeof Tier)[keyof typeof Tier];
