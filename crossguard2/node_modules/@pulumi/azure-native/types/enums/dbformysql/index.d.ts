import * as v20171201 from "./v20171201";
import * as v20180601privatepreview from "./v20180601privatepreview";
import * as v20200701preview from "./v20200701preview";
import * as v20200701privatepreview from "./v20200701privatepreview";
import * as v20220101 from "./v20220101";
import * as v20220930preview from "./v20220930preview";
import * as v20230601preview from "./v20230601preview";
import * as v20230630 from "./v20230630";
import * as v20231001preview from "./v20231001preview";
import * as v20231201preview from "./v20231201preview";
import * as v20231230 from "./v20231230";
import * as v20240201preview from "./v20240201preview";
import * as v20240601preview from "./v20240601preview";
import * as v20241001preview from "./v20241001preview";
export { v20171201, v20180601privatepreview, v20200701preview, v20200701privatepreview, v20220101, v20220930preview, v20230601preview, v20230630, v20231001preview, v20231201preview, v20231230, v20240201preview, v20240601preview, v20241001preview, };
export declare const AdministratorType: {
    readonly ActiveDirectory: "ActiveDirectory";
};
/**
 * Type of the sever administrator.
 */
export type AdministratorType = (typeof AdministratorType)[keyof typeof AdministratorType];
export declare const ConfigurationSource: {
    readonly System_default: "system-default";
    readonly User_override: "user-override";
};
/**
 * Source of the configuration.
 */
export type ConfigurationSource = (typeof ConfigurationSource)[keyof typeof ConfigurationSource];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Replica: "Replica";
    readonly GeoRestore: "GeoRestore";
};
/**
 * The mode to create a new MySQL server.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DataEncryptionType: {
    readonly AzureKeyVault: "AzureKeyVault";
    readonly SystemManaged: "SystemManaged";
};
/**
 * The key type, AzureKeyVault for enable cmk, SystemManaged for disable cmk.
 */
export type DataEncryptionType = (typeof DataEncryptionType)[keyof typeof DataEncryptionType];
export declare const EnableStatusEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enable Log On Disk or not.
 */
export type EnableStatusEnum = (typeof EnableStatusEnum)[keyof typeof EnableStatusEnum];
export declare const HighAvailabilityMode: {
    readonly Disabled: "Disabled";
    readonly ZoneRedundant: "ZoneRedundant";
    readonly SameZone: "SameZone";
};
/**
 * High availability mode for a server.
 */
export type HighAvailabilityMode = (typeof HighAvailabilityMode)[keyof typeof HighAvailabilityMode];
export declare const ManagedServiceIdentityType: {
    readonly UserAssigned: "UserAssigned";
};
/**
 * Type of managed service identity.
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const ReplicationRole: {
    readonly None: "None";
    readonly Source: "Source";
    readonly Replica: "Replica";
};
/**
 * The replication role.
 */
export type ReplicationRole = (typeof ReplicationRole)[keyof typeof ReplicationRole];
export declare const ServerVersion: {
    readonly ServerVersion_5_7: "5.7";
    readonly ServerVersion_8_0_21: "8.0.21";
};
/**
 * Server version.
 */
export type ServerVersion = (typeof ServerVersion)[keyof typeof ServerVersion];
export declare const SkuTier: {
    readonly Burstable: "Burstable";
    readonly GeneralPurpose: "GeneralPurpose";
    readonly MemoryOptimized: "MemoryOptimized";
};
/**
 * The tier of the particular SKU, e.g. GeneralPurpose.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
