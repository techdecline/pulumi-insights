export declare const AdministratorType: {
    readonly ActiveDirectory: "ActiveDirectory";
};
/**
 * The type of administrator.
 */
export type AdministratorType = (typeof AdministratorType)[keyof typeof AdministratorType];
export declare const AutoExecuteStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly Default: "Default";
};
/**
 * Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'
 */
export type AutoExecuteStatus = (typeof AutoExecuteStatus)[keyof typeof AutoExecuteStatus];
export declare const CreateMode: {
    readonly Copy: "Copy";
    readonly Default: "Default";
    readonly NonReadableSecondary: "NonReadableSecondary";
    readonly OnlineSecondary: "OnlineSecondary";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Recovery: "Recovery";
    readonly Restore: "Restore";
    readonly RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup";
};
/**
 * Specifies the mode of database creation.
 *
 * Default: regular database creation.
 *
 * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 *
 * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 *
 * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 *
 * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 *
 * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 *
 * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 *
 * Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DatabaseEdition: {
    readonly Web: "Web";
    readonly Business: "Business";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PremiumRS: "PremiumRS";
    readonly Free: "Free";
    readonly Stretch: "Stretch";
    readonly DataWarehouse: "DataWarehouse";
    readonly System: "System";
    readonly System2: "System2";
    readonly GeneralPurpose: "GeneralPurpose";
    readonly BusinessCritical: "BusinessCritical";
    readonly Hyperscale: "Hyperscale";
};
/**
 * The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
 *
 * The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
 *
 * ```azurecli
 * az sql db list-editions -l <location> -o table
 * ````
 *
 * ```powershell
 * Get-AzSqlServerServiceObjective -Location <location>
 * ````
 */
export type DatabaseEdition = (typeof DatabaseEdition)[keyof typeof DatabaseEdition];
export declare const ElasticPoolEdition: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly GeneralPurpose: "GeneralPurpose";
    readonly BusinessCritical: "BusinessCritical";
};
/**
 * The edition of the elastic pool.
 */
export type ElasticPoolEdition = (typeof ElasticPoolEdition)[keyof typeof ElasticPoolEdition];
export declare const ReadScale: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.
 */
export type ReadScale = (typeof ReadScale)[keyof typeof ReadScale];
export declare const SampleName: {
    readonly AdventureWorksLT: "AdventureWorksLT";
};
/**
 * Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.
 */
export type SampleName = (typeof SampleName)[keyof typeof SampleName];
export declare const SecurityAlertPolicyEmailAccountAdmins: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies that the alert is sent to the account administrators.
 */
export type SecurityAlertPolicyEmailAccountAdmins = (typeof SecurityAlertPolicyEmailAccountAdmins)[keyof typeof SecurityAlertPolicyEmailAccountAdmins];
export declare const SecurityAlertPolicyState: {
    readonly New: "New";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
 */
export type SecurityAlertPolicyState = (typeof SecurityAlertPolicyState)[keyof typeof SecurityAlertPolicyState];
export declare const SecurityAlertPolicyUseServerDefault: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies whether to use the default server policy.
 */
export type SecurityAlertPolicyUseServerDefault = (typeof SecurityAlertPolicyUseServerDefault)[keyof typeof SecurityAlertPolicyUseServerDefault];
export declare const ServerVersion: {
    readonly ServerVersion_2_0: "2.0";
    readonly ServerVersion_12_0: "12.0";
};
/**
 * The version of the server.
 */
export type ServerVersion = (typeof ServerVersion)[keyof typeof ServerVersion];
export declare const ServiceObjectiveName: {
    readonly System: "System";
    readonly System0: "System0";
    readonly System1: "System1";
    readonly System2: "System2";
    readonly System3: "System3";
    readonly System4: "System4";
    readonly System2L: "System2L";
    readonly System3L: "System3L";
    readonly System4L: "System4L";
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly S0: "S0";
    readonly S1: "S1";
    readonly S2: "S2";
    readonly S3: "S3";
    readonly S4: "S4";
    readonly S6: "S6";
    readonly S7: "S7";
    readonly S9: "S9";
    readonly S12: "S12";
    readonly P1: "P1";
    readonly P2: "P2";
    readonly P3: "P3";
    readonly P4: "P4";
    readonly P6: "P6";
    readonly P11: "P11";
    readonly P15: "P15";
    readonly PRS1: "PRS1";
    readonly PRS2: "PRS2";
    readonly PRS4: "PRS4";
    readonly PRS6: "PRS6";
    readonly DW100: "DW100";
    readonly DW200: "DW200";
    readonly DW300: "DW300";
    readonly DW400: "DW400";
    readonly DW500: "DW500";
    readonly DW600: "DW600";
    readonly DW1000: "DW1000";
    readonly DW1200: "DW1200";
    readonly DW1000c: "DW1000c";
    readonly DW1500: "DW1500";
    readonly DW1500c: "DW1500c";
    readonly DW2000: "DW2000";
    readonly DW2000c: "DW2000c";
    readonly DW3000: "DW3000";
    readonly DW2500c: "DW2500c";
    readonly DW3000c: "DW3000c";
    readonly DW6000: "DW6000";
    readonly DW5000c: "DW5000c";
    readonly DW6000c: "DW6000c";
    readonly DW7500c: "DW7500c";
    readonly DW10000c: "DW10000c";
    readonly DW15000c: "DW15000c";
    readonly DW30000c: "DW30000c";
    readonly DS100: "DS100";
    readonly DS200: "DS200";
    readonly DS300: "DS300";
    readonly DS400: "DS400";
    readonly DS500: "DS500";
    readonly DS600: "DS600";
    readonly DS1000: "DS1000";
    readonly DS1200: "DS1200";
    readonly DS1500: "DS1500";
    readonly DS2000: "DS2000";
    readonly ElasticPool: "ElasticPool";
};
/**
 * The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property.
 *
 * The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
 *
 * ```azurecli
 * az sql db list-editions -l <location> -o table
 * ````
 *
 * ```powershell
 * Get-AzSqlServerServiceObjective -Location <location>
 * ````
 */
export type ServiceObjectiveName = (typeof ServiceObjectiveName)[keyof typeof ServiceObjectiveName];
export declare const TransparentDataEncryptionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the database transparent data encryption.
 */
export type TransparentDataEncryptionStatus = (typeof TransparentDataEncryptionStatus)[keyof typeof TransparentDataEncryptionStatus];
