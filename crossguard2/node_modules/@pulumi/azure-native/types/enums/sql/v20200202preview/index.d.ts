export declare const CatalogCollationType: {
    readonly DATABASE_DEFAULT: "DATABASE_DEFAULT";
    readonly SQL_Latin1_General_CP1_CI_AS: "SQL_Latin1_General_CP1_CI_AS";
};
/**
 * Collation of the metadata catalog.
 */
export type CatalogCollationType = (typeof CatalogCollationType)[keyof typeof CatalogCollationType];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly Copy: "Copy";
    readonly Secondary: "Secondary";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Restore: "Restore";
    readonly Recovery: "Recovery";
    readonly RestoreExternalBackup: "RestoreExternalBackup";
    readonly RestoreExternalBackupSecondary: "RestoreExternalBackupSecondary";
    readonly RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup";
    readonly OnlineSecondary: "OnlineSecondary";
};
/**
 * Specifies the mode of database creation.
 *
 * Default: regular database creation.
 *
 * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 *
 * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 *
 * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 *
 * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 *
 * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 *
 * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 *
 * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DatabaseLicenseType: {
    readonly LicenseIncluded: "LicenseIncluded";
    readonly BasePrice: "BasePrice";
};
/**
 * The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit.
 */
export type DatabaseLicenseType = (typeof DatabaseLicenseType)[keyof typeof DatabaseLicenseType];
export declare const DatabaseReadScale: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The state of read-only routing. If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica in the same region.
 */
export type DatabaseReadScale = (typeof DatabaseReadScale)[keyof typeof DatabaseReadScale];
export declare const SampleName: {
    readonly AdventureWorksLT: "AdventureWorksLT";
    readonly WideWorldImportersStd: "WideWorldImportersStd";
    readonly WideWorldImportersFull: "WideWorldImportersFull";
};
/**
 * The name of the sample schema to apply when creating this database.
 */
export type SampleName = (typeof SampleName)[keyof typeof SampleName];
export declare const StorageAccountType: {
    readonly GRS: "GRS";
    readonly LRS: "LRS";
    readonly ZRS: "ZRS";
};
/**
 * The storage account type used to store backups for this database.
 */
export type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
