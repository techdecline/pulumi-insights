export declare const AdministratorType: {
    readonly ActiveDirectory: "ActiveDirectory";
};
/**
 * Type of the sever administrator.
 */
export type AdministratorType = (typeof AdministratorType)[keyof typeof AdministratorType];
export declare const AlwaysEncryptedEnclaveType: {
    readonly Default: "Default";
    readonly VBS: "VBS";
};
/**
 * Type of enclave requested on the elastic pool.
 */
export type AlwaysEncryptedEnclaveType = (typeof AlwaysEncryptedEnclaveType)[keyof typeof AlwaysEncryptedEnclaveType];
export declare const AutoExecuteStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly Default: "Default";
};
/**
 * Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'
 */
export type AutoExecuteStatus = (typeof AutoExecuteStatus)[keyof typeof AutoExecuteStatus];
export declare const AvailabilityZoneType: {
    readonly NoPreference: "NoPreference";
    readonly One: "1";
    readonly Two: "2";
    readonly Three: "3";
};
/**
 * Specifies the availability zone the pool's primary replica is pinned to.
 */
export type AvailabilityZoneType = (typeof AvailabilityZoneType)[keyof typeof AvailabilityZoneType];
export declare const BackupStorageRedundancy: {
    readonly Geo: "Geo";
    readonly Local: "Local";
    readonly Zone: "Zone";
    readonly GeoZone: "GeoZone";
};
/**
 * The storage account type to be used to store backups for this instance. The options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
 */
export type BackupStorageRedundancy = (typeof BackupStorageRedundancy)[keyof typeof BackupStorageRedundancy];
export declare const BlobAuditingPolicyState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
 */
export type BlobAuditingPolicyState = (typeof BlobAuditingPolicyState)[keyof typeof BlobAuditingPolicyState];
export declare const CatalogCollationType: {
    readonly DATABASE_DEFAULT: "DATABASE_DEFAULT";
    readonly SQL_Latin1_General_CP1_CI_AS: "SQL_Latin1_General_CP1_CI_AS";
};
/**
 * Collation of the metadata catalog.
 */
export type CatalogCollationType = (typeof CatalogCollationType)[keyof typeof CatalogCollationType];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly Copy: "Copy";
    readonly Secondary: "Secondary";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Restore: "Restore";
    readonly Recovery: "Recovery";
    readonly RestoreExternalBackup: "RestoreExternalBackup";
    readonly RestoreExternalBackupSecondary: "RestoreExternalBackupSecondary";
    readonly RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup";
    readonly OnlineSecondary: "OnlineSecondary";
};
/**
 * Specifies the mode of database creation.
 *
 * Default: regular database creation.
 *
 * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 *
 * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 *
 * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 *
 * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 *
 * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 *
 * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 *
 * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DataMaskingState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The state of the data masking policy.
 */
export type DataMaskingState = (typeof DataMaskingState)[keyof typeof DataMaskingState];
export declare const DatabaseIdentityType: {
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
};
/**
 * The identity type
 */
export type DatabaseIdentityType = (typeof DatabaseIdentityType)[keyof typeof DatabaseIdentityType];
export declare const DatabaseLicenseType: {
    readonly LicenseIncluded: "LicenseIncluded";
    readonly BasePrice: "BasePrice";
};
/**
 * The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit.
 */
export type DatabaseLicenseType = (typeof DatabaseLicenseType)[keyof typeof DatabaseLicenseType];
export declare const DatabaseReadScale: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The state of read-only routing. If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica in the same region. Not applicable to a Hyperscale database within an elastic pool.
 */
export type DatabaseReadScale = (typeof DatabaseReadScale)[keyof typeof DatabaseReadScale];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
/**
 * Stop day.
 */
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const ElasticPoolLicenseType: {
    readonly LicenseIncluded: "LicenseIncluded";
    readonly BasePrice: "BasePrice";
};
/**
 * The license type to apply for this elastic pool.
 */
export type ElasticPoolLicenseType = (typeof ElasticPoolLicenseType)[keyof typeof ElasticPoolLicenseType];
export declare const GeoBackupPolicyState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The state of the geo backup policy.
 */
export type GeoBackupPolicyState = (typeof GeoBackupPolicyState)[keyof typeof GeoBackupPolicyState];
export declare const IdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
 */
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const InstancePoolLicenseType: {
    readonly LicenseIncluded: "LicenseIncluded";
    readonly BasePrice: "BasePrice";
};
/**
 * The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).
 */
export type InstancePoolLicenseType = (typeof InstancePoolLicenseType)[keyof typeof InstancePoolLicenseType];
export declare const JobScheduleType: {
    readonly Once: "Once";
    readonly Recurring: "Recurring";
};
/**
 * Schedule interval type
 */
export type JobScheduleType = (typeof JobScheduleType)[keyof typeof JobScheduleType];
export declare const JobStepActionSource: {
    readonly Inline: "Inline";
};
/**
 * The source of the action to execute.
 */
export type JobStepActionSource = (typeof JobStepActionSource)[keyof typeof JobStepActionSource];
export declare const JobStepActionType: {
    readonly TSql: "TSql";
};
/**
 * Type of action being executed by the job step.
 */
export type JobStepActionType = (typeof JobStepActionType)[keyof typeof JobStepActionType];
export declare const JobStepOutputType: {
    readonly SqlDatabase: "SqlDatabase";
};
/**
 * The output destination type.
 */
export type JobStepOutputType = (typeof JobStepOutputType)[keyof typeof JobStepOutputType];
export declare const JobTargetGroupMembershipType: {
    readonly Include: "Include";
    readonly Exclude: "Exclude";
};
/**
 * Whether the target is included or excluded from the group.
 */
export type JobTargetGroupMembershipType = (typeof JobTargetGroupMembershipType)[keyof typeof JobTargetGroupMembershipType];
export declare const JobTargetType: {
    readonly TargetGroup: "TargetGroup";
    readonly SqlDatabase: "SqlDatabase";
    readonly SqlElasticPool: "SqlElasticPool";
    readonly SqlShardMap: "SqlShardMap";
    readonly SqlServer: "SqlServer";
};
/**
 * The target type.
 */
export type JobTargetType = (typeof JobTargetType)[keyof typeof JobTargetType];
export declare const ManagedDatabaseCreateMode: {
    readonly Default: "Default";
    readonly RestoreExternalBackup: "RestoreExternalBackup";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Recovery: "Recovery";
    readonly RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup";
};
/**
 * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore. RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention backup (longTermRetentionBackupResourceId required).
 */
export type ManagedDatabaseCreateMode = (typeof ManagedDatabaseCreateMode)[keyof typeof ManagedDatabaseCreateMode];
export declare const ManagedInstanceAdministratorType: {
    readonly ActiveDirectory: "ActiveDirectory";
};
/**
 * Type of the managed instance administrator.
 */
export type ManagedInstanceAdministratorType = (typeof ManagedInstanceAdministratorType)[keyof typeof ManagedInstanceAdministratorType];
export declare const ManagedInstanceLicenseType: {
    readonly LicenseIncluded: "LicenseIncluded";
    readonly BasePrice: "BasePrice";
};
/**
 * The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
 */
export type ManagedInstanceLicenseType = (typeof ManagedInstanceLicenseType)[keyof typeof ManagedInstanceLicenseType];
export declare const ManagedInstanceProxyOverride: {
    readonly Proxy: "Proxy";
    readonly Redirect: "Redirect";
    readonly Default: "Default";
};
/**
 * Connection type used for connecting to the instance.
 */
export type ManagedInstanceProxyOverride = (typeof ManagedInstanceProxyOverride)[keyof typeof ManagedInstanceProxyOverride];
export declare const ManagedServerCreateMode: {
    readonly Default: "Default";
    readonly PointInTimeRestore: "PointInTimeRestore";
};
/**
 * Specifies the mode of database creation.
 *
 * Default: Regular instance creation.
 *
 * Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.
 */
export type ManagedServerCreateMode = (typeof ManagedServerCreateMode)[keyof typeof ManagedServerCreateMode];
export declare const PrincipalType: {
    readonly User: "User";
    readonly Group: "Group";
    readonly Application: "Application";
};
/**
 * Principal Type of the sever administrator.
 */
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export declare const PrivateLinkServiceConnectionStateStatus: {
    readonly Approved: "Approved";
    readonly Pending: "Pending";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * The private link service connection status.
 */
export type PrivateLinkServiceConnectionStateStatus = (typeof PrivateLinkServiceConnectionStateStatus)[keyof typeof PrivateLinkServiceConnectionStateStatus];
export declare const ReadOnlyEndpointFailoverPolicy: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Failover policy of the read-only endpoint for the failover group.
 */
export type ReadOnlyEndpointFailoverPolicy = (typeof ReadOnlyEndpointFailoverPolicy)[keyof typeof ReadOnlyEndpointFailoverPolicy];
export declare const ReadWriteEndpointFailoverPolicy: {
    readonly Manual: "Manual";
    readonly Automatic: "Automatic";
};
/**
 * Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
 */
export type ReadWriteEndpointFailoverPolicy = (typeof ReadWriteEndpointFailoverPolicy)[keyof typeof ReadWriteEndpointFailoverPolicy];
export declare const ReplicationMode: {
    readonly Async: "Async";
    readonly Sync: "Sync";
};
/**
 * The replication mode of a distributed availability group. Parameter will be ignored during link creation.
 */
export type ReplicationMode = (typeof ReplicationMode)[keyof typeof ReplicationMode];
export declare const SampleName: {
    readonly AdventureWorksLT: "AdventureWorksLT";
    readonly WideWorldImportersStd: "WideWorldImportersStd";
    readonly WideWorldImportersFull: "WideWorldImportersFull";
};
/**
 * The name of the sample schema to apply when creating this database.
 */
export type SampleName = (typeof SampleName)[keyof typeof SampleName];
export declare const SecondaryInstanceType: {
    readonly Geo: "Geo";
    readonly Standby: "Standby";
};
/**
 * Type of the geo-secondary instance. Set 'Standby' if the instance is used as a DR option only.
 */
export type SecondaryInstanceType = (typeof SecondaryInstanceType)[keyof typeof SecondaryInstanceType];
export declare const SecondaryType: {
    readonly Geo: "Geo";
    readonly Named: "Named";
    readonly Standby: "Standby";
};
/**
 * The secondary type of the database if it is a secondary.  Valid values are Geo, Named and Standby.
 */
export type SecondaryType = (typeof SecondaryType)[keyof typeof SecondaryType];
export declare const SecurityAlertsPolicyState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
 */
export type SecurityAlertsPolicyState = (typeof SecurityAlertsPolicyState)[keyof typeof SecurityAlertsPolicyState];
export declare const SensitivityLabelRank: {
    readonly None: "None";
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
    readonly Critical: "Critical";
};
export type SensitivityLabelRank = (typeof SensitivityLabelRank)[keyof typeof SensitivityLabelRank];
export declare const ServerKeyType: {
    readonly ServiceManaged: "ServiceManaged";
    readonly AzureKeyVault: "AzureKeyVault";
};
/**
 * The server key type like 'ServiceManaged', 'AzureKeyVault'.
 */
export type ServerKeyType = (typeof ServerKeyType)[keyof typeof ServerKeyType];
export declare const ServerNetworkAccessFlag: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not to restrict outbound network access for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
 */
export type ServerNetworkAccessFlag = (typeof ServerNetworkAccessFlag)[keyof typeof ServerNetworkAccessFlag];
export declare const ServerPublicNetworkAccessFlag: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly SecuredByPerimeter: "SecuredByPerimeter";
};
/**
 * Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled' or 'SecuredByPerimeter'
 */
export type ServerPublicNetworkAccessFlag = (typeof ServerPublicNetworkAccessFlag)[keyof typeof ServerPublicNetworkAccessFlag];
export declare const ServicePrincipalType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * Service principal type.
 */
export type ServicePrincipalType = (typeof ServicePrincipalType)[keyof typeof ServicePrincipalType];
export declare const SqlVulnerabilityAssessmentState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or disabled or a state has not been applied yet on the specific database or server.
 */
export type SqlVulnerabilityAssessmentState = (typeof SqlVulnerabilityAssessmentState)[keyof typeof SqlVulnerabilityAssessmentState];
export declare const SyncConflictResolutionPolicy: {
    readonly HubWin: "HubWin";
    readonly MemberWin: "MemberWin";
};
/**
 * Conflict resolution policy of the sync group.
 */
export type SyncConflictResolutionPolicy = (typeof SyncConflictResolutionPolicy)[keyof typeof SyncConflictResolutionPolicy];
export declare const SyncDirection: {
    readonly Bidirectional: "Bidirectional";
    readonly OneWayMemberToHub: "OneWayMemberToHub";
    readonly OneWayHubToMember: "OneWayHubToMember";
};
/**
 * Sync direction of the sync member.
 */
export type SyncDirection = (typeof SyncDirection)[keyof typeof SyncDirection];
export declare const SyncMemberDbType: {
    readonly AzureSqlDatabase: "AzureSqlDatabase";
    readonly SqlServerDatabase: "SqlServerDatabase";
};
/**
 * Database type of the sync member.
 */
export type SyncMemberDbType = (typeof SyncMemberDbType)[keyof typeof SyncMemberDbType];
export declare const TransparentDataEncryptionState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies the state of the transparent data encryption.
 */
export type TransparentDataEncryptionState = (typeof TransparentDataEncryptionState)[keyof typeof TransparentDataEncryptionState];
