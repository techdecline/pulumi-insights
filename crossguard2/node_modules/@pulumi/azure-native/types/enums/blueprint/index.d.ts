import * as v20181101preview from "./v20181101preview";
export { v20181101preview, };
export declare const ArtifactKind: {
    readonly Template: "template";
    readonly RoleAssignment: "roleAssignment";
    readonly PolicyAssignment: "policyAssignment";
};
/**
 * Specifies the kind of blueprint artifact.
 */
export type ArtifactKind = (typeof ArtifactKind)[keyof typeof ArtifactKind];
export declare const AssignmentLockMode: {
    readonly None: "None";
    readonly AllResourcesReadOnly: "AllResourcesReadOnly";
    readonly AllResourcesDoNotDelete: "AllResourcesDoNotDelete";
};
/**
 * Lock mode.
 */
export type AssignmentLockMode = (typeof AssignmentLockMode)[keyof typeof AssignmentLockMode];
export declare const BlueprintTargetScope: {
    /**
     * The blueprint targets a subscription during blueprint assignment.
     */
    readonly Subscription: "subscription";
    /**
     * The blueprint targets a management group during blueprint assignment. This is reserved for future use.
     */
    readonly ManagementGroup: "managementGroup";
};
/**
 * The scope where this blueprint definition can be assigned.
 */
export type BlueprintTargetScope = (typeof BlueprintTargetScope)[keyof typeof BlueprintTargetScope];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
};
/**
 * Type of the managed identity.
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const TemplateParameterType: {
    readonly String: "string";
    readonly Array: "array";
    readonly Bool: "bool";
    readonly Int: "int";
    readonly Object: "object";
    readonly SecureObject: "secureObject";
    readonly SecureString: "secureString";
};
/**
 * Allowed data types for Resource Manager template parameters.
 */
export type TemplateParameterType = (typeof TemplateParameterType)[keyof typeof TemplateParameterType];
