import * as v20210401preview from "./v20210401preview";
import * as v20220501preview from "./v20220501preview";
import * as v20221001preview from "./v20221001preview";
import * as v20231101preview from "./v20231101preview";
import * as v20240101 from "./v20240101";
import * as v20240201preview from "./v20240201preview";
import * as v20240601preview from "./v20240601preview";
import * as v20240701preview from "./v20240701preview";
import * as v20240715preview from "./v20240715preview";
import * as v20241201preview from "./v20241201preview";
export { v20210401preview, v20220501preview, v20221001preview, v20231101preview, v20240101, v20240201preview, v20240601preview, v20240701preview, v20240715preview, v20241201preview, };
export declare const AuthenticationMethod: {
    readonly Token: "Token";
    readonly AAD: "AAD";
};
/**
 * The mode of client authentication.
 */
export type AuthenticationMethod = (typeof AuthenticationMethod)[keyof typeof AuthenticationMethod];
export declare const PrivateLinkState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Property which describes the state of private link on a connected cluster resource.
 */
export type PrivateLinkState = (typeof PrivateLinkState)[keyof typeof PrivateLinkState];
export declare const ProvisioningState: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
    readonly Provisioning: "Provisioning";
    readonly Updating: "Updating";
    readonly Deleting: "Deleting";
    readonly Accepted: "Accepted";
};
/**
 * Provisioning state of the connected cluster resource.
 */
export type ProvisioningState = (typeof ProvisioningState)[keyof typeof ProvisioningState];
export declare const ResourceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
