export declare const CustomImageOsType: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
    readonly None: "None";
};
/**
 * The OS type of the custom image (i.e. Windows, Linux)
 */
export type CustomImageOsType = (typeof CustomImageOsType)[keyof typeof CustomImageOsType];
export declare const EnableStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the schedule (i.e. Enabled, Disabled)
 */
export type EnableStatus = (typeof EnableStatus)[keyof typeof EnableStatus];
export declare const EnvironmentPermission: {
    readonly Reader: "Reader";
    readonly Contributor: "Contributor";
};
/**
 * The access rights to be granted to the user when provisioning an environment
 */
export type EnvironmentPermission = (typeof EnvironmentPermission)[keyof typeof EnvironmentPermission];
export declare const HostCachingOptions: {
    readonly None: "None";
    readonly ReadOnly: "ReadOnly";
    readonly ReadWrite: "ReadWrite";
};
/**
 * Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
 */
export type HostCachingOptions = (typeof HostCachingOptions)[keyof typeof HostCachingOptions];
export declare const LinuxOsState: {
    readonly NonDeprovisioned: "NonDeprovisioned";
    readonly DeprovisionRequested: "DeprovisionRequested";
    readonly DeprovisionApplied: "DeprovisionApplied";
};
/**
 * The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
 */
export type LinuxOsState = (typeof LinuxOsState)[keyof typeof LinuxOsState];
export declare const ManagedIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Managed identity.
 */
export type ManagedIdentityType = (typeof ManagedIdentityType)[keyof typeof ManagedIdentityType];
export declare const NotificationChannelEventType: {
    readonly AutoShutdown: "AutoShutdown";
    readonly Cost: "Cost";
};
/**
 * The event type for which this notification is enabled (i.e. AutoShutdown, Cost)
 */
export type NotificationChannelEventType = (typeof NotificationChannelEventType)[keyof typeof NotificationChannelEventType];
export declare const PolicyEvaluatorType: {
    readonly AllowedValuesPolicy: "AllowedValuesPolicy";
    readonly MaxValuePolicy: "MaxValuePolicy";
};
/**
 * The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
 */
export type PolicyEvaluatorType = (typeof PolicyEvaluatorType)[keyof typeof PolicyEvaluatorType];
export declare const PolicyFactName: {
    readonly UserOwnedLabVmCount: "UserOwnedLabVmCount";
    readonly UserOwnedLabPremiumVmCount: "UserOwnedLabPremiumVmCount";
    readonly LabVmCount: "LabVmCount";
    readonly LabPremiumVmCount: "LabPremiumVmCount";
    readonly LabVmSize: "LabVmSize";
    readonly GalleryImage: "GalleryImage";
    readonly UserOwnedLabVmCountInSubnet: "UserOwnedLabVmCountInSubnet";
    readonly LabTargetCost: "LabTargetCost";
    readonly EnvironmentTemplate: "EnvironmentTemplate";
    readonly ScheduleEditPermission: "ScheduleEditPermission";
};
/**
 * The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
 */
export type PolicyFactName = (typeof PolicyFactName)[keyof typeof PolicyFactName];
export declare const PolicyStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the policy.
 */
export type PolicyStatus = (typeof PolicyStatus)[keyof typeof PolicyStatus];
export declare const PremiumDataDisk: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The setting to enable usage of premium data disks.
 * When its value is 'Enabled', creation of standard or premium data disks is allowed.
 * When its value is 'Disabled', only creation of standard data disks is allowed.
 */
export type PremiumDataDisk = (typeof PremiumDataDisk)[keyof typeof PremiumDataDisk];
export declare const SourceControlType: {
    readonly VsoGit: "VsoGit";
    readonly GitHub: "GitHub";
    readonly StorageAccount: "StorageAccount";
};
/**
 * The artifact source's type.
 */
export type SourceControlType = (typeof SourceControlType)[keyof typeof SourceControlType];
export declare const StorageType: {
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly StandardSSD: "StandardSSD";
};
/**
 * The storage type for the disk (i.e. Standard, Premium).
 */
export type StorageType = (typeof StorageType)[keyof typeof StorageType];
export declare const TransportProtocol: {
    readonly Tcp: "Tcp";
    readonly Udp: "Udp";
};
/**
 * Protocol type of the port.
 */
export type TransportProtocol = (typeof TransportProtocol)[keyof typeof TransportProtocol];
export declare const UsagePermissionType: {
    readonly Default: "Default";
    readonly Deny: "Deny";
    readonly Allow: "Allow";
};
/**
 * Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
 */
export type UsagePermissionType = (typeof UsagePermissionType)[keyof typeof UsagePermissionType];
export declare const WindowsOsState: {
    readonly NonSysprepped: "NonSysprepped";
    readonly SysprepRequested: "SysprepRequested";
    readonly SysprepApplied: "SysprepApplied";
};
/**
 * The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
 */
export type WindowsOsState = (typeof WindowsOsState)[keyof typeof WindowsOsState];
