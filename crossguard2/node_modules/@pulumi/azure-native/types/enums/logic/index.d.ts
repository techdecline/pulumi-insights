import * as v20150201preview from "./v20150201preview";
import * as v20150801preview from "./v20150801preview";
import * as v20160601 from "./v20160601";
import * as v20180701preview from "./v20180701preview";
import * as v20190501 from "./v20190501";
export { v20150201preview, v20150801preview, v20160601, v20180701preview, v20190501, };
export declare const AgreementType: {
    readonly NotSpecified: "NotSpecified";
    readonly AS2: "AS2";
    readonly X12: "X12";
    readonly Edifact: "Edifact";
};
/**
 * The agreement type.
 */
export type AgreementType = (typeof AgreementType)[keyof typeof AgreementType];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
/**
 * The day of the week.
 */
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const DaysOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek];
export declare const EdifactCharacterSet: {
    readonly NotSpecified: "NotSpecified";
    readonly UNOB: "UNOB";
    readonly UNOA: "UNOA";
    readonly UNOC: "UNOC";
    readonly UNOD: "UNOD";
    readonly UNOE: "UNOE";
    readonly UNOF: "UNOF";
    readonly UNOG: "UNOG";
    readonly UNOH: "UNOH";
    readonly UNOI: "UNOI";
    readonly UNOJ: "UNOJ";
    readonly UNOK: "UNOK";
    readonly UNOX: "UNOX";
    readonly UNOY: "UNOY";
    readonly KECA: "KECA";
};
/**
 * The EDIFACT frame setting characterSet.
 */
export type EdifactCharacterSet = (typeof EdifactCharacterSet)[keyof typeof EdifactCharacterSet];
export declare const EdifactDecimalIndicator: {
    readonly NotSpecified: "NotSpecified";
    readonly Comma: "Comma";
    readonly Decimal: "Decimal";
};
/**
 * The EDIFACT frame setting decimal indicator.
 */
export type EdifactDecimalIndicator = (typeof EdifactDecimalIndicator)[keyof typeof EdifactDecimalIndicator];
export declare const EncryptionAlgorithm: {
    readonly NotSpecified: "NotSpecified";
    readonly None: "None";
    readonly DES3: "DES3";
    readonly RC2: "RC2";
    readonly AES128: "AES128";
    readonly AES192: "AES192";
    readonly AES256: "AES256";
};
/**
 * The encryption algorithm.
 */
export type EncryptionAlgorithm = (typeof EncryptionAlgorithm)[keyof typeof EncryptionAlgorithm];
export declare const HashingAlgorithm: {
    readonly NotSpecified: "NotSpecified";
    readonly None: "None";
    readonly MD5: "MD5";
    readonly SHA1: "SHA1";
    readonly SHA2256: "SHA2256";
    readonly SHA2384: "SHA2384";
    readonly SHA2512: "SHA2512";
};
/**
 * The signing or hashing algorithm.
 */
export type HashingAlgorithm = (typeof HashingAlgorithm)[keyof typeof HashingAlgorithm];
export declare const IntegrationAccountSkuName: {
    readonly NotSpecified: "NotSpecified";
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * The sku name.
 */
export type IntegrationAccountSkuName = (typeof IntegrationAccountSkuName)[keyof typeof IntegrationAccountSkuName];
export declare const IntegrationServiceEnvironmentAccessEndpointType: {
    readonly NotSpecified: "NotSpecified";
    readonly External: "External";
    readonly Internal: "Internal";
};
/**
 * The access endpoint type.
 */
export type IntegrationServiceEnvironmentAccessEndpointType = (typeof IntegrationServiceEnvironmentAccessEndpointType)[keyof typeof IntegrationServiceEnvironmentAccessEndpointType];
export declare const IntegrationServiceEnvironmentSkuName: {
    readonly NotSpecified: "NotSpecified";
    readonly Premium: "Premium";
    readonly Developer: "Developer";
};
/**
 * The sku name.
 */
export type IntegrationServiceEnvironmentSkuName = (typeof IntegrationServiceEnvironmentSkuName)[keyof typeof IntegrationServiceEnvironmentSkuName];
export declare const KeyType: {
    readonly NotSpecified: "NotSpecified";
    readonly Primary: "Primary";
    readonly Secondary: "Secondary";
};
/**
 * The key type.
 */
export type KeyType = (typeof KeyType)[keyof typeof KeyType];
export declare const ManagedServiceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly None: "None";
};
/**
 * Type of managed service identity. The type 'SystemAssigned' includes an implicitly created identity. The type 'None' will remove any identities from the resource.
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const MapType: {
    readonly NotSpecified: "NotSpecified";
    readonly Xslt: "Xslt";
    readonly Xslt20: "Xslt20";
    readonly Xslt30: "Xslt30";
    readonly Liquid: "Liquid";
};
/**
 * The map type.
 */
export type MapType = (typeof MapType)[keyof typeof MapType];
export declare const MessageFilterType: {
    readonly NotSpecified: "NotSpecified";
    readonly Include: "Include";
    readonly Exclude: "Exclude";
};
/**
 * The message filter type.
 */
export type MessageFilterType = (typeof MessageFilterType)[keyof typeof MessageFilterType];
export declare const OpenAuthenticationProviderType: {
    readonly AAD: "AAD";
};
/**
 * Type of provider for OAuth.
 */
export type OpenAuthenticationProviderType = (typeof OpenAuthenticationProviderType)[keyof typeof OpenAuthenticationProviderType];
export declare const ParameterType: {
    readonly NotSpecified: "NotSpecified";
    readonly String: "String";
    readonly SecureString: "SecureString";
    readonly Int: "Int";
    readonly Float: "Float";
    readonly Bool: "Bool";
    readonly Array: "Array";
    readonly Object: "Object";
    readonly SecureObject: "SecureObject";
};
/**
 * The type.
 */
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];
export declare const PartnerType: {
    readonly NotSpecified: "NotSpecified";
    readonly B2B: "B2B";
};
/**
 * The partner type.
 */
export type PartnerType = (typeof PartnerType)[keyof typeof PartnerType];
export declare const RecurrenceFrequency: {
    readonly NotSpecified: "NotSpecified";
    readonly Second: "Second";
    readonly Minute: "Minute";
    readonly Hour: "Hour";
    readonly Day: "Day";
    readonly Week: "Week";
    readonly Month: "Month";
    readonly Year: "Year";
};
/**
 * The frequency.
 */
export type RecurrenceFrequency = (typeof RecurrenceFrequency)[keyof typeof RecurrenceFrequency];
export declare const RosettaNetActionType: {
    readonly NotSpecified: "NotSpecified";
    readonly SingleAction: "SingleAction";
    readonly DoubleAction: "DoubleAction";
};
/**
 * The value indicating whether the RosettaNet PIP is used for a single action.
 */
export type RosettaNetActionType = (typeof RosettaNetActionType)[keyof typeof RosettaNetActionType];
export declare const RosettaNetPipActivityType: {
    readonly NotSpecified: "NotSpecified";
    readonly InformationDistribution: "InformationDistribution";
    readonly BusinessTransaction: "BusinessTransaction";
    readonly Notification: "Notification";
    readonly QueryResponse: "QueryResponse";
    readonly RequestConfirm: "RequestConfirm";
    readonly RequestResponse: "RequestResponse";
};
/**
 * The RosettaNet ProcessConfiguration activity type.
 */
export type RosettaNetPipActivityType = (typeof RosettaNetPipActivityType)[keyof typeof RosettaNetPipActivityType];
export declare const RosettaNetPipConfidentialityScope: {
    readonly NotSpecified: "NotSpecified";
    readonly None: "None";
    readonly Payload: "Payload";
    readonly PayloadContainer: "PayloadContainer";
};
/**
 * The persistent confidentiality encryption scope.
 */
export type RosettaNetPipConfidentialityScope = (typeof RosettaNetPipConfidentialityScope)[keyof typeof RosettaNetPipConfidentialityScope];
export declare const RosettaNetPipRoleType: {
    readonly NotSpecified: "NotSpecified";
    readonly Functional: "Functional";
    readonly Organizational: "Organizational";
    readonly Employee: "Employee";
};
/**
 * The RosettaNet ProcessConfiguration role type.
 */
export type RosettaNetPipRoleType = (typeof RosettaNetPipRoleType)[keyof typeof RosettaNetPipRoleType];
export declare const RosettaNetResponseType: {
    readonly NotSpecified: "NotSpecified";
    readonly Sync: "Sync";
    readonly Async: "Async";
};
/**
 * The value indicating whether the RosettaNet PIP communication is synchronous.
 */
export type RosettaNetResponseType = (typeof RosettaNetResponseType)[keyof typeof RosettaNetResponseType];
export declare const SchemaType: {
    readonly NotSpecified: "NotSpecified";
    readonly Xml: "Xml";
};
/**
 * The schema type.
 */
export type SchemaType = (typeof SchemaType)[keyof typeof SchemaType];
export declare const SegmentTerminatorSuffix: {
    readonly NotSpecified: "NotSpecified";
    readonly None: "None";
    readonly CR: "CR";
    readonly LF: "LF";
    readonly CRLF: "CRLF";
};
/**
 * The segment terminator suffix.
 */
export type SegmentTerminatorSuffix = (typeof SegmentTerminatorSuffix)[keyof typeof SegmentTerminatorSuffix];
export declare const SigningAlgorithm: {
    readonly NotSpecified: "NotSpecified";
    readonly Default: "Default";
    readonly SHA1: "SHA1";
    readonly SHA2256: "SHA2256";
    readonly SHA2384: "SHA2384";
    readonly SHA2512: "SHA2512";
};
/**
 * The signing algorithm.
 */
export type SigningAlgorithm = (typeof SigningAlgorithm)[keyof typeof SigningAlgorithm];
export declare const TrailingSeparatorPolicy: {
    readonly NotSpecified: "NotSpecified";
    readonly NotAllowed: "NotAllowed";
    readonly Optional: "Optional";
    readonly Mandatory: "Mandatory";
};
/**
 * The trailing separator policy.
 */
export type TrailingSeparatorPolicy = (typeof TrailingSeparatorPolicy)[keyof typeof TrailingSeparatorPolicy];
export declare const UsageIndicator: {
    readonly NotSpecified: "NotSpecified";
    readonly Test: "Test";
    readonly Information: "Information";
    readonly Production: "Production";
};
/**
 * The usage indicator.
 */
export type UsageIndicator = (typeof UsageIndicator)[keyof typeof UsageIndicator];
export declare const WorkflowProvisioningState: {
    readonly NotSpecified: "NotSpecified";
    readonly Accepted: "Accepted";
    readonly Running: "Running";
    readonly Ready: "Ready";
    readonly Creating: "Creating";
    readonly Created: "Created";
    readonly Deleting: "Deleting";
    readonly Deleted: "Deleted";
    readonly Canceled: "Canceled";
    readonly Failed: "Failed";
    readonly Succeeded: "Succeeded";
    readonly Moving: "Moving";
    readonly Updating: "Updating";
    readonly Registering: "Registering";
    readonly Registered: "Registered";
    readonly Unregistering: "Unregistering";
    readonly Unregistered: "Unregistered";
    readonly Completed: "Completed";
    readonly Renewing: "Renewing";
    readonly Pending: "Pending";
    readonly Waiting: "Waiting";
    readonly InProgress: "InProgress";
};
/**
 * The provisioning state.
 */
export type WorkflowProvisioningState = (typeof WorkflowProvisioningState)[keyof typeof WorkflowProvisioningState];
export declare const WorkflowState: {
    readonly NotSpecified: "NotSpecified";
    readonly Completed: "Completed";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly Deleted: "Deleted";
    readonly Suspended: "Suspended";
};
/**
 * The state.
 */
export type WorkflowState = (typeof WorkflowState)[keyof typeof WorkflowState];
export declare const X12CharacterSet: {
    readonly NotSpecified: "NotSpecified";
    readonly Basic: "Basic";
    readonly Extended: "Extended";
    readonly UTF8: "UTF8";
};
/**
 * The X12 character set.
 */
export type X12CharacterSet = (typeof X12CharacterSet)[keyof typeof X12CharacterSet];
export declare const X12DateFormat: {
    readonly NotSpecified: "NotSpecified";
    readonly CCYYMMDD: "CCYYMMDD";
    readonly YYMMDD: "YYMMDD";
};
/**
 * The group header date format.
 */
export type X12DateFormat = (typeof X12DateFormat)[keyof typeof X12DateFormat];
export declare const X12TimeFormat: {
    readonly NotSpecified: "NotSpecified";
    readonly HHMM: "HHMM";
    readonly HHMMSS: "HHMMSS";
    readonly HHMMSSdd: "HHMMSSdd";
    readonly HHMMSSd: "HHMMSSd";
};
/**
 * The group header time format.
 */
export type X12TimeFormat = (typeof X12TimeFormat)[keyof typeof X12TimeFormat];
