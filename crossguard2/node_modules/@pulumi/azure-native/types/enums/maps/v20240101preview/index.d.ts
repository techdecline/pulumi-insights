export declare const InfrastructureEncryption: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
 */
export type InfrastructureEncryption = (typeof InfrastructureEncryption)[keyof typeof InfrastructureEncryption];
export declare const Kind: {
    readonly Gen2: "Gen2";
};
/**
 * Get or Set Kind property.
 */
export type Kind = (typeof Kind)[keyof typeof Kind];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const Name: {
    readonly G2: "G2";
};
/**
 * The name of the SKU, in standard format (such as G2).
 */
export type Name = (typeof Name)[keyof typeof Name];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * Property to specify whether the Maps Account will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const SigningKey: {
    readonly PrimaryKey: "primaryKey";
    readonly SecondaryKey: "secondaryKey";
    readonly ManagedIdentity: "managedIdentity";
};
/**
 * The Maps account key to use for signing. Picking `primaryKey` or `secondaryKey` will use the Maps account Shared Keys, and using `managedIdentity` will use the auto-renewed private key to sign the SAS.
 */
export type SigningKey = (typeof SigningKey)[keyof typeof SigningKey];
