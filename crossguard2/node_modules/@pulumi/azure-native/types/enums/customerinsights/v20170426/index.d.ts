export declare const CalculationWindowTypes: {
    readonly Lifetime: "Lifetime";
    readonly Hour: "Hour";
    readonly Day: "Day";
    readonly Week: "Week";
    readonly Month: "Month";
};
/**
 * The calculation window.
 */
export type CalculationWindowTypes = (typeof CalculationWindowTypes)[keyof typeof CalculationWindowTypes];
export declare const CardinalityTypes: {
    readonly OneToOne: "OneToOne";
    readonly OneToMany: "OneToMany";
    readonly ManyToMany: "ManyToMany";
};
/**
 * The Relationship Cardinality.
 */
export type CardinalityTypes = (typeof CardinalityTypes)[keyof typeof CardinalityTypes];
export declare const CompletionOperationTypes: {
    readonly DoNothing: "DoNothing";
    readonly DeleteFile: "DeleteFile";
    readonly MoveFile: "MoveFile";
};
/**
 * The type of completion operation.
 */
export type CompletionOperationTypes = (typeof CompletionOperationTypes)[keyof typeof CompletionOperationTypes];
export declare const ConnectorTypes: {
    readonly None: "None";
    readonly CRM: "CRM";
    readonly AzureBlob: "AzureBlob";
    readonly Salesforce: "Salesforce";
    readonly ExchangeOnline: "ExchangeOnline";
    readonly Outbound: "Outbound";
};
/**
 * Type of connector.
 */
export type ConnectorTypes = (typeof ConnectorTypes)[keyof typeof ConnectorTypes];
export declare const EntityType: {
    readonly None: "None";
    readonly Profile: "Profile";
    readonly Interaction: "Interaction";
    readonly Relationship: "Relationship";
};
/**
 * Type of target entity.
 */
export type EntityType = (typeof EntityType)[keyof typeof EntityType];
export declare const EntityTypes: {
    readonly None: "None";
    readonly Profile: "Profile";
    readonly Interaction: "Interaction";
    readonly Relationship: "Relationship";
};
/**
 * Type of entity.
 */
export type EntityTypes = (typeof EntityTypes)[keyof typeof EntityTypes];
export declare const ErrorManagementTypes: {
    readonly RejectAndContinue: "RejectAndContinue";
    readonly StopImport: "StopImport";
    readonly RejectUntilLimit: "RejectUntilLimit";
};
/**
 * The type of error management to use for the mapping.
 */
export type ErrorManagementTypes = (typeof ErrorManagementTypes)[keyof typeof ErrorManagementTypes];
export declare const FormatTypes: {
    readonly TextFormat: "TextFormat";
};
/**
 * The type mapping format.
 */
export type FormatTypes = (typeof FormatTypes)[keyof typeof FormatTypes];
export declare const FrequencyTypes: {
    readonly Minute: "Minute";
    readonly Hour: "Hour";
    readonly Day: "Day";
    readonly Week: "Week";
    readonly Month: "Month";
};
/**
 * The frequency to update.
 */
export type FrequencyTypes = (typeof FrequencyTypes)[keyof typeof FrequencyTypes];
export declare const InstanceOperationType: {
    readonly Upsert: "Upsert";
    readonly Delete: "Delete";
};
/**
 * Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
 */
export type InstanceOperationType = (typeof InstanceOperationType)[keyof typeof InstanceOperationType];
export declare const KpiFunctions: {
    readonly Sum: "Sum";
    readonly Avg: "Avg";
    readonly Min: "Min";
    readonly Max: "Max";
    readonly Last: "Last";
    readonly Count: "Count";
    readonly None: "None";
    readonly CountDistinct: "CountDistinct";
};
/**
 * The computation function for the KPI.
 */
export type KpiFunctions = (typeof KpiFunctions)[keyof typeof KpiFunctions];
export declare const LinkTypes: {
    readonly UpdateAlways: "UpdateAlways";
    readonly CopyIfNull: "CopyIfNull";
};
/**
 * Link type.
 */
export type LinkTypes = (typeof LinkTypes)[keyof typeof LinkTypes];
export declare const RoleTypes: {
    readonly Admin: "Admin";
    readonly Reader: "Reader";
    readonly ManageAdmin: "ManageAdmin";
    readonly ManageReader: "ManageReader";
    readonly DataAdmin: "DataAdmin";
    readonly DataReader: "DataReader";
};
/**
 * Type of roles.
 */
export type RoleTypes = (typeof RoleTypes)[keyof typeof RoleTypes];
