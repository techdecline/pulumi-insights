export declare const AzureSkuName: {
    readonly Dev_No_SLA_Standard_D11_v2: "Dev(No SLA)_Standard_D11_v2";
    readonly Dev_No_SLA_Standard_E2a_v4: "Dev(No SLA)_Standard_E2a_v4";
    readonly Standard_D11_v2: "Standard_D11_v2";
    readonly Standard_D12_v2: "Standard_D12_v2";
    readonly Standard_D13_v2: "Standard_D13_v2";
    readonly Standard_D14_v2: "Standard_D14_v2";
    readonly Standard_D32d_v4: "Standard_D32d_v4";
    readonly Standard_D16d_v5: "Standard_D16d_v5";
    readonly Standard_D32d_v5: "Standard_D32d_v5";
    readonly Standard_DS13_v2_1TB_PS: "Standard_DS13_v2+1TB_PS";
    readonly Standard_DS13_v2_2TB_PS: "Standard_DS13_v2+2TB_PS";
    readonly Standard_DS14_v2_3TB_PS: "Standard_DS14_v2+3TB_PS";
    readonly Standard_DS14_v2_4TB_PS: "Standard_DS14_v2+4TB_PS";
    readonly Standard_L4s: "Standard_L4s";
    readonly Standard_L8s: "Standard_L8s";
    readonly Standard_L16s: "Standard_L16s";
    readonly Standard_L8s_v2: "Standard_L8s_v2";
    readonly Standard_L16s_v2: "Standard_L16s_v2";
    readonly Standard_L8s_v3: "Standard_L8s_v3";
    readonly Standard_L16s_v3: "Standard_L16s_v3";
    readonly Standard_L32s_v3: "Standard_L32s_v3";
    readonly Standard_L8as_v3: "Standard_L8as_v3";
    readonly Standard_L16as_v3: "Standard_L16as_v3";
    readonly Standard_L32as_v3: "Standard_L32as_v3";
    readonly Standard_E64i_v3: "Standard_E64i_v3";
    readonly Standard_E80ids_v4: "Standard_E80ids_v4";
    readonly Standard_E2a_v4: "Standard_E2a_v4";
    readonly Standard_E4a_v4: "Standard_E4a_v4";
    readonly Standard_E8a_v4: "Standard_E8a_v4";
    readonly Standard_E16a_v4: "Standard_E16a_v4";
    readonly Standard_E8as_v4_1TB_PS: "Standard_E8as_v4+1TB_PS";
    readonly Standard_E8as_v4_2TB_PS: "Standard_E8as_v4+2TB_PS";
    readonly Standard_E16as_v4_3TB_PS: "Standard_E16as_v4+3TB_PS";
    readonly Standard_E16as_v4_4TB_PS: "Standard_E16as_v4+4TB_PS";
    readonly Standard_E8as_v5_1TB_PS: "Standard_E8as_v5+1TB_PS";
    readonly Standard_E8as_v5_2TB_PS: "Standard_E8as_v5+2TB_PS";
    readonly Standard_E16as_v5_3TB_PS: "Standard_E16as_v5+3TB_PS";
    readonly Standard_E16as_v5_4TB_PS: "Standard_E16as_v5+4TB_PS";
    readonly Standard_E2ads_v5: "Standard_E2ads_v5";
    readonly Standard_E4ads_v5: "Standard_E4ads_v5";
    readonly Standard_E8ads_v5: "Standard_E8ads_v5";
    readonly Standard_E16ads_v5: "Standard_E16ads_v5";
    readonly Standard_EC8as_v5_1TB_PS: "Standard_EC8as_v5+1TB_PS";
    readonly Standard_EC8as_v5_2TB_PS: "Standard_EC8as_v5+2TB_PS";
    readonly Standard_EC16as_v5_3TB_PS: "Standard_EC16as_v5+3TB_PS";
    readonly Standard_EC16as_v5_4TB_PS: "Standard_EC16as_v5+4TB_PS";
    readonly Standard_EC8ads_v5: "Standard_EC8ads_v5";
    readonly Standard_EC16ads_v5: "Standard_EC16ads_v5";
    readonly Standard_E8s_v4_1TB_PS: "Standard_E8s_v4+1TB_PS";
    readonly Standard_E8s_v4_2TB_PS: "Standard_E8s_v4+2TB_PS";
    readonly Standard_E16s_v4_3TB_PS: "Standard_E16s_v4+3TB_PS";
    readonly Standard_E16s_v4_4TB_PS: "Standard_E16s_v4+4TB_PS";
    readonly Standard_E8s_v5_1TB_PS: "Standard_E8s_v5+1TB_PS";
    readonly Standard_E8s_v5_2TB_PS: "Standard_E8s_v5+2TB_PS";
    readonly Standard_E16s_v5_3TB_PS: "Standard_E16s_v5+3TB_PS";
    readonly Standard_E16s_v5_4TB_PS: "Standard_E16s_v5+4TB_PS";
    readonly Standard_E2d_v4: "Standard_E2d_v4";
    readonly Standard_E4d_v4: "Standard_E4d_v4";
    readonly Standard_E8d_v4: "Standard_E8d_v4";
    readonly Standard_E16d_v4: "Standard_E16d_v4";
    readonly Standard_E2d_v5: "Standard_E2d_v5";
    readonly Standard_E4d_v5: "Standard_E4d_v5";
    readonly Standard_E8d_v5: "Standard_E8d_v5";
    readonly Standard_E16d_v5: "Standard_E16d_v5";
};
/**
 * SKU name.
 */
export type AzureSkuName = (typeof AzureSkuName)[keyof typeof AzureSkuName];
export declare const AzureSkuTier: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * SKU tier.
 */
export type AzureSkuTier = (typeof AzureSkuTier)[keyof typeof AzureSkuTier];
export declare const BlobStorageEventType: {
    readonly Microsoft_Storage_BlobCreated: "Microsoft.Storage.BlobCreated";
    readonly Microsoft_Storage_BlobRenamed: "Microsoft.Storage.BlobRenamed";
};
/**
 * The name of blob storage event type to process.
 */
export type BlobStorageEventType = (typeof BlobStorageEventType)[keyof typeof BlobStorageEventType];
export declare const ClusterNetworkAccessFlag: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not to restrict outbound network access.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
 */
export type ClusterNetworkAccessFlag = (typeof ClusterNetworkAccessFlag)[keyof typeof ClusterNetworkAccessFlag];
export declare const ClusterPrincipalRole: {
    readonly AllDatabasesAdmin: "AllDatabasesAdmin";
    readonly AllDatabasesViewer: "AllDatabasesViewer";
};
/**
 * Cluster principal role.
 */
export type ClusterPrincipalRole = (typeof ClusterPrincipalRole)[keyof typeof ClusterPrincipalRole];
export declare const Compression: {
    readonly None: "None";
    readonly GZip: "GZip";
};
/**
 * The event hub messages compression type
 */
export type Compression = (typeof Compression)[keyof typeof Compression];
export declare const DataConnectionKind: {
    readonly EventHub: "EventHub";
    readonly EventGrid: "EventGrid";
    readonly IotHub: "IotHub";
    readonly CosmosDb: "CosmosDb";
};
/**
 * Kind of the endpoint for the data connection
 */
export type DataConnectionKind = (typeof DataConnectionKind)[keyof typeof DataConnectionKind];
export declare const DatabasePrincipalRole: {
    readonly Admin: "Admin";
    readonly Ingestor: "Ingestor";
    readonly Monitor: "Monitor";
    readonly User: "User";
    readonly UnrestrictedViewer: "UnrestrictedViewer";
    readonly Viewer: "Viewer";
};
/**
 * Database principal role.
 */
export type DatabasePrincipalRole = (typeof DatabasePrincipalRole)[keyof typeof DatabasePrincipalRole];
export declare const DatabaseRouting: {
    readonly Single: "Single";
    readonly Multi: "Multi";
};
/**
 * Indication for database routing information from the data connection, by default only database routing information is allowed
 */
export type DatabaseRouting = (typeof DatabaseRouting)[keyof typeof DatabaseRouting];
export declare const DefaultPrincipalsModificationKind: {
    readonly Union: "Union";
    readonly Replace: "Replace";
    readonly None: "None";
};
/**
 * The default principals modification kind
 */
export type DefaultPrincipalsModificationKind = (typeof DefaultPrincipalsModificationKind)[keyof typeof DefaultPrincipalsModificationKind];
export declare const EngineType: {
    readonly V2: "V2";
    readonly V3: "V3";
};
/**
 * The engine type
 */
export type EngineType = (typeof EngineType)[keyof typeof EngineType];
export declare const EventGridDataFormat: {
    readonly MULTIJSON: "MULTIJSON";
    readonly JSON: "JSON";
    readonly CSV: "CSV";
    readonly TSV: "TSV";
    readonly SCSV: "SCSV";
    readonly SOHSV: "SOHSV";
    readonly PSV: "PSV";
    readonly TXT: "TXT";
    readonly RAW: "RAW";
    readonly SINGLEJSON: "SINGLEJSON";
    readonly AVRO: "AVRO";
    readonly TSVE: "TSVE";
    readonly PARQUET: "PARQUET";
    readonly ORC: "ORC";
    readonly APACHEAVRO: "APACHEAVRO";
    readonly W3CLOGFILE: "W3CLOGFILE";
};
/**
 * The data format of the message. Optionally the data format can be added to each message.
 */
export type EventGridDataFormat = (typeof EventGridDataFormat)[keyof typeof EventGridDataFormat];
export declare const EventHubDataFormat: {
    readonly MULTIJSON: "MULTIJSON";
    readonly JSON: "JSON";
    readonly CSV: "CSV";
    readonly TSV: "TSV";
    readonly SCSV: "SCSV";
    readonly SOHSV: "SOHSV";
    readonly PSV: "PSV";
    readonly TXT: "TXT";
    readonly RAW: "RAW";
    readonly SINGLEJSON: "SINGLEJSON";
    readonly AVRO: "AVRO";
    readonly TSVE: "TSVE";
    readonly PARQUET: "PARQUET";
    readonly ORC: "ORC";
    readonly APACHEAVRO: "APACHEAVRO";
    readonly W3CLOGFILE: "W3CLOGFILE";
};
/**
 * The data format of the message. Optionally the data format can be added to each message.
 */
export type EventHubDataFormat = (typeof EventHubDataFormat)[keyof typeof EventHubDataFormat];
export declare const IdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove all identities.
 */
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const IotHubDataFormat: {
    readonly MULTIJSON: "MULTIJSON";
    readonly JSON: "JSON";
    readonly CSV: "CSV";
    readonly TSV: "TSV";
    readonly SCSV: "SCSV";
    readonly SOHSV: "SOHSV";
    readonly PSV: "PSV";
    readonly TXT: "TXT";
    readonly RAW: "RAW";
    readonly SINGLEJSON: "SINGLEJSON";
    readonly AVRO: "AVRO";
    readonly TSVE: "TSVE";
    readonly PARQUET: "PARQUET";
    readonly ORC: "ORC";
    readonly APACHEAVRO: "APACHEAVRO";
    readonly W3CLOGFILE: "W3CLOGFILE";
};
/**
 * The data format of the message. Optionally the data format can be added to each message.
 */
export type IotHubDataFormat = (typeof IotHubDataFormat)[keyof typeof IotHubDataFormat];
export declare const Kind: {
    readonly ReadWrite: "ReadWrite";
    readonly ReadOnlyFollowing: "ReadOnlyFollowing";
};
/**
 * Kind of the database
 */
export type Kind = (typeof Kind)[keyof typeof Kind];
export declare const Language: {
    readonly Python: "Python";
};
/**
 * The language name, for example Python.
 */
export type Language = (typeof Language)[keyof typeof Language];
export declare const LanguageExtensionImageName: {
    readonly R: "R";
    readonly Python3_6_5: "Python3_6_5";
    readonly Python3_10_8: "Python3_10_8";
    readonly Python3_10_8_DL: "Python3_10_8_DL";
    readonly PythonCustomImage: "PythonCustomImage";
};
/**
 * The language extension image name.
 */
export type LanguageExtensionImageName = (typeof LanguageExtensionImageName)[keyof typeof LanguageExtensionImageName];
export declare const LanguageExtensionName: {
    readonly PYTHON: "PYTHON";
    readonly R: "R";
};
/**
 * The language extension name.
 */
export type LanguageExtensionName = (typeof LanguageExtensionName)[keyof typeof LanguageExtensionName];
export declare const PrincipalType: {
    readonly App: "App";
    readonly Group: "Group";
    readonly User: "User";
};
/**
 * Principal type.
 */
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export declare const PublicIPType: {
    readonly IPv4: "IPv4";
    readonly DualStack: "DualStack";
};
/**
 * Indicates what public IP type to create - IPv4 (default), or DualStack (both IPv4 and IPv6)
 */
export type PublicIPType = (typeof PublicIPType)[keyof typeof PublicIPType];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Public network access to the cluster is enabled by default. When disabled, only private endpoint connection to the cluster is allowed
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const VnetState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * When enabled, the cluster is deployed into the configured subnet, when disabled it will be removed from the subnet.
 */
export type VnetState = (typeof VnetState)[keyof typeof VnetState];
