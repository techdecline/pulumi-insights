export declare const ActivityOnInactiveMarkAs: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Skipped: "Skipped";
};
/**
 * Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
 */
export type ActivityOnInactiveMarkAs = (typeof ActivityOnInactiveMarkAs)[keyof typeof ActivityOnInactiveMarkAs];
export declare const ActivityState: {
    readonly Active: "Active";
    readonly Inactive: "Inactive";
};
/**
 * Activity state. This is an optional property and if not provided, the state will be Active by default.
 */
export type ActivityState = (typeof ActivityState)[keyof typeof ActivityState];
export declare const AmazonRdsForSqlAuthenticationType: {
    readonly SQL: "SQL";
    readonly Windows: "Windows";
};
/**
 * The type used for authentication. Type: string.
 */
export type AmazonRdsForSqlAuthenticationType = (typeof AmazonRdsForSqlAuthenticationType)[keyof typeof AmazonRdsForSqlAuthenticationType];
export declare const AzureFunctionActivityMethod: {
    readonly GET: "GET";
    readonly POST: "POST";
    readonly PUT: "PUT";
    readonly DELETE: "DELETE";
    readonly OPTIONS: "OPTIONS";
    readonly HEAD: "HEAD";
    readonly TRACE: "TRACE";
};
/**
 * Rest API method for target endpoint.
 */
export type AzureFunctionActivityMethod = (typeof AzureFunctionActivityMethod)[keyof typeof AzureFunctionActivityMethod];
export declare const AzureSearchIndexWriteBehaviorType: {
    readonly Merge: "Merge";
    readonly Upload: "Upload";
};
/**
 * Specify the write behavior when upserting documents into Azure Search Index.
 */
export type AzureSearchIndexWriteBehaviorType = (typeof AzureSearchIndexWriteBehaviorType)[keyof typeof AzureSearchIndexWriteBehaviorType];
export declare const AzureSqlDWAuthenticationType: {
    readonly SQL: "SQL";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly SystemAssignedManagedIdentity: "SystemAssignedManagedIdentity";
    readonly UserAssignedManagedIdentity: "UserAssignedManagedIdentity";
};
/**
 * The type used for authentication. Type: string.
 */
export type AzureSqlDWAuthenticationType = (typeof AzureSqlDWAuthenticationType)[keyof typeof AzureSqlDWAuthenticationType];
export declare const AzureSqlDatabaseAuthenticationType: {
    readonly SQL: "SQL";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly SystemAssignedManagedIdentity: "SystemAssignedManagedIdentity";
    readonly UserAssignedManagedIdentity: "UserAssignedManagedIdentity";
};
/**
 * The type used for authentication. Type: string.
 */
export type AzureSqlDatabaseAuthenticationType = (typeof AzureSqlDatabaseAuthenticationType)[keyof typeof AzureSqlDatabaseAuthenticationType];
export declare const AzureSqlMIAuthenticationType: {
    readonly SQL: "SQL";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly SystemAssignedManagedIdentity: "SystemAssignedManagedIdentity";
    readonly UserAssignedManagedIdentity: "UserAssignedManagedIdentity";
};
/**
 * The type used for authentication. Type: string.
 */
export type AzureSqlMIAuthenticationType = (typeof AzureSqlMIAuthenticationType)[keyof typeof AzureSqlMIAuthenticationType];
export declare const AzureStorageAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly AccountKey: "AccountKey";
    readonly SasUri: "SasUri";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly Msi: "Msi";
};
/**
 * The type used for authentication. Type: string.
 */
export type AzureStorageAuthenticationType = (typeof AzureStorageAuthenticationType)[keyof typeof AzureStorageAuthenticationType];
export declare const BigDataPoolReferenceType: {
    readonly BigDataPoolReference: "BigDataPoolReference";
};
/**
 * Big data pool reference type.
 */
export type BigDataPoolReferenceType = (typeof BigDataPoolReferenceType)[keyof typeof BigDataPoolReferenceType];
export declare const BlobEventTypes: {
    readonly Microsoft_Storage_BlobCreated: "Microsoft.Storage.BlobCreated";
    readonly Microsoft_Storage_BlobDeleted: "Microsoft.Storage.BlobDeleted";
};
export type BlobEventTypes = (typeof BlobEventTypes)[keyof typeof BlobEventTypes];
export declare const CassandraSourceReadConsistencyLevels: {
    readonly ALL: "ALL";
    readonly EACH_QUORUM: "EACH_QUORUM";
    readonly QUORUM: "QUORUM";
    readonly LOCAL_QUORUM: "LOCAL_QUORUM";
    readonly ONE: "ONE";
    readonly TWO: "TWO";
    readonly THREE: "THREE";
    readonly LOCAL_ONE: "LOCAL_ONE";
    readonly SERIAL: "SERIAL";
    readonly LOCAL_SERIAL: "LOCAL_SERIAL";
};
/**
 * The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
 */
export type CassandraSourceReadConsistencyLevels = (typeof CassandraSourceReadConsistencyLevels)[keyof typeof CassandraSourceReadConsistencyLevels];
export declare const ConfigurationType: {
    readonly Default: "Default";
    readonly Customized: "Customized";
    readonly Artifact: "Artifact";
};
/**
 * The type of the spark config.
 */
export type ConfigurationType = (typeof ConfigurationType)[keyof typeof ConfigurationType];
export declare const ConnectionType: {
    readonly Linkedservicetype: "linkedservicetype";
};
/**
 * Type of connection via linked service or dataset.
 */
export type ConnectionType = (typeof ConnectionType)[keyof typeof ConnectionType];
export declare const CosmosDbConnectionMode: {
    readonly Gateway: "Gateway";
    readonly Direct: "Direct";
};
/**
 * The connection mode used to access CosmosDB account. Type: string.
 */
export type CosmosDbConnectionMode = (typeof CosmosDbConnectionMode)[keyof typeof CosmosDbConnectionMode];
export declare const CredentialReferenceType: {
    readonly CredentialReference: "CredentialReference";
};
/**
 * Credential reference type.
 */
export type CredentialReferenceType = (typeof CredentialReferenceType)[keyof typeof CredentialReferenceType];
export declare const DataFlowComputeType: {
    readonly General: "General";
    readonly MemoryOptimized: "MemoryOptimized";
    readonly ComputeOptimized: "ComputeOptimized";
};
/**
 * Compute type of the cluster which will execute data flow job.
 */
export type DataFlowComputeType = (typeof DataFlowComputeType)[keyof typeof DataFlowComputeType];
export declare const DataFlowReferenceType: {
    readonly DataFlowReference: "DataFlowReference";
};
/**
 * Data flow reference type.
 */
export type DataFlowReferenceType = (typeof DataFlowReferenceType)[keyof typeof DataFlowReferenceType];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
/**
 * The day of the week.
 */
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const DaysOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek];
export declare const Db2AuthenticationType: {
    readonly Basic: "Basic";
};
/**
 * AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
 */
export type Db2AuthenticationType = (typeof Db2AuthenticationType)[keyof typeof Db2AuthenticationType];
export declare const DependencyCondition: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Skipped: "Skipped";
    readonly Completed: "Completed";
};
export type DependencyCondition = (typeof DependencyCondition)[keyof typeof DependencyCondition];
export declare const DynamicsSinkWriteBehavior: {
    readonly Upsert: "Upsert";
};
/**
 * The write behavior for the operation.
 */
export type DynamicsSinkWriteBehavior = (typeof DynamicsSinkWriteBehavior)[keyof typeof DynamicsSinkWriteBehavior];
export declare const ExpressionV2Type: {
    readonly Constant: "Constant";
    readonly Field: "Field";
    readonly Unary: "Unary";
    readonly Binary: "Binary";
    readonly NAry: "NAry";
};
/**
 * Type of expressions supported by the system. Type: string.
 */
export type ExpressionV2Type = (typeof ExpressionV2Type)[keyof typeof ExpressionV2Type];
export declare const FactoryIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * The identity type.
 */
export type FactoryIdentityType = (typeof FactoryIdentityType)[keyof typeof FactoryIdentityType];
export declare const FrequencyType: {
    readonly Hour: "Hour";
    readonly Minute: "Minute";
    readonly Second: "Second";
};
/**
 * Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
 */
export type FrequencyType = (typeof FrequencyType)[keyof typeof FrequencyType];
export declare const FtpAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
};
/**
 * The authentication type to be used to connect to the FTP server.
 */
export type FtpAuthenticationType = (typeof FtpAuthenticationType)[keyof typeof FtpAuthenticationType];
export declare const GlobalParameterType: {
    readonly Object: "Object";
    readonly String: "String";
    readonly Int: "Int";
    readonly Float: "Float";
    readonly Bool: "Bool";
    readonly Array: "Array";
};
/**
 * Global Parameter type.
 */
export type GlobalParameterType = (typeof GlobalParameterType)[keyof typeof GlobalParameterType];
export declare const GoogleAdWordsAuthenticationType: {
    readonly ServiceAuthentication: "ServiceAuthentication";
    readonly UserAuthentication: "UserAuthentication";
};
/**
 * The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
 */
export type GoogleAdWordsAuthenticationType = (typeof GoogleAdWordsAuthenticationType)[keyof typeof GoogleAdWordsAuthenticationType];
export declare const GoogleBigQueryAuthenticationType: {
    readonly ServiceAuthentication: "ServiceAuthentication";
    readonly UserAuthentication: "UserAuthentication";
};
/**
 * The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
 */
export type GoogleBigQueryAuthenticationType = (typeof GoogleBigQueryAuthenticationType)[keyof typeof GoogleBigQueryAuthenticationType];
export declare const GoogleBigQueryV2AuthenticationType: {
    readonly ServiceAuthentication: "ServiceAuthentication";
    readonly UserAuthentication: "UserAuthentication";
};
/**
 * The OAuth 2.0 authentication mechanism used for authentication.
 */
export type GoogleBigQueryV2AuthenticationType = (typeof GoogleBigQueryV2AuthenticationType)[keyof typeof GoogleBigQueryV2AuthenticationType];
export declare const GreenplumAuthenticationType: {
    readonly Basic: "Basic";
};
/**
 * The authentication type to use. Type: string. Only used for V2.
 */
export type GreenplumAuthenticationType = (typeof GreenplumAuthenticationType)[keyof typeof GreenplumAuthenticationType];
export declare const HBaseAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly Basic: "Basic";
};
/**
 * The authentication mechanism to use to connect to the HBase server.
 */
export type HBaseAuthenticationType = (typeof HBaseAuthenticationType)[keyof typeof HBaseAuthenticationType];
export declare const HDInsightActivityDebugInfoOption: {
    readonly None: "None";
    readonly Always: "Always";
    readonly Failure: "Failure";
};
/**
 * Debug info option.
 */
export type HDInsightActivityDebugInfoOption = (typeof HDInsightActivityDebugInfoOption)[keyof typeof HDInsightActivityDebugInfoOption];
export declare const HiveAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly Username: "Username";
    readonly UsernameAndPassword: "UsernameAndPassword";
    readonly WindowsAzureHDInsightService: "WindowsAzureHDInsightService";
};
/**
 * The authentication method used to access the Hive server.
 */
export type HiveAuthenticationType = (typeof HiveAuthenticationType)[keyof typeof HiveAuthenticationType];
export declare const HiveServerType: {
    readonly HiveServer1: "HiveServer1";
    readonly HiveServer2: "HiveServer2";
    readonly HiveThriftServer: "HiveThriftServer";
};
/**
 * The type of Hive server.
 */
export type HiveServerType = (typeof HiveServerType)[keyof typeof HiveServerType];
export declare const HiveThriftTransportProtocol: {
    readonly Binary: "Binary";
    readonly SASL: "SASL";
    readonly HTTP_: "HTTP ";
};
/**
 * The transport protocol to use in the Thrift layer.
 */
export type HiveThriftTransportProtocol = (typeof HiveThriftTransportProtocol)[keyof typeof HiveThriftTransportProtocol];
export declare const HttpAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
    readonly Digest: "Digest";
    readonly Windows: "Windows";
    readonly ClientCertificate: "ClientCertificate";
};
/**
 * The authentication type to be used to connect to the HTTP server.
 */
export type HttpAuthenticationType = (typeof HttpAuthenticationType)[keyof typeof HttpAuthenticationType];
export declare const ImpalaAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly SASLUsername: "SASLUsername";
    readonly UsernameAndPassword: "UsernameAndPassword";
};
/**
 * The authentication type to use.
 */
export type ImpalaAuthenticationType = (typeof ImpalaAuthenticationType)[keyof typeof ImpalaAuthenticationType];
export declare const IntegrationRuntimeEdition: {
    readonly Standard: "Standard";
    readonly Enterprise: "Enterprise";
};
/**
 * The edition for the SSIS Integration Runtime
 */
export type IntegrationRuntimeEdition = (typeof IntegrationRuntimeEdition)[keyof typeof IntegrationRuntimeEdition];
export declare const IntegrationRuntimeEntityReferenceType: {
    readonly IntegrationRuntimeReference: "IntegrationRuntimeReference";
    readonly LinkedServiceReference: "LinkedServiceReference";
};
/**
 * The type of this referenced entity.
 */
export type IntegrationRuntimeEntityReferenceType = (typeof IntegrationRuntimeEntityReferenceType)[keyof typeof IntegrationRuntimeEntityReferenceType];
export declare const IntegrationRuntimeLicenseType: {
    readonly BasePrice: "BasePrice";
    readonly LicenseIncluded: "LicenseIncluded";
};
/**
 * License type for bringing your own license scenario.
 */
export type IntegrationRuntimeLicenseType = (typeof IntegrationRuntimeLicenseType)[keyof typeof IntegrationRuntimeLicenseType];
export declare const IntegrationRuntimeSsisCatalogPricingTier: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PremiumRS: "PremiumRS";
};
/**
 * The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
 */
export type IntegrationRuntimeSsisCatalogPricingTier = (typeof IntegrationRuntimeSsisCatalogPricingTier)[keyof typeof IntegrationRuntimeSsisCatalogPricingTier];
export declare const IntegrationRuntimeType: {
    readonly Managed: "Managed";
    readonly SelfHosted: "SelfHosted";
};
/**
 * Type of integration runtime.
 */
export type IntegrationRuntimeType = (typeof IntegrationRuntimeType)[keyof typeof IntegrationRuntimeType];
export declare const ManagedVirtualNetworkReferenceType: {
    readonly ManagedVirtualNetworkReference: "ManagedVirtualNetworkReference";
};
/**
 * Managed Virtual Network reference type.
 */
export type ManagedVirtualNetworkReferenceType = (typeof ManagedVirtualNetworkReferenceType)[keyof typeof ManagedVirtualNetworkReferenceType];
export declare const MappingType: {
    readonly Direct: "Direct";
    readonly Derived: "Derived";
    readonly Aggregate: "Aggregate";
};
/**
 * Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'.
 */
export type MappingType = (typeof MappingType)[keyof typeof MappingType];
export declare const MongoDbAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
};
/**
 * The authentication type to be used to connect to the MongoDB database.
 */
export type MongoDbAuthenticationType = (typeof MongoDbAuthenticationType)[keyof typeof MongoDbAuthenticationType];
export declare const NotebookParameterType: {
    readonly String: "string";
    readonly Int: "int";
    readonly Float: "float";
    readonly Bool: "bool";
};
/**
 * Notebook parameter type.
 */
export type NotebookParameterType = (typeof NotebookParameterType)[keyof typeof NotebookParameterType];
export declare const NotebookReferenceType: {
    readonly NotebookReference: "NotebookReference";
};
/**
 * Synapse notebook reference type.
 */
export type NotebookReferenceType = (typeof NotebookReferenceType)[keyof typeof NotebookReferenceType];
export declare const ODataAadServicePrincipalCredentialType: {
    readonly ServicePrincipalKey: "ServicePrincipalKey";
    readonly ServicePrincipalCert: "ServicePrincipalCert";
};
/**
 * Specify the credential type (key or cert) is used for service principal.
 */
export type ODataAadServicePrincipalCredentialType = (typeof ODataAadServicePrincipalCredentialType)[keyof typeof ODataAadServicePrincipalCredentialType];
export declare const ODataAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
    readonly Windows: "Windows";
    readonly AadServicePrincipal: "AadServicePrincipal";
    readonly ManagedServiceIdentity: "ManagedServiceIdentity";
};
/**
 * Type of authentication used to connect to the OData service.
 */
export type ODataAuthenticationType = (typeof ODataAuthenticationType)[keyof typeof ODataAuthenticationType];
export declare const OracleAuthenticationType: {
    readonly Basic: "Basic";
};
/**
 * Authentication type for connecting to the Oracle database. Only used for Version 2.0.
 */
export type OracleAuthenticationType = (typeof OracleAuthenticationType)[keyof typeof OracleAuthenticationType];
export declare const ParameterType: {
    readonly Object: "Object";
    readonly String: "String";
    readonly Int: "Int";
    readonly Float: "Float";
    readonly Bool: "Bool";
    readonly Array: "Array";
    readonly SecureString: "SecureString";
};
/**
 * Parameter type.
 */
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];
export declare const PhoenixAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly UsernameAndPassword: "UsernameAndPassword";
    readonly WindowsAzureHDInsightService: "WindowsAzureHDInsightService";
};
/**
 * The authentication mechanism used to connect to the Phoenix server.
 */
export type PhoenixAuthenticationType = (typeof PhoenixAuthenticationType)[keyof typeof PhoenixAuthenticationType];
export declare const PolybaseSettingsRejectType: {
    readonly Value: "value";
    readonly Percentage: "percentage";
};
/**
 * Reject type.
 */
export type PolybaseSettingsRejectType = (typeof PolybaseSettingsRejectType)[keyof typeof PolybaseSettingsRejectType];
export declare const PrestoAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly LDAP: "LDAP";
};
/**
 * The authentication mechanism used to connect to the Presto server.
 */
export type PrestoAuthenticationType = (typeof PrestoAuthenticationType)[keyof typeof PrestoAuthenticationType];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public network access is allowed for the data factory.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const RecurrenceFrequency: {
    readonly NotSpecified: "NotSpecified";
    readonly Minute: "Minute";
    readonly Hour: "Hour";
    readonly Day: "Day";
    readonly Week: "Week";
    readonly Month: "Month";
    readonly Year: "Year";
};
/**
 * The frequency.
 */
export type RecurrenceFrequency = (typeof RecurrenceFrequency)[keyof typeof RecurrenceFrequency];
export declare const RestServiceAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly Basic: "Basic";
    readonly AadServicePrincipal: "AadServicePrincipal";
    readonly ManagedServiceIdentity: "ManagedServiceIdentity";
    readonly OAuth2ClientCredential: "OAuth2ClientCredential";
};
/**
 * Type of authentication used to connect to the REST service.
 */
export type RestServiceAuthenticationType = (typeof RestServiceAuthenticationType)[keyof typeof RestServiceAuthenticationType];
export declare const SalesforceSinkWriteBehavior: {
    readonly Insert: "Insert";
    readonly Upsert: "Upsert";
};
/**
 * The write behavior for the operation. Default is Insert.
 */
export type SalesforceSinkWriteBehavior = (typeof SalesforceSinkWriteBehavior)[keyof typeof SalesforceSinkWriteBehavior];
export declare const SalesforceV2SinkWriteBehavior: {
    readonly Insert: "Insert";
    readonly Upsert: "Upsert";
};
/**
 * The write behavior for the operation. Default is Insert.
 */
export type SalesforceV2SinkWriteBehavior = (typeof SalesforceV2SinkWriteBehavior)[keyof typeof SalesforceV2SinkWriteBehavior];
export declare const SapCloudForCustomerSinkWriteBehavior: {
    readonly Insert: "Insert";
    readonly Update: "Update";
};
/**
 * The write behavior for the operation. Default is 'Insert'.
 */
export type SapCloudForCustomerSinkWriteBehavior = (typeof SapCloudForCustomerSinkWriteBehavior)[keyof typeof SapCloudForCustomerSinkWriteBehavior];
export declare const SapHanaAuthenticationType: {
    readonly Basic: "Basic";
    readonly Windows: "Windows";
};
/**
 * The authentication type to be used to connect to the SAP HANA server.
 */
export type SapHanaAuthenticationType = (typeof SapHanaAuthenticationType)[keyof typeof SapHanaAuthenticationType];
export declare const ScriptActivityLogDestination: {
    readonly ActivityOutput: "ActivityOutput";
    readonly ExternalStore: "ExternalStore";
};
/**
 * The destination of logs. Type: string.
 */
export type ScriptActivityLogDestination = (typeof ScriptActivityLogDestination)[keyof typeof ScriptActivityLogDestination];
export declare const ScriptActivityParameterDirection: {
    readonly ValueInput: "Input";
    readonly ValueOutput: "Output";
    readonly ValueInputOutput: "InputOutput";
};
/**
 * The direction of the parameter.
 */
export type ScriptActivityParameterDirection = (typeof ScriptActivityParameterDirection)[keyof typeof ScriptActivityParameterDirection];
export declare const ScriptActivityParameterType: {
    readonly Boolean: "Boolean";
    readonly DateTime: "DateTime";
    readonly DateTimeOffset: "DateTimeOffset";
    readonly Decimal: "Decimal";
    readonly Double: "Double";
    readonly Guid: "Guid";
    readonly Int16: "Int16";
    readonly Int32: "Int32";
    readonly Int64: "Int64";
    readonly Single: "Single";
    readonly String: "String";
    readonly Timespan: "Timespan";
};
/**
 * The type of the parameter.
 */
export type ScriptActivityParameterType = (typeof ScriptActivityParameterType)[keyof typeof ScriptActivityParameterType];
export declare const ServiceNowAuthenticationType: {
    readonly Basic: "Basic";
    readonly OAuth2: "OAuth2";
};
/**
 * The authentication type to use.
 */
export type ServiceNowAuthenticationType = (typeof ServiceNowAuthenticationType)[keyof typeof ServiceNowAuthenticationType];
export declare const ServiceNowV2AuthenticationType: {
    readonly Basic: "Basic";
    readonly OAuth2: "OAuth2";
};
/**
 * The authentication type to use.
 */
export type ServiceNowV2AuthenticationType = (typeof ServiceNowV2AuthenticationType)[keyof typeof ServiceNowV2AuthenticationType];
export declare const SftpAuthenticationType: {
    readonly Basic: "Basic";
    readonly SshPublicKey: "SshPublicKey";
    readonly MultiFactor: "MultiFactor";
};
/**
 * The authentication type to be used to connect to the FTP server.
 */
export type SftpAuthenticationType = (typeof SftpAuthenticationType)[keyof typeof SftpAuthenticationType];
export declare const SnowflakeAuthenticationType: {
    readonly Basic: "Basic";
    readonly KeyPair: "KeyPair";
    readonly AADServicePrincipal: "AADServicePrincipal";
};
/**
 * The type used for authentication. Type: string.
 */
export type SnowflakeAuthenticationType = (typeof SnowflakeAuthenticationType)[keyof typeof SnowflakeAuthenticationType];
export declare const SparkAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly Username: "Username";
    readonly UsernameAndPassword: "UsernameAndPassword";
    readonly WindowsAzureHDInsightService: "WindowsAzureHDInsightService";
};
/**
 * The authentication method used to access the Spark server.
 */
export type SparkAuthenticationType = (typeof SparkAuthenticationType)[keyof typeof SparkAuthenticationType];
export declare const SparkConfigurationReferenceType: {
    readonly SparkConfigurationReference: "SparkConfigurationReference";
};
/**
 * Spark configuration reference type.
 */
export type SparkConfigurationReferenceType = (typeof SparkConfigurationReferenceType)[keyof typeof SparkConfigurationReferenceType];
export declare const SparkJobReferenceType: {
    readonly SparkJobDefinitionReference: "SparkJobDefinitionReference";
};
/**
 * Synapse spark job reference type.
 */
export type SparkJobReferenceType = (typeof SparkJobReferenceType)[keyof typeof SparkJobReferenceType];
export declare const SparkServerType: {
    readonly SharkServer: "SharkServer";
    readonly SharkServer2: "SharkServer2";
    readonly SparkThriftServer: "SparkThriftServer";
};
/**
 * The type of Spark server.
 */
export type SparkServerType = (typeof SparkServerType)[keyof typeof SparkServerType];
export declare const SparkThriftTransportProtocol: {
    readonly Binary: "Binary";
    readonly SASL: "SASL";
    readonly HTTP_: "HTTP ";
};
/**
 * The transport protocol to use in the Thrift layer.
 */
export type SparkThriftTransportProtocol = (typeof SparkThriftTransportProtocol)[keyof typeof SparkThriftTransportProtocol];
export declare const SqlAlwaysEncryptedAkvAuthType: {
    readonly ServicePrincipal: "ServicePrincipal";
    readonly ManagedIdentity: "ManagedIdentity";
    readonly UserAssignedManagedIdentity: "UserAssignedManagedIdentity";
};
/**
 * Sql always encrypted AKV authentication type. Type: string.
 */
export type SqlAlwaysEncryptedAkvAuthType = (typeof SqlAlwaysEncryptedAkvAuthType)[keyof typeof SqlAlwaysEncryptedAkvAuthType];
export declare const SqlServerAuthenticationType: {
    readonly SQL: "SQL";
    readonly Windows: "Windows";
    readonly UserAssignedManagedIdentity: "UserAssignedManagedIdentity";
};
/**
 * The type used for authentication. Type: string.
 */
export type SqlServerAuthenticationType = (typeof SqlServerAuthenticationType)[keyof typeof SqlServerAuthenticationType];
export declare const SsisLogLocationType: {
    readonly File: "File";
};
/**
 * The type of SSIS log location.
 */
export type SsisLogLocationType = (typeof SsisLogLocationType)[keyof typeof SsisLogLocationType];
export declare const SsisPackageLocationType: {
    readonly SSISDB: "SSISDB";
    readonly File: "File";
    readonly InlinePackage: "InlinePackage";
    readonly PackageStore: "PackageStore";
};
/**
 * The type of SSIS package location.
 */
export type SsisPackageLocationType = (typeof SsisPackageLocationType)[keyof typeof SsisPackageLocationType];
export declare const SybaseAuthenticationType: {
    readonly Basic: "Basic";
    readonly Windows: "Windows";
};
/**
 * AuthenticationType to be used for connection.
 */
export type SybaseAuthenticationType = (typeof SybaseAuthenticationType)[keyof typeof SybaseAuthenticationType];
export declare const TeamDeskAuthenticationType: {
    readonly Basic: "Basic";
    readonly Token: "Token";
};
/**
 * The authentication type to use.
 */
export type TeamDeskAuthenticationType = (typeof TeamDeskAuthenticationType)[keyof typeof TeamDeskAuthenticationType];
export declare const TeradataAuthenticationType: {
    readonly Basic: "Basic";
    readonly Windows: "Windows";
};
/**
 * AuthenticationType to be used for connection.
 */
export type TeradataAuthenticationType = (typeof TeradataAuthenticationType)[keyof typeof TeradataAuthenticationType];
export declare const TriggerReferenceType: {
    readonly TriggerReference: "TriggerReference";
};
/**
 * Trigger reference type.
 */
export type TriggerReferenceType = (typeof TriggerReferenceType)[keyof typeof TriggerReferenceType];
export declare const TumblingWindowFrequency: {
    readonly Minute: "Minute";
    readonly Hour: "Hour";
    readonly Month: "Month";
};
/**
 * The frequency of the time windows.
 */
export type TumblingWindowFrequency = (typeof TumblingWindowFrequency)[keyof typeof TumblingWindowFrequency];
export declare const Type: {
    readonly LinkedServiceReference: "LinkedServiceReference";
};
/**
 * Linked service reference type.
 */
export type Type = (typeof Type)[keyof typeof Type];
export declare const VariableType: {
    readonly String: "String";
    readonly Bool: "Bool";
    readonly Array: "Array";
};
/**
 * Variable type.
 */
export type VariableType = (typeof VariableType)[keyof typeof VariableType];
export declare const WebActivityMethod: {
    readonly GET: "GET";
    readonly POST: "POST";
    readonly PUT: "PUT";
    readonly DELETE: "DELETE";
};
/**
 * Rest API method for target endpoint.
 */
export type WebActivityMethod = (typeof WebActivityMethod)[keyof typeof WebActivityMethod];
export declare const WebAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
    readonly ClientCertificate: "ClientCertificate";
};
/**
 * Type of authentication used to connect to the web table source.
 */
export type WebAuthenticationType = (typeof WebAuthenticationType)[keyof typeof WebAuthenticationType];
export declare const WebHookActivityMethod: {
    readonly POST: "POST";
};
/**
 * Rest API method for target endpoint.
 */
export type WebHookActivityMethod = (typeof WebHookActivityMethod)[keyof typeof WebHookActivityMethod];
export declare const ZendeskAuthenticationType: {
    readonly Basic: "Basic";
    readonly Token: "Token";
};
/**
 * The authentication type to use.
 */
export type ZendeskAuthenticationType = (typeof ZendeskAuthenticationType)[keyof typeof ZendeskAuthenticationType];
