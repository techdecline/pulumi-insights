export declare const BackupPolicyType: {
    readonly Periodic: "Periodic";
    readonly Continuous: "Continuous";
};
/**
 * Describes the mode of backups.
 */
export type BackupPolicyType = (typeof BackupPolicyType)[keyof typeof BackupPolicyType];
export declare const BackupStorageRedundancy: {
    readonly Geo: "Geo";
    readonly Local: "Local";
    readonly Zone: "Zone";
};
/**
 * Enum to indicate type of backup residency
 */
export type BackupStorageRedundancy = (typeof BackupStorageRedundancy)[keyof typeof BackupStorageRedundancy];
export declare const ConnectorOffer: {
    readonly Small: "Small";
};
/**
 * The cassandra connector offer type for the Cosmos DB database C* account.
 */
export type ConnectorOffer = (typeof ConnectorOffer)[keyof typeof ConnectorOffer];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly Restore: "Restore";
};
/**
 * Enum to indicate the mode of account creation.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DatabaseAccountKind: {
    readonly GlobalDocumentDB: "GlobalDocumentDB";
    readonly MongoDB: "MongoDB";
    readonly Parse: "Parse";
};
/**
 * Indicates the type of database account. This can only be set at database account creation.
 */
export type DatabaseAccountKind = (typeof DatabaseAccountKind)[keyof typeof DatabaseAccountKind];
export declare const DatabaseAccountOfferType: {
    readonly Standard: "Standard";
};
/**
 * The offer type for the database
 */
export type DatabaseAccountOfferType = (typeof DatabaseAccountOfferType)[keyof typeof DatabaseAccountOfferType];
export declare const DefaultConsistencyLevel: {
    readonly Eventual: "Eventual";
    readonly Session: "Session";
    readonly BoundedStaleness: "BoundedStaleness";
    readonly Strong: "Strong";
    readonly ConsistentPrefix: "ConsistentPrefix";
};
/**
 * The default consistency level and configuration settings of the Cosmos DB account.
 */
export type DefaultConsistencyLevel = (typeof DefaultConsistencyLevel)[keyof typeof DefaultConsistencyLevel];
export declare const NetworkAclBypass: {
    readonly None: "None";
    readonly AzureServices: "AzureServices";
};
/**
 * Indicates what services are allowed to bypass firewall checks.
 */
export type NetworkAclBypass = (typeof NetworkAclBypass)[keyof typeof NetworkAclBypass];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether requests from Public Network are allowed
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const RestoreMode: {
    readonly PointInTime: "PointInTime";
};
/**
 * Describes the mode of the restore.
 */
export type RestoreMode = (typeof RestoreMode)[keyof typeof RestoreMode];
export declare const ServerVersion: {
    readonly ServerVersion_3_2: "3.2";
    readonly ServerVersion_3_6: "3.6";
    readonly ServerVersion_4_0: "4.0";
};
/**
 * Describes the ServerVersion of an a MongoDB account.
 */
export type ServerVersion = (typeof ServerVersion)[keyof typeof ServerVersion];
