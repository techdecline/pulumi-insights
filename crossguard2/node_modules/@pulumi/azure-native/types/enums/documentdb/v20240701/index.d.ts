export declare const CreateMode: {
    /**
     * Create a new mongo cluster.
     */
    readonly Default: "Default";
    /**
     * Create a mongo cluster from a restore point-in-time.
     */
    readonly PointInTimeRestore: "PointInTimeRestore";
    /**
     * Create a replica cluster in distinct geographic region from the source cluster.
     */
    readonly GeoReplica: "GeoReplica";
    /**
     * Create a replica cluster in the same geographic region as the source cluster.
     */
    readonly Replica: "Replica";
};
/**
 * The mode to create a mongo cluster.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const HighAvailabilityMode: {
    /**
     * High availability mode is disabled. This mode is can see availability impact during faults or maintenance and is not recommended for production.
     */
    readonly Disabled: "Disabled";
    /**
     * High availability mode is enabled, where each server in a shard is placed in the same availability zone.
     */
    readonly SameZone: "SameZone";
    /**
     * High availability mode is enabled and preferences ZoneRedundant if availability zones capacity is available in the region, otherwise falls-back to provisioning with SameZone.
     */
    readonly ZoneRedundantPreferred: "ZoneRedundantPreferred";
};
/**
 * The target high availability mode requested for the cluster.
 */
export type HighAvailabilityMode = (typeof HighAvailabilityMode)[keyof typeof HighAvailabilityMode];
export declare const PreviewFeature: {
    /**
     * Enables geo replicas preview feature. The feature must be set at create-time on new cluster to enable linking a geo-replica cluster to it.
     */
    readonly GeoReplicas: "GeoReplicas";
};
/**
 * Preview features that can be enabled on a mongo cluster.
 */
export type PreviewFeature = (typeof PreviewFeature)[keyof typeof PreviewFeature];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    /**
     * If set, mongo cluster can be accessed through private and public methods.
     */
    readonly Enabled: "Enabled";
    /**
     * If set, the private endpoints are the exclusive access method.
     */
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public endpoint access is allowed for this mongo cluster.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
