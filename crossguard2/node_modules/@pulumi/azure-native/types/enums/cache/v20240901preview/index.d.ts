export declare const AccessKeysAuthentication: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * This property can be Enabled/Disabled to allow or deny access with the current access keys. Can be updated even after database is created.
 */
export type AccessKeysAuthentication = (typeof AccessKeysAuthentication)[keyof typeof AccessKeysAuthentication];
export declare const AofFrequency: {
    readonly AofFrequency_1s: "1s";
    readonly Always: "always";
};
/**
 * Sets the frequency at which data is written to disk. Defaults to '1s', meaning 'every second'. Note that the 'always' setting is deprecated, because of its performance impact.
 */
export type AofFrequency = (typeof AofFrequency)[keyof typeof AofFrequency];
export declare const ClusteringPolicy: {
    /**
     * Enterprise clustering policy uses only the classic redis protocol, which does not support redis cluster commands.
     */
    readonly EnterpriseCluster: "EnterpriseCluster";
    /**
     * OSS clustering policy follows the redis cluster specification, and requires all clients to support redis clustering.
     */
    readonly OSSCluster: "OSSCluster";
};
/**
 * Clustering policy - default is OSSCluster. This property must be chosen at create time, and cannot be changed without deleting the database.
 */
export type ClusteringPolicy = (typeof ClusteringPolicy)[keyof typeof ClusteringPolicy];
export declare const CmkIdentityType: {
    readonly SystemAssignedIdentity: "systemAssignedIdentity";
    readonly UserAssignedIdentity: "userAssignedIdentity";
};
/**
 * Only userAssignedIdentity is supported in this API version; other types may be supported in the future
 */
export type CmkIdentityType = (typeof CmkIdentityType)[keyof typeof CmkIdentityType];
export declare const DeferUpgradeSetting: {
    readonly Deferred: "Deferred";
    readonly NotDeferred: "NotDeferred";
};
/**
 * Option to defer upgrade when newest version is released - default is NotDeferred. Learn more: https://aka.ms/redisversionupgrade
 */
export type DeferUpgradeSetting = (typeof DeferUpgradeSetting)[keyof typeof DeferUpgradeSetting];
export declare const EvictionPolicy: {
    readonly AllKeysLFU: "AllKeysLFU";
    readonly AllKeysLRU: "AllKeysLRU";
    readonly AllKeysRandom: "AllKeysRandom";
    readonly VolatileLRU: "VolatileLRU";
    readonly VolatileLFU: "VolatileLFU";
    readonly VolatileTTL: "VolatileTTL";
    readonly VolatileRandom: "VolatileRandom";
    readonly NoEviction: "NoEviction";
};
/**
 * Redis eviction policy - default is VolatileLRU
 */
export type EvictionPolicy = (typeof EvictionPolicy)[keyof typeof EvictionPolicy];
export declare const HighAvailability: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enabled by default. If highAvailability is disabled, the data set is not replicated. This affects the availability SLA, and increases the risk of data loss.
 */
export type HighAvailability = (typeof HighAvailability)[keyof typeof HighAvailability];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const Protocol: {
    readonly Encrypted: "Encrypted";
    readonly Plaintext: "Plaintext";
};
/**
 * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
 */
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const RdbFrequency: {
    readonly RdbFrequency_1h: "1h";
    readonly RdbFrequency_6h: "6h";
    readonly RdbFrequency_12h: "12h";
};
/**
 * Sets the frequency at which a snapshot of the database is created.
 */
export type RdbFrequency = (typeof RdbFrequency)[keyof typeof RdbFrequency];
export declare const SkuName: {
    readonly Enterprise_E1: "Enterprise_E1";
    readonly Enterprise_E5: "Enterprise_E5";
    readonly Enterprise_E10: "Enterprise_E10";
    readonly Enterprise_E20: "Enterprise_E20";
    readonly Enterprise_E50: "Enterprise_E50";
    readonly Enterprise_E100: "Enterprise_E100";
    readonly Enterprise_E200: "Enterprise_E200";
    readonly Enterprise_E400: "Enterprise_E400";
    readonly EnterpriseFlash_F300: "EnterpriseFlash_F300";
    readonly EnterpriseFlash_F700: "EnterpriseFlash_F700";
    readonly EnterpriseFlash_F1500: "EnterpriseFlash_F1500";
    readonly Balanced_B0: "Balanced_B0";
    readonly Balanced_B1: "Balanced_B1";
    readonly Balanced_B3: "Balanced_B3";
    readonly Balanced_B5: "Balanced_B5";
    readonly Balanced_B10: "Balanced_B10";
    readonly Balanced_B20: "Balanced_B20";
    readonly Balanced_B50: "Balanced_B50";
    readonly Balanced_B100: "Balanced_B100";
    readonly Balanced_B150: "Balanced_B150";
    readonly Balanced_B250: "Balanced_B250";
    readonly Balanced_B350: "Balanced_B350";
    readonly Balanced_B500: "Balanced_B500";
    readonly Balanced_B700: "Balanced_B700";
    readonly Balanced_B1000: "Balanced_B1000";
    readonly MemoryOptimized_M10: "MemoryOptimized_M10";
    readonly MemoryOptimized_M20: "MemoryOptimized_M20";
    readonly MemoryOptimized_M50: "MemoryOptimized_M50";
    readonly MemoryOptimized_M100: "MemoryOptimized_M100";
    readonly MemoryOptimized_M150: "MemoryOptimized_M150";
    readonly MemoryOptimized_M250: "MemoryOptimized_M250";
    readonly MemoryOptimized_M350: "MemoryOptimized_M350";
    readonly MemoryOptimized_M500: "MemoryOptimized_M500";
    readonly MemoryOptimized_M700: "MemoryOptimized_M700";
    readonly MemoryOptimized_M1000: "MemoryOptimized_M1000";
    readonly MemoryOptimized_M1500: "MemoryOptimized_M1500";
    readonly MemoryOptimized_M2000: "MemoryOptimized_M2000";
    readonly ComputeOptimized_X3: "ComputeOptimized_X3";
    readonly ComputeOptimized_X5: "ComputeOptimized_X5";
    readonly ComputeOptimized_X10: "ComputeOptimized_X10";
    readonly ComputeOptimized_X20: "ComputeOptimized_X20";
    readonly ComputeOptimized_X50: "ComputeOptimized_X50";
    readonly ComputeOptimized_X100: "ComputeOptimized_X100";
    readonly ComputeOptimized_X150: "ComputeOptimized_X150";
    readonly ComputeOptimized_X250: "ComputeOptimized_X250";
    readonly ComputeOptimized_X350: "ComputeOptimized_X350";
    readonly ComputeOptimized_X500: "ComputeOptimized_X500";
    readonly ComputeOptimized_X700: "ComputeOptimized_X700";
    readonly FlashOptimized_A250: "FlashOptimized_A250";
    readonly FlashOptimized_A500: "FlashOptimized_A500";
    readonly FlashOptimized_A700: "FlashOptimized_A700";
    readonly FlashOptimized_A1000: "FlashOptimized_A1000";
    readonly FlashOptimized_A1500: "FlashOptimized_A1500";
    readonly FlashOptimized_A2000: "FlashOptimized_A2000";
    readonly FlashOptimized_A4500: "FlashOptimized_A4500";
};
/**
 * The level of Redis Enterprise cluster to deploy. Possible values: ('Balanced_B5', 'MemoryOptimized_M10', 'ComputeOptimized_X5', etc.). For more information on SKUs see the latest pricing documentation. Note that additional SKUs may become supported in the future.
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const TlsVersion: {
    readonly TlsVersion_1_0: "1.0";
    readonly TlsVersion_1_1: "1.1";
    readonly TlsVersion_1_2: "1.2";
};
/**
 * The minimum TLS version for the cluster to support, e.g. '1.2'. Newer versions can be added in the future. Note that TLS 1.0 and TLS 1.1 are now completely obsolete -- you cannot use them. They are mentioned only for the sake of consistency with old API versions.
 */
export type TlsVersion = (typeof TlsVersion)[keyof typeof TlsVersion];
