import * as v20200601 from "./v20200601";
import * as v20201001preview from "./v20201001preview";
import * as v20230301preview from "./v20230301preview";
import * as v20230401 from "./v20230401";
import * as v20230501preview from "./v20230501preview";
import * as v20230701 from "./v20230701";
import * as v20230801 from "./v20230801";
import * as v20230801preview from "./v20230801preview";
import * as v20231001preview from "./v20231001preview";
import * as v20231101 from "./v20231101";
import * as v20240201 from "./v20240201";
import * as v20240301 from "./v20240301";
import * as v20240301preview from "./v20240301preview";
import * as v20240401preview from "./v20240401preview";
import * as v20240601preview from "./v20240601preview";
import * as v20240901preview from "./v20240901preview";
import * as v20241001 from "./v20241001";
import * as v20241101 from "./v20241101";
export { v20200601, v20201001preview, v20230301preview, v20230401, v20230501preview, v20230701, v20230801, v20230801preview, v20231001preview, v20231101, v20240201, v20240301, v20240301preview, v20240401preview, v20240601preview, v20240901preview, v20241001, v20241101, };
export declare const AofFrequency: {
    readonly AofFrequency_1s: "1s";
    readonly Always: "always";
};
/**
 * Sets the frequency at which data is written to disk.
 */
export type AofFrequency = (typeof AofFrequency)[keyof typeof AofFrequency];
export declare const ClusteringPolicy: {
    readonly EnterpriseCluster: "EnterpriseCluster";
    readonly OSSCluster: "OSSCluster";
};
/**
 * Clustering policy - default is OSSCluster. Specified at create time.
 */
export type ClusteringPolicy = (typeof ClusteringPolicy)[keyof typeof ClusteringPolicy];
export declare const CmkIdentityType: {
    readonly SystemAssignedIdentity: "systemAssignedIdentity";
    readonly UserAssignedIdentity: "userAssignedIdentity";
};
/**
 * Only userAssignedIdentity is supported in this API version; other types may be supported in the future
 */
export type CmkIdentityType = (typeof CmkIdentityType)[keyof typeof CmkIdentityType];
export declare const DayOfWeek: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
    readonly Everyday: "Everyday";
    readonly Weekend: "Weekend";
};
/**
 * Day of the week when a cache can be patched.
 */
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const EvictionPolicy: {
    readonly AllKeysLFU: "AllKeysLFU";
    readonly AllKeysLRU: "AllKeysLRU";
    readonly AllKeysRandom: "AllKeysRandom";
    readonly VolatileLRU: "VolatileLRU";
    readonly VolatileLFU: "VolatileLFU";
    readonly VolatileTTL: "VolatileTTL";
    readonly VolatileRandom: "VolatileRandom";
    readonly NoEviction: "NoEviction";
};
/**
 * Redis eviction policy - default is VolatileLRU
 */
export type EvictionPolicy = (typeof EvictionPolicy)[keyof typeof EvictionPolicy];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const Protocol: {
    readonly Encrypted: "Encrypted";
    readonly Plaintext: "Plaintext";
};
/**
 * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
 */
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public endpoint access is allowed for this cache.  Value is optional, but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'. Note: This setting is important for caches with private endpoints. It has *no effect* on caches that are joined to, or injected into, a virtual network subnet.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const RdbFrequency: {
    readonly RdbFrequency_1h: "1h";
    readonly RdbFrequency_6h: "6h";
    readonly RdbFrequency_12h: "12h";
};
/**
 * Sets the frequency at which a snapshot of the database is created.
 */
export type RdbFrequency = (typeof RdbFrequency)[keyof typeof RdbFrequency];
export declare const ReplicationRole: {
    readonly Primary: "Primary";
    readonly Secondary: "Secondary";
};
/**
 * Role of the linked server.
 */
export type ReplicationRole = (typeof ReplicationRole)[keyof typeof ReplicationRole];
export declare const SkuFamily: {
    readonly C: "C";
    readonly P: "P";
};
/**
 * The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
 */
export type SkuFamily = (typeof SkuFamily)[keyof typeof SkuFamily];
export declare const SkuName: {
    readonly Enterprise_E10: "Enterprise_E10";
    readonly Enterprise_E20: "Enterprise_E20";
    readonly Enterprise_E50: "Enterprise_E50";
    readonly Enterprise_E100: "Enterprise_E100";
    readonly EnterpriseFlash_F300: "EnterpriseFlash_F300";
    readonly EnterpriseFlash_F700: "EnterpriseFlash_F700";
    readonly EnterpriseFlash_F1500: "EnterpriseFlash_F1500";
};
/**
 * The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const TlsVersion: {
    readonly TlsVersion_1_0: "1.0";
    readonly TlsVersion_1_1: "1.1";
    readonly TlsVersion_1_2: "1.2";
};
/**
 * The minimum TLS version for the cluster to support, e.g. '1.2'
 */
export type TlsVersion = (typeof TlsVersion)[keyof typeof TlsVersion];
