export declare const AofFrequency: {
    readonly AofFrequency_1s: "1s";
    readonly Always: "always";
};
/**
 * Sets the frequency at which data is written to disk.
 */
export type AofFrequency = (typeof AofFrequency)[keyof typeof AofFrequency];
export declare const ClusteringPolicy: {
    readonly EnterpriseCluster: "EnterpriseCluster";
    readonly OSSCluster: "OSSCluster";
};
/**
 * Clustering policy - default is OSSCluster. Specified at create time.
 */
export type ClusteringPolicy = (typeof ClusteringPolicy)[keyof typeof ClusteringPolicy];
export declare const CmkIdentityType: {
    readonly SystemAssignedIdentity: "systemAssignedIdentity";
    readonly UserAssignedIdentity: "userAssignedIdentity";
};
/**
 * Only userAssignedIdentity is supported in this API version; other types may be supported in the future
 */
export type CmkIdentityType = (typeof CmkIdentityType)[keyof typeof CmkIdentityType];
export declare const EvictionPolicy: {
    readonly AllKeysLFU: "AllKeysLFU";
    readonly AllKeysLRU: "AllKeysLRU";
    readonly AllKeysRandom: "AllKeysRandom";
    readonly VolatileLRU: "VolatileLRU";
    readonly VolatileLFU: "VolatileLFU";
    readonly VolatileTTL: "VolatileTTL";
    readonly VolatileRandom: "VolatileRandom";
    readonly NoEviction: "NoEviction";
};
/**
 * Redis eviction policy - default is VolatileLRU
 */
export type EvictionPolicy = (typeof EvictionPolicy)[keyof typeof EvictionPolicy];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const Protocol: {
    readonly Encrypted: "Encrypted";
    readonly Plaintext: "Plaintext";
};
/**
 * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
 */
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const RdbFrequency: {
    readonly RdbFrequency_1h: "1h";
    readonly RdbFrequency_6h: "6h";
    readonly RdbFrequency_12h: "12h";
};
/**
 * Sets the frequency at which a snapshot of the database is created.
 */
export type RdbFrequency = (typeof RdbFrequency)[keyof typeof RdbFrequency];
export declare const SkuName: {
    readonly Enterprise_E5: "Enterprise_E5";
    readonly Enterprise_E10: "Enterprise_E10";
    readonly Enterprise_E20: "Enterprise_E20";
    readonly Enterprise_E50: "Enterprise_E50";
    readonly Enterprise_E100: "Enterprise_E100";
    readonly Enterprise_E200: "Enterprise_E200";
    readonly Enterprise_E400: "Enterprise_E400";
    readonly EnterpriseFlash_F300: "EnterpriseFlash_F300";
    readonly EnterpriseFlash_F700: "EnterpriseFlash_F700";
    readonly EnterpriseFlash_F1500: "EnterpriseFlash_F1500";
};
/**
 * The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const TlsVersion: {
    readonly TlsVersion_1_0: "1.0";
    readonly TlsVersion_1_1: "1.1";
    readonly TlsVersion_1_2: "1.2";
};
/**
 * The minimum TLS version for the cluster to support, e.g. '1.2'
 */
export type TlsVersion = (typeof TlsVersion)[keyof typeof TlsVersion];
