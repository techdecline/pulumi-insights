export declare const AccumulatedType: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Show costs accumulated over time.
 */
export type AccumulatedType = (typeof AccumulatedType)[keyof typeof AccumulatedType];
export declare const ChartType: {
    readonly Area: "Area";
    readonly Line: "Line";
    readonly StackedColumn: "StackedColumn";
    readonly GroupedColumn: "GroupedColumn";
    readonly Table: "Table";
};
/**
 * Chart type of the main view in Cost Analysis. Required.
 */
export type ChartType = (typeof ChartType)[keyof typeof ChartType];
export declare const DaysOfWeek: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
};
/**
 * Days of Week.
 */
export type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek];
export declare const ExportType: {
    readonly Usage: "Usage";
    readonly ActualCost: "ActualCost";
    readonly AmortizedCost: "AmortizedCost";
};
/**
 * The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
 */
export type ExportType = (typeof ExportType)[keyof typeof ExportType];
export declare const FileFormat: {
    readonly Csv: "Csv";
};
/**
 * Destination of the view data. Currently only CSV format is supported.
 */
export type FileFormat = (typeof FileFormat)[keyof typeof FileFormat];
export declare const FormatType: {
    readonly Csv: "Csv";
};
/**
 * The format of the export being delivered. Currently only 'Csv' is supported.
 */
export type FormatType = (typeof FormatType)[keyof typeof FormatType];
export declare const FunctionType: {
    readonly Sum: "Sum";
};
/**
 * The name of the aggregation function to use.
 */
export type FunctionType = (typeof FunctionType)[keyof typeof FunctionType];
export declare const GranularityType: {
    readonly Daily: "Daily";
};
/**
 * The granularity of rows in the export. Currently only 'Daily' is supported.
 */
export type GranularityType = (typeof GranularityType)[keyof typeof GranularityType];
export declare const KpiTypeType: {
    readonly Forecast: "Forecast";
    readonly Budget: "Budget";
};
/**
 * KPI type (Forecast, Budget).
 */
export type KpiTypeType = (typeof KpiTypeType)[keyof typeof KpiTypeType];
export declare const MetricType: {
    readonly ActualCost: "ActualCost";
    readonly AmortizedCost: "AmortizedCost";
    readonly AHUB: "AHUB";
};
/**
 * Metric to use when displaying costs.
 */
export type MetricType = (typeof MetricType)[keyof typeof MetricType];
export declare const OperatorType: {
    readonly In: "In";
    readonly Contains: "Contains";
};
/**
 * The operator to use for comparison.
 */
export type OperatorType = (typeof OperatorType)[keyof typeof OperatorType];
export declare const PivotTypeType: {
    readonly Dimension: "Dimension";
    readonly TagKey: "TagKey";
};
/**
 * Data type to show in view.
 */
export type PivotTypeType = (typeof PivotTypeType)[keyof typeof PivotTypeType];
export declare const QueryColumnType: {
    /**
     * The tag associated with the cost data.
     */
    readonly TagKey: "TagKey";
    /**
     * The dimension of cost data.
     */
    readonly Dimension: "Dimension";
};
/**
 * Has type of the column to group.
 */
export type QueryColumnType = (typeof QueryColumnType)[keyof typeof QueryColumnType];
export declare const RecurrenceType: {
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
    readonly Monthly: "Monthly";
    readonly Annually: "Annually";
};
/**
 * The schedule recurrence.
 */
export type RecurrenceType = (typeof RecurrenceType)[keyof typeof RecurrenceType];
export declare const ReportConfigSortingType: {
    readonly Ascending: "Ascending";
    readonly Descending: "Descending";
};
/**
 * Direction of sort.
 */
export type ReportConfigSortingType = (typeof ReportConfigSortingType)[keyof typeof ReportConfigSortingType];
export declare const ReportGranularityType: {
    readonly Daily: "Daily";
    readonly Monthly: "Monthly";
};
/**
 * The granularity of rows in the report.
 */
export type ReportGranularityType = (typeof ReportGranularityType)[keyof typeof ReportGranularityType];
export declare const ReportTimeframeType: {
    readonly WeekToDate: "WeekToDate";
    readonly MonthToDate: "MonthToDate";
    readonly YearToDate: "YearToDate";
    readonly Custom: "Custom";
};
/**
 * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
 */
export type ReportTimeframeType = (typeof ReportTimeframeType)[keyof typeof ReportTimeframeType];
export declare const ReportType: {
    readonly Usage: "Usage";
};
/**
 * The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.
 */
export type ReportType = (typeof ReportType)[keyof typeof ReportType];
export declare const ScheduleFrequency: {
    /**
     * Cost analysis data will be emailed every day.
     */
    readonly Daily: "Daily";
    /**
     * Cost analysis data will be emailed every week.
     */
    readonly Weekly: "Weekly";
    /**
     * Cost analysis data will be emailed every month.
     */
    readonly Monthly: "Monthly";
};
/**
 * Frequency of the schedule.
 */
export type ScheduleFrequency = (typeof ScheduleFrequency)[keyof typeof ScheduleFrequency];
export declare const ScheduledActionKind: {
    /**
     * Cost analysis data will be emailed.
     */
    readonly Email: "Email";
    /**
     * Cost anomaly information will be emailed. Available only on subscription scope at daily frequency. If no anomaly is detected on the resource, an email won't be sent.
     */
    readonly InsightAlert: "InsightAlert";
};
/**
 * Kind of the scheduled action.
 */
export type ScheduledActionKind = (typeof ScheduledActionKind)[keyof typeof ScheduledActionKind];
export declare const ScheduledActionStatus: {
    /**
     * Scheduled action is saved but will not be run.
     */
    readonly Disabled: "Disabled";
    /**
     * Scheduled action is saved and will be run.
     */
    readonly Enabled: "Enabled";
    /**
     * Scheduled action is expired.
     */
    readonly Expired: "Expired";
};
/**
 * Status of the scheduled action.
 */
export type ScheduledActionStatus = (typeof ScheduledActionStatus)[keyof typeof ScheduledActionStatus];
export declare const StatusType: {
    readonly Active: "Active";
    readonly Inactive: "Inactive";
};
/**
 * The status of the export's schedule. If 'Inactive', the export's schedule is paused.
 */
export type StatusType = (typeof StatusType)[keyof typeof StatusType];
export declare const TimeframeType: {
    readonly MonthToDate: "MonthToDate";
    readonly BillingMonthToDate: "BillingMonthToDate";
    readonly TheLastMonth: "TheLastMonth";
    readonly TheLastBillingMonth: "TheLastBillingMonth";
    readonly WeekToDate: "WeekToDate";
    readonly Custom: "Custom";
};
/**
 * The time frame for pulling data for the export. If custom, then a specific time period must be provided.
 */
export type TimeframeType = (typeof TimeframeType)[keyof typeof TimeframeType];
export declare const WeeksOfMonth: {
    readonly First: "First";
    readonly Second: "Second";
    readonly Third: "Third";
    readonly Fourth: "Fourth";
    readonly Last: "Last";
};
/**
 * Weeks of month.
 */
export type WeeksOfMonth = (typeof WeeksOfMonth)[keyof typeof WeeksOfMonth];
