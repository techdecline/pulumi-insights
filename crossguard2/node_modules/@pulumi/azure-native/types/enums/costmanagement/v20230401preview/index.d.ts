export declare const AccumulatedType: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Show costs accumulated over time.
 */
export type AccumulatedType = (typeof AccumulatedType)[keyof typeof AccumulatedType];
export declare const BudgetNotificationOperatorType: {
    /**
     * Notification will be triggered if the evaluated cost is the same as threshold value. Note: It’s not recommended to use this OperatorType as there’s low chance of cost being exactly the same as threshold value, leading to missing of your alert. This OperatorType will be deprecated in future.
     *
     *  Supported for CategoryType(s): Cost.
     */
    readonly EqualTo: "EqualTo";
    /**
     * Notification will be triggered if the evaluated cost is greater than the threshold value. Note: This is the recommended OperatorType while configuring Budget Alert.
     *
     *  Supported for CategoryType(s): Cost.
     */
    readonly GreaterThan: "GreaterThan";
    /**
     * Notification will be triggered if the evaluated cost is greater than or equal to the threshold value.
     *
     *  Supported for CategoryType(s): Cost.
     */
    readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
    /**
     * Notification will be triggered if any Reservations in the scope of the Reservation Utilization Alert Rule have a utilization less than the threshold percentage.
     *
     *  Supported for CategoryType(s): ReservationUtilization.
     */
    readonly LessThan: "LessThan";
};
/**
 * The comparison operator.
 *
 *  Supported for CategoryType(s): Cost, ReservationUtilization.
 *
 *  Supported operators for **CategoryType: Cost**
 * - GreaterThan
 * - GreaterThanOrEqualTo
 *
 *  Supported operators for **CategoryType: ReservationUtilization**
 * - LessThan
 */
export type BudgetNotificationOperatorType = (typeof BudgetNotificationOperatorType)[keyof typeof BudgetNotificationOperatorType];
export declare const BudgetOperatorType: {
    readonly In: "In";
};
/**
 * The operator to use for comparison.
 */
export type BudgetOperatorType = (typeof BudgetOperatorType)[keyof typeof BudgetOperatorType];
export declare const CategoryType: {
    /**
     * A Budget that evaluates monetary cost of Azure resources against an amount, and alerts based on a configured notification threshold.
     */
    readonly Cost: "Cost";
    /**
     * An Alert Rule that evaluates the utilization percentage of Azure Reservations, and alerts based on a configured notification threshold.
     */
    readonly ReservationUtilization: "ReservationUtilization";
};
/**
 * The category of the budget.
 * - 'Cost' defines a Budget.
 * - 'ReservationUtilization' defines a Reservation Utilization Alert Rule.
 */
export type CategoryType = (typeof CategoryType)[keyof typeof CategoryType];
export declare const ChartType: {
    readonly Area: "Area";
    readonly Line: "Line";
    readonly StackedColumn: "StackedColumn";
    readonly GroupedColumn: "GroupedColumn";
    readonly Table: "Table";
};
/**
 * Chart type of the main view in Cost Analysis. Required.
 */
export type ChartType = (typeof ChartType)[keyof typeof ChartType];
export declare const CultureCode: {
    readonly En_us: "en-us";
    readonly Ja_jp: "ja-jp";
    readonly Zh_cn: "zh-cn";
    readonly De_de: "de-de";
    readonly Es_es: "es-es";
    readonly Fr_fr: "fr-fr";
    readonly It_it: "it-it";
    readonly Ko_kr: "ko-kr";
    readonly Pt_br: "pt-br";
    readonly Ru_ru: "ru-ru";
    readonly Zh_tw: "zh-tw";
    readonly Cs_cz: "cs-cz";
    readonly Pl_pl: "pl-pl";
    readonly Tr_tr: "tr-tr";
    readonly Da_dk: "da-dk";
    readonly En_gb: "en-gb";
    readonly Hu_hu: "hu-hu";
    readonly Nb_no: "nb-no";
    readonly Nl_nl: "nl-nl";
    readonly Pt_pt: "pt-pt";
    readonly Sv_se: "sv-se";
};
/**
 * Language in which the recipient will receive the notification,
 *
 *  Supported for CategoryType(s): Cost, ReservationUtilization.
 */
export type CultureCode = (typeof CultureCode)[keyof typeof CultureCode];
export declare const DaysOfWeek: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
};
/**
 * Days of Week.
 */
export type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek];
export declare const ExportType: {
    readonly Usage: "Usage";
    readonly ActualCost: "ActualCost";
    readonly AmortizedCost: "AmortizedCost";
};
/**
 * The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
 */
export type ExportType = (typeof ExportType)[keyof typeof ExportType];
export declare const FileFormat: {
    readonly Csv: "Csv";
};
/**
 * Destination of the view data. Currently only CSV format is supported.
 */
export type FileFormat = (typeof FileFormat)[keyof typeof FileFormat];
export declare const FormatType: {
    readonly Csv: "Csv";
};
/**
 * The format of the export being delivered. Currently only 'Csv' is supported.
 */
export type FormatType = (typeof FormatType)[keyof typeof FormatType];
export declare const Frequency: {
    /**
     * After the threshold breaches and an Alert is fired, no further alerts will be sent until the next calendar day.
     */
    readonly Daily: "Daily";
    /**
     * After the threshold breaches and an Alert is fired, no further alerts will be sent for 7 calendar days.
     */
    readonly Weekly: "Weekly";
    /**
     * After the threshold breaches and an Alert is fired, no further alerts will be sent for 30 calendar days.
     */
    readonly Monthly: "Monthly";
};
/**
 * Frequency of a notification. Represents how long the notification will be silent after triggering an alert for a threshold breach. If not specified, the frequency will be set by default based on the timeGrain (Weekly when timeGrain: Last7Days, Monthly when timeGrain: Last30Days).
 *
 *  Supported for CategoryType(s): ReservationUtilization.
 */
export type Frequency = (typeof Frequency)[keyof typeof Frequency];
export declare const FunctionType: {
    readonly Sum: "Sum";
};
/**
 * The name of the aggregation function to use.
 */
export type FunctionType = (typeof FunctionType)[keyof typeof FunctionType];
export declare const GranularityType: {
    readonly Daily: "Daily";
};
/**
 * The granularity of rows in the export. Currently only 'Daily' is supported.
 */
export type GranularityType = (typeof GranularityType)[keyof typeof GranularityType];
export declare const KpiTypeType: {
    readonly Forecast: "Forecast";
    readonly Budget: "Budget";
};
/**
 * KPI type (Forecast, Budget).
 */
export type KpiTypeType = (typeof KpiTypeType)[keyof typeof KpiTypeType];
export declare const MetricType: {
    readonly ActualCost: "ActualCost";
    readonly AmortizedCost: "AmortizedCost";
    readonly AHUB: "AHUB";
};
/**
 * Metric to use when displaying costs.
 */
export type MetricType = (typeof MetricType)[keyof typeof MetricType];
export declare const OperatorType: {
    readonly In: "In";
    readonly Contains: "Contains";
};
/**
 * The operator to use for comparison.
 */
export type OperatorType = (typeof OperatorType)[keyof typeof OperatorType];
export declare const PivotTypeType: {
    readonly Dimension: "Dimension";
    readonly TagKey: "TagKey";
};
/**
 * Data type to show in view.
 */
export type PivotTypeType = (typeof PivotTypeType)[keyof typeof PivotTypeType];
export declare const QueryColumnType: {
    /**
     * The tag associated with the cost data.
     */
    readonly TagKey: "TagKey";
    /**
     * The dimension of cost data.
     */
    readonly Dimension: "Dimension";
};
/**
 * Has type of the column to group.
 */
export type QueryColumnType = (typeof QueryColumnType)[keyof typeof QueryColumnType];
export declare const RecurrenceType: {
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
    readonly Monthly: "Monthly";
    readonly Annually: "Annually";
};
/**
 * The schedule recurrence.
 */
export type RecurrenceType = (typeof RecurrenceType)[keyof typeof RecurrenceType];
export declare const ReportConfigSortingType: {
    readonly Ascending: "Ascending";
    readonly Descending: "Descending";
};
/**
 * Direction of sort.
 */
export type ReportConfigSortingType = (typeof ReportConfigSortingType)[keyof typeof ReportConfigSortingType];
export declare const ReportGranularityType: {
    readonly Daily: "Daily";
    readonly Monthly: "Monthly";
};
/**
 * The granularity of rows in the report.
 */
export type ReportGranularityType = (typeof ReportGranularityType)[keyof typeof ReportGranularityType];
export declare const ReportTimeframeType: {
    readonly WeekToDate: "WeekToDate";
    readonly MonthToDate: "MonthToDate";
    readonly YearToDate: "YearToDate";
    readonly Custom: "Custom";
};
/**
 * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
 */
export type ReportTimeframeType = (typeof ReportTimeframeType)[keyof typeof ReportTimeframeType];
export declare const ReportType: {
    readonly Usage: "Usage";
};
/**
 * The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.
 */
export type ReportType = (typeof ReportType)[keyof typeof ReportType];
export declare const ScheduleFrequency: {
    /**
     * Cost analysis data will be emailed every day.
     */
    readonly Daily: "Daily";
    /**
     * Cost analysis data will be emailed every week.
     */
    readonly Weekly: "Weekly";
    /**
     * Cost analysis data will be emailed every month.
     */
    readonly Monthly: "Monthly";
};
/**
 * Frequency of the schedule.
 */
export type ScheduleFrequency = (typeof ScheduleFrequency)[keyof typeof ScheduleFrequency];
export declare const ScheduledActionKind: {
    /**
     * Cost analysis data will be emailed.
     */
    readonly Email: "Email";
    /**
     * Cost anomaly information will be emailed. Available only on subscription scope at daily frequency. If no anomaly is detected on the resource, an email won't be sent.
     */
    readonly InsightAlert: "InsightAlert";
};
/**
 * Kind of the scheduled action.
 */
export type ScheduledActionKind = (typeof ScheduledActionKind)[keyof typeof ScheduledActionKind];
export declare const ScheduledActionStatus: {
    /**
     * Scheduled action is saved but will not be run.
     */
    readonly Disabled: "Disabled";
    /**
     * Scheduled action is saved and will be run.
     */
    readonly Enabled: "Enabled";
    /**
     * Scheduled action is expired.
     */
    readonly Expired: "Expired";
};
/**
 * Status of the scheduled action.
 */
export type ScheduledActionStatus = (typeof ScheduledActionStatus)[keyof typeof ScheduledActionStatus];
export declare const StatusType: {
    readonly Active: "Active";
    readonly Inactive: "Inactive";
};
/**
 * The status of the export's schedule. If 'Inactive', the export's schedule is paused.
 */
export type StatusType = (typeof StatusType)[keyof typeof StatusType];
export declare const SystemAssignedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * Type of managed service identity (either system assigned, or none).
 */
export type SystemAssignedServiceIdentityType = (typeof SystemAssignedServiceIdentityType)[keyof typeof SystemAssignedServiceIdentityType];
export declare const ThresholdType: {
    /**
     * Actual costs budget alerts notify when the actual accrued cost exceeds the allocated budget.
     */
    readonly Actual: "Actual";
    /**
     * Forecasted costs budget alerts provide advanced notification that your spending trends are likely to exceed your allocated budget, as it relies on forecasted cost predictions.
     */
    readonly Forecasted: "Forecasted";
};
/**
 * The type of threshold.
 *
 *  Supported for CategoryType(s): Cost.
 */
export type ThresholdType = (typeof ThresholdType)[keyof typeof ThresholdType];
export declare const TimeGrainType: {
    /**
     * The budget will track costs in the current calendar month against the amount.
     *
     *  Supported for CategoryType: Cost only.
     */
    readonly Monthly: "Monthly";
    /**
     * The budget will track costs in the current calendar quarter against the amount.
     *
     *  Supported for CategoryType: Cost only.
     */
    readonly Quarterly: "Quarterly";
    /**
     * The budget will track costs in the current calendar year against the amount.
     *
     *  Supported for CategoryType: Cost only.
     */
    readonly Annually: "Annually";
    /**
     * The budget will track costs in the current billing month against the amount.
     *
     *  Supported for CategoryType: Cost and Web Direct customers only.
     */
    readonly BillingMonth: "BillingMonth";
    /**
     * The budget will track costs in the current billing quarter against the amount.
     *
     *  Supported for CategoryType: Cost and Web Direct customers only.
     */
    readonly BillingQuarter: "BillingQuarter";
    /**
     * The budget will track costs in the current billing year against the amount.
     *
     *  Supported for CategoryType: Cost and Web Direct customers only.
     */
    readonly BillingAnnual: "BillingAnnual";
    /**
     * The Reservation Utilization Alert Rule will evaluate reservations based on their 7-Day utilization percentage.
     *
     *  Supported for CategoryType: ReservationUtilization only.
     */
    readonly Last7Days: "Last7Days";
    /**
     * The Reservation Utilization Alert Rule will evaluate reservations based on their 30-Day utilization percentage.
     *
     *  Supported for CategoryType: ReservationUtilization only.
     */
    readonly Last30Days: "Last30Days";
};
/**
 * The time covered by a budget. Tracking of the amount will be reset based on the time grain.
 *
 * Supported for CategoryType(s): Cost, ReservationUtilization.
 *
 *  Supported timeGrainTypes for **CategoryType: Cost**
 *
 * - Monthly
 * - Quarterly
 * - Annually
 * - BillingMonth*
 * - BillingQuarter*
 * - BillingAnnual*
 *
 *   *only supported for Web Direct customers.
 *
 *  Supported timeGrainTypes for **CategoryType: ReservationUtilization**
 * - Last7Days
 * - Last30Days
 *
 *  Required for CategoryType(s): Cost, ReservationUtilization.
 */
export type TimeGrainType = (typeof TimeGrainType)[keyof typeof TimeGrainType];
export declare const TimeframeType: {
    readonly MonthToDate: "MonthToDate";
    readonly BillingMonthToDate: "BillingMonthToDate";
    readonly TheLastMonth: "TheLastMonth";
    readonly TheLastBillingMonth: "TheLastBillingMonth";
    readonly WeekToDate: "WeekToDate";
    readonly Custom: "Custom";
};
/**
 * The time frame for pulling data for the export. If custom, then a specific time period must be provided.
 */
export type TimeframeType = (typeof TimeframeType)[keyof typeof TimeframeType];
export declare const WeeksOfMonth: {
    readonly First: "First";
    readonly Second: "Second";
    readonly Third: "Third";
    readonly Fourth: "Fourth";
    readonly Last: "Last";
};
/**
 * Weeks of month.
 */
export type WeeksOfMonth = (typeof WeeksOfMonth)[keyof typeof WeeksOfMonth];
