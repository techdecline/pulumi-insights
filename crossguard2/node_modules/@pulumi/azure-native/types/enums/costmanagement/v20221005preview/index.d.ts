export declare const AccumulatedType: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Show costs accumulated over time.
 */
export type AccumulatedType = (typeof AccumulatedType)[keyof typeof AccumulatedType];
export declare const ChartType: {
    readonly Area: "Area";
    readonly Line: "Line";
    readonly StackedColumn: "StackedColumn";
    readonly GroupedColumn: "GroupedColumn";
    readonly Table: "Table";
};
/**
 * Chart type of the main view in Cost Analysis. Required.
 */
export type ChartType = (typeof ChartType)[keyof typeof ChartType];
export declare const FunctionType: {
    readonly Sum: "Sum";
};
/**
 * The name of the aggregation function to use.
 */
export type FunctionType = (typeof FunctionType)[keyof typeof FunctionType];
export declare const KpiTypeType: {
    readonly Forecast: "Forecast";
    readonly Budget: "Budget";
};
/**
 * KPI type (Forecast, Budget).
 */
export type KpiTypeType = (typeof KpiTypeType)[keyof typeof KpiTypeType];
export declare const MetricType: {
    readonly ActualCost: "ActualCost";
    readonly AmortizedCost: "AmortizedCost";
    readonly AHUB: "AHUB";
};
/**
 * Metric to use when displaying costs.
 */
export type MetricType = (typeof MetricType)[keyof typeof MetricType];
export declare const OperatorType: {
    readonly In: "In";
    readonly Contains: "Contains";
};
/**
 * The operator to use for comparison.
 */
export type OperatorType = (typeof OperatorType)[keyof typeof OperatorType];
export declare const PivotTypeType: {
    readonly Dimension: "Dimension";
    readonly TagKey: "TagKey";
};
/**
 * Data type to show in view.
 */
export type PivotTypeType = (typeof PivotTypeType)[keyof typeof PivotTypeType];
export declare const ReportConfigColumnType: {
    readonly Tag: "Tag";
    readonly Dimension: "Dimension";
};
/**
 * Has type of the column to group.
 */
export type ReportConfigColumnType = (typeof ReportConfigColumnType)[keyof typeof ReportConfigColumnType];
export declare const ReportConfigSortingType: {
    readonly Ascending: "Ascending";
    readonly Descending: "Descending";
};
/**
 * Direction of sort.
 */
export type ReportConfigSortingType = (typeof ReportConfigSortingType)[keyof typeof ReportConfigSortingType];
export declare const ReportGranularityType: {
    readonly Daily: "Daily";
    readonly Monthly: "Monthly";
};
/**
 * The granularity of rows in the report.
 */
export type ReportGranularityType = (typeof ReportGranularityType)[keyof typeof ReportGranularityType];
export declare const ReportTimeframeType: {
    readonly WeekToDate: "WeekToDate";
    readonly MonthToDate: "MonthToDate";
    readonly YearToDate: "YearToDate";
    readonly Custom: "Custom";
};
/**
 * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
 */
export type ReportTimeframeType = (typeof ReportTimeframeType)[keyof typeof ReportTimeframeType];
export declare const ReportType: {
    readonly Usage: "Usage";
};
/**
 * The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.
 */
export type ReportType = (typeof ReportType)[keyof typeof ReportType];
export declare const SettingsKind: {
    readonly Taginheritance: "taginheritance";
};
/**
 * Specifies the kind of settings.
 */
export type SettingsKind = (typeof SettingsKind)[keyof typeof SettingsKind];
