export declare const ActionType: {
    readonly Allow: "Allow";
    readonly Block: "Block";
    readonly Log: "Log";
    readonly Redirect: "Redirect";
    readonly AnomalyScoring: "AnomalyScoring";
};
/**
 * Describes the override action to be applied when rule matches.
 */
export type ActionType = (typeof ActionType)[keyof typeof ActionType];
export declare const CustomRuleEnabledState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
 */
export type CustomRuleEnabledState = (typeof CustomRuleEnabledState)[keyof typeof CustomRuleEnabledState];
export declare const FrontDoorMatchVariable: {
    readonly RemoteAddr: "RemoteAddr";
    readonly RequestMethod: "RequestMethod";
    readonly QueryString: "QueryString";
    readonly PostArgs: "PostArgs";
    readonly RequestUri: "RequestUri";
    readonly RequestHeader: "RequestHeader";
    readonly RequestBody: "RequestBody";
    readonly Cookies: "Cookies";
    readonly SocketAddr: "SocketAddr";
};
/**
 * Request variable to compare with.
 */
export type FrontDoorMatchVariable = (typeof FrontDoorMatchVariable)[keyof typeof FrontDoorMatchVariable];
export declare const ManagedRuleEnabledState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
 */
export type ManagedRuleEnabledState = (typeof ManagedRuleEnabledState)[keyof typeof ManagedRuleEnabledState];
export declare const ManagedRuleExclusionMatchVariable: {
    readonly RequestHeaderNames: "RequestHeaderNames";
    readonly RequestCookieNames: "RequestCookieNames";
    readonly QueryStringArgNames: "QueryStringArgNames";
    readonly RequestBodyPostArgNames: "RequestBodyPostArgNames";
    readonly RequestBodyJsonArgNames: "RequestBodyJsonArgNames";
};
/**
 * The variable type to be excluded.
 */
export type ManagedRuleExclusionMatchVariable = (typeof ManagedRuleExclusionMatchVariable)[keyof typeof ManagedRuleExclusionMatchVariable];
export declare const ManagedRuleExclusionSelectorMatchOperator: {
    readonly Equals: "Equals";
    readonly Contains: "Contains";
    readonly StartsWith: "StartsWith";
    readonly EndsWith: "EndsWith";
    readonly EqualsAny: "EqualsAny";
};
/**
 * Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
 */
export type ManagedRuleExclusionSelectorMatchOperator = (typeof ManagedRuleExclusionSelectorMatchOperator)[keyof typeof ManagedRuleExclusionSelectorMatchOperator];
export declare const ManagedRuleSetActionType: {
    readonly Block: "Block";
    readonly Log: "Log";
    readonly Redirect: "Redirect";
};
/**
 * Defines the rule set action.
 */
export type ManagedRuleSetActionType = (typeof ManagedRuleSetActionType)[keyof typeof ManagedRuleSetActionType];
export declare const Operator: {
    readonly Any: "Any";
    readonly IPMatch: "IPMatch";
    readonly GeoMatch: "GeoMatch";
    readonly Equal: "Equal";
    readonly Contains: "Contains";
    readonly LessThan: "LessThan";
    readonly GreaterThan: "GreaterThan";
    readonly LessThanOrEqual: "LessThanOrEqual";
    readonly GreaterThanOrEqual: "GreaterThanOrEqual";
    readonly BeginsWith: "BeginsWith";
    readonly EndsWith: "EndsWith";
    readonly RegEx: "RegEx";
};
/**
 * Comparison type to use for matching with the variable value.
 */
export type Operator = (typeof Operator)[keyof typeof Operator];
export declare const PolicyEnabledState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
 */
export type PolicyEnabledState = (typeof PolicyEnabledState)[keyof typeof PolicyEnabledState];
export declare const PolicyMode: {
    readonly Prevention: "Prevention";
    readonly Detection: "Detection";
};
/**
 * Describes if it is in detection mode or prevention mode at policy level.
 */
export type PolicyMode = (typeof PolicyMode)[keyof typeof PolicyMode];
export declare const PolicyRequestBodyCheck: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Describes if policy managed rules will inspect the request body content.
 */
export type PolicyRequestBodyCheck = (typeof PolicyRequestBodyCheck)[keyof typeof PolicyRequestBodyCheck];
export declare const RuleType: {
    readonly MatchRule: "MatchRule";
    readonly RateLimitRule: "RateLimitRule";
};
/**
 * Describes type of rule.
 */
export type RuleType = (typeof RuleType)[keyof typeof RuleType];
export declare const SkuName: {
    readonly Classic_AzureFrontDoor: "Classic_AzureFrontDoor";
    readonly Standard_AzureFrontDoor: "Standard_AzureFrontDoor";
    readonly Premium_AzureFrontDoor: "Premium_AzureFrontDoor";
};
/**
 * Name of the pricing tier.
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const TransformType: {
    readonly Lowercase: "Lowercase";
    readonly Uppercase: "Uppercase";
    readonly Trim: "Trim";
    readonly UrlDecode: "UrlDecode";
    readonly UrlEncode: "UrlEncode";
    readonly RemoveNulls: "RemoveNulls";
};
/**
 * Describes what transforms applied before matching.
 */
export type TransformType = (typeof TransformType)[keyof typeof TransformType];
