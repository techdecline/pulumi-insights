export declare const AllowedEndpointRecordType: {
    readonly DomainName: "DomainName";
    readonly IPv4Address: "IPv4Address";
    readonly IPv6Address: "IPv6Address";
    readonly Any: "Any";
};
/**
 * The allowed type DNS record types for this profile.
 */
export type AllowedEndpointRecordType = (typeof AllowedEndpointRecordType)[keyof typeof AllowedEndpointRecordType];
export declare const AlwaysServe: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * If Always Serve is enabled, probing for endpoint health will be disabled and endpoints will be included in the traffic routing method.
 */
export type AlwaysServe = (typeof AlwaysServe)[keyof typeof AlwaysServe];
export declare const EndpointMonitorStatus: {
    readonly CheckingEndpoint: "CheckingEndpoint";
    readonly Online: "Online";
    readonly Degraded: "Degraded";
    readonly Disabled: "Disabled";
    readonly Inactive: "Inactive";
    readonly Stopped: "Stopped";
    readonly Unmonitored: "Unmonitored";
};
/**
 * The monitoring status of the endpoint.
 */
export type EndpointMonitorStatus = (typeof EndpointMonitorStatus)[keyof typeof EndpointMonitorStatus];
export declare const EndpointStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
 */
export type EndpointStatus = (typeof EndpointStatus)[keyof typeof EndpointStatus];
export declare const MonitorProtocol: {
    readonly HTTP: "HTTP";
    readonly HTTPS: "HTTPS";
    readonly TCP: "TCP";
};
/**
 * The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
 */
export type MonitorProtocol = (typeof MonitorProtocol)[keyof typeof MonitorProtocol];
export declare const ProfileMonitorStatus: {
    readonly CheckingEndpoints: "CheckingEndpoints";
    readonly Online: "Online";
    readonly Degraded: "Degraded";
    readonly Disabled: "Disabled";
    readonly Inactive: "Inactive";
};
/**
 * The profile-level monitoring status of the Traffic Manager profile.
 */
export type ProfileMonitorStatus = (typeof ProfileMonitorStatus)[keyof typeof ProfileMonitorStatus];
export declare const ProfileStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the Traffic Manager profile.
 */
export type ProfileStatus = (typeof ProfileStatus)[keyof typeof ProfileStatus];
export declare const TrafficRoutingMethod: {
    readonly Performance: "Performance";
    readonly Priority: "Priority";
    readonly Weighted: "Weighted";
    readonly Geographic: "Geographic";
    readonly MultiValue: "MultiValue";
    readonly Subnet: "Subnet";
};
/**
 * The traffic routing method of the Traffic Manager profile.
 */
export type TrafficRoutingMethod = (typeof TrafficRoutingMethod)[keyof typeof TrafficRoutingMethod];
export declare const TrafficViewEnrollmentStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
 */
export type TrafficViewEnrollmentStatus = (typeof TrafficViewEnrollmentStatus)[keyof typeof TrafficViewEnrollmentStatus];
