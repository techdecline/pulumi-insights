export declare const ApplicationGatewayCookieBasedAffinity: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Cookie based affinity.
 */
export type ApplicationGatewayCookieBasedAffinity = (typeof ApplicationGatewayCookieBasedAffinity)[keyof typeof ApplicationGatewayCookieBasedAffinity];
export declare const ApplicationGatewayCustomErrorStatusCode: {
    readonly HttpStatus403: "HttpStatus403";
    readonly HttpStatus502: "HttpStatus502";
};
/**
 * Status code of the application gateway customer error.
 */
export type ApplicationGatewayCustomErrorStatusCode = (typeof ApplicationGatewayCustomErrorStatusCode)[keyof typeof ApplicationGatewayCustomErrorStatusCode];
export declare const ApplicationGatewayFirewallMode: {
    readonly Detection: "Detection";
    readonly Prevention: "Prevention";
};
/**
 * Web application firewall mode.
 */
export type ApplicationGatewayFirewallMode = (typeof ApplicationGatewayFirewallMode)[keyof typeof ApplicationGatewayFirewallMode];
export declare const ApplicationGatewayProtocol: {
    readonly Http: "Http";
    readonly Https: "Https";
};
/**
 * The protocol used for the probe.
 */
export type ApplicationGatewayProtocol = (typeof ApplicationGatewayProtocol)[keyof typeof ApplicationGatewayProtocol];
export declare const ApplicationGatewayRedirectType: {
    readonly Permanent: "Permanent";
    readonly Found: "Found";
    readonly SeeOther: "SeeOther";
    readonly Temporary: "Temporary";
};
/**
 * HTTP redirection type.
 */
export type ApplicationGatewayRedirectType = (typeof ApplicationGatewayRedirectType)[keyof typeof ApplicationGatewayRedirectType];
export declare const ApplicationGatewayRequestRoutingRuleType: {
    readonly Basic: "Basic";
    readonly PathBasedRouting: "PathBasedRouting";
};
/**
 * Rule type.
 */
export type ApplicationGatewayRequestRoutingRuleType = (typeof ApplicationGatewayRequestRoutingRuleType)[keyof typeof ApplicationGatewayRequestRoutingRuleType];
export declare const ApplicationGatewaySkuName: {
    readonly Standard_Small: "Standard_Small";
    readonly Standard_Medium: "Standard_Medium";
    readonly Standard_Large: "Standard_Large";
    readonly WAF_Medium: "WAF_Medium";
    readonly WAF_Large: "WAF_Large";
    readonly Standard_v2: "Standard_v2";
    readonly WAF_v2: "WAF_v2";
};
/**
 * Name of an application gateway SKU.
 */
export type ApplicationGatewaySkuName = (typeof ApplicationGatewaySkuName)[keyof typeof ApplicationGatewaySkuName];
export declare const ApplicationGatewaySslCipherSuite: {
    readonly TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
    readonly TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
    readonly TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
    readonly TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
    readonly TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
    readonly TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_DHE_RSA_WITH_AES_256_CBC_SHA: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
    readonly TLS_DHE_RSA_WITH_AES_128_CBC_SHA: "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
    readonly TLS_RSA_WITH_AES_256_GCM_SHA384: "TLS_RSA_WITH_AES_256_GCM_SHA384";
    readonly TLS_RSA_WITH_AES_128_GCM_SHA256: "TLS_RSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_RSA_WITH_AES_256_CBC_SHA256: "TLS_RSA_WITH_AES_256_CBC_SHA256";
    readonly TLS_RSA_WITH_AES_128_CBC_SHA256: "TLS_RSA_WITH_AES_128_CBC_SHA256";
    readonly TLS_RSA_WITH_AES_256_CBC_SHA: "TLS_RSA_WITH_AES_256_CBC_SHA";
    readonly TLS_RSA_WITH_AES_128_CBC_SHA: "TLS_RSA_WITH_AES_128_CBC_SHA";
    readonly TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
    readonly TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
    readonly TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
    readonly TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
    readonly TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
    readonly TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
    readonly TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
    readonly TLS_DHE_DSS_WITH_AES_256_CBC_SHA: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
    readonly TLS_DHE_DSS_WITH_AES_128_CBC_SHA: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
    readonly TLS_RSA_WITH_3DES_EDE_CBC_SHA: "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
    readonly TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
    readonly TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
};
/**
 * Ssl cipher suites enums.
 */
export type ApplicationGatewaySslCipherSuite = (typeof ApplicationGatewaySslCipherSuite)[keyof typeof ApplicationGatewaySslCipherSuite];
export declare const ApplicationGatewaySslPolicyName: {
    readonly AppGwSslPolicy20150501: "AppGwSslPolicy20150501";
    readonly AppGwSslPolicy20170401: "AppGwSslPolicy20170401";
    readonly AppGwSslPolicy20170401S: "AppGwSslPolicy20170401S";
};
/**
 * Name of Ssl predefined policy.
 */
export type ApplicationGatewaySslPolicyName = (typeof ApplicationGatewaySslPolicyName)[keyof typeof ApplicationGatewaySslPolicyName];
export declare const ApplicationGatewaySslPolicyType: {
    readonly Predefined: "Predefined";
    readonly Custom: "Custom";
};
/**
 * Type of Ssl Policy.
 */
export type ApplicationGatewaySslPolicyType = (typeof ApplicationGatewaySslPolicyType)[keyof typeof ApplicationGatewaySslPolicyType];
export declare const ApplicationGatewaySslProtocol: {
    readonly TLSv1_0: "TLSv1_0";
    readonly TLSv1_1: "TLSv1_1";
    readonly TLSv1_2: "TLSv1_2";
};
/**
 * Minimum version of Ssl protocol to be supported on application gateway.
 */
export type ApplicationGatewaySslProtocol = (typeof ApplicationGatewaySslProtocol)[keyof typeof ApplicationGatewaySslProtocol];
export declare const ApplicationGatewayTier: {
    readonly Standard: "Standard";
    readonly WAF: "WAF";
    readonly Standard_v2: "Standard_v2";
    readonly WAF_v2: "WAF_v2";
};
/**
 * Tier of an application gateway.
 */
export type ApplicationGatewayTier = (typeof ApplicationGatewayTier)[keyof typeof ApplicationGatewayTier];
export declare const AuthorizationUseStatus: {
    readonly Available: "Available";
    readonly InUse: "InUse";
};
/**
 * The authorization use status.
 */
export type AuthorizationUseStatus = (typeof AuthorizationUseStatus)[keyof typeof AuthorizationUseStatus];
export declare const DdosSettingsProtectionCoverage: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
 */
export type DdosSettingsProtectionCoverage = (typeof DdosSettingsProtectionCoverage)[keyof typeof DdosSettingsProtectionCoverage];
export declare const ExpressRouteCircuitPeeringAdvertisedPublicPrefixState: {
    readonly NotConfigured: "NotConfigured";
    readonly Configuring: "Configuring";
    readonly Configured: "Configured";
    readonly ValidationNeeded: "ValidationNeeded";
};
/**
 * The advertised public prefix state of the Peering resource.
 */
export type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = (typeof ExpressRouteCircuitPeeringAdvertisedPublicPrefixState)[keyof typeof ExpressRouteCircuitPeeringAdvertisedPublicPrefixState];
export declare const ExpressRouteCircuitPeeringState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The state of peering.
 */
export type ExpressRouteCircuitPeeringState = (typeof ExpressRouteCircuitPeeringState)[keyof typeof ExpressRouteCircuitPeeringState];
export declare const ExpressRouteCircuitSkuFamily: {
    readonly UnlimitedData: "UnlimitedData";
    readonly MeteredData: "MeteredData";
};
/**
 * The family of the SKU.
 */
export type ExpressRouteCircuitSkuFamily = (typeof ExpressRouteCircuitSkuFamily)[keyof typeof ExpressRouteCircuitSkuFamily];
export declare const ExpressRouteCircuitSkuTier: {
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly Basic: "Basic";
    readonly Local: "Local";
};
/**
 * The tier of the SKU.
 */
export type ExpressRouteCircuitSkuTier = (typeof ExpressRouteCircuitSkuTier)[keyof typeof ExpressRouteCircuitSkuTier];
export declare const ExpressRoutePeeringState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The peering state.
 */
export type ExpressRoutePeeringState = (typeof ExpressRoutePeeringState)[keyof typeof ExpressRoutePeeringState];
export declare const ExpressRoutePeeringType: {
    readonly AzurePublicPeering: "AzurePublicPeering";
    readonly AzurePrivatePeering: "AzurePrivatePeering";
    readonly MicrosoftPeering: "MicrosoftPeering";
};
/**
 * The peering type.
 */
export type ExpressRoutePeeringType = (typeof ExpressRoutePeeringType)[keyof typeof ExpressRoutePeeringType];
export declare const IPAllocationMethod: {
    readonly Static: "Static";
    readonly Dynamic: "Dynamic";
};
/**
 * The public IP address allocation method.
 */
export type IPAllocationMethod = (typeof IPAllocationMethod)[keyof typeof IPAllocationMethod];
export declare const IPVersion: {
    readonly IPv4: "IPv4";
    readonly IPv6: "IPv6";
};
/**
 * The public IP address version.
 */
export type IPVersion = (typeof IPVersion)[keyof typeof IPVersion];
export declare const LoadBalancerOutboundRuleProtocol: {
    readonly Tcp: "Tcp";
    readonly Udp: "Udp";
    readonly All: "All";
};
/**
 * The protocol for the outbound rule in load balancer.
 */
export type LoadBalancerOutboundRuleProtocol = (typeof LoadBalancerOutboundRuleProtocol)[keyof typeof LoadBalancerOutboundRuleProtocol];
export declare const LoadBalancerSkuName: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * Name of a load balancer SKU.
 */
export type LoadBalancerSkuName = (typeof LoadBalancerSkuName)[keyof typeof LoadBalancerSkuName];
export declare const LoadDistribution: {
    readonly Default: "Default";
    readonly SourceIP: "SourceIP";
    readonly SourceIPProtocol: "SourceIPProtocol";
};
/**
 * The load distribution policy for this rule.
 */
export type LoadDistribution = (typeof LoadDistribution)[keyof typeof LoadDistribution];
export declare const NatGatewaySkuName: {
    readonly Standard: "Standard";
};
/**
 * Name of Nat Gateway SKU.
 */
export type NatGatewaySkuName = (typeof NatGatewaySkuName)[keyof typeof NatGatewaySkuName];
export declare const ProbeProtocol: {
    readonly Http: "Http";
    readonly Tcp: "Tcp";
    readonly Https: "Https";
};
/**
 * The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
 */
export type ProbeProtocol = (typeof ProbeProtocol)[keyof typeof ProbeProtocol];
export declare const PublicIPAddressSkuName: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * Name of a public IP address SKU.
 */
export type PublicIPAddressSkuName = (typeof PublicIPAddressSkuName)[keyof typeof PublicIPAddressSkuName];
export declare const PublicIPPrefixSkuName: {
    readonly Standard: "Standard";
};
/**
 * Name of a public IP prefix SKU.
 */
export type PublicIPPrefixSkuName = (typeof PublicIPPrefixSkuName)[keyof typeof PublicIPPrefixSkuName];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const RouteNextHopType: {
    readonly VirtualNetworkGateway: "VirtualNetworkGateway";
    readonly VnetLocal: "VnetLocal";
    readonly Internet: "Internet";
    readonly VirtualAppliance: "VirtualAppliance";
    readonly None: "None";
};
/**
 * The type of Azure hop the packet should be sent to.
 */
export type RouteNextHopType = (typeof RouteNextHopType)[keyof typeof RouteNextHopType];
export declare const SecurityRuleAccess: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The network traffic is allowed or denied.
 */
export type SecurityRuleAccess = (typeof SecurityRuleAccess)[keyof typeof SecurityRuleAccess];
export declare const SecurityRuleDirection: {
    readonly Inbound: "Inbound";
    readonly Outbound: "Outbound";
};
/**
 * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
 */
export type SecurityRuleDirection = (typeof SecurityRuleDirection)[keyof typeof SecurityRuleDirection];
export declare const SecurityRuleProtocol: {
    readonly Tcp: "Tcp";
    readonly Udp: "Udp";
    readonly Icmp: "Icmp";
    readonly Esp: "Esp";
    readonly Asterisk: "*";
};
/**
 * Network protocol this rule applies to.
 */
export type SecurityRuleProtocol = (typeof SecurityRuleProtocol)[keyof typeof SecurityRuleProtocol];
export declare const ServiceProviderProvisioningState: {
    readonly NotProvisioned: "NotProvisioned";
    readonly Provisioning: "Provisioning";
    readonly Provisioned: "Provisioned";
    readonly Deprovisioning: "Deprovisioning";
};
/**
 * The ServiceProviderProvisioningState state of the resource.
 */
export type ServiceProviderProvisioningState = (typeof ServiceProviderProvisioningState)[keyof typeof ServiceProviderProvisioningState];
export declare const TransportProtocol: {
    readonly Udp: "Udp";
    readonly Tcp: "Tcp";
    readonly All: "All";
};
/**
 * The reference to the transport protocol used by the load balancing rule.
 */
export type TransportProtocol = (typeof TransportProtocol)[keyof typeof TransportProtocol];
export declare const VirtualNetworkPeeringState: {
    readonly Initiated: "Initiated";
    readonly Connected: "Connected";
    readonly Disconnected: "Disconnected";
};
/**
 * The status of the virtual network peering.
 */
export type VirtualNetworkPeeringState = (typeof VirtualNetworkPeeringState)[keyof typeof VirtualNetworkPeeringState];
