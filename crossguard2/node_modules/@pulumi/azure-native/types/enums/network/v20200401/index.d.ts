export declare const AzureFirewallApplicationRuleProtocolType: {
    readonly Http: "Http";
    readonly Https: "Https";
    readonly Mssql: "Mssql";
};
/**
 * Protocol type.
 */
export type AzureFirewallApplicationRuleProtocolType = (typeof AzureFirewallApplicationRuleProtocolType)[keyof typeof AzureFirewallApplicationRuleProtocolType];
export declare const AzureFirewallNatRCActionType: {
    readonly Snat: "Snat";
    readonly Dnat: "Dnat";
};
/**
 * The type of action.
 */
export type AzureFirewallNatRCActionType = (typeof AzureFirewallNatRCActionType)[keyof typeof AzureFirewallNatRCActionType];
export declare const AzureFirewallNetworkRuleProtocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
    readonly Any: "Any";
    readonly ICMP: "ICMP";
};
/**
 * The protocol of a Network Rule resource.
 */
export type AzureFirewallNetworkRuleProtocol = (typeof AzureFirewallNetworkRuleProtocol)[keyof typeof AzureFirewallNetworkRuleProtocol];
export declare const AzureFirewallRCActionType: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The type of action.
 */
export type AzureFirewallRCActionType = (typeof AzureFirewallRCActionType)[keyof typeof AzureFirewallRCActionType];
export declare const AzureFirewallSkuName: {
    readonly AZFW_VNet: "AZFW_VNet";
    readonly AZFW_Hub: "AZFW_Hub";
};
/**
 * Name of an Azure Firewall SKU.
 */
export type AzureFirewallSkuName = (typeof AzureFirewallSkuName)[keyof typeof AzureFirewallSkuName];
export declare const AzureFirewallSkuTier: {
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * Tier of an Azure Firewall.
 */
export type AzureFirewallSkuTier = (typeof AzureFirewallSkuTier)[keyof typeof AzureFirewallSkuTier];
export declare const AzureFirewallThreatIntelMode: {
    readonly Alert: "Alert";
    readonly Deny: "Deny";
    readonly Off: "Off";
};
/**
 * The operation mode for Threat Intelligence.
 */
export type AzureFirewallThreatIntelMode = (typeof AzureFirewallThreatIntelMode)[keyof typeof AzureFirewallThreatIntelMode];
export declare const FirewallPolicyFilterRuleActionType: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The type of action.
 */
export type FirewallPolicyFilterRuleActionType = (typeof FirewallPolicyFilterRuleActionType)[keyof typeof FirewallPolicyFilterRuleActionType];
export declare const FirewallPolicyNatRuleActionType: {
    readonly DNAT: "DNAT";
};
/**
 * The type of action.
 */
export type FirewallPolicyNatRuleActionType = (typeof FirewallPolicyNatRuleActionType)[keyof typeof FirewallPolicyNatRuleActionType];
export declare const FirewallPolicyRuleConditionApplicationProtocolType: {
    readonly Http: "Http";
    readonly Https: "Https";
};
/**
 * Protocol type.
 */
export type FirewallPolicyRuleConditionApplicationProtocolType = (typeof FirewallPolicyRuleConditionApplicationProtocolType)[keyof typeof FirewallPolicyRuleConditionApplicationProtocolType];
export declare const FirewallPolicyRuleConditionNetworkProtocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
    readonly Any: "Any";
    readonly ICMP: "ICMP";
};
/**
 * The Network protocol of a Rule condition.
 */
export type FirewallPolicyRuleConditionNetworkProtocol = (typeof FirewallPolicyRuleConditionNetworkProtocol)[keyof typeof FirewallPolicyRuleConditionNetworkProtocol];
export declare const FirewallPolicyRuleConditionType: {
    readonly ApplicationRuleCondition: "ApplicationRuleCondition";
    readonly NetworkRuleCondition: "NetworkRuleCondition";
    readonly NatRuleCondition: "NatRuleCondition";
};
/**
 * Rule Condition Type.
 */
export type FirewallPolicyRuleConditionType = (typeof FirewallPolicyRuleConditionType)[keyof typeof FirewallPolicyRuleConditionType];
export declare const FirewallPolicyRuleType: {
    readonly FirewallPolicyNatRule: "FirewallPolicyNatRule";
    readonly FirewallPolicyFilterRule: "FirewallPolicyFilterRule";
};
/**
 * The type of the rule.
 */
export type FirewallPolicyRuleType = (typeof FirewallPolicyRuleType)[keyof typeof FirewallPolicyRuleType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
