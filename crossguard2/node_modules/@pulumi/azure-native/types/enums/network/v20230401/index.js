"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressRouteLinkMacSecCipher = exports.ExpressRouteLinkAdminState = exports.ExpressRouteCircuitSkuTier = exports.ExpressRouteCircuitSkuFamily = exports.ExpressRouteCircuitPeeringState = exports.EndpointType = exports.DhGroup = exports.DestinationPortBehavior = exports.DeleteOptions = exports.DeleteExistingPeering = exports.DdosSettingsProtectionMode = exports.CustomIpPrefixType = exports.CoverageLevel = exports.ConnectivityTopology = exports.ConnectionMonitorTestConfigurationProtocol = exports.ConnectionMonitorEndpointFilterType = exports.ConnectionMonitorEndpointFilterItemType = exports.ConfigurationType = exports.CommissionedState = exports.BastionHostSkuName = exports.AzureFirewallThreatIntelMode = exports.AzureFirewallSkuTier = exports.AzureFirewallSkuName = exports.AzureFirewallRCActionType = exports.AzureFirewallNetworkRuleProtocol = exports.AzureFirewallNatRCActionType = exports.AzureFirewallApplicationRuleProtocolType = exports.AutoLearnPrivateRangesMode = exports.AuthorizationUseStatus = exports.ApplicationGatewayTier = exports.ApplicationGatewaySslProtocol = exports.ApplicationGatewaySslPolicyType = exports.ApplicationGatewaySslPolicyName = exports.ApplicationGatewaySslCipherSuite = exports.ApplicationGatewaySkuName = exports.ApplicationGatewayRequestRoutingRuleType = exports.ApplicationGatewayRedirectType = exports.ApplicationGatewayProtocol = exports.ApplicationGatewayLoadDistributionAlgorithm = exports.ApplicationGatewayFirewallUserSessionVariable = exports.ApplicationGatewayFirewallRateLimitDuration = exports.ApplicationGatewayFirewallMode = exports.ApplicationGatewayCustomErrorStatusCode = exports.ApplicationGatewayCookieBasedAffinity = exports.ApplicationGatewayClientRevocationOptions = exports.AdminState = exports.AdminRuleKind = exports.AddressPrefixType = exports.ActionType = exports.Access = void 0;
exports.PfsGroup = exports.PcProtocol = exports.PacketCaptureTargetType = exports.OwaspCrsExclusionEntrySelectorMatchOperator = exports.OwaspCrsExclusionEntryMatchVariable = exports.OutputType = exports.NextStep = exports.NetworkInterfaceNicType = exports.NetworkInterfaceMigrationPhase = exports.NetworkInterfaceAuxiliarySku = exports.NetworkInterfaceAuxiliaryMode = exports.NetworkIntentPolicyBasedService = exports.NatGatewaySkuName = exports.ManagedRuleEnabledState = exports.LoadDistribution = exports.LoadBalancerSkuTier = exports.LoadBalancerSkuName = exports.LoadBalancerOutboundRuleProtocol = exports.LoadBalancerBackendAddressAdminState = exports.IsGlobal = exports.IpsecIntegrity = exports.IpsecEncryption = exports.IpAllocationType = exports.IkeIntegrity = exports.IkeEncryption = exports.IPVersion = exports.IPAllocationMethod = exports.HubRoutingPreference = exports.HTTPConfigurationMethod = exports.GroupConnectivity = exports.Geo = exports.GatewayLoadBalancerTunnelProtocol = exports.GatewayLoadBalancerTunnelInterfaceType = exports.FlowLogFormatType = exports.FirewallPolicySkuTier = exports.FirewallPolicyRuleType = exports.FirewallPolicyRuleNetworkProtocol = exports.FirewallPolicyRuleCollectionType = exports.FirewallPolicyRuleApplicationProtocolType = exports.FirewallPolicyNatRuleCollectionActionType = exports.FirewallPolicyIntrusionDetectionStateType = exports.FirewallPolicyIntrusionDetectionProtocol = exports.FirewallPolicyIDPSQuerySortOrder = exports.FirewallPolicyFilterRuleCollectionActionType = exports.ExtendedLocationTypes = exports.ExpressRoutePortsEncapsulation = exports.ExpressRoutePortsBillingType = exports.ExpressRoutePeeringType = exports.ExpressRoutePeeringState = exports.ExpressRouteLinkMacSecSciState = void 0;
exports.VpnType = exports.VpnPolicyMemberAttributeType = exports.VpnNatRuleType = exports.VpnNatRuleMode = exports.VpnLinkConnectionMode = exports.VpnGatewayTunnelingProtocol = exports.VpnGatewayGeneration = exports.VpnClientProtocol = exports.VpnAuthenticationType = exports.VnetLocalRouteOverrideCriteria = exports.VirtualNetworkPrivateLinkServiceNetworkPolicies = exports.VirtualNetworkPrivateEndpointNetworkPolicies = exports.VirtualNetworkPeeringState = exports.VirtualNetworkPeeringLevel = exports.VirtualNetworkGatewayType = exports.VirtualNetworkGatewaySkuTier = exports.VirtualNetworkGatewaySkuName = exports.VirtualNetworkGatewayConnectionType = exports.VirtualNetworkGatewayConnectionProtocol = exports.VirtualNetworkGatewayConnectionMode = exports.VirtualNetworkEncryptionEnforcement = exports.UseHubGateway = exports.TransportProtocol = exports.SyncMode = exports.ServiceProviderProvisioningState = exports.SecurityRuleProtocol = exports.SecurityRuleDirection = exports.SecurityRuleAccess = exports.SecurityProviderName = exports.SecurityConfigurationRuleProtocol = exports.SecurityConfigurationRuleDirection = exports.SecurityConfigurationRuleAccess = exports.ScrubbingRuleEntryState = exports.ScrubbingRuleEntryMatchVariable = exports.ScrubbingRuleEntryMatchOperator = exports.RouteNextHopType = exports.RouteMapMatchCondition = exports.RouteMapActionType = exports.RouteFilterRuleType = exports.ResourceIdentityType = exports.PublicIpAddressDnsSettingsDomainNameLabelScope = exports.PublicIPPrefixSkuTier = exports.PublicIPPrefixSkuName = exports.PublicIPAddressSkuTier = exports.PublicIPAddressSkuName = exports.PublicIPAddressMigrationPhase = exports.ProtocolType = exports.ProbeProtocol = exports.PreferredRoutingGateway = exports.PreferredIPVersion = void 0;
exports.WebApplicationFirewallTransform = exports.WebApplicationFirewallState = exports.WebApplicationFirewallScrubbingState = exports.WebApplicationFirewallRuleType = exports.WebApplicationFirewallOperator = exports.WebApplicationFirewallMode = exports.WebApplicationFirewallMatchVariable = exports.WebApplicationFirewallEnabledState = exports.WebApplicationFirewallAction = void 0;
exports.Access = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.ActionType = {
    AnomalyScoring: "AnomalyScoring",
    Allow: "Allow",
    Block: "Block",
    Log: "Log",
};
exports.AddressPrefixType = {
    IPPrefix: "IPPrefix",
    ServiceTag: "ServiceTag",
};
exports.AdminRuleKind = {
    Custom: "Custom",
    Default: "Default",
};
exports.AdminState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ApplicationGatewayClientRevocationOptions = {
    None: "None",
    OCSP: "OCSP",
};
exports.ApplicationGatewayCookieBasedAffinity = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ApplicationGatewayCustomErrorStatusCode = {
    HttpStatus400: "HttpStatus400",
    HttpStatus403: "HttpStatus403",
    HttpStatus404: "HttpStatus404",
    HttpStatus405: "HttpStatus405",
    HttpStatus408: "HttpStatus408",
    HttpStatus500: "HttpStatus500",
    HttpStatus502: "HttpStatus502",
    HttpStatus503: "HttpStatus503",
    HttpStatus504: "HttpStatus504",
};
exports.ApplicationGatewayFirewallMode = {
    Detection: "Detection",
    Prevention: "Prevention",
};
exports.ApplicationGatewayFirewallRateLimitDuration = {
    OneMin: "OneMin",
    FiveMins: "FiveMins",
};
exports.ApplicationGatewayFirewallUserSessionVariable = {
    ClientAddr: "ClientAddr",
    GeoLocation: "GeoLocation",
    None: "None",
};
exports.ApplicationGatewayLoadDistributionAlgorithm = {
    RoundRobin: "RoundRobin",
    LeastConnections: "LeastConnections",
    IpHash: "IpHash",
};
exports.ApplicationGatewayProtocol = {
    Http: "Http",
    Https: "Https",
    Tcp: "Tcp",
    Tls: "Tls",
};
exports.ApplicationGatewayRedirectType = {
    Permanent: "Permanent",
    Found: "Found",
    SeeOther: "SeeOther",
    Temporary: "Temporary",
};
exports.ApplicationGatewayRequestRoutingRuleType = {
    Basic: "Basic",
    PathBasedRouting: "PathBasedRouting",
};
exports.ApplicationGatewaySkuName = {
    Standard_Small: "Standard_Small",
    Standard_Medium: "Standard_Medium",
    Standard_Large: "Standard_Large",
    WAF_Medium: "WAF_Medium",
    WAF_Large: "WAF_Large",
    Standard_v2: "Standard_v2",
    WAF_v2: "WAF_v2",
    Basic: "Basic",
};
exports.ApplicationGatewaySslCipherSuite = {
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
    TLS_DHE_RSA_WITH_AES_256_CBC_SHA: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
    TLS_DHE_RSA_WITH_AES_128_CBC_SHA: "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
    TLS_RSA_WITH_AES_256_GCM_SHA384: "TLS_RSA_WITH_AES_256_GCM_SHA384",
    TLS_RSA_WITH_AES_128_GCM_SHA256: "TLS_RSA_WITH_AES_128_GCM_SHA256",
    TLS_RSA_WITH_AES_256_CBC_SHA256: "TLS_RSA_WITH_AES_256_CBC_SHA256",
    TLS_RSA_WITH_AES_128_CBC_SHA256: "TLS_RSA_WITH_AES_128_CBC_SHA256",
    TLS_RSA_WITH_AES_256_CBC_SHA: "TLS_RSA_WITH_AES_256_CBC_SHA",
    TLS_RSA_WITH_AES_128_CBC_SHA: "TLS_RSA_WITH_AES_128_CBC_SHA",
    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
    TLS_RSA_WITH_3DES_EDE_CBC_SHA: "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
    TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
};
exports.ApplicationGatewaySslPolicyName = {
    AppGwSslPolicy20150501: "AppGwSslPolicy20150501",
    AppGwSslPolicy20170401: "AppGwSslPolicy20170401",
    AppGwSslPolicy20170401S: "AppGwSslPolicy20170401S",
    AppGwSslPolicy20220101: "AppGwSslPolicy20220101",
    AppGwSslPolicy20220101S: "AppGwSslPolicy20220101S",
};
exports.ApplicationGatewaySslPolicyType = {
    Predefined: "Predefined",
    Custom: "Custom",
    CustomV2: "CustomV2",
};
exports.ApplicationGatewaySslProtocol = {
    TLSv1_0: "TLSv1_0",
    TLSv1_1: "TLSv1_1",
    TLSv1_2: "TLSv1_2",
    TLSv1_3: "TLSv1_3",
};
exports.ApplicationGatewayTier = {
    Standard: "Standard",
    WAF: "WAF",
    Standard_v2: "Standard_v2",
    WAF_v2: "WAF_v2",
    Basic: "Basic",
};
exports.AuthorizationUseStatus = {
    Available: "Available",
    InUse: "InUse",
};
exports.AutoLearnPrivateRangesMode = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.AzureFirewallApplicationRuleProtocolType = {
    Http: "Http",
    Https: "Https",
    Mssql: "Mssql",
};
exports.AzureFirewallNatRCActionType = {
    Snat: "Snat",
    Dnat: "Dnat",
};
exports.AzureFirewallNetworkRuleProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
    ICMP: "ICMP",
};
exports.AzureFirewallRCActionType = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.AzureFirewallSkuName = {
    AZFW_VNet: "AZFW_VNet",
    AZFW_Hub: "AZFW_Hub",
};
exports.AzureFirewallSkuTier = {
    Standard: "Standard",
    Premium: "Premium",
    Basic: "Basic",
};
exports.AzureFirewallThreatIntelMode = {
    Alert: "Alert",
    Deny: "Deny",
    Off: "Off",
};
exports.BastionHostSkuName = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.CommissionedState = {
    Provisioning: "Provisioning",
    Provisioned: "Provisioned",
    Commissioning: "Commissioning",
    CommissionedNoInternetAdvertise: "CommissionedNoInternetAdvertise",
    Commissioned: "Commissioned",
    Decommissioning: "Decommissioning",
    Deprovisioning: "Deprovisioning",
    Deprovisioned: "Deprovisioned",
};
exports.ConfigurationType = {
    SecurityAdmin: "SecurityAdmin",
    Connectivity: "Connectivity",
};
exports.ConnectionMonitorEndpointFilterItemType = {
    AgentAddress: "AgentAddress",
};
exports.ConnectionMonitorEndpointFilterType = {
    Include: "Include",
};
exports.ConnectionMonitorTestConfigurationProtocol = {
    Tcp: "Tcp",
    Http: "Http",
    Icmp: "Icmp",
};
exports.ConnectivityTopology = {
    HubAndSpoke: "HubAndSpoke",
    Mesh: "Mesh",
};
exports.CoverageLevel = {
    Default: "Default",
    Low: "Low",
    BelowAverage: "BelowAverage",
    Average: "Average",
    AboveAverage: "AboveAverage",
    Full: "Full",
};
exports.CustomIpPrefixType = {
    Singular: "Singular",
    Parent: "Parent",
    Child: "Child",
};
exports.DdosSettingsProtectionMode = {
    VirtualNetworkInherited: "VirtualNetworkInherited",
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.DeleteExistingPeering = {
    False: "False",
    True: "True",
};
exports.DeleteOptions = {
    Delete: "Delete",
    Detach: "Detach",
};
exports.DestinationPortBehavior = {
    None: "None",
    ListenIfAvailable: "ListenIfAvailable",
};
exports.DhGroup = {
    None: "None",
    DHGroup1: "DHGroup1",
    DHGroup2: "DHGroup2",
    DHGroup14: "DHGroup14",
    DHGroup2048: "DHGroup2048",
    ECP256: "ECP256",
    ECP384: "ECP384",
    DHGroup24: "DHGroup24",
};
exports.EndpointType = {
    AzureVM: "AzureVM",
    AzureVNet: "AzureVNet",
    AzureSubnet: "AzureSubnet",
    ExternalAddress: "ExternalAddress",
    MMAWorkspaceMachine: "MMAWorkspaceMachine",
    MMAWorkspaceNetwork: "MMAWorkspaceNetwork",
    AzureArcVM: "AzureArcVM",
    AzureVMSS: "AzureVMSS",
};
exports.ExpressRouteCircuitPeeringState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRouteCircuitSkuFamily = {
    UnlimitedData: "UnlimitedData",
    MeteredData: "MeteredData",
};
exports.ExpressRouteCircuitSkuTier = {
    Standard: "Standard",
    Premium: "Premium",
    Basic: "Basic",
    Local: "Local",
};
exports.ExpressRouteLinkAdminState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ExpressRouteLinkMacSecCipher = {
    GcmAes256: "GcmAes256",
    GcmAes128: "GcmAes128",
    GcmAesXpn128: "GcmAesXpn128",
    GcmAesXpn256: "GcmAesXpn256",
};
exports.ExpressRouteLinkMacSecSciState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRoutePeeringState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRoutePeeringType = {
    AzurePublicPeering: "AzurePublicPeering",
    AzurePrivatePeering: "AzurePrivatePeering",
    MicrosoftPeering: "MicrosoftPeering",
};
exports.ExpressRoutePortsBillingType = {
    MeteredData: "MeteredData",
    UnlimitedData: "UnlimitedData",
};
exports.ExpressRoutePortsEncapsulation = {
    Dot1Q: "Dot1Q",
    QinQ: "QinQ",
};
exports.ExtendedLocationTypes = {
    EdgeZone: "EdgeZone",
};
exports.FirewallPolicyFilterRuleCollectionActionType = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.FirewallPolicyIDPSQuerySortOrder = {
    Ascending: "Ascending",
    Descending: "Descending",
};
exports.FirewallPolicyIntrusionDetectionProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    ICMP: "ICMP",
    ANY: "ANY",
};
exports.FirewallPolicyIntrusionDetectionStateType = {
    Off: "Off",
    Alert: "Alert",
    Deny: "Deny",
};
exports.FirewallPolicyNatRuleCollectionActionType = {
    DNAT: "DNAT",
};
exports.FirewallPolicyRuleApplicationProtocolType = {
    Http: "Http",
    Https: "Https",
};
exports.FirewallPolicyRuleCollectionType = {
    FirewallPolicyNatRuleCollection: "FirewallPolicyNatRuleCollection",
    FirewallPolicyFilterRuleCollection: "FirewallPolicyFilterRuleCollection",
};
exports.FirewallPolicyRuleNetworkProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
    ICMP: "ICMP",
};
exports.FirewallPolicyRuleType = {
    ApplicationRule: "ApplicationRule",
    NetworkRule: "NetworkRule",
    NatRule: "NatRule",
};
exports.FirewallPolicySkuTier = {
    Standard: "Standard",
    Premium: "Premium",
    Basic: "Basic",
};
exports.FlowLogFormatType = {
    JSON: "JSON",
};
exports.GatewayLoadBalancerTunnelInterfaceType = {
    None: "None",
    Internal: "Internal",
    External: "External",
};
exports.GatewayLoadBalancerTunnelProtocol = {
    None: "None",
    Native: "Native",
    VXLAN: "VXLAN",
};
exports.Geo = {
    GLOBAL: "GLOBAL",
    AFRI: "AFRI",
    APAC: "APAC",
    EURO: "EURO",
    LATAM: "LATAM",
    NAM: "NAM",
    ME: "ME",
    OCEANIA: "OCEANIA",
    AQ: "AQ",
};
exports.GroupConnectivity = {
    None: "None",
    DirectlyConnected: "DirectlyConnected",
};
exports.HTTPConfigurationMethod = {
    Get: "Get",
    Post: "Post",
};
exports.HubRoutingPreference = {
    ExpressRoute: "ExpressRoute",
    VpnGateway: "VpnGateway",
    ASPath: "ASPath",
};
exports.IPAllocationMethod = {
    Static: "Static",
    Dynamic: "Dynamic",
};
exports.IPVersion = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.IkeEncryption = {
    DES: "DES",
    DES3: "DES3",
    AES128: "AES128",
    AES192: "AES192",
    AES256: "AES256",
    GCMAES256: "GCMAES256",
    GCMAES128: "GCMAES128",
};
exports.IkeIntegrity = {
    MD5: "MD5",
    SHA1: "SHA1",
    SHA256: "SHA256",
    SHA384: "SHA384",
    GCMAES256: "GCMAES256",
    GCMAES128: "GCMAES128",
};
exports.IpAllocationType = {
    Undefined: "Undefined",
    Hypernet: "Hypernet",
};
exports.IpsecEncryption = {
    None: "None",
    DES: "DES",
    DES3: "DES3",
    AES128: "AES128",
    AES192: "AES192",
    AES256: "AES256",
    GCMAES128: "GCMAES128",
    GCMAES192: "GCMAES192",
    GCMAES256: "GCMAES256",
};
exports.IpsecIntegrity = {
    MD5: "MD5",
    SHA1: "SHA1",
    SHA256: "SHA256",
    GCMAES128: "GCMAES128",
    GCMAES192: "GCMAES192",
    GCMAES256: "GCMAES256",
};
exports.IsGlobal = {
    False: "False",
    True: "True",
};
exports.LoadBalancerBackendAddressAdminState = {
    None: "None",
    Up: "Up",
    Down: "Down",
};
exports.LoadBalancerOutboundRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    All: "All",
};
exports.LoadBalancerSkuName = {
    Basic: "Basic",
    Standard: "Standard",
    Gateway: "Gateway",
};
exports.LoadBalancerSkuTier = {
    Regional: "Regional",
    Global: "Global",
};
exports.LoadDistribution = {
    Default: "Default",
    SourceIP: "SourceIP",
    SourceIPProtocol: "SourceIPProtocol",
};
exports.ManagedRuleEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.NatGatewaySkuName = {
    Standard: "Standard",
};
exports.NetworkIntentPolicyBasedService = {
    None: "None",
    All: "All",
    AllowRulesOnly: "AllowRulesOnly",
};
exports.NetworkInterfaceAuxiliaryMode = {
    None: "None",
    MaxConnections: "MaxConnections",
    Floating: "Floating",
    AcceleratedConnections: "AcceleratedConnections",
};
exports.NetworkInterfaceAuxiliarySku = {
    None: "None",
    A1: "A1",
    A2: "A2",
    A4: "A4",
    A8: "A8",
};
exports.NetworkInterfaceMigrationPhase = {
    None: "None",
    Prepare: "Prepare",
    Commit: "Commit",
    Abort: "Abort",
    Committed: "Committed",
};
exports.NetworkInterfaceNicType = {
    Standard: "Standard",
    Elastic: "Elastic",
};
exports.NextStep = {
    Unknown: "Unknown",
    Continue: "Continue",
    Terminate: "Terminate",
};
exports.OutputType = {
    Workspace: "Workspace",
};
exports.OwaspCrsExclusionEntryMatchVariable = {
    RequestHeaderNames: "RequestHeaderNames",
    RequestCookieNames: "RequestCookieNames",
    RequestArgNames: "RequestArgNames",
    RequestHeaderKeys: "RequestHeaderKeys",
    RequestHeaderValues: "RequestHeaderValues",
    RequestCookieKeys: "RequestCookieKeys",
    RequestCookieValues: "RequestCookieValues",
    RequestArgKeys: "RequestArgKeys",
    RequestArgValues: "RequestArgValues",
};
exports.OwaspCrsExclusionEntrySelectorMatchOperator = {
    Equals: "Equals",
    Contains: "Contains",
    StartsWith: "StartsWith",
    EndsWith: "EndsWith",
    EqualsAny: "EqualsAny",
};
exports.PacketCaptureTargetType = {
    AzureVM: "AzureVM",
    AzureVMSS: "AzureVMSS",
};
exports.PcProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
};
exports.PfsGroup = {
    None: "None",
    PFS1: "PFS1",
    PFS2: "PFS2",
    PFS2048: "PFS2048",
    ECP256: "ECP256",
    ECP384: "ECP384",
    PFS24: "PFS24",
    PFS14: "PFS14",
    PFSMM: "PFSMM",
};
exports.PreferredIPVersion = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.PreferredRoutingGateway = {
    ExpressRoute: "ExpressRoute",
    VpnGateway: "VpnGateway",
    None: "None",
};
exports.ProbeProtocol = {
    Http: "Http",
    Tcp: "Tcp",
    Https: "Https",
};
exports.ProtocolType = {
    DoNotUse: "DoNotUse",
    Icmp: "Icmp",
    Tcp: "Tcp",
    Udp: "Udp",
    Gre: "Gre",
    Esp: "Esp",
    Ah: "Ah",
    Vxlan: "Vxlan",
    All: "All",
};
exports.PublicIPAddressMigrationPhase = {
    None: "None",
    Prepare: "Prepare",
    Commit: "Commit",
    Abort: "Abort",
    Committed: "Committed",
};
exports.PublicIPAddressSkuName = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.PublicIPAddressSkuTier = {
    Regional: "Regional",
    Global: "Global",
};
exports.PublicIPPrefixSkuName = {
    Standard: "Standard",
};
exports.PublicIPPrefixSkuTier = {
    Regional: "Regional",
    Global: "Global",
};
exports.PublicIpAddressDnsSettingsDomainNameLabelScope = {
    TenantReuse: "TenantReuse",
    SubscriptionReuse: "SubscriptionReuse",
    ResourceGroupReuse: "ResourceGroupReuse",
    NoReuse: "NoReuse",
};
exports.ResourceIdentityType = {
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
    None: "None",
};
exports.RouteFilterRuleType = {
    Community: "Community",
};
exports.RouteMapActionType = {
    Unknown: "Unknown",
    Remove: "Remove",
    Add: "Add",
    Replace: "Replace",
    Drop: "Drop",
};
exports.RouteMapMatchCondition = {
    Unknown: "Unknown",
    Contains: "Contains",
    Equals: "Equals",
    NotContains: "NotContains",
    NotEquals: "NotEquals",
};
exports.RouteNextHopType = {
    VirtualNetworkGateway: "VirtualNetworkGateway",
    VnetLocal: "VnetLocal",
    Internet: "Internet",
    VirtualAppliance: "VirtualAppliance",
    None: "None",
};
exports.ScrubbingRuleEntryMatchOperator = {
    Equals: "Equals",
    EqualsAny: "EqualsAny",
};
exports.ScrubbingRuleEntryMatchVariable = {
    RequestHeaderNames: "RequestHeaderNames",
    RequestCookieNames: "RequestCookieNames",
    RequestArgNames: "RequestArgNames",
    RequestPostArgNames: "RequestPostArgNames",
    RequestJSONArgNames: "RequestJSONArgNames",
    RequestIPAddress: "RequestIPAddress",
};
exports.ScrubbingRuleEntryState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.SecurityConfigurationRuleAccess = {
    Allow: "Allow",
    Deny: "Deny",
    AlwaysAllow: "AlwaysAllow",
};
exports.SecurityConfigurationRuleDirection = {
    Inbound: "Inbound",
    Outbound: "Outbound",
};
exports.SecurityConfigurationRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Icmp: "Icmp",
    Esp: "Esp",
    Any: "Any",
    Ah: "Ah",
};
exports.SecurityProviderName = {
    ZScaler: "ZScaler",
    IBoss: "IBoss",
    Checkpoint: "Checkpoint",
};
exports.SecurityRuleAccess = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.SecurityRuleDirection = {
    Inbound: "Inbound",
    Outbound: "Outbound",
};
exports.SecurityRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Icmp: "Icmp",
    Esp: "Esp",
    Asterisk: "*",
    Ah: "Ah",
};
exports.ServiceProviderProvisioningState = {
    NotProvisioned: "NotProvisioned",
    Provisioning: "Provisioning",
    Provisioned: "Provisioned",
    Deprovisioning: "Deprovisioning",
};
exports.SyncMode = {
    Automatic: "Automatic",
    Manual: "Manual",
};
exports.TransportProtocol = {
    Udp: "Udp",
    Tcp: "Tcp",
    All: "All",
};
exports.UseHubGateway = {
    False: "False",
    True: "True",
};
exports.VirtualNetworkEncryptionEnforcement = {
    DropUnencrypted: "DropUnencrypted",
    AllowUnencrypted: "AllowUnencrypted",
};
exports.VirtualNetworkGatewayConnectionMode = {
    Default: "Default",
    ResponderOnly: "ResponderOnly",
    InitiatorOnly: "InitiatorOnly",
};
exports.VirtualNetworkGatewayConnectionProtocol = {
    IKEv2: "IKEv2",
    IKEv1: "IKEv1",
};
exports.VirtualNetworkGatewayConnectionType = {
    IPsec: "IPsec",
    Vnet2Vnet: "Vnet2Vnet",
    ExpressRoute: "ExpressRoute",
    VPNClient: "VPNClient",
};
exports.VirtualNetworkGatewaySkuName = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
    VpnGw1: "VpnGw1",
    VpnGw2: "VpnGw2",
    VpnGw3: "VpnGw3",
    VpnGw4: "VpnGw4",
    VpnGw5: "VpnGw5",
    VpnGw1AZ: "VpnGw1AZ",
    VpnGw2AZ: "VpnGw2AZ",
    VpnGw3AZ: "VpnGw3AZ",
    VpnGw4AZ: "VpnGw4AZ",
    VpnGw5AZ: "VpnGw5AZ",
    ErGw1AZ: "ErGw1AZ",
    ErGw2AZ: "ErGw2AZ",
    ErGw3AZ: "ErGw3AZ",
};
exports.VirtualNetworkGatewaySkuTier = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
    VpnGw1: "VpnGw1",
    VpnGw2: "VpnGw2",
    VpnGw3: "VpnGw3",
    VpnGw4: "VpnGw4",
    VpnGw5: "VpnGw5",
    VpnGw1AZ: "VpnGw1AZ",
    VpnGw2AZ: "VpnGw2AZ",
    VpnGw3AZ: "VpnGw3AZ",
    VpnGw4AZ: "VpnGw4AZ",
    VpnGw5AZ: "VpnGw5AZ",
    ErGw1AZ: "ErGw1AZ",
    ErGw2AZ: "ErGw2AZ",
    ErGw3AZ: "ErGw3AZ",
};
exports.VirtualNetworkGatewayType = {
    Vpn: "Vpn",
    ExpressRoute: "ExpressRoute",
    LocalGateway: "LocalGateway",
};
exports.VirtualNetworkPeeringLevel = {
    FullyInSync: "FullyInSync",
    RemoteNotInSync: "RemoteNotInSync",
    LocalNotInSync: "LocalNotInSync",
    LocalAndRemoteNotInSync: "LocalAndRemoteNotInSync",
};
exports.VirtualNetworkPeeringState = {
    Initiated: "Initiated",
    Connected: "Connected",
    Disconnected: "Disconnected",
};
exports.VirtualNetworkPrivateEndpointNetworkPolicies = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.VirtualNetworkPrivateLinkServiceNetworkPolicies = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.VnetLocalRouteOverrideCriteria = {
    Contains: "Contains",
    Equal: "Equal",
};
exports.VpnAuthenticationType = {
    Certificate: "Certificate",
    Radius: "Radius",
    AAD: "AAD",
};
exports.VpnClientProtocol = {
    IkeV2: "IkeV2",
    SSTP: "SSTP",
    OpenVPN: "OpenVPN",
};
exports.VpnGatewayGeneration = {
    None: "None",
    Generation1: "Generation1",
    Generation2: "Generation2",
};
exports.VpnGatewayTunnelingProtocol = {
    IkeV2: "IkeV2",
    OpenVPN: "OpenVPN",
};
exports.VpnLinkConnectionMode = {
    Default: "Default",
    ResponderOnly: "ResponderOnly",
    InitiatorOnly: "InitiatorOnly",
};
exports.VpnNatRuleMode = {
    EgressSnat: "EgressSnat",
    IngressSnat: "IngressSnat",
};
exports.VpnNatRuleType = {
    Static: "Static",
    Dynamic: "Dynamic",
};
exports.VpnPolicyMemberAttributeType = {
    CertificateGroupId: "CertificateGroupId",
    AADGroupId: "AADGroupId",
    RadiusAzureGroupId: "RadiusAzureGroupId",
};
exports.VpnType = {
    PolicyBased: "PolicyBased",
    RouteBased: "RouteBased",
};
exports.WebApplicationFirewallAction = {
    Allow: "Allow",
    Block: "Block",
    Log: "Log",
};
exports.WebApplicationFirewallEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.WebApplicationFirewallMatchVariable = {
    RemoteAddr: "RemoteAddr",
    RequestMethod: "RequestMethod",
    QueryString: "QueryString",
    PostArgs: "PostArgs",
    RequestUri: "RequestUri",
    RequestHeaders: "RequestHeaders",
    RequestBody: "RequestBody",
    RequestCookies: "RequestCookies",
};
exports.WebApplicationFirewallMode = {
    Prevention: "Prevention",
    Detection: "Detection",
};
exports.WebApplicationFirewallOperator = {
    IPMatch: "IPMatch",
    Equal: "Equal",
    Contains: "Contains",
    LessThan: "LessThan",
    GreaterThan: "GreaterThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    Regex: "Regex",
    GeoMatch: "GeoMatch",
    Any: "Any",
};
exports.WebApplicationFirewallRuleType = {
    MatchRule: "MatchRule",
    RateLimitRule: "RateLimitRule",
    Invalid: "Invalid",
};
exports.WebApplicationFirewallScrubbingState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.WebApplicationFirewallState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.WebApplicationFirewallTransform = {
    Uppercase: "Uppercase",
    Lowercase: "Lowercase",
    Trim: "Trim",
    UrlDecode: "UrlDecode",
    UrlEncode: "UrlEncode",
    RemoveNulls: "RemoveNulls",
    HtmlEntityDecode: "HtmlEntityDecode",
};
//# sourceMappingURL=data:application/json;base64,