import * as v20231011preview from "./v20231011preview";
import * as v20240125 from "./v20240125";
import * as v20240507 from "./v20240507";
import * as v20240911 from "./v20240911";
import * as v20240927 from "./v20240927";
export { v20231011preview, v20240125, v20240507, v20240911, v20240927, };
export declare const DataType: {
    readonly Blob: "Blob";
    readonly Table: "Table";
};
/**
 * Transfer Storage Blobs or Tables
 */
export type DataType = (typeof DataType)[keyof typeof DataType];
export declare const Direction: {
    readonly Send: "Send";
    readonly Receive: "Receive";
};
/**
 * Direction of data movement
 */
export type Direction = (typeof Direction)[keyof typeof Direction];
export declare const FlowStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Status of the current flow
 */
export type FlowStatus = (typeof FlowStatus)[keyof typeof FlowStatus];
export declare const FlowType: {
    readonly Unknown: "Unknown";
    readonly Complex: "Complex";
    readonly DevSecOps: "DevSecOps";
    readonly Messaging: "Messaging";
    readonly Mission: "Mission";
    readonly MicrosoftInternal: "MicrosoftInternal";
    readonly BasicFiles: "BasicFiles";
    readonly Data: "Data";
};
/**
 * Flow type for the specified resource
 */
export type FlowType = (typeof FlowType)[keyof typeof FlowType];
export declare const ListApprovedSchemasDirection: {
    readonly Send: "Send";
    readonly Receive: "Receive";
};
/**
 * The direction pipeline to filter approved schemas.
 */
export type ListApprovedSchemasDirection = (typeof ListApprovedSchemasDirection)[keyof typeof ListApprovedSchemasDirection];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const SchemaStatus: {
    readonly New: "New";
    readonly Approved: "Approved";
};
/**
 * Status of the schema
 */
export type SchemaStatus = (typeof SchemaStatus)[keyof typeof SchemaStatus];
