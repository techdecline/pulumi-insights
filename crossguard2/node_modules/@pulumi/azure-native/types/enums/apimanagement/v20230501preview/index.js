"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkType = exports.VersioningScheme = exports.Verbosity = exports.UserState = exports.TranslateRequiredQueryParametersConduct = exports.SubscriptionState = exports.State = exports.SoapApiType = exports.SkuType = exports.SchemaType = exports.SamplingType = exports.PublicNetworkAccess = exports.ProvisioningState = exports.Protocol = exports.ProductState = exports.PrivateEndpointServiceConnectionStatus = exports.PolicyRestrictionRequireBase = exports.PolicyFragmentContentFormat = exports.PolicyContentFormat = exports.OperationNameFormat = exports.OAuth2GrantType = exports.NatGatewayState = exports.LoggerType = exports.LegacyPortalStatus = exports.LegacyApiState = exports.KeyType = exports.IdentityProviderType = exports.HttpCorrelationProtocol = exports.HostnameType = exports.GroupType = exports.GrantType = exports.GatewayListDebugCredentialsContractPurpose = exports.DeveloperPortalStatus = exports.DataMaskingMode = exports.ContentFormat = exports.Confirmation = exports.ClientAuthenticationMethod = exports.CertificateStatus = exports.CertificateSource = exports.BearerTokenSendingMethods = exports.BearerTokenSendingMethod = exports.BackendType = exports.BackendProtocol = exports.AuthorizationType = exports.AuthorizationMethod = exports.AppType = exports.ApimIdentityType = exports.ApiType = exports.AlwaysLog = void 0;
exports.AlwaysLog = {
    /**
     * Always log all erroneous request regardless of sampling settings.
     */
    AllErrors: "allErrors",
};
exports.ApiType = {
    Http: "http",
    Soap: "soap",
    Websocket: "websocket",
    Graphql: "graphql",
    Odata: "odata",
    Grpc: "grpc",
};
exports.ApimIdentityType = {
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
    None: "None",
};
exports.AppType = {
    /**
     * User create request was sent by legacy developer portal.
     */
    Portal: "portal",
    /**
     * User create request was sent by new developer portal.
     */
    DeveloperPortal: "developerPortal",
};
exports.AuthorizationMethod = {
    HEAD: "HEAD",
    OPTIONS: "OPTIONS",
    TRACE: "TRACE",
    GET: "GET",
    POST: "POST",
    PUT: "PUT",
    PATCH: "PATCH",
    DELETE: "DELETE",
};
exports.AuthorizationType = {
    /**
     * OAuth2 authorization type
     */
    OAuth2: "OAuth2",
};
exports.BackendProtocol = {
    /**
     * The Backend is a RESTful service.
     */
    Http: "http",
    /**
     * The Backend is a SOAP service.
     */
    Soap: "soap",
};
exports.BackendType = {
    /**
     * supports single backend
     */
    Single: "Single",
    /**
     * supports pool backend
     */
    Pool: "Pool",
};
exports.BearerTokenSendingMethod = {
    AuthorizationHeader: "authorizationHeader",
    Query: "query",
};
exports.BearerTokenSendingMethods = {
    /**
     * Access token will be transmitted in the Authorization header using Bearer schema
     */
    AuthorizationHeader: "authorizationHeader",
    /**
     * Access token will be transmitted as query parameters.
     */
    Query: "query",
};
exports.CertificateSource = {
    Managed: "Managed",
    KeyVault: "KeyVault",
    Custom: "Custom",
    BuiltIn: "BuiltIn",
};
exports.CertificateStatus = {
    Completed: "Completed",
    Failed: "Failed",
    InProgress: "InProgress",
};
exports.ClientAuthenticationMethod = {
    /**
     * Basic Client Authentication method.
     */
    Basic: "Basic",
    /**
     * Body based Authentication method.
     */
    Body: "Body",
};
exports.Confirmation = {
    /**
     * Send an e-mail to the user confirming they have successfully signed up.
     */
    Signup: "signup",
    /**
     * Send an e-mail inviting the user to sign-up and complete registration.
     */
    Invite: "invite",
};
exports.ContentFormat = {
    /**
     * The contents are inline and Content type is a WADL document.
     */
    Wadl_xml: "wadl-xml",
    /**
     * The WADL document is hosted on a publicly accessible internet address.
     */
    Wadl_link_json: "wadl-link-json",
    /**
     * The contents are inline and Content Type is a OpenAPI 2.0 JSON Document.
     */
    Swagger_json: "swagger-json",
    /**
     * The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address.
     */
    Swagger_link_json: "swagger-link-json",
    /**
     * The contents are inline and the document is a WSDL/Soap document.
     */
    Wsdl: "wsdl",
    /**
     * The WSDL document is hosted on a publicly accessible internet address.
     */
    Wsdl_link: "wsdl-link",
    /**
     * The contents are inline and Content Type is a OpenAPI 3.0 YAML Document.
     */
    Openapi: "openapi",
    /**
     * The contents are inline and Content Type is a OpenAPI 3.0 JSON Document.
     */
    Openapi_json: "openapi+json",
    /**
     * The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address.
     */
    Openapi_link: "openapi-link",
    /**
     * The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address.
     */
    Openapi_json_link: "openapi+json-link",
    /**
     * The GraphQL API endpoint hosted on a publicly accessible internet address.
     */
    Graphql_link: "graphql-link",
    /**
     * The contents are inline and Content Type is a OData XML Document.
     */
    Odata: "odata",
    /**
     * The OData metadata document hosted on a publicly accessible internet address.
     */
    Odata_link: "odata-link",
    /**
     * The contents are inline and Content Type is a gRPC protobuf file.
     */
    Grpc: "grpc",
    /**
     * The gRPC protobuf file is hosted on a publicly accessible internet address.
     */
    Grpc_link: "grpc-link",
};
exports.DataMaskingMode = {
    /**
     * Mask the value of an entity.
     */
    Mask: "Mask",
    /**
     * Hide the presence of an entity.
     */
    Hide: "Hide",
};
exports.DeveloperPortalStatus = {
    /**
     * Developer Portal is enabled for the service.
     */
    Enabled: "Enabled",
    /**
     * Developer Portal is disabled for the service.
     */
    Disabled: "Disabled",
};
exports.GatewayListDebugCredentialsContractPurpose = {
    /**
     * The tracing purpose.
     */
    Tracing: "tracing",
};
exports.GrantType = {
    /**
     * Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
     */
    AuthorizationCode: "authorizationCode",
    /**
     * Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
     */
    Implicit: "implicit",
    /**
     * Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
     */
    ResourceOwnerPassword: "resourceOwnerPassword",
    /**
     * Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
     */
    ClientCredentials: "clientCredentials",
};
exports.GroupType = {
    Custom: "custom",
    System: "system",
    External: "external",
};
exports.HostnameType = {
    Proxy: "Proxy",
    Portal: "Portal",
    Management: "Management",
    Scm: "Scm",
    DeveloperPortal: "DeveloperPortal",
    ConfigurationApi: "ConfigurationApi",
};
exports.HttpCorrelationProtocol = {
    /**
     * Do not read and inject correlation headers.
     */
    None: "None",
    /**
     * Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
     */
    Legacy: "Legacy",
    /**
     * Inject Trace Context headers. See https://w3c.github.io/trace-context.
     */
    W3C: "W3C",
};
exports.IdentityProviderType = {
    /**
     * Facebook as Identity provider.
     */
    Facebook: "facebook",
    /**
     * Google as Identity provider.
     */
    Google: "google",
    /**
     * Microsoft Live as Identity provider.
     */
    Microsoft: "microsoft",
    /**
     * Twitter as Identity provider.
     */
    Twitter: "twitter",
    /**
     * Azure Active Directory as Identity provider.
     */
    Aad: "aad",
    /**
     * Azure Active Directory B2C as Identity provider.
     */
    AadB2C: "aadB2C",
};
exports.KeyType = {
    Primary: "primary",
    Secondary: "secondary",
};
exports.LegacyApiState = {
    /**
     * Legacy Configuration API (v1) is enabled for the service and self-hosted gateways can connect to it.
     */
    Enabled: "Enabled",
    /**
     * Legacy Configuration API (v1) is disabled for the service and self-hosted gateways can not connect to it.
     */
    Disabled: "Disabled",
};
exports.LegacyPortalStatus = {
    /**
     * Legacy Portal is enabled for the service.
     */
    Enabled: "Enabled",
    /**
     * Legacy Portal is disabled for the service.
     */
    Disabled: "Disabled",
};
exports.LoggerType = {
    /**
     * Azure Event Hub as log destination.
     */
    AzureEventHub: "azureEventHub",
    /**
     * Azure Application Insights as log destination.
     */
    ApplicationInsights: "applicationInsights",
    /**
     * Azure Monitor
     */
    AzureMonitor: "azureMonitor",
};
exports.NatGatewayState = {
    /**
     * Nat Gateway is enabled for the service.
     */
    Enabled: "Enabled",
    /**
     * Nat Gateway is disabled for the service.
     */
    Disabled: "Disabled",
};
exports.OAuth2GrantType = {
    /**
     * Authorization Code grant
     */
    AuthorizationCode: "AuthorizationCode",
    /**
     * Client Credential grant
     */
    ClientCredentials: "ClientCredentials",
};
exports.OperationNameFormat = {
    /**
     * API_NAME;rev=API_REVISION - OPERATION_NAME
     */
    Name: "Name",
    /**
     * HTTP_VERB URL
     */
    Url: "Url",
};
exports.PolicyContentFormat = {
    /**
     * The contents are inline and Content type is an XML document.
     */
    Xml: "xml",
    /**
     * The policy XML document is hosted on a HTTP endpoint accessible from the API Management service.
     */
    Xml_link: "xml-link",
    /**
     * The contents are inline and Content type is a non XML encoded policy document.
     */
    Rawxml: "rawxml",
    /**
     * The policy document is not XML encoded and is hosted on a HTTP endpoint accessible from the API Management service.
     */
    Rawxml_link: "rawxml-link",
};
exports.PolicyFragmentContentFormat = {
    /**
     * The contents are inline and Content type is an XML document.
     */
    Xml: "xml",
    /**
     * The contents are inline and Content type is a non XML encoded policy document.
     */
    Rawxml: "rawxml",
};
exports.PolicyRestrictionRequireBase = {
    /**
     * The policy is required to have base policy
     */
    True: "true",
    /**
     * The policy does not require to have base policy
     */
    False: "false",
};
exports.PrivateEndpointServiceConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
};
exports.ProductState = {
    NotPublished: "notPublished",
    Published: "published",
};
exports.Protocol = {
    Http: "http",
    Https: "https",
    Ws: "ws",
    Wss: "wss",
};
exports.ProvisioningState = {
    Created: "created",
};
exports.PublicNetworkAccess = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.SamplingType = {
    /**
     * Fixed-rate sampling.
     */
    Fixed: "fixed",
};
exports.SchemaType = {
    /**
     * XML schema type.
     */
    Xml: "xml",
    /**
     * Json schema type.
     */
    Json: "json",
};
exports.SkuType = {
    /**
     * Developer SKU of Api Management.
     */
    Developer: "Developer",
    /**
     * Standard SKU of Api Management.
     */
    Standard: "Standard",
    /**
     * Premium SKU of Api Management.
     */
    Premium: "Premium",
    /**
     * Basic SKU of Api Management.
     */
    Basic: "Basic",
    /**
     * Consumption SKU of Api Management.
     */
    Consumption: "Consumption",
    /**
     * Isolated SKU of Api Management.
     */
    Isolated: "Isolated",
    /**
     * BasicV2 SKU of Api Management.
     */
    BasicV2: "BasicV2",
    /**
     * StandardV2 SKU of Api Management.
     */
    StandardV2: "StandardV2",
};
exports.SoapApiType = {
    /**
     * Imports a SOAP API having a RESTful front end.
     */
    SoapToRest: "http",
    /**
     * Imports the SOAP API having a SOAP front end.
     */
    SoapPassThrough: "soap",
    /**
     * Imports the API having a Websocket front end.
     */
    WebSocket: "websocket",
    /**
     * Imports the API having a GraphQL front end.
     */
    GraphQL: "graphql",
    /**
     * Imports the API having a OData front end.
     */
    OData: "odata",
    /**
     * Imports the API having a gRPC front end.
     */
    GRPC: "grpc",
};
exports.State = {
    /**
     * The issue is proposed.
     */
    Proposed: "proposed",
    /**
     * The issue is opened.
     */
    Open: "open",
    /**
     * The issue was removed.
     */
    Removed: "removed",
    /**
     * The issue is now resolved.
     */
    Resolved: "resolved",
    /**
     * The issue was closed.
     */
    Closed: "closed",
};
exports.SubscriptionState = {
    Suspended: "suspended",
    Active: "active",
    Expired: "expired",
    Submitted: "submitted",
    Rejected: "rejected",
    Cancelled: "cancelled",
};
exports.TranslateRequiredQueryParametersConduct = {
    /**
     * Translates required query parameters to template ones. Is a default value
     */
    Template: "template",
    /**
     * Leaves required query parameters as they are (no translation done).
     */
    Query: "query",
};
exports.UserState = {
    /**
     * User state is active.
     */
    Active: "active",
    /**
     * User is blocked. Blocked users cannot authenticate at developer portal or call API.
     */
    Blocked: "blocked",
    /**
     * User account is pending. Requires identity confirmation before it can be made active.
     */
    Pending: "pending",
    /**
     * User account is closed. All identities and related entities are removed.
     */
    Deleted: "deleted",
};
exports.Verbosity = {
    /**
     * All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
     */
    Verbose: "verbose",
    /**
     * Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
     */
    Information: "information",
    /**
     * Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
     */
    Error: "error",
};
exports.VersioningScheme = {
    /**
     * The API Version is passed in a path segment.
     */
    Segment: "Segment",
    /**
     * The API Version is passed in a query parameter.
     */
    Query: "Query",
    /**
     * The API Version is passed in a HTTP header.
     */
    Header: "Header",
};
exports.VirtualNetworkType = {
    /**
     * The service is not part of any Virtual Network.
     */
    None: "None",
    /**
     * The service is part of Virtual Network and it is accessible from Internet.
     */
    External: "External",
    /**
     * The service is part of Virtual Network and it is only accessible from within the virtual network.
     */
    Internal: "Internal",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9hcGltYW5hZ2VtZW50L3YyMDIzMDUwMXByZXZpZXcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNFQUFzRTtBQUN0RSxpRkFBaUY7OztBQUdwRSxRQUFBLFNBQVMsR0FBRztJQUNyQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0NBQ2hCLENBQUM7QUFPRSxRQUFBLE9BQU8sR0FBRztJQUNuQixJQUFJLEVBQUUsTUFBTTtJQUNaLElBQUksRUFBRSxNQUFNO0lBQ1osU0FBUyxFQUFFLFdBQVc7SUFDdEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsS0FBSyxFQUFFLE9BQU87SUFDZCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLGdCQUFnQixHQUFHO0lBQzVCLGNBQWMsRUFBRSxnQkFBZ0I7SUFDaEMsWUFBWSxFQUFFLGNBQWM7SUFDNUIsMkJBQTJCLEVBQUUsOEJBQThCO0lBQzNELElBQUksRUFBRSxNQUFNO0NBQ04sQ0FBQztBQU9FLFFBQUEsT0FBTyxHQUFHO0lBQ25COztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxlQUFlLEVBQUUsaUJBQWlCO0NBQzVCLENBQUM7QUFPRSxRQUFBLG1CQUFtQixHQUFHO0lBQy9CLElBQUksRUFBRSxNQUFNO0lBQ1osT0FBTyxFQUFFLFNBQVM7SUFDbEIsS0FBSyxFQUFFLE9BQU87SUFDZCxHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxNQUFNO0lBQ1osR0FBRyxFQUFFLEtBQUs7SUFDVixLQUFLLEVBQUUsT0FBTztJQUNkLE1BQU0sRUFBRSxRQUFRO0NBQ1YsQ0FBQztBQUlFLFFBQUEsaUJBQWlCLEdBQUc7SUFDN0I7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtDQUNWLENBQUM7QUFPRSxRQUFBLGVBQWUsR0FBRztJQUMzQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLFdBQVcsR0FBRztJQUN2Qjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07Q0FDTixDQUFDO0FBT0UsUUFBQSx3QkFBd0IsR0FBRztJQUNwQyxtQkFBbUIsRUFBRSxxQkFBcUI7SUFDMUMsS0FBSyxFQUFFLE9BQU87Q0FDUixDQUFDO0FBSUUsUUFBQSx5QkFBeUIsR0FBRztJQUNyQzs7T0FFRztJQUNILG1CQUFtQixFQUFFLHFCQUFxQjtJQUMxQzs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0NBQ1IsQ0FBQztBQU9FLFFBQUEsaUJBQWlCLEdBQUc7SUFDN0IsT0FBTyxFQUFFLFNBQVM7SUFDbEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsT0FBTyxFQUFFLFNBQVM7Q0FDWixDQUFDO0FBT0UsUUFBQSxpQkFBaUIsR0FBRztJQUM3QixTQUFTLEVBQUUsV0FBVztJQUN0QixNQUFNLEVBQUUsUUFBUTtJQUNoQixVQUFVLEVBQUUsWUFBWTtDQUNsQixDQUFDO0FBT0UsUUFBQSwwQkFBMEIsR0FBRztJQUN0Qzs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFJRSxRQUFBLFlBQVksR0FBRztJQUN4Qjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7Q0FDVixDQUFDO0FBT0UsUUFBQSxhQUFhLEdBQUc7SUFDekI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILGNBQWMsRUFBRSxnQkFBZ0I7SUFDaEM7O09BRUc7SUFDSCxZQUFZLEVBQUUsY0FBYztJQUM1Qjs7T0FFRztJQUNILGlCQUFpQixFQUFFLG1CQUFtQjtJQUN0Qzs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsWUFBWSxFQUFFLGNBQWM7SUFDNUI7O09BRUc7SUFDSCxZQUFZLEVBQUUsY0FBYztJQUM1Qjs7T0FFRztJQUNILGlCQUFpQixFQUFFLG1CQUFtQjtJQUN0Qzs7T0FFRztJQUNILFlBQVksRUFBRSxjQUFjO0lBQzVCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILFVBQVUsRUFBRSxZQUFZO0lBQ3hCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0NBQ2hCLENBQUM7QUFPRSxRQUFBLGVBQWUsR0FBRztJQUMzQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLHFCQUFxQixHQUFHO0lBQ2pDOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtDQUNkLENBQUM7QUFPRSxRQUFBLDBDQUEwQyxHQUFHO0lBQ3REOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7Q0FDWixDQUFDO0FBT0UsUUFBQSxTQUFTLEdBQUc7SUFDckI7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxtQkFBbUI7SUFDdEM7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILHFCQUFxQixFQUFFLHVCQUF1QjtJQUM5Qzs7T0FFRztJQUNILGlCQUFpQixFQUFFLG1CQUFtQjtDQUNoQyxDQUFDO0FBSUUsUUFBQSxTQUFTLEdBQUc7SUFDckIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBT0UsUUFBQSxZQUFZLEdBQUc7SUFDeEIsS0FBSyxFQUFFLE9BQU87SUFDZCxNQUFNLEVBQUUsUUFBUTtJQUNoQixVQUFVLEVBQUUsWUFBWTtJQUN4QixHQUFHLEVBQUUsS0FBSztJQUNWLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsZ0JBQWdCLEVBQUUsa0JBQWtCO0NBQzlCLENBQUM7QUFPRSxRQUFBLHVCQUF1QixHQUFHO0lBQ25DOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7Q0FDSixDQUFDO0FBT0UsUUFBQSxvQkFBb0IsR0FBRztJQUNoQzs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0NBQ1YsQ0FBQztBQU9FLFFBQUEsT0FBTyxHQUFHO0lBQ25CLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFNBQVMsRUFBRSxXQUFXO0NBQ2hCLENBQUM7QUFPRSxRQUFBLGNBQWMsR0FBRztJQUMxQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBT0UsUUFBQSxrQkFBa0IsR0FBRztJQUM5Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBT0UsUUFBQSxVQUFVLEdBQUc7SUFDdEI7O09BRUc7SUFDSCxhQUFhLEVBQUUsZUFBZTtJQUM5Qjs7T0FFRztJQUNILG1CQUFtQixFQUFFLHFCQUFxQjtJQUMxQzs7T0FFRztJQUNILFlBQVksRUFBRSxjQUFjO0NBQ3RCLENBQUM7QUFPRSxRQUFBLGVBQWUsR0FBRztJQUMzQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBT0UsUUFBQSxlQUFlLEdBQUc7SUFDM0I7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxtQkFBbUI7SUFDdEM7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxtQkFBbUI7Q0FDaEMsQ0FBQztBQU9FLFFBQUEsbUJBQW1CLEdBQUc7SUFDL0I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7Q0FDSixDQUFDO0FBT0UsUUFBQSxtQkFBbUIsR0FBRztJQUMvQjs7T0FFRztJQUNILEdBQUcsRUFBRSxLQUFLO0lBQ1Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7Q0FDcEIsQ0FBQztBQU9FLFFBQUEsMkJBQTJCLEdBQUc7SUFDdkM7O09BRUc7SUFDSCxHQUFHLEVBQUUsS0FBSztJQUNWOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7Q0FDVixDQUFDO0FBT0UsUUFBQSw0QkFBNEIsR0FBRztJQUN4Qzs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztDQUNSLENBQUM7QUFPRSxRQUFBLHNDQUFzQyxHQUFHO0lBQ2xELE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFFBQVEsRUFBRSxVQUFVO0NBQ2QsQ0FBQztBQU9FLFFBQUEsWUFBWSxHQUFHO0lBQ3hCLFlBQVksRUFBRSxjQUFjO0lBQzVCLFNBQVMsRUFBRSxXQUFXO0NBQ2hCLENBQUM7QUFPRSxRQUFBLFFBQVEsR0FBRztJQUNwQixJQUFJLEVBQUUsTUFBTTtJQUNaLEtBQUssRUFBRSxPQUFPO0lBQ2QsRUFBRSxFQUFFLElBQUk7SUFDUixHQUFHLEVBQUUsS0FBSztDQUNKLENBQUM7QUFJRSxRQUFBLGlCQUFpQixHQUFHO0lBQzdCLE9BQU8sRUFBRSxTQUFTO0NBQ1osQ0FBQztBQU9FLFFBQUEsbUJBQW1CLEdBQUc7SUFDL0IsT0FBTyxFQUFFLFNBQVM7SUFDbEIsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBT0UsUUFBQSxZQUFZLEdBQUc7SUFDeEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztDQUNSLENBQUM7QUFPRSxRQUFBLFVBQVUsR0FBRztJQUN0Qjs7T0FFRztJQUNILEdBQUcsRUFBRSxLQUFLO0lBQ1Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLE9BQU8sR0FBRztJQUNuQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxXQUFXLEVBQUUsYUFBYTtJQUMxQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtDQUNsQixDQUFDO0FBT0UsUUFBQSxXQUFXLEdBQUc7SUFDdkI7O09BRUc7SUFDSCxVQUFVLEVBQUUsTUFBTTtJQUNsQjs7T0FFRztJQUNILGVBQWUsRUFBRSxNQUFNO0lBQ3ZCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFZRSxRQUFBLEtBQUssR0FBRztJQUNqQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtDQUNWLENBQUM7QUFPRSxRQUFBLGlCQUFpQixHQUFHO0lBQzdCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFNBQVMsRUFBRSxXQUFXO0NBQ2hCLENBQUM7QUFPRSxRQUFBLHVDQUF1QyxHQUFHO0lBQ25EOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztDQUNSLENBQUM7QUFPRSxRQUFBLFNBQVMsR0FBRztJQUNyQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0NBQ1osQ0FBQztBQU9FLFFBQUEsU0FBUyxHQUFHO0lBQ3JCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxXQUFXLEVBQUUsYUFBYTtJQUMxQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0NBQ1IsQ0FBQztBQU9FLFFBQUEsZ0JBQWdCLEdBQUc7SUFDNUI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtDQUNWLENBQUM7QUFPRSxRQUFBLGtCQUFrQixHQUFHO0lBQzlCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDIn0=