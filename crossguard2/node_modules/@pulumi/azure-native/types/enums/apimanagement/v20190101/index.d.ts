export declare const AlwaysLog: {
    /**
     * Always log all erroneous request regardless of sampling settings.
     */
    readonly AllErrors: "allErrors";
};
/**
 * Specifies for what type of messages sampling settings should not apply.
 */
export type AlwaysLog = (typeof AlwaysLog)[keyof typeof AlwaysLog];
export declare const HttpCorrelationProtocol: {
    /**
     * Do not read and inject correlation headers.
     */
    readonly None: "None";
    /**
     * Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
     */
    readonly Legacy: "Legacy";
    /**
     * Inject Trace Context headers. See https://w3c.github.io/trace-context.
     */
    readonly W3C: "W3C";
};
/**
 * Sets correlation protocol to use for Application Insights diagnostics.
 */
export type HttpCorrelationProtocol = (typeof HttpCorrelationProtocol)[keyof typeof HttpCorrelationProtocol];
export declare const IdentityProviderType: {
    /**
     * Facebook as Identity provider.
     */
    readonly Facebook: "facebook";
    /**
     * Google as Identity provider.
     */
    readonly Google: "google";
    /**
     * Microsoft Live as Identity provider.
     */
    readonly Microsoft: "microsoft";
    /**
     * Twitter as Identity provider.
     */
    readonly Twitter: "twitter";
    /**
     * Azure Active Directory as Identity provider.
     */
    readonly Aad: "aad";
    /**
     * Azure Active Directory B2C as Identity provider.
     */
    readonly AadB2C: "aadB2C";
};
/**
 * Identity Provider Type identifier.
 */
export type IdentityProviderType = (typeof IdentityProviderType)[keyof typeof IdentityProviderType];
export declare const SamplingType: {
    /**
     * Fixed-rate sampling.
     */
    readonly Fixed: "fixed";
};
/**
 * Sampling type.
 */
export type SamplingType = (typeof SamplingType)[keyof typeof SamplingType];
export declare const SubscriptionState: {
    readonly Suspended: "suspended";
    readonly Active: "active";
    readonly Expired: "expired";
    readonly Submitted: "submitted";
    readonly Rejected: "rejected";
    readonly Cancelled: "cancelled";
};
/**
 * Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
 */
export type SubscriptionState = (typeof SubscriptionState)[keyof typeof SubscriptionState];
export declare const Verbosity: {
    /**
     * All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
     */
    readonly Verbose: "verbose";
    /**
     * Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
     */
    readonly Information: "information";
    /**
     * Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
     */
    readonly Error: "error";
};
/**
 * The verbosity level applied to traces emitted by trace policies.
 */
export type Verbosity = (typeof Verbosity)[keyof typeof Verbosity];
