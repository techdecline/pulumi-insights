export declare const ApiType: {
    readonly Http: "http";
    readonly Soap: "soap";
};
/**
 * Type of API.
 */
export type ApiType = (typeof ApiType)[keyof typeof ApiType];
export declare const ApimIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type. Currently the only supported type is 'SystemAssigned'.
 */
export type ApimIdentityType = (typeof ApimIdentityType)[keyof typeof ApimIdentityType];
export declare const Confirmation: {
    /**
     * Send an e-mail to the user confirming they have successfully signed up.
     */
    readonly Signup: "signup";
    /**
     * Send an e-mail inviting the user to sign-up and complete registration.
     */
    readonly Invite: "invite";
};
/**
 * Determines the type of confirmation e-mail that will be sent to the newly created user.
 */
export type Confirmation = (typeof Confirmation)[keyof typeof Confirmation];
export declare const ContentFormat: {
    /**
     * The contents are inline and Content type is a WADL document.
     */
    readonly Wadl_xml: "wadl-xml";
    /**
     * The WADL document is hosted on a publicly accessible internet address.
     */
    readonly Wadl_link_json: "wadl-link-json";
    /**
     * The contents are inline and Content Type is a OpenApi 2.0 Document.
     */
    readonly Swagger_json: "swagger-json";
    /**
     * The Open Api 2.0 document is hosted on a publicly accessible internet address.
     */
    readonly Swagger_link_json: "swagger-link-json";
    /**
     * The contents are inline and the document is a WSDL/Soap document.
     */
    readonly Wsdl: "wsdl";
    /**
     * The WSDL document is hosted on a publicly accessible internet address.
     */
    readonly Wsdl_link: "wsdl-link";
};
/**
 * Format of the Content in which the API is getting imported.
 */
export type ContentFormat = (typeof ContentFormat)[keyof typeof ContentFormat];
export declare const HostnameType: {
    readonly Proxy: "Proxy";
    readonly Portal: "Portal";
    readonly Management: "Management";
    readonly Scm: "Scm";
};
/**
 * Hostname type.
 */
export type HostnameType = (typeof HostnameType)[keyof typeof HostnameType];
export declare const KeyType: {
    readonly Primary: "primary";
    readonly Secondary: "secondary";
};
/**
 * The Key to be used to generate token for user.
 */
export type KeyType = (typeof KeyType)[keyof typeof KeyType];
export declare const LoggerType: {
    /**
     * Azure Event Hub as log destination.
     */
    readonly AzureEventHub: "azureEventHub";
    /**
     * Azure Application Insights as log destination.
     */
    readonly ApplicationInsights: "applicationInsights";
};
/**
 * Logger type.
 */
export type LoggerType = (typeof LoggerType)[keyof typeof LoggerType];
export declare const Protocol: {
    readonly Http: "http";
    readonly Https: "https";
};
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const SamplingType: {
    /**
     * Fixed-rate sampling.
     */
    readonly Fixed: "fixed";
    /**
     * Sampling with a dynamically adjustable rate.
     */
    readonly Adaptive: "adaptive";
};
/**
 * Sampling type.
 */
export type SamplingType = (typeof SamplingType)[keyof typeof SamplingType];
export declare const SkuType: {
    /**
     * Developer SKU of Api Management.
     */
    readonly Developer: "Developer";
    /**
     * Standard SKU of Api Management.
     */
    readonly Standard: "Standard";
    /**
     * Premium SKU of Api Management.
     */
    readonly Premium: "Premium";
    /**
     * Basic SKU of Api Management.
     */
    readonly Basic: "Basic";
};
/**
 * Name of the Sku.
 */
export type SkuType = (typeof SkuType)[keyof typeof SkuType];
export declare const UserState: {
    /**
     * User state is active.
     */
    readonly Active: "active";
    /**
     * User is blocked. Blocked users cannot authenticate at developer portal or call API.
     */
    readonly Blocked: "blocked";
    /**
     * User account is pending. Requires identity confirmation before it can be made active.
     */
    readonly Pending: "pending";
    /**
     * User account is closed. All identities and related entities are removed.
     */
    readonly Deleted: "deleted";
};
/**
 * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
 */
export type UserState = (typeof UserState)[keyof typeof UserState];
export declare const VersioningScheme: {
    /**
     * The API Version is passed in a path segment.
     */
    readonly Segment: "Segment";
    /**
     * The API Version is passed in a query parameter.
     */
    readonly Query: "Query";
    /**
     * The API Version is passed in a HTTP header.
     */
    readonly Header: "Header";
};
/**
 * An value that determines where the API Version identifier will be located in a HTTP request.
 */
export type VersioningScheme = (typeof VersioningScheme)[keyof typeof VersioningScheme];
export declare const VirtualNetworkType: {
    /**
     * The service is not part of any Virtual Network.
     */
    readonly None: "None";
    /**
     * The service is part of Virtual Network and it is accessible from Internet.
     */
    readonly External: "External";
    /**
     * The service is part of Virtual Network and it is only accessible from within the virtual network.
     */
    readonly Internal: "Internal";
};
/**
 * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
 */
export type VirtualNetworkType = (typeof VirtualNetworkType)[keyof typeof VirtualNetworkType];
