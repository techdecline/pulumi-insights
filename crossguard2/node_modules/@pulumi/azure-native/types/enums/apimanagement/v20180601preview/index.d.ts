export declare const ApiType: {
    readonly Http: "http";
    readonly Soap: "soap";
};
/**
 * Type of API.
 */
export type ApiType = (typeof ApiType)[keyof typeof ApiType];
export declare const BearerTokenSendingMethods: {
    /**
     * Access token will be transmitted in the Authorization header using Bearer schema
     */
    readonly AuthorizationHeader: "authorizationHeader";
    /**
     * Access token will be transmitted as query parameters.
     */
    readonly Query: "query";
};
/**
 * Form of an authorization grant, which the client uses to request the access token.
 */
export type BearerTokenSendingMethods = (typeof BearerTokenSendingMethods)[keyof typeof BearerTokenSendingMethods];
export declare const ContentFormat: {
    /**
     * The contents are inline and Content type is a WADL document.
     */
    readonly Wadl_xml: "wadl-xml";
    /**
     * The WADL document is hosted on a publicly accessible internet address.
     */
    readonly Wadl_link_json: "wadl-link-json";
    /**
     * The contents are inline and Content Type is a OpenApi 2.0 Document.
     */
    readonly Swagger_json: "swagger-json";
    /**
     * The Open Api 2.0 document is hosted on a publicly accessible internet address.
     */
    readonly Swagger_link_json: "swagger-link-json";
    /**
     * The contents are inline and the document is a WSDL/Soap document.
     */
    readonly Wsdl: "wsdl";
    /**
     * The WSDL document is hosted on a publicly accessible internet address.
     */
    readonly Wsdl_link: "wsdl-link";
    /**
     * The contents are inline and Content Type is a OpenApi 3.0 Document in YAML format.
     */
    readonly Openapi: "openapi";
    /**
     * The contents are inline and Content Type is a OpenApi 3.0 Document in JSON format.
     */
    readonly Openapi_json: "openapi+json";
    /**
     * The Open Api 3.0 document is hosted on a publicly accessible internet address.
     */
    readonly Openapi_link: "openapi-link";
};
/**
 * Format of the Content in which the API is getting imported.
 */
export type ContentFormat = (typeof ContentFormat)[keyof typeof ContentFormat];
export declare const PolicyContentFormat: {
    /**
     * The contents are inline and Content type is an XML document.
     */
    readonly Xml: "xml";
    /**
     * The policy XML document is hosted on a http endpoint accessible from the API Management service.
     */
    readonly Xml_link: "xml-link";
    /**
     * The contents are inline and Content type is a non XML encoded policy document.
     */
    readonly Rawxml: "rawxml";
    /**
     * The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service.
     */
    readonly Rawxml_link: "rawxml-link";
};
/**
 * Format of the policyContent.
 */
export type PolicyContentFormat = (typeof PolicyContentFormat)[keyof typeof PolicyContentFormat];
export declare const Protocol: {
    readonly Http: "http";
    readonly Https: "https";
};
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const SoapApiType: {
    /**
     * Imports a SOAP API having a RESTful front end.
     */
    readonly SoapToRest: "http";
    /**
     * Imports the Soap API having a SOAP front end.
     */
    readonly SoapPassThrough: "soap";
};
/**
 * Type of Api to create.
 *  * `http` creates a SOAP to REST API
 *  * `soap` creates a SOAP pass-through API .
 */
export type SoapApiType = (typeof SoapApiType)[keyof typeof SoapApiType];
