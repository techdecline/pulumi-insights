export declare const AccountType: {
    readonly GeneralPurposeStorage: "GeneralPurposeStorage";
    readonly BlobStorage: "BlobStorage";
};
/**
 * Type of storage accessed on the storage account.
 */
export type AccountType = (typeof AccountType)[keyof typeof AccountType];
export declare const AddonType: {
    readonly IotEdge: "IotEdge";
    readonly ArcForKubernetes: "ArcForKubernetes";
};
/**
 * Addon type.
 */
export type AddonType = (typeof AddonType)[keyof typeof AddonType];
export declare const AzureContainerDataFormat: {
    readonly BlockBlob: "BlockBlob";
    readonly PageBlob: "PageBlob";
    readonly AzureFile: "AzureFile";
};
/**
 * Storage format used for the file represented by the share.
 */
export type AzureContainerDataFormat = (typeof AzureContainerDataFormat)[keyof typeof AzureContainerDataFormat];
export declare const ClientPermissionType: {
    readonly NoAccess: "NoAccess";
    readonly ReadOnly: "ReadOnly";
    readonly ReadWrite: "ReadWrite";
};
/**
 * Type of access to be allowed for the client.
 */
export type ClientPermissionType = (typeof ClientPermissionType)[keyof typeof ClientPermissionType];
export declare const DataPolicy: {
    readonly Cloud: "Cloud";
    readonly Local: "Local";
};
/**
 * Data policy of the storage Account.
 */
export type DataPolicy = (typeof DataPolicy)[keyof typeof DataPolicy];
export declare const DataResidencyType: {
    readonly GeoZoneReplication: "GeoZoneReplication";
    readonly ZoneReplication: "ZoneReplication";
};
/**
 * DataResidencyType enum
 */
export type DataResidencyType = (typeof DataResidencyType)[keyof typeof DataResidencyType];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const EncryptionAlgorithm: {
    readonly None: "None";
    readonly AES256: "AES256";
    readonly RSAES_PKCS1_v_1_5: "RSAES_PKCS1_v_1_5";
};
/**
 * The algorithm used to encrypt "Value".
 */
export type EncryptionAlgorithm = (typeof EncryptionAlgorithm)[keyof typeof EncryptionAlgorithm];
export declare const MonitoringStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Current monitoring status of the share.
 */
export type MonitoringStatus = (typeof MonitoringStatus)[keyof typeof MonitoringStatus];
export declare const MsiIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
};
/**
 * Identity type
 */
export type MsiIdentityType = (typeof MsiIdentityType)[keyof typeof MsiIdentityType];
export declare const SSLStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Signifies whether SSL needs to be enabled or not.
 */
export type SSLStatus = (typeof SSLStatus)[keyof typeof SSLStatus];
export declare const ShareAccessProtocol: {
    readonly SMB: "SMB";
    readonly NFS: "NFS";
};
/**
 * Access protocol to be used by the share.
 */
export type ShareAccessProtocol = (typeof ShareAccessProtocol)[keyof typeof ShareAccessProtocol];
export declare const ShareAccessType: {
    readonly Change: "Change";
    readonly Read: "Read";
    readonly Custom: "Custom";
};
/**
 * Type of access to be allowed for the user.
 */
export type ShareAccessType = (typeof ShareAccessType)[keyof typeof ShareAccessType];
export declare const ShareStatus: {
    readonly Offline: "Offline";
    readonly Unknown: "Unknown";
    readonly OK: "OK";
    readonly Updating: "Updating";
    readonly NeedsAttention: "NeedsAttention";
};
/**
 * Current status of the share.
 */
export type ShareStatus = (typeof ShareStatus)[keyof typeof ShareStatus];
export declare const ShipmentType: {
    readonly NotApplicable: "NotApplicable";
    readonly ShippedToCustomer: "ShippedToCustomer";
    readonly SelfPickup: "SelfPickup";
};
/**
 * ShipmentType of the order
 */
export type ShipmentType = (typeof ShipmentType)[keyof typeof ShipmentType];
export declare const SkuName: {
    readonly Gateway: "Gateway";
    readonly Edge: "Edge";
    readonly TEA_1Node: "TEA_1Node";
    readonly TEA_1Node_UPS: "TEA_1Node_UPS";
    readonly TEA_1Node_Heater: "TEA_1Node_Heater";
    readonly TEA_1Node_UPS_Heater: "TEA_1Node_UPS_Heater";
    readonly TEA_4Node_Heater: "TEA_4Node_Heater";
    readonly TEA_4Node_UPS_Heater: "TEA_4Node_UPS_Heater";
    readonly TMA: "TMA";
    readonly TDC: "TDC";
    readonly TCA_Small: "TCA_Small";
    readonly GPU: "GPU";
    readonly TCA_Large: "TCA_Large";
    readonly EdgeP_Base: "EdgeP_Base";
    readonly EdgeP_High: "EdgeP_High";
    readonly EdgePR_Base: "EdgePR_Base";
    readonly EdgePR_Base_UPS: "EdgePR_Base_UPS";
    readonly EP2_64_1VPU_W: "EP2_64_1VPU_W";
    readonly EP2_128_1T4_Mx1_W: "EP2_128_1T4_Mx1_W";
    readonly EP2_256_2T4_W: "EP2_256_2T4_W";
    readonly EdgeMR_Mini: "EdgeMR_Mini";
    readonly RCA_Small: "RCA_Small";
    readonly RCA_Large: "RCA_Large";
    readonly RDC: "RDC";
    readonly Management: "Management";
    readonly EP2_64_Mx1_W: "EP2_64_Mx1_W";
    readonly EP2_128_GPU1_Mx1_W: "EP2_128_GPU1_Mx1_W";
    readonly EP2_256_GPU2_Mx1: "EP2_256_GPU2_Mx1";
    readonly EdgeMR_TCP: "EdgeMR_TCP";
};
/**
 * SKU name.
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const SkuTier: {
    readonly Standard: "Standard";
};
/**
 * The SKU tier. This is based on the SKU name.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const StorageAccountStatus: {
    readonly OK: "OK";
    readonly Offline: "Offline";
    readonly Unknown: "Unknown";
    readonly Updating: "Updating";
    readonly NeedsAttention: "NeedsAttention";
};
/**
 * Current status of the storage account
 */
export type StorageAccountStatus = (typeof StorageAccountStatus)[keyof typeof StorageAccountStatus];
export declare const UserType: {
    readonly Share: "Share";
    readonly LocalManagement: "LocalManagement";
    readonly ARM: "ARM";
};
/**
 * Type of the user.
 */
export type UserType = (typeof UserType)[keyof typeof UserType];
