export declare const AadAuthFailureMode: {
    /**
     * Indicates that requests that failed authentication should be presented with an HTTP status code of 403 (Forbidden).
     */
    readonly Http403: "http403";
    /**
     * Indicates that requests that failed authentication should be presented with an HTTP status code of 401 (Unauthorized) and present a Bearer Challenge.
     */
    readonly Http401WithBearerChallenge: "http401WithBearerChallenge";
};
/**
 * Describes what response the data plane API of a Search service would send for requests that failed authentication.
 */
export type AadAuthFailureMode = (typeof AadAuthFailureMode)[keyof typeof AadAuthFailureMode];
export declare const HostingMode: {
    /**
     * The limit on number of indexes is determined by the default limits for the SKU.
     */
    readonly Default: "default";
    /**
     * Only application for standard3 SKU, where the search service can have up to 1000 indexes.
     */
    readonly HighDensity: "highDensity";
};
/**
 * Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
 */
export type HostingMode = (typeof HostingMode)[keyof typeof HostingMode];
export declare const IdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const PrivateLinkServiceConnectionProvisioningState: {
    /**
     * The private link service connection is in the process of being created along with other resources for it to be fully functional.
     */
    readonly Updating: "Updating";
    /**
     * The private link service connection is in the process of being deleted.
     */
    readonly Deleting: "Deleting";
    /**
     * The private link service connection has failed to be provisioned or deleted.
     */
    readonly Failed: "Failed";
    /**
     * The private link service connection has finished provisioning and is ready for approval.
     */
    readonly Succeeded: "Succeeded";
    /**
     * Provisioning request for the private link service connection resource has been accepted but the process of creation has not commenced yet.
     */
    readonly Incomplete: "Incomplete";
    /**
     * Provisioning request for the private link service connection resource has been canceled
     */
    readonly Canceled: "Canceled";
};
/**
 * The provisioning state of the private link service connection. Can be Updating, Deleting, Failed, Succeeded, or Incomplete
 */
export type PrivateLinkServiceConnectionProvisioningState = (typeof PrivateLinkServiceConnectionProvisioningState)[keyof typeof PrivateLinkServiceConnectionProvisioningState];
export declare const PrivateLinkServiceConnectionStatus: {
    /**
     * The private endpoint connection has been created and is pending approval.
     */
    readonly Pending: "Pending";
    /**
     * The private endpoint connection is approved and is ready for use.
     */
    readonly Approved: "Approved";
    /**
     * The private endpoint connection has been rejected and cannot be used.
     */
    readonly Rejected: "Rejected";
    /**
     * The private endpoint connection has been removed from the service.
     */
    readonly Disconnected: "Disconnected";
};
/**
 * Status of the the private link service connection. Can be Pending, Approved, Rejected, or Disconnected.
 */
export type PrivateLinkServiceConnectionStatus = (typeof PrivateLinkServiceConnectionStatus)[keyof typeof PrivateLinkServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const SearchEncryptionWithCmk: {
    /**
     * No enforcement will be made and the search service can have non customer encrypted resources.
     */
    readonly Disabled: "Disabled";
    /**
     * Search service will be marked as non-compliant if there are one or more non customer encrypted resources.
     */
    readonly Enabled: "Enabled";
    /**
     * Enforcement policy is not explicitly specified, with the behavior being the same as if it were set to 'Disabled'.
     */
    readonly Unspecified: "Unspecified";
};
/**
 * Describes how a search service should enforce having one or more non customer encrypted resources.
 */
export type SearchEncryptionWithCmk = (typeof SearchEncryptionWithCmk)[keyof typeof SearchEncryptionWithCmk];
export declare const SharedPrivateLinkResourceProvisioningState: {
    readonly Updating: "Updating";
    readonly Deleting: "Deleting";
    readonly Failed: "Failed";
    readonly Succeeded: "Succeeded";
    readonly Incomplete: "Incomplete";
};
/**
 * The provisioning state of the shared private link resource. Can be Updating, Deleting, Failed, Succeeded or Incomplete.
 */
export type SharedPrivateLinkResourceProvisioningState = (typeof SharedPrivateLinkResourceProvisioningState)[keyof typeof SharedPrivateLinkResourceProvisioningState];
export declare const SharedPrivateLinkResourceStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * Status of the shared private link resource. Can be Pending, Approved, Rejected or Disconnected.
 */
export type SharedPrivateLinkResourceStatus = (typeof SharedPrivateLinkResourceStatus)[keyof typeof SharedPrivateLinkResourceStatus];
export declare const SkuName: {
    /**
     * Free tier, with no SLA guarantees and a subset of features offered to paid tiers.
     */
    readonly Free: "free";
    /**
     * Paid tier dedicated service with up to 3 replicas.
     */
    readonly Basic: "basic";
    /**
     * Paid tier dedicated service with up to 12 partitions and 12 replicas.
     */
    readonly Standard: "standard";
    /**
     * Similar to 'standard', but with more capacity per search unit.
     */
    readonly Standard2: "standard2";
    /**
     *  The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity').
     */
    readonly Standard3: "standard3";
    /**
     * Paid tier dedicated service that supports 1TB per partition, up to 12 partitions.
     */
    readonly StorageOptimizedL1: "storage_optimized_l1";
    /**
     * Paid tier dedicated service that supports 2TB per partition, up to 12 partitions.
     */
    readonly StorageOptimizedL2: "storage_optimized_l2";
};
/**
 * The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
