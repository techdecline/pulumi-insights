export declare const AssignmentScopeValidation: {
    /**
     * This option will validate the exemption is at or under the assignment scope.
     */
    readonly Default: "Default";
    /**
     * This option will bypass the validation the exemption scope is at or under the policy assignment scope.
     */
    readonly DoNotValidate: "DoNotValidate";
};
/**
 * The option whether validate the exemption is at or under the assignment scope.
 */
export type AssignmentScopeValidation = (typeof AssignmentScopeValidation)[keyof typeof AssignmentScopeValidation];
export declare const ExemptionCategory: {
    /**
     * This category of exemptions usually means the scope is not applicable for the policy.
     */
    readonly Waiver: "Waiver";
    /**
     * This category of exemptions usually means the mitigation actions have been applied to the scope.
     */
    readonly Mitigated: "Mitigated";
};
/**
 * The policy exemption category. Possible values are Waiver and Mitigated.
 */
export type ExemptionCategory = (typeof ExemptionCategory)[keyof typeof ExemptionCategory];
export declare const SelectorKind: {
    /**
     * The selector kind to filter policies by the resource location.
     */
    readonly ResourceLocation: "resourceLocation";
    /**
     * The selector kind to filter policies by the resource type.
     */
    readonly ResourceType: "resourceType";
    /**
     * The selector kind to filter policies by the resource without location.
     */
    readonly ResourceWithoutLocation: "resourceWithoutLocation";
    /**
     * The selector kind to filter policies by the policy definition reference ID.
     */
    readonly PolicyDefinitionReferenceId: "policyDefinitionReferenceId";
};
/**
 * The selector kind.
 */
export type SelectorKind = (typeof SelectorKind)[keyof typeof SelectorKind];
