export declare const CacheIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the cache
 */
export type CacheIdentityType = (typeof CacheIdentityType)[keyof typeof CacheIdentityType];
export declare const NfsAccessRuleAccess: {
    readonly No: "no";
    readonly Ro: "ro";
    readonly Rw: "rw";
};
/**
 * Access allowed by this rule.
 */
export type NfsAccessRuleAccess = (typeof NfsAccessRuleAccess)[keyof typeof NfsAccessRuleAccess];
export declare const NfsAccessRuleScope: {
    readonly Default: "default";
    readonly Network: "network";
    readonly Host: "host";
};
/**
 * Scope for this rule. The scope and filter determine which clients match the rule.
 */
export type NfsAccessRuleScope = (typeof NfsAccessRuleScope)[keyof typeof NfsAccessRuleScope];
export declare const ProvisioningStateType: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Cancelled: "Cancelled";
    readonly Creating: "Creating";
    readonly Deleting: "Deleting";
    readonly Updating: "Updating";
};
/**
 * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
 */
export type ProvisioningStateType = (typeof ProvisioningStateType)[keyof typeof ProvisioningStateType];
export declare const StorageTargetType: {
    readonly Nfs3: "nfs3";
    readonly Clfs: "clfs";
    readonly Unknown: "unknown";
    readonly BlobNfs: "blobNfs";
};
/**
 * Type of the Storage Target.
 */
export type StorageTargetType = (typeof StorageTargetType)[keyof typeof StorageTargetType];
export declare const UsernameSource: {
    readonly AD: "AD";
    readonly LDAP: "LDAP";
    readonly File: "File";
    readonly None: "None";
};
/**
 * This setting determines how the cache gets username and group names for clients.
 */
export type UsernameSource = (typeof UsernameSource)[keyof typeof UsernameSource];
