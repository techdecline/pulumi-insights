export declare const AccessMode: {
    /**
     * Read Write Once (RWO) access mode
     */
    readonly ReadWriteOnce: "ReadWriteOnce";
    /**
     * Read Write Many (RWX) access mode
     */
    readonly ReadWriteMany: "ReadWriteMany";
};
/**
 * Storage Class Access Mode
 */
export type AccessMode = (typeof AccessMode)[keyof typeof AccessMode];
export declare const AdvertiseMode: {
    /**
     * ARP advertise mode
     */
    readonly ARP: "ARP";
    /**
     * BGP advertise mode
     */
    readonly BGP: "BGP";
    /**
     * both ARP and BGP advertise mode
     */
    readonly Both: "Both";
};
/**
 * Advertise Mode
 */
export type AdvertiseMode = (typeof AdvertiseMode)[keyof typeof AdvertiseMode];
export declare const DataResilienceTier: {
    /**
     * Not data resilient
     */
    readonly NotDataResilient: "NotDataResilient";
    /**
     * Data resilient
     */
    readonly DataResilient: "DataResilient";
};
/**
 * Allow single data node failure
 */
export type DataResilienceTier = (typeof DataResilienceTier)[keyof typeof DataResilienceTier];
export declare const FailoverTier: {
    /**
     * Not available Failover Tier
     */
    readonly NotAvailable: "NotAvailable";
    /**
     * Slow Failover Tier
     */
    readonly Slow: "Slow";
    /**
     * Fast Failover Tier
     */
    readonly Fast: "Fast";
    /**
     * Super Failover Tier
     */
    readonly Super: "Super";
};
/**
 * Failover speed: NA, Slow, Fast
 */
export type FailoverTier = (typeof FailoverTier)[keyof typeof FailoverTier];
export declare const NfsDirectoryActionOnVolumeDeletion: {
    /**
     * When the volume is deleted, delete the directory
     */
    readonly Delete: "Delete";
    /**
     * When the volume is deleted, retain the directory
     */
    readonly Retain: "Retain";
};
/**
 * The action to take when a NFS volume is deleted. Default is Delete
 */
export type NfsDirectoryActionOnVolumeDeletion = (typeof NfsDirectoryActionOnVolumeDeletion)[keyof typeof NfsDirectoryActionOnVolumeDeletion];
export declare const PerformanceTier: {
    /**
     * Undefined Performance Tier
     */
    readonly Undefined: "Undefined";
    /**
     * Basic Performance Tier
     */
    readonly Basic: "Basic";
    /**
     * Standard Performance Tier
     */
    readonly Standard: "Standard";
    /**
     * Premium Performance Tier
     */
    readonly Premium: "Premium";
    /**
     * Ultra Performance Tier
     */
    readonly Ultra: "Ultra";
};
/**
 * Performance tier
 */
export type PerformanceTier = (typeof PerformanceTier)[keyof typeof PerformanceTier];
export declare const SCType: {
    /**
     * Native storage class
     */
    readonly Native: "Native";
    /**
     * RWX storage class
     */
    readonly RWX: "RWX";
    /**
     * Blob storage class
     */
    readonly Blob: "Blob";
    /**
     * NFS storage class
     */
    readonly NFS: "NFS";
    /**
     * SMB storage class
     */
    readonly SMB: "SMB";
};
/**
 * Type of the storage class.
 */
export type SCType = (typeof SCType)[keyof typeof SCType];
export declare const VolumeBindingMode: {
    /**
     * Immediate binding mode
     */
    readonly Immediate: "Immediate";
    /**
     * Wait for first consumer binding mode
     */
    readonly WaitForFirstConsumer: "WaitForFirstConsumer";
};
/**
 * Binding mode of volumes: Immediate, WaitForFirstConsumer
 */
export type VolumeBindingMode = (typeof VolumeBindingMode)[keyof typeof VolumeBindingMode];
export declare const VolumeExpansion: {
    /**
     * Allow volume expansion
     */
    readonly Allow: "Allow";
    /**
     * Disallow volume expansion
     */
    readonly Disallow: "Disallow";
};
/**
 * Volume can be expanded or not
 */
export type VolumeExpansion = (typeof VolumeExpansion)[keyof typeof VolumeExpansion];
