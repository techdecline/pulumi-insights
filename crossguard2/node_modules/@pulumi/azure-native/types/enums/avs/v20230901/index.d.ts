export declare const AddonType: {
    readonly SRM: "SRM";
    readonly VR: "VR";
    readonly HCX: "HCX";
    readonly Arc: "Arc";
};
/**
 * Addon type
 */
export type AddonType = (typeof AddonType)[keyof typeof AddonType];
export declare const AvailabilityStrategy: {
    /**
     * in single zone
     */
    readonly SingleZone: "SingleZone";
    /**
     * in two zones
     */
    readonly DualZone: "DualZone";
};
/**
 * The availability strategy for the private cloud
 */
export type AvailabilityStrategy = (typeof AvailabilityStrategy)[keyof typeof AvailabilityStrategy];
export declare const DhcpTypeEnum: {
    readonly SERVER: "SERVER";
    readonly RELAY: "RELAY";
};
/**
 * Type of DHCP: SERVER or RELAY.
 */
export type DhcpTypeEnum = (typeof DhcpTypeEnum)[keyof typeof DhcpTypeEnum];
export declare const DnsServiceLogLevelEnum: {
    /**
     * is debug
     */
    readonly DEBUG: "DEBUG";
    /**
     * is info
     */
    readonly INFO: "INFO";
    /**
     * is warning
     */
    readonly WARNING: "WARNING";
    /**
     * is error
     */
    readonly ERROR: "ERROR";
    /**
     * is fatal
     */
    readonly FATAL: "FATAL";
};
/**
 * DNS Service log level.
 */
export type DnsServiceLogLevelEnum = (typeof DnsServiceLogLevelEnum)[keyof typeof DnsServiceLogLevelEnum];
export declare const DnsZoneType: {
    /**
     * Primary DNS zone.
     */
    readonly Public: "Public";
    /**
     * Private DNS zone.
     */
    readonly Private: "Private";
};
/**
 * The type of DNS zone to use.
 */
export type DnsZoneType = (typeof DnsZoneType)[keyof typeof DnsZoneType];
export declare const EncryptionState: {
    /**
     * is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Status of customer managed encryption key
 */
export type EncryptionState = (typeof EncryptionState)[keyof typeof EncryptionState];
export declare const InternetEnum: {
    /**
     * is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Connectivity to internet is enabled or disabled
 */
export type InternetEnum = (typeof InternetEnum)[keyof typeof InternetEnum];
export declare const MountOptionEnum: {
    /**
     * is mount
     */
    readonly MOUNT: "MOUNT";
    /**
     * is attach
     */
    readonly ATTACH: "ATTACH";
};
/**
 * Mode that describes whether the LUN has to be mounted as a datastore or
 * attached as a LUN
 */
export type MountOptionEnum = (typeof MountOptionEnum)[keyof typeof MountOptionEnum];
export declare const PlacementPolicyState: {
    /**
     * is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Whether the placement policy is enabled or disabled
 */
export type PlacementPolicyState = (typeof PlacementPolicyState)[keyof typeof PlacementPolicyState];
export declare const PlacementPolicyType: {
    readonly VmVm: "VmVm";
    readonly VmHost: "VmHost";
};
/**
 * Placement Policy type
 */
export type PlacementPolicyType = (typeof PlacementPolicyType)[keyof typeof PlacementPolicyType];
export declare const PortMirroringDirectionEnum: {
    /**
     * is ingress
     */
    readonly INGRESS: "INGRESS";
    /**
     * is egress
     */
    readonly EGRESS: "EGRESS";
    /**
     * is bidirectional
     */
    readonly BIDIRECTIONAL: "BIDIRECTIONAL";
};
/**
 * Direction of port mirroring profile.
 */
export type PortMirroringDirectionEnum = (typeof PortMirroringDirectionEnum)[keyof typeof PortMirroringDirectionEnum];
export declare const ScriptExecutionParameterType: {
    readonly Value: "Value";
    readonly SecureValue: "SecureValue";
    readonly Credential: "Credential";
};
/**
 * script execution parameter type
 */
export type ScriptExecutionParameterType = (typeof ScriptExecutionParameterType)[keyof typeof ScriptExecutionParameterType];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const SslEnum: {
    /**
     * is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Protect LDAP communication using SSL certificate (LDAPS)
 */
export type SslEnum = (typeof SslEnum)[keyof typeof SslEnum];
export declare const SystemAssignedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * Type of managed service identity (either system assigned, or none).
 */
export type SystemAssignedServiceIdentityType = (typeof SystemAssignedServiceIdentityType)[keyof typeof SystemAssignedServiceIdentityType];
