export declare const EndpointType: {
    readonly NotSpecified: "NotSpecified";
    readonly Canary: "Canary";
    readonly Production: "Production";
    readonly TestInProduction: "TestInProduction";
};
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export declare const ExtensionCategory: {
    readonly NotSpecified: "NotSpecified";
    readonly ResourceCreationValidate: "ResourceCreationValidate";
    readonly ResourceCreationBegin: "ResourceCreationBegin";
    readonly ResourceCreationCompleted: "ResourceCreationCompleted";
    readonly ResourceReadValidate: "ResourceReadValidate";
    readonly ResourceReadBegin: "ResourceReadBegin";
    readonly ResourcePatchValidate: "ResourcePatchValidate";
    readonly ResourcePatchCompleted: "ResourcePatchCompleted";
    readonly ResourceDeletionValidate: "ResourceDeletionValidate";
    readonly ResourceDeletionBegin: "ResourceDeletionBegin";
    readonly ResourceDeletionCompleted: "ResourceDeletionCompleted";
    readonly ResourcePostAction: "ResourcePostAction";
    readonly SubscriptionLifecycleNotification: "SubscriptionLifecycleNotification";
    readonly ResourcePatchBegin: "ResourcePatchBegin";
    readonly ResourceMoveBegin: "ResourceMoveBegin";
    readonly ResourceMoveCompleted: "ResourceMoveCompleted";
};
export type ExtensionCategory = (typeof ExtensionCategory)[keyof typeof ExtensionCategory];
export declare const ExtensionOptionType: {
    readonly NotSpecified: "NotSpecified";
    readonly DoNotMergeExistingReadOnlyAndSecretProperties: "DoNotMergeExistingReadOnlyAndSecretProperties";
    readonly IncludeInternalMetadata: "IncludeInternalMetadata";
};
export type ExtensionOptionType = (typeof ExtensionOptionType)[keyof typeof ExtensionOptionType];
export declare const FeaturesPolicy: {
    readonly Any: "Any";
    readonly All: "All";
};
export type FeaturesPolicy = (typeof FeaturesPolicy)[keyof typeof FeaturesPolicy];
export declare const IdentityManagementTypes: {
    readonly NotSpecified: "NotSpecified";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly Actor: "Actor";
    readonly DelegatedResourceIdentity: "DelegatedResourceIdentity";
};
export type IdentityManagementTypes = (typeof IdentityManagementTypes)[keyof typeof IdentityManagementTypes];
export declare const LoggingDetails: {
    readonly None: "None";
    readonly Body: "Body";
};
export type LoggingDetails = (typeof LoggingDetails)[keyof typeof LoggingDetails];
export declare const LoggingDirections: {
    readonly None: "None";
    readonly Request: "Request";
    readonly Response: "Response";
};
export type LoggingDirections = (typeof LoggingDirections)[keyof typeof LoggingDirections];
export declare const MessageScope: {
    readonly NotSpecified: "NotSpecified";
    readonly RegisteredSubscriptions: "RegisteredSubscriptions";
};
export type MessageScope = (typeof MessageScope)[keyof typeof MessageScope];
export declare const NotificationMode: {
    readonly NotSpecified: "NotSpecified";
    readonly EventHub: "EventHub";
    readonly WebHook: "WebHook";
};
export type NotificationMode = (typeof NotificationMode)[keyof typeof NotificationMode];
export declare const OptInHeaderType: {
    readonly NotSpecified: "NotSpecified";
    readonly SignedUserToken: "SignedUserToken";
    readonly ClientGroupMembership: "ClientGroupMembership";
    readonly SignedAuxiliaryTokens: "SignedAuxiliaryTokens";
    readonly UnboundedClientGroupMembership: "UnboundedClientGroupMembership";
};
export type OptInHeaderType = (typeof OptInHeaderType)[keyof typeof OptInHeaderType];
export declare const Policy: {
    readonly NotSpecified: "NotSpecified";
    readonly SynchronizeBeginExtension: "SynchronizeBeginExtension";
};
export type Policy = (typeof Policy)[keyof typeof Policy];
export declare const PreflightOption: {
    readonly None: "None";
    readonly ContinueDeploymentOnFailure: "ContinueDeploymentOnFailure";
    readonly DefaultValidationOnly: "DefaultValidationOnly";
};
export type PreflightOption = (typeof PreflightOption)[keyof typeof PreflightOption];
export declare const ProvisioningState: {
    readonly NotSpecified: "NotSpecified";
    readonly Accepted: "Accepted";
    readonly Running: "Running";
    readonly Creating: "Creating";
    readonly Created: "Created";
    readonly Deleting: "Deleting";
    readonly Deleted: "Deleted";
    readonly Canceled: "Canceled";
    readonly Failed: "Failed";
    readonly Succeeded: "Succeeded";
    readonly MovingResources: "MovingResources";
    readonly TransientFailure: "TransientFailure";
    readonly RolloutInProgress: "RolloutInProgress";
};
/**
 * The provisioned state of the resource.
 */
export type ProvisioningState = (typeof ProvisioningState)[keyof typeof ProvisioningState];
export declare const Readiness: {
    readonly ClosingDown: "ClosingDown";
    readonly Deprecated: "Deprecated";
    readonly GA: "GA";
    readonly InDevelopment: "InDevelopment";
    readonly InternalOnly: "InternalOnly";
    readonly PrivatePreview: "PrivatePreview";
    readonly PublicPreview: "PublicPreview";
    readonly RemovedFromARM: "RemovedFromARM";
    readonly Retired: "Retired";
};
export type Readiness = (typeof Readiness)[keyof typeof Readiness];
export declare const Regionality: {
    readonly NotSpecified: "NotSpecified";
    readonly Global: "Global";
    readonly Regional: "Regional";
};
export type Regionality = (typeof Regionality)[keyof typeof Regionality];
export declare const ResourceDeletionPolicy: {
    readonly NotSpecified: "NotSpecified";
    readonly CascadeDeleteAll: "CascadeDeleteAll";
    readonly CascadeDeleteProxyOnlyChildren: "CascadeDeleteProxyOnlyChildren";
};
export type ResourceDeletionPolicy = (typeof ResourceDeletionPolicy)[keyof typeof ResourceDeletionPolicy];
export declare const ResourceProviderCapabilitiesEffect: {
    readonly NotSpecified: "NotSpecified";
    readonly Allow: "Allow";
    readonly Disallow: "Disallow";
};
export type ResourceProviderCapabilitiesEffect = (typeof ResourceProviderCapabilitiesEffect)[keyof typeof ResourceProviderCapabilitiesEffect];
export declare const ResourceProviderType: {
    readonly NotSpecified: "NotSpecified";
    readonly Internal: "Internal";
    readonly External: "External";
    readonly Hidden: "Hidden";
    readonly RegistrationFree: "RegistrationFree";
    readonly LegacyRegistrationRequired: "LegacyRegistrationRequired";
    readonly TenantOnly: "TenantOnly";
    readonly AuthorizationFree: "AuthorizationFree";
};
export type ResourceProviderType = (typeof ResourceProviderType)[keyof typeof ResourceProviderType];
export declare const RoutingType: {
    readonly Default: "Default";
    readonly ProxyOnly: "ProxyOnly";
    readonly HostBased: "HostBased";
    readonly Extension: "Extension";
    readonly Tenant: "Tenant";
    readonly Fanout: "Fanout";
    readonly LocationBased: "LocationBased";
    readonly Failover: "Failover";
    readonly CascadeExtension: "CascadeExtension";
};
export type RoutingType = (typeof RoutingType)[keyof typeof RoutingType];
export declare const SkuScaleType: {
    readonly None: "None";
    readonly Manual: "Manual";
    readonly Automatic: "Automatic";
};
export type SkuScaleType = (typeof SkuScaleType)[keyof typeof SkuScaleType];
export declare const SubscriptionNotificationOperation: {
    readonly NotDefined: "NotDefined";
    readonly DeleteAllResources: "DeleteAllResources";
    readonly SoftDeleteAllResources: "SoftDeleteAllResources";
    readonly NoOp: "NoOp";
    readonly BillingCancellation: "BillingCancellation";
    readonly UndoSoftDelete: "UndoSoftDelete";
};
export type SubscriptionNotificationOperation = (typeof SubscriptionNotificationOperation)[keyof typeof SubscriptionNotificationOperation];
export declare const SubscriptionReregistrationResult: {
    readonly NotApplicable: "NotApplicable";
    readonly ConditionalUpdate: "ConditionalUpdate";
    readonly ForcedUpdate: "ForcedUpdate";
    readonly Failed: "Failed";
};
export type SubscriptionReregistrationResult = (typeof SubscriptionReregistrationResult)[keyof typeof SubscriptionReregistrationResult];
export declare const SubscriptionState: {
    readonly NotDefined: "NotDefined";
    readonly Enabled: "Enabled";
    readonly Warned: "Warned";
    readonly PastDue: "PastDue";
    readonly Disabled: "Disabled";
    readonly Deleted: "Deleted";
};
export type SubscriptionState = (typeof SubscriptionState)[keyof typeof SubscriptionState];
export declare const SubscriptionTransitioningState: {
    readonly Registered: "Registered";
    readonly Unregistered: "Unregistered";
    readonly Warned: "Warned";
    readonly Suspended: "Suspended";
    readonly Deleted: "Deleted";
    readonly WarnedToRegistered: "WarnedToRegistered";
    readonly WarnedToSuspended: "WarnedToSuspended";
    readonly WarnedToDeleted: "WarnedToDeleted";
    readonly WarnedToUnregistered: "WarnedToUnregistered";
    readonly SuspendedToRegistered: "SuspendedToRegistered";
    readonly SuspendedToWarned: "SuspendedToWarned";
    readonly SuspendedToDeleted: "SuspendedToDeleted";
    readonly SuspendedToUnregistered: "SuspendedToUnregistered";
};
export type SubscriptionTransitioningState = (typeof SubscriptionTransitioningState)[keyof typeof SubscriptionTransitioningState];
export declare const ThrottlingMetricType: {
    readonly NotSpecified: "NotSpecified";
    readonly NumberOfRequests: "NumberOfRequests";
    readonly NumberOfResources: "NumberOfResources";
};
export type ThrottlingMetricType = (typeof ThrottlingMetricType)[keyof typeof ThrottlingMetricType];
export declare const TrafficRegionCategory: {
    readonly NotSpecified: "NotSpecified";
    readonly Canary: "Canary";
    readonly LowTraffic: "LowTraffic";
    readonly MediumTraffic: "MediumTraffic";
    readonly HighTraffic: "HighTraffic";
    readonly None: "None";
    readonly RestOfTheWorldGroupOne: "RestOfTheWorldGroupOne";
    readonly RestOfTheWorldGroupTwo: "RestOfTheWorldGroupTwo";
};
export type TrafficRegionCategory = (typeof TrafficRegionCategory)[keyof typeof TrafficRegionCategory];
