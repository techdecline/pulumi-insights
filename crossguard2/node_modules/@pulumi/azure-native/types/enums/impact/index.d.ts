import * as v20240501preview from "./v20240501preview";
export { v20240501preview, };
export declare const ConfidenceLevel: {
    /**
     * Low confidence on azure being the source of impact
     */
    readonly Low: "Low";
    /**
     * Medium confidence on azure being the source of impact
     */
    readonly Medium: "Medium";
    /**
     * High confidence on azure being the source of impact
     */
    readonly High: "High";
};
/**
 * Degree of confidence on the impact being a platform issue
 */
export type ConfidenceLevel = (typeof ConfidenceLevel)[keyof typeof ConfidenceLevel];
export declare const IncidentSource: {
    /**
     * When source of Incident is AzureDevops
     */
    readonly AzureDevops: "AzureDevops";
    /**
     * When source of Incident is Microsoft ICM
     */
    readonly ICM: "ICM";
    /**
     * When source of Incident is Jira
     */
    readonly Jira: "Jira";
    /**
     * When source of Incident is ServiceNow
     */
    readonly ServiceNow: "ServiceNow";
    /**
     * When source of Incident is Other
     */
    readonly Other: "Other";
};
/**
 * Client incident source. ex : source system name where the incident is created
 */
export type IncidentSource = (typeof IncidentSource)[keyof typeof IncidentSource];
export declare const MetricUnit: {
    /**
     * When measurement is in ByteSeconds
     */
    readonly ByteSeconds: "ByteSeconds";
    /**
     * When measurement is in Bytes
     */
    readonly Bytes: "Bytes";
    /**
     * When measurement is in BytesPerSecond
     */
    readonly BytesPerSecond: "BytesPerSecond";
    /**
     * When measurement is in Cores
     */
    readonly Cores: "Cores";
    /**
     * When measurement is in Count
     */
    readonly Count: "Count";
    /**
     * When measurement is in CountPerSecond
     */
    readonly CountPerSecond: "CountPerSecond";
    /**
     * When measurement is in MilliCores
     */
    readonly MilliCores: "MilliCores";
    /**
     * When measurement is in MilliSeconds
     */
    readonly MilliSeconds: "MilliSeconds";
    /**
     * When measurement is in NanoCores
     */
    readonly NanoCores: "NanoCores";
    /**
     * When measurement is in Percent
     */
    readonly Percent: "Percent";
    /**
     * When measurement is in Seconds
     */
    readonly Seconds: "Seconds";
    /**
     * When measurement is in Other than listed
     */
    readonly Other: "Other";
};
/**
 * Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
 */
export type MetricUnit = (typeof MetricUnit)[keyof typeof MetricUnit];
export declare const Platform: {
    /**
     * Type of Azure Monitor
     */
    readonly AzureMonitor: "AzureMonitor";
};
/**
 * connector type
 */
export type Platform = (typeof Platform)[keyof typeof Platform];
export declare const Protocol: {
    /**
     * When communication protocol is TCP
     */
    readonly TCP: "TCP";
    /**
     * When communication protocol is UDP
     */
    readonly UDP: "UDP";
    /**
     * When communication protocol is HTTP
     */
    readonly HTTP: "HTTP";
    /**
     * When communication protocol is HTTPS
     */
    readonly HTTPS: "HTTPS";
    /**
     * When communication protocol is RDP
     */
    readonly RDP: "RDP";
    /**
     * When communication protocol is FTP
     */
    readonly FTP: "FTP";
    /**
     * When communication protocol is SSH
     */
    readonly SSH: "SSH";
    /**
     * When communication protocol is Other
     */
    readonly Other: "Other";
};
/**
 * Protocol used for the connection
 */
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const Toolset: {
    /**
     * If communication toolset is Terraform
     */
    readonly Terraform: "Terraform";
    /**
     * If communication toolset is Puppet
     */
    readonly Puppet: "Puppet";
    /**
     * If communication toolset is Chef
     */
    readonly Chef: "Chef";
    /**
     * If communication toolset is SDK
     */
    readonly SDK: "SDK";
    /**
     * If communication toolset is Ansible
     */
    readonly Ansible: "Ansible";
    /**
     * If communication toolset is ARM
     */
    readonly ARM: "ARM";
    /**
     * If communication toolset is Portal
     */
    readonly Portal: "Portal";
    /**
     * If communication toolset is Shell
     */
    readonly Shell: "Shell";
    /**
     * If communication toolset is Other
     */
    readonly Other: "Other";
};
/**
 * Tool used to interact with Azure. SDK, AzPortal, etc.., Other
 */
export type Toolset = (typeof Toolset)[keyof typeof Toolset];
