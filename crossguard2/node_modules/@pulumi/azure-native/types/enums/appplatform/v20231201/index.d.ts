export declare const ApiPortalApiTryOutEnabledState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether the API try-out feature is enabled or disabled. When enabled, users can try out the API by sending requests and viewing responses in API portal. When disabled, users cannot try out the API.
 */
export type ApiPortalApiTryOutEnabledState = (typeof ApiPortalApiTryOutEnabledState)[keyof typeof ApiPortalApiTryOutEnabledState];
export declare const BackendProtocol: {
    readonly GRPC: "GRPC";
    readonly Default: "Default";
};
/**
 * How ingress should communicate with this app backend service.
 */
export type BackendProtocol = (typeof BackendProtocol)[keyof typeof BackendProtocol];
export declare const BindingType: {
    readonly ApplicationInsights: "ApplicationInsights";
    readonly ApacheSkyWalking: "ApacheSkyWalking";
    readonly AppDynamics: "AppDynamics";
    readonly Dynatrace: "Dynatrace";
    readonly NewRelic: "NewRelic";
    readonly ElasticAPM: "ElasticAPM";
};
/**
 * Buildpack Binding Type
 */
export type BindingType = (typeof BindingType)[keyof typeof BindingType];
export declare const ConfigurationServiceGeneration: {
    readonly Gen1: "Gen1";
    readonly Gen2: "Gen2";
};
/**
 * The generation of the Application Configuration Service.
 */
export type ConfigurationServiceGeneration = (typeof ConfigurationServiceGeneration)[keyof typeof ConfigurationServiceGeneration];
export declare const CustomizedAcceleratorType: {
    readonly Accelerator: "Accelerator";
    readonly Fragment: "Fragment";
};
/**
 * Type of the customized accelerator.
 */
export type CustomizedAcceleratorType = (typeof CustomizedAcceleratorType)[keyof typeof CustomizedAcceleratorType];
export declare const DevToolPortalFeatureState: {
    /**
     * Enable the plugin in Dev Tool Portal.
     */
    readonly Enabled: "Enabled";
    /**
     * Disable the plugin in Dev Tool Portal.
     */
    readonly Disabled: "Disabled";
};
/**
 * State of the plugin
 */
export type DevToolPortalFeatureState = (typeof DevToolPortalFeatureState)[keyof typeof DevToolPortalFeatureState];
export declare const GatewayCertificateVerification: {
    /**
     * Enable certificate verification in Spring Cloud Gateway.
     */
    readonly Enabled: "Enabled";
    /**
     * Disable certificate verification in Spring Cloud Gateway.
     */
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable certificate verification or not
 */
export type GatewayCertificateVerification = (typeof GatewayCertificateVerification)[keyof typeof GatewayCertificateVerification];
export declare const GatewayRouteConfigProtocol: {
    readonly HTTP: "HTTP";
    readonly HTTPS: "HTTPS";
};
/**
 * Protocol of routed Azure Spring Apps applications.
 */
export type GatewayRouteConfigProtocol = (typeof GatewayRouteConfigProtocol)[keyof typeof GatewayRouteConfigProtocol];
export declare const GitImplementation: {
    readonly Go_git: "go-git";
    readonly Libgit2: "libgit2";
};
/**
 * Git libraries used to support various repository providers
 */
export type GitImplementation = (typeof GitImplementation)[keyof typeof GitImplementation];
export declare const HTTPSchemeType: {
    readonly HTTP: "HTTP";
    readonly HTTPS: "HTTPS";
};
/**
 * Scheme to use for connecting to the host. Defaults to HTTP.
 *
 * Possible enum values:
 *  - `"HTTP"` means that the scheme used will be http://
 *  - `"HTTPS"` means that the scheme used will be https://
 */
export type HTTPSchemeType = (typeof HTTPSchemeType)[keyof typeof HTTPSchemeType];
export declare const KeyVaultCertificateAutoSync: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Indicates whether to automatically synchronize certificate from key vault or not.
 */
export type KeyVaultCertificateAutoSync = (typeof KeyVaultCertificateAutoSync)[keyof typeof KeyVaultCertificateAutoSync];
export declare const ManagedIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of the managed identity
 */
export type ManagedIdentityType = (typeof ManagedIdentityType)[keyof typeof ManagedIdentityType];
export declare const ProbeActionType: {
    readonly HTTPGetAction: "HTTPGetAction";
    readonly TCPSocketAction: "TCPSocketAction";
    readonly ExecAction: "ExecAction";
};
/**
 * The type of the action to take to perform the health check.
 */
export type ProbeActionType = (typeof ProbeActionType)[keyof typeof ProbeActionType];
export declare const SessionAffinity: {
    readonly Cookie: "Cookie";
    readonly None: "None";
};
/**
 * Type of the affinity, set this to Cookie to enable session affinity.
 */
export type SessionAffinity = (typeof SessionAffinity)[keyof typeof SessionAffinity];
export declare const StorageType: {
    readonly StorageAccount: "StorageAccount";
};
/**
 * The type of the storage.
 */
export type StorageType = (typeof StorageType)[keyof typeof StorageType];
export declare const Type: {
    readonly AzureFileVolume: "AzureFileVolume";
};
/**
 * The type of the underlying resource to mount as a persistent disk.
 */
export type Type = (typeof Type)[keyof typeof Type];
