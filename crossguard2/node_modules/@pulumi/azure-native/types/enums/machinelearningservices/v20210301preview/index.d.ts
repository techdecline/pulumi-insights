export declare const BatchLoggingLevel: {
    readonly Info: "Info";
    readonly Warning: "Warning";
    readonly Debug: "Debug";
};
/**
 * Logging level for batch inference operation.
 */
export type BatchLoggingLevel = (typeof BatchLoggingLevel)[keyof typeof BatchLoggingLevel];
export declare const BatchOutputAction: {
    readonly SummaryOnly: "SummaryOnly";
    readonly AppendRow: "AppendRow";
};
/**
 * Indicates how the output will be organized.
 */
export type BatchOutputAction = (typeof BatchOutputAction)[keyof typeof BatchOutputAction];
export declare const ContentsType: {
    readonly AzureBlob: "AzureBlob";
    readonly AzureDataLakeGen1: "AzureDataLakeGen1";
    readonly AzureDataLakeGen2: "AzureDataLakeGen2";
    readonly AzureFile: "AzureFile";
    readonly AzureMySql: "AzureMySql";
    readonly AzurePostgreSql: "AzurePostgreSql";
    readonly AzureSqlDatabase: "AzureSqlDatabase";
    readonly GlusterFs: "GlusterFs";
};
/**
 * [Required] Storage type backing the datastore.
 */
export type ContentsType = (typeof ContentsType)[keyof typeof ContentsType];
export declare const CredentialsType: {
    readonly AccountKey: "AccountKey";
    readonly Certificate: "Certificate";
    readonly None: "None";
    readonly Sas: "Sas";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly SqlAdmin: "SqlAdmin";
};
/**
 * [Required] Credential type used to authentication with storage.
 */
export type CredentialsType = (typeof CredentialsType)[keyof typeof CredentialsType];
export declare const DataBindingMode: {
    readonly Mount: "Mount";
    readonly Download: "Download";
    readonly Upload: "Upload";
    readonly ReadOnlyMount: "ReadOnlyMount";
    readonly ReadWriteMount: "ReadWriteMount";
    readonly Direct: "Direct";
    readonly EvalMount: "EvalMount";
    readonly EvalDownload: "EvalDownload";
};
/**
 * Mechanism for data movement to datastore.
 */
export type DataBindingMode = (typeof DataBindingMode)[keyof typeof DataBindingMode];
export declare const DatasetType: {
    readonly Simple: "Simple";
    readonly Dataflow: "Dataflow";
};
/**
 * The Format of dataset.
 */
export type DatasetType = (typeof DatasetType)[keyof typeof DatasetType];
export declare const DistributionType: {
    readonly PyTorch: "PyTorch";
    readonly TensorFlow: "TensorFlow";
    readonly Mpi: "Mpi";
};
/**
 * [Required] Specifies the type of distribution framework.
 */
export type DistributionType = (typeof DistributionType)[keyof typeof DistributionType];
export declare const DockerSpecificationType: {
    readonly Build: "Build";
    readonly Image: "Image";
};
/**
 * [Required] Docker specification must be either Build or Image
 */
export type DockerSpecificationType = (typeof DockerSpecificationType)[keyof typeof DockerSpecificationType];
export declare const EarlyTerminationPolicyType: {
    readonly Bandit: "Bandit";
    readonly MedianStopping: "MedianStopping";
    readonly TruncationSelection: "TruncationSelection";
};
/**
 * [Required] Name of policy configuration
 */
export type EarlyTerminationPolicyType = (typeof EarlyTerminationPolicyType)[keyof typeof EarlyTerminationPolicyType];
export declare const EndpointAuthMode: {
    readonly AMLToken: "AMLToken";
    readonly Key: "Key";
    readonly AADToken: "AADToken";
};
/**
 * [Required] Inference endpoint authentication mode type
 */
export type EndpointAuthMode = (typeof EndpointAuthMode)[keyof typeof EndpointAuthMode];
export declare const EndpointComputeType: {
    readonly Managed: "Managed";
    readonly K8S: "K8S";
    readonly AzureMLCompute: "AzureMLCompute";
};
/**
 * [Required] The compute type of the endpoint.
 */
export type EndpointComputeType = (typeof EndpointComputeType)[keyof typeof EndpointComputeType];
export declare const Goal: {
    readonly Minimize: "Minimize";
    readonly Maximize: "Maximize";
};
/**
 * [Required] Defines supported metric goals for hyperparameter tuning
 */
export type Goal = (typeof Goal)[keyof typeof Goal];
export declare const IdentityConfigurationType: {
    readonly Managed: "Managed";
    readonly AMLToken: "AMLToken";
};
/**
 * [Required] Specifies the type of identity framework.
 */
export type IdentityConfigurationType = (typeof IdentityConfigurationType)[keyof typeof IdentityConfigurationType];
export declare const ImageAnnotationType: {
    readonly Classification: "Classification";
    readonly BoundingBox: "BoundingBox";
    readonly InstanceSegmentation: "InstanceSegmentation";
};
/**
 * Annotation type of image labeling job.
 */
export type ImageAnnotationType = (typeof ImageAnnotationType)[keyof typeof ImageAnnotationType];
export declare const JobType: {
    readonly Command: "Command";
    readonly Sweep: "Sweep";
    readonly Labeling: "Labeling";
};
/**
 * [Required] Specifies the type of job. This field should always be set to "Labeling".
 */
export type JobType = (typeof JobType)[keyof typeof JobType];
export declare const MediaType: {
    readonly Image: "Image";
    readonly Text: "Text";
};
/**
 * [Required] Media type of the job.
 */
export type MediaType = (typeof MediaType)[keyof typeof MediaType];
export declare const OperatingSystemType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * The OS type the Environment.
 */
export type OperatingSystemType = (typeof OperatingSystemType)[keyof typeof OperatingSystemType];
export declare const OriginType: {
    readonly Synapse: "Synapse";
};
/**
 * Type of the linked service.
 */
export type OriginType = (typeof OriginType)[keyof typeof OriginType];
export declare const ReferenceType: {
    readonly Id: "Id";
    readonly DataPath: "DataPath";
    readonly OutputPath: "OutputPath";
};
/**
 * [Required] Specifies the type of asset reference.
 */
export type ReferenceType = (typeof ReferenceType)[keyof typeof ReferenceType];
export declare const ResourceIdentityAssignment: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
    readonly None: "None";
};
/**
 * Defines values for a ResourceIdentity's type.
 */
export type ResourceIdentityAssignment = (typeof ResourceIdentityAssignment)[keyof typeof ResourceIdentityAssignment];
export declare const SamplingAlgorithm: {
    readonly Grid: "Grid";
    readonly Random: "Random";
    readonly Bayesian: "Bayesian";
};
/**
 * [Required] Type of the hyperparameter sampling algorithms
 */
export type SamplingAlgorithm = (typeof SamplingAlgorithm)[keyof typeof SamplingAlgorithm];
export declare const ScaleType: {
    readonly Auto: "Auto";
    readonly Manual: "Manual";
};
/**
 * [Required] Type of deployment scaling algorithm
 */
export type ScaleType = (typeof ScaleType)[keyof typeof ScaleType];
export declare const SecretsType: {
    readonly AccountKey: "AccountKey";
    readonly Certificate: "Certificate";
    readonly None: "None";
    readonly Sas: "Sas";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly SqlAdmin: "SqlAdmin";
};
/**
 * [Required] Credential type used to authentication with storage.
 */
export type SecretsType = (typeof SecretsType)[keyof typeof SecretsType];
export declare const TextAnnotationType: {
    readonly Classification: "Classification";
};
/**
 * Annotation type of text labeling job.
 */
export type TextAnnotationType = (typeof TextAnnotationType)[keyof typeof TextAnnotationType];
