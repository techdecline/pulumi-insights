export declare const AllowRecoverSoftDeletedWorkspace: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Allow a soft deleted workspace to be recovered
 */
export type AllowRecoverSoftDeletedWorkspace = (typeof AllowRecoverSoftDeletedWorkspace)[keyof typeof AllowRecoverSoftDeletedWorkspace];
export declare const ApplicationSharingPolicy: {
    readonly Personal: "Personal";
    readonly Shared: "Shared";
};
/**
 * Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
 */
export type ApplicationSharingPolicy = (typeof ApplicationSharingPolicy)[keyof typeof ApplicationSharingPolicy];
export declare const ClusterPurpose: {
    readonly FastProd: "FastProd";
    readonly DenseProd: "DenseProd";
    readonly DevTest: "DevTest";
};
/**
 * Intended usage of the cluster
 */
export type ClusterPurpose = (typeof ClusterPurpose)[keyof typeof ClusterPurpose];
export declare const ComputeInstanceAuthorizationType: {
    readonly Personal: "personal";
};
/**
 * The Compute Instance Authorization type. Available values are personal (default).
 */
export type ComputeInstanceAuthorizationType = (typeof ComputeInstanceAuthorizationType)[keyof typeof ComputeInstanceAuthorizationType];
export declare const ComputeType: {
    readonly AKS: "AKS";
    readonly Kubernetes: "Kubernetes";
    readonly AmlCompute: "AmlCompute";
    readonly ComputeInstance: "ComputeInstance";
    readonly DataFactory: "DataFactory";
    readonly VirtualMachine: "VirtualMachine";
    readonly HDInsight: "HDInsight";
    readonly Databricks: "Databricks";
    readonly DataLakeAnalytics: "DataLakeAnalytics";
    readonly SynapseSpark: "SynapseSpark";
};
/**
 * The type of compute
 */
export type ComputeType = (typeof ComputeType)[keyof typeof ComputeType];
export declare const EncryptionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether or not the encryption is enabled for the workspace.
 */
export type EncryptionStatus = (typeof EncryptionStatus)[keyof typeof EncryptionStatus];
export declare const LoadBalancerType: {
    readonly PublicIp: "PublicIp";
    readonly InternalLoadBalancer: "InternalLoadBalancer";
};
/**
 * Load Balancer Type
 */
export type LoadBalancerType = (typeof LoadBalancerType)[keyof typeof LoadBalancerType];
export declare const OsType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * Compute OS Type
 */
export type OsType = (typeof OsType)[keyof typeof OsType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
    readonly Timeout: "Timeout";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether requests from Public Network are allowed.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const RemoteLoginPortPublicAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly NotSpecified: "NotSpecified";
};
/**
 * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
 */
export type RemoteLoginPortPublicAccess = (typeof RemoteLoginPortPublicAccess)[keyof typeof RemoteLoginPortPublicAccess];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly None: "None";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SoftDeleteEnabled: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * create a workspace with soft delete capability
 */
export type SoftDeleteEnabled = (typeof SoftDeleteEnabled)[keyof typeof SoftDeleteEnabled];
export declare const SshPublicAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
 */
export type SshPublicAccess = (typeof SshPublicAccess)[keyof typeof SshPublicAccess];
export declare const VmPriority: {
    readonly Dedicated: "Dedicated";
    readonly LowPriority: "LowPriority";
};
/**
 * Virtual Machine priority
 */
export type VmPriority = (typeof VmPriority)[keyof typeof VmPriority];
