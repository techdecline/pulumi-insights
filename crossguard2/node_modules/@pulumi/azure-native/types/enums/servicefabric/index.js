"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZonalUpdateMode = exports.VmSetupAction = exports.SkuName = exports.ServiceScalingTriggerKind = exports.ServiceScalingMechanismKind = exports.ServicePlacementPolicyType = exports.ServicePackageActivationMode = exports.ServiceLoadMetricWeight = exports.ServiceKind = exports.ServiceCorrelationScheme = exports.SecurityType = exports.RollingUpgradeMode = exports.Protocol = exports.ProbeProtocol = exports.PrivateLinkServiceNetworkPolicies = exports.PrivateEndpointNetworkPolicies = exports.PartitionScheme = exports.NsgProtocol = exports.MoveCost = exports.ManagedIdentityType = exports.ManagedClusterAddOnFeature = exports.IPAddressType = exports.FailureAction = exports.EvictionPolicyType = exports.DiskType = exports.Direction = exports.ClusterUpgradeMode = exports.ClusterUpgradeCadence = exports.Access = exports.v20241101preview = exports.v20240901preview = exports.v20240601preview = exports.v20240401 = exports.v20240201preview = exports.v20231201preview = exports.v20231101preview = exports.v20230901preview = exports.v20230701preview = exports.v20230301preview = exports.v20221001preview = exports.v20220101 = exports.v20210601 = exports.v20200101preview = void 0;
// Export sub-modules:
const v20200101preview = require("./v20200101preview");
exports.v20200101preview = v20200101preview;
const v20210601 = require("./v20210601");
exports.v20210601 = v20210601;
const v20220101 = require("./v20220101");
exports.v20220101 = v20220101;
const v20221001preview = require("./v20221001preview");
exports.v20221001preview = v20221001preview;
const v20230301preview = require("./v20230301preview");
exports.v20230301preview = v20230301preview;
const v20230701preview = require("./v20230701preview");
exports.v20230701preview = v20230701preview;
const v20230901preview = require("./v20230901preview");
exports.v20230901preview = v20230901preview;
const v20231101preview = require("./v20231101preview");
exports.v20231101preview = v20231101preview;
const v20231201preview = require("./v20231201preview");
exports.v20231201preview = v20231201preview;
const v20240201preview = require("./v20240201preview");
exports.v20240201preview = v20240201preview;
const v20240401 = require("./v20240401");
exports.v20240401 = v20240401;
const v20240601preview = require("./v20240601preview");
exports.v20240601preview = v20240601preview;
const v20240901preview = require("./v20240901preview");
exports.v20240901preview = v20240901preview;
const v20241101preview = require("./v20241101preview");
exports.v20241101preview = v20241101preview;
exports.Access = {
    Allow: "allow",
    Deny: "deny",
};
exports.ClusterUpgradeCadence = {
    /**
     * Cluster upgrade starts immediately after a new version is rolled out. Recommended for Test/Dev clusters.
     */
    Wave0: "Wave0",
    /**
     * Cluster upgrade starts 7 days after a new version is rolled out. Recommended for Pre-prod clusters.
     */
    Wave1: "Wave1",
    /**
     * Cluster upgrade starts 14 days after a new version is rolled out. Recommended for Production clusters.
     */
    Wave2: "Wave2",
};
exports.ClusterUpgradeMode = {
    /**
     * The cluster will be automatically upgraded to the latest Service Fabric runtime version, **clusterUpgradeCadence** will determine when the upgrade starts after the new version becomes available.
     */
    Automatic: "Automatic",
    /**
     * The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     */
    Manual: "Manual",
};
exports.Direction = {
    Inbound: "inbound",
    Outbound: "outbound",
};
exports.DiskType = {
    /**
     * Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access.
     */
    Standard_LRS: "Standard_LRS",
    /**
     * Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test.
     */
    StandardSSD_LRS: "StandardSSD_LRS",
    /**
     * Premium SSD locally redundant storage. Best for production and performance sensitive workloads.
     */
    Premium_LRS: "Premium_LRS",
};
exports.EvictionPolicyType = {
    /**
     * Eviction policy will be Delete for SPOT vms.
     */
    Delete: "Delete",
    /**
     * Eviction policy will be Deallocate for SPOT vms.
     */
    Deallocate: "Deallocate",
};
exports.FailureAction = {
    /**
     * Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails.
     */
    Rollback: "Rollback",
    /**
     * Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will not proceed to the next upgrade domain automatically.
     */
    Manual: "Manual",
};
exports.IPAddressType = {
    /**
     * IPv4 address type.
     */
    IPv4: "IPv4",
    /**
     * IPv6 address type.
     */
    IPv6: "IPv6",
};
exports.ManagedClusterAddOnFeature = {
    /**
     * Dns service
     */
    DnsService: "DnsService",
    /**
     * Backup and restore service
     */
    BackupRestoreService: "BackupRestoreService",
    /**
     * Resource monitor service
     */
    ResourceMonitorService: "ResourceMonitorService",
};
exports.ManagedIdentityType = {
    /**
     * Indicates that no identity is associated with the resource.
     */
    None: "None",
    /**
     * Indicates that system assigned identity is associated with the resource.
     */
    SystemAssigned: "SystemAssigned",
    /**
     * Indicates that user assigned identity is associated with the resource.
     */
    UserAssigned: "UserAssigned",
    /**
     * Indicates that both system assigned and user assigned identity are associated with the resource.
     */
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
};
exports.MoveCost = {
    /**
     * Zero move cost. This value is zero.
     */
    Zero: "Zero",
    /**
     * Specifies the move cost of the service as Low. The value is 1.
     */
    Low: "Low",
    /**
     * Specifies the move cost of the service as Medium. The value is 2.
     */
    Medium: "Medium",
    /**
     * Specifies the move cost of the service as High. The value is 3.
     */
    High: "High",
};
exports.NsgProtocol = {
    Http: "http",
    Https: "https",
    Tcp: "tcp",
    Udp: "udp",
    Icmp: "icmp",
    Ah: "ah",
    Esp: "esp",
};
exports.PartitionScheme = {
    /**
     * Indicates that the partition is based on string names, and is a SingletonPartitionScheme object, The value is 0.
     */
    Singleton: "Singleton",
    /**
     * Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionScheme object. The value is 1.
     */
    UniformInt64Range: "UniformInt64Range",
    /**
     * Indicates that the partition is based on string names, and is a NamedPartitionScheme object. The value is 2.
     */
    Named: "Named",
};
exports.PrivateEndpointNetworkPolicies = {
    Enabled: "enabled",
    Disabled: "disabled",
};
exports.PrivateLinkServiceNetworkPolicies = {
    Enabled: "enabled",
    Disabled: "disabled",
};
exports.ProbeProtocol = {
    Tcp: "tcp",
    Http: "http",
    Https: "https",
};
exports.Protocol = {
    Tcp: "tcp",
    Udp: "udp",
};
exports.RollingUpgradeMode = {
    /**
     * The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 0.
     */
    Monitored: "Monitored",
    /**
     * The upgrade will proceed automatically without performing any health monitoring. The value is 1.
     */
    UnmonitoredAuto: "UnmonitoredAuto",
};
exports.SecurityType = {
    /**
     * Trusted Launch is a security type that secures generation 2 virtual machines.
     */
    TrustedLaunch: "TrustedLaunch",
};
exports.ServiceCorrelationScheme = {
    /**
     * Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 0.
     */
    AlignedAffinity: "AlignedAffinity",
    /**
     * Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 1.
     */
    NonAlignedAffinity: "NonAlignedAffinity",
};
exports.ServiceKind = {
    /**
     * Does not use Service Fabric to make its state highly available or reliable. The value is 0.
     */
    Stateless: "Stateless",
    /**
     * Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 1.
     */
    Stateful: "Stateful",
};
exports.ServiceLoadMetricWeight = {
    /**
     * Disables resource balancing for this metric. This value is zero.
     */
    Zero: "Zero",
    /**
     * Specifies the metric weight of the service load as Low. The value is 1.
     */
    Low: "Low",
    /**
     * Specifies the metric weight of the service load as Medium. The value is 2.
     */
    Medium: "Medium",
    /**
     * Specifies the metric weight of the service load as High. The value is 3.
     */
    High: "High",
};
exports.ServicePackageActivationMode = {
    /**
     * Indicates the application package activation mode will use shared process.
     */
    SharedProcess: "SharedProcess",
    /**
     * Indicates the application package activation mode will use exclusive process.
     */
    ExclusiveProcess: "ExclusiveProcess",
};
exports.ServicePlacementPolicyType = {
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 0.
     */
    InvalidDomain: "InvalidDomain",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 1.
     */
    RequiredDomain: "RequiredDomain",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 2.
     */
    PreferredPrimaryDomain: "PreferredPrimaryDomain",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 3.
     */
    RequiredDomainDistribution: "RequiredDomainDistribution",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 4.
     */
    NonPartiallyPlaceService: "NonPartiallyPlaceService",
};
exports.ServiceScalingMechanismKind = {
    /**
     * Represents a scaling mechanism for adding or removing instances of stateless service partition. The value is 0.
     */
    ScalePartitionInstanceCount: "ScalePartitionInstanceCount",
    /**
     * Represents a scaling mechanism for adding or removing named partitions of a stateless service. The value is 1.
     */
    AddRemoveIncrementalNamedPartition: "AddRemoveIncrementalNamedPartition",
};
exports.ServiceScalingTriggerKind = {
    /**
     * Represents a scaling trigger related to an average load of a metric/resource of a partition. The value is 0.
     */
    AveragePartitionLoadTrigger: "AveragePartitionLoadTrigger",
    /**
     * Represents a scaling policy related to an average load of a metric/resource of a service. The value is 1.
     */
    AverageServiceLoadTrigger: "AverageServiceLoadTrigger",
};
exports.SkuName = {
    /**
     * Basic requires a minimum of 3 nodes and allows only 1 node type.
     */
    Basic: "Basic",
    /**
     * Requires a minimum of 5 nodes and allows 1 or more node type.
     */
    Standard: "Standard",
};
exports.VmSetupAction = {
    /**
     * Enable windows containers feature.
     */
    EnableContainers: "EnableContainers",
    /**
     * Enables windows HyperV feature.
     */
    EnableHyperV: "EnableHyperV",
};
exports.ZonalUpdateMode = {
    /**
     * The cluster will use 5 upgrade domains for Cross Az Node types.
     */
    Standard: "Standard",
    /**
     * The cluster will use a maximum of 3 upgrade domains per zone instead of 5 for Cross Az Node types for faster deployments.
     */
    Fast: "Fast",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9zZXJ2aWNlZmFicmljL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzRUFBc0U7QUFDdEUsaUZBQWlGOzs7QUFFakYsc0JBQXNCO0FBQ3RCLHVEQUF1RDtBQWdCbkQsNENBQWdCO0FBZnBCLHlDQUF5QztBQWdCckMsOEJBQVM7QUFmYix5Q0FBeUM7QUFnQnJDLDhCQUFTO0FBZmIsdURBQXVEO0FBZ0JuRCw0Q0FBZ0I7QUFmcEIsdURBQXVEO0FBZ0JuRCw0Q0FBZ0I7QUFmcEIsdURBQXVEO0FBZ0JuRCw0Q0FBZ0I7QUFmcEIsdURBQXVEO0FBZ0JuRCw0Q0FBZ0I7QUFmcEIsdURBQXVEO0FBZ0JuRCw0Q0FBZ0I7QUFmcEIsdURBQXVEO0FBZ0JuRCw0Q0FBZ0I7QUFmcEIsdURBQXVEO0FBZ0JuRCw0Q0FBZ0I7QUFmcEIseUNBQXlDO0FBZ0JyQyw4QkFBUztBQWZiLHVEQUF1RDtBQWdCbkQsNENBQWdCO0FBZnBCLHVEQUF1RDtBQWdCbkQsNENBQWdCO0FBZnBCLHVEQUF1RDtBQWdCbkQsNENBQWdCO0FBR1AsUUFBQSxNQUFNLEdBQUc7SUFDbEIsS0FBSyxFQUFFLE9BQU87SUFDZCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLHFCQUFxQixHQUFHO0lBQ2pDOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztDQUNSLENBQUM7QUFPRSxRQUFBLGtCQUFrQixHQUFHO0lBQzlCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtDQUNWLENBQUM7QUFPRSxRQUFBLFNBQVMsR0FBRztJQUNyQixPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsVUFBVTtD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