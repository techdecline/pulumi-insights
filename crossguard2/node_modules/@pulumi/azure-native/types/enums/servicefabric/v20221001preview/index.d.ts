export declare const Access: {
    readonly Allow: "allow";
    readonly Deny: "deny";
};
/**
 * The network traffic is allowed or denied.
 */
export type Access = (typeof Access)[keyof typeof Access];
export declare const ClusterUpgradeCadence: {
    /**
     * Cluster upgrade starts immediately after a new version is rolled out. Recommended for Test/Dev clusters.
     */
    readonly Wave0: "Wave0";
    /**
     * Cluster upgrade starts 7 days after a new version is rolled out. Recommended for Pre-prod clusters.
     */
    readonly Wave1: "Wave1";
    /**
     * Cluster upgrade starts 14 days after a new version is rolled out. Recommended for Production clusters.
     */
    readonly Wave2: "Wave2";
};
/**
 * Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **clusterUpgradeMode** is set to 'Automatic'.
 */
export type ClusterUpgradeCadence = (typeof ClusterUpgradeCadence)[keyof typeof ClusterUpgradeCadence];
export declare const ClusterUpgradeMode: {
    /**
     * The cluster will be automatically upgraded to the latest Service Fabric runtime version, **clusterUpgradeCadence** will determine when the upgrade starts after the new version becomes available.
     */
    readonly Automatic: "Automatic";
    /**
     * The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     */
    readonly Manual: "Manual";
};
/**
 * The upgrade mode of the cluster when new Service Fabric runtime version is available.
 */
export type ClusterUpgradeMode = (typeof ClusterUpgradeMode)[keyof typeof ClusterUpgradeMode];
export declare const Direction: {
    readonly Inbound: "inbound";
    readonly Outbound: "outbound";
};
/**
 * Network security rule direction.
 */
export type Direction = (typeof Direction)[keyof typeof Direction];
export declare const ManagedClusterAddOnFeature: {
    /**
     * Dns service
     */
    readonly DnsService: "DnsService";
    /**
     * Backup and restore service
     */
    readonly BackupRestoreService: "BackupRestoreService";
    /**
     * Resource monitor service
     */
    readonly ResourceMonitorService: "ResourceMonitorService";
};
/**
 * Available cluster add-on features
 */
export type ManagedClusterAddOnFeature = (typeof ManagedClusterAddOnFeature)[keyof typeof ManagedClusterAddOnFeature];
export declare const NsgProtocol: {
    readonly Http: "http";
    readonly Https: "https";
    readonly Tcp: "tcp";
    readonly Udp: "udp";
    readonly Icmp: "icmp";
    readonly Ah: "ah";
    readonly Esp: "esp";
};
/**
 * Network protocol this rule applies to.
 */
export type NsgProtocol = (typeof NsgProtocol)[keyof typeof NsgProtocol];
export declare const PrivateEndpointNetworkPolicies: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * Enable or Disable apply network policies on private end point in the subnet.
 */
export type PrivateEndpointNetworkPolicies = (typeof PrivateEndpointNetworkPolicies)[keyof typeof PrivateEndpointNetworkPolicies];
export declare const PrivateLinkServiceNetworkPolicies: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * Enable or Disable apply network policies on private link service in the subnet.
 */
export type PrivateLinkServiceNetworkPolicies = (typeof PrivateLinkServiceNetworkPolicies)[keyof typeof PrivateLinkServiceNetworkPolicies];
export declare const ProbeProtocol: {
    readonly Tcp: "tcp";
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * the reference to the load balancer probe used by the load balancing rule.
 */
export type ProbeProtocol = (typeof ProbeProtocol)[keyof typeof ProbeProtocol];
export declare const Protocol: {
    readonly Tcp: "tcp";
    readonly Udp: "udp";
};
/**
 * The reference to the transport protocol used by the load balancing rule.
 */
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const SkuName: {
    /**
     * Basic requires a minimum of 3 nodes and allows only 1 node type.
     */
    readonly Basic: "Basic";
    /**
     * Requires a minimum of 5 nodes and allows 1 or more node type.
     */
    readonly Standard: "Standard";
};
/**
 * Sku Name.
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const ZonalUpdateMode: {
    /**
     * The cluster will use 5 upgrade domains for Cross Az Node types.
     */
    readonly Standard: "Standard";
    /**
     * The cluster will use a maximum of 3 upgrade domains per zone instead of 5 for Cross Az Node types for faster deployments.
     */
    readonly Fast: "Fast";
};
/**
 * Indicates the update mode for Cross Az clusters.
 */
export type ZonalUpdateMode = (typeof ZonalUpdateMode)[keyof typeof ZonalUpdateMode];
