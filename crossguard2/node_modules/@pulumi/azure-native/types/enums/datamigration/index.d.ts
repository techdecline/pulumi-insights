import * as v20210630 from "./v20210630";
import * as v20211030preview from "./v20211030preview";
import * as v20220330preview from "./v20220330preview";
import * as v20230715preview from "./v20230715preview";
export { v20210630, v20211030preview, v20220330preview, v20230715preview, };
export declare const AuthenticationType: {
    readonly None: "None";
    readonly WindowsAuthentication: "WindowsAuthentication";
    readonly SqlAuthentication: "SqlAuthentication";
    readonly ActiveDirectoryIntegrated: "ActiveDirectoryIntegrated";
    readonly ActiveDirectoryPassword: "ActiveDirectoryPassword";
};
/**
 * Authentication type to use for connection
 */
export type AuthenticationType = (typeof AuthenticationType)[keyof typeof AuthenticationType];
export declare const BackupMode: {
    readonly CreateBackup: "CreateBackup";
    readonly ExistingBackup: "ExistingBackup";
};
/**
 * Backup Mode to specify whether to use existing backup or create new backup.
 */
export type BackupMode = (typeof BackupMode)[keyof typeof BackupMode];
export declare const MongoDbReplication: {
    readonly Disabled: "Disabled";
    readonly OneTime: "OneTime";
    readonly Continuous: "Continuous";
};
/**
 * Describes how changes will be replicated from the source to the target. The default is OneTime.
 */
export type MongoDbReplication = (typeof MongoDbReplication)[keyof typeof MongoDbReplication];
export declare const MongoDbShardKeyOrder: {
    readonly Forward: "Forward";
    readonly Reverse: "Reverse";
    readonly Hashed: "Hashed";
};
/**
 * The field ordering
 */
export type MongoDbShardKeyOrder = (typeof MongoDbShardKeyOrder)[keyof typeof MongoDbShardKeyOrder];
export declare const MySqlTargetPlatformType: {
    readonly SqlServer: "SqlServer";
    readonly AzureDbForMySQL: "AzureDbForMySQL";
};
/**
 * Target Platform for the migration
 */
export type MySqlTargetPlatformType = (typeof MySqlTargetPlatformType)[keyof typeof MySqlTargetPlatformType];
export declare const ProjectSourcePlatform: {
    readonly SQL: "SQL";
    readonly MySQL: "MySQL";
    readonly PostgreSql: "PostgreSql";
    readonly MongoDb: "MongoDb";
    readonly Unknown: "Unknown";
};
/**
 * Source platform for the project
 */
export type ProjectSourcePlatform = (typeof ProjectSourcePlatform)[keyof typeof ProjectSourcePlatform];
export declare const ProjectTargetPlatform: {
    readonly SQLDB: "SQLDB";
    readonly SQLMI: "SQLMI";
    readonly AzureDbForMySql: "AzureDbForMySql";
    readonly AzureDbForPostgreSql: "AzureDbForPostgreSql";
    readonly MongoDb: "MongoDb";
    readonly Unknown: "Unknown";
};
/**
 * Target platform for the project
 */
export type ProjectTargetPlatform = (typeof ProjectTargetPlatform)[keyof typeof ProjectTargetPlatform];
export declare const ResourceType: {
    readonly SqlMi: "SqlMi";
    readonly SqlVm: "SqlVm";
    readonly SqlDb: "SqlDb";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare const ServerLevelPermissionsGroup: {
    readonly Default: "Default";
    readonly MigrationFromSqlServerToAzureDB: "MigrationFromSqlServerToAzureDB";
    readonly MigrationFromSqlServerToAzureMI: "MigrationFromSqlServerToAzureMI";
    readonly MigrationFromMySQLToAzureDBForMySQL: "MigrationFromMySQLToAzureDBForMySQL";
};
/**
 * Permission group for validations
 */
export type ServerLevelPermissionsGroup = (typeof ServerLevelPermissionsGroup)[keyof typeof ServerLevelPermissionsGroup];
export declare const SqlSourcePlatform: {
    readonly SqlOnPrem: "SqlOnPrem";
};
/**
 * Server platform type for connection
 */
export type SqlSourcePlatform = (typeof SqlSourcePlatform)[keyof typeof SqlSourcePlatform];
export declare const SsisMigrationOverwriteOption: {
    readonly Ignore: "Ignore";
    readonly Overwrite: "Overwrite";
};
/**
 * The overwrite option for the SSIS project migration
 */
export type SsisMigrationOverwriteOption = (typeof SsisMigrationOverwriteOption)[keyof typeof SsisMigrationOverwriteOption];
export declare const SsisStoreType: {
    readonly SsisCatalog: "SsisCatalog";
};
/**
 * The SSIS store type of source, only SSIS catalog is supported now in DMS
 */
export type SsisStoreType = (typeof SsisStoreType)[keyof typeof SsisStoreType];
