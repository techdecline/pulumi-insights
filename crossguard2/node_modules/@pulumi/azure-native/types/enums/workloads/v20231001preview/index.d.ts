export declare const BackupType: {
    readonly VM: "VM";
    readonly SQL: "SQL";
    readonly HANA: "HANA";
};
/**
 * The type of backup, VM, SQL or HANA.
 */
export type BackupType = (typeof BackupType)[keyof typeof BackupType];
export declare const ConfigurationType: {
    readonly Skip: "Skip";
    readonly CreateAndMount: "CreateAndMount";
    readonly Mount: "Mount";
};
/**
 * The type of file share config.
 */
export type ConfigurationType = (typeof ConfigurationType)[keyof typeof ConfigurationType];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const DiskSkuName: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Premium_LRS: "Premium_LRS";
    readonly StandardSSD_LRS: "StandardSSD_LRS";
    readonly UltraSSD_LRS: "UltraSSD_LRS";
    readonly Premium_ZRS: "Premium_ZRS";
    readonly StandardSSD_ZRS: "StandardSSD_ZRS";
    readonly PremiumV2_LRS: "PremiumV2_LRS";
};
/**
 * Defines the disk sku name.
 */
export type DiskSkuName = (typeof DiskSkuName)[keyof typeof DiskSkuName];
export declare const IAASVMPolicyType: {
    readonly Invalid: "Invalid";
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The policy type.
 */
export type IAASVMPolicyType = (typeof IAASVMPolicyType)[keyof typeof IAASVMPolicyType];
export declare const ManagedResourcesNetworkAccessType: {
    readonly Public: "Public";
    readonly Private: "Private";
};
/**
 * Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
 */
export type ManagedResourcesNetworkAccessType = (typeof ManagedResourcesNetworkAccessType)[keyof typeof ManagedResourcesNetworkAccessType];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The managed service identity for all identities.
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const MonthOfYear: {
    readonly Invalid: "Invalid";
    readonly January: "January";
    readonly February: "February";
    readonly March: "March";
    readonly April: "April";
    readonly May: "May";
    readonly June: "June";
    readonly July: "July";
    readonly August: "August";
    readonly September: "September";
    readonly October: "October";
    readonly November: "November";
    readonly December: "December";
};
export type MonthOfYear = (typeof MonthOfYear)[keyof typeof MonthOfYear];
export declare const NamingPatternType: {
    readonly FullResourceName: "FullResourceName";
};
/**
 * The pattern type to be used for resource naming.
 */
export type NamingPatternType = (typeof NamingPatternType)[keyof typeof NamingPatternType];
export declare const OSType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * The OS Type
 */
export type OSType = (typeof OSType)[keyof typeof OSType];
export declare const PolicyType: {
    readonly Invalid: "Invalid";
    readonly Full: "Full";
    readonly Differential: "Differential";
    readonly Log: "Log";
    readonly CopyOnlyFull: "CopyOnlyFull";
    readonly Incremental: "Incremental";
    readonly SnapshotFull: "SnapshotFull";
    readonly SnapshotCopyOnlyFull: "SnapshotCopyOnlyFull";
};
/**
 * Type of backup policy type
 */
export type PolicyType = (typeof PolicyType)[keyof typeof PolicyType];
export declare const RetentionDurationType: {
    readonly Invalid: "Invalid";
    readonly Days: "Days";
    readonly Weeks: "Weeks";
    readonly Months: "Months";
    readonly Years: "Years";
};
/**
 * Retention duration type: days/weeks/months/years
 * Used only if TieringMode is set to TierAfter
 */
export type RetentionDurationType = (typeof RetentionDurationType)[keyof typeof RetentionDurationType];
export declare const RetentionScheduleFormat: {
    readonly Invalid: "Invalid";
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
};
/**
 * Retention schedule format for yearly retention policy.
 */
export type RetentionScheduleFormat = (typeof RetentionScheduleFormat)[keyof typeof RetentionScheduleFormat];
export declare const RoutingPreference: {
    readonly Default: "Default";
    readonly RouteAll: "RouteAll";
};
/**
 * Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
 */
export type RoutingPreference = (typeof RoutingPreference)[keyof typeof RoutingPreference];
export declare const SAPConfigurationType: {
    readonly Deployment: "Deployment";
    readonly Discovery: "Discovery";
    readonly DeploymentWithOSConfig: "DeploymentWithOSConfig";
};
/**
 * The configuration Type.
 */
export type SAPConfigurationType = (typeof SAPConfigurationType)[keyof typeof SAPConfigurationType];
export declare const SAPDatabaseScaleMethod: {
    readonly ScaleUp: "ScaleUp";
};
/**
 * The DB scale method.
 */
export type SAPDatabaseScaleMethod = (typeof SAPDatabaseScaleMethod)[keyof typeof SAPDatabaseScaleMethod];
export declare const SAPDatabaseType: {
    readonly HANA: "HANA";
    readonly DB2: "DB2";
};
/**
 * The database type. Eg: HANA, DB2, etc
 */
export type SAPDatabaseType = (typeof SAPDatabaseType)[keyof typeof SAPDatabaseType];
export declare const SAPDeploymentType: {
    readonly SingleServer: "SingleServer";
    readonly ThreeTier: "ThreeTier";
};
/**
 * The deployment type. Eg: SingleServer/ThreeTier
 */
export type SAPDeploymentType = (typeof SAPDeploymentType)[keyof typeof SAPDeploymentType];
export declare const SAPEnvironmentType: {
    readonly NonProd: "NonProd";
    readonly Prod: "Prod";
};
/**
 * Defines the environment type - Production/Non Production.
 */
export type SAPEnvironmentType = (typeof SAPEnvironmentType)[keyof typeof SAPEnvironmentType];
export declare const SAPHighAvailabilityType: {
    readonly AvailabilitySet: "AvailabilitySet";
    readonly AvailabilityZone: "AvailabilityZone";
};
/**
 * The high availability type.
 */
export type SAPHighAvailabilityType = (typeof SAPHighAvailabilityType)[keyof typeof SAPHighAvailabilityType];
export declare const SAPProductType: {
    readonly ECC: "ECC";
    readonly S4HANA: "S4HANA";
    readonly Other: "Other";
};
/**
 * Defines the SAP Product type.
 */
export type SAPProductType = (typeof SAPProductType)[keyof typeof SAPProductType];
export declare const SAPSoftwareInstallationType: {
    readonly ServiceInitiated: "ServiceInitiated";
    readonly SAPInstallWithoutOSConfig: "SAPInstallWithoutOSConfig";
    readonly External: "External";
};
/**
 * The SAP software installation Type.
 */
export type SAPSoftwareInstallationType = (typeof SAPSoftwareInstallationType)[keyof typeof SAPSoftwareInstallationType];
export declare const ScheduleRunType: {
    readonly Invalid: "Invalid";
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
    readonly Hourly: "Hourly";
};
/**
 * Frequency of the schedule operation of this policy.
 */
export type ScheduleRunType = (typeof ScheduleRunType)[keyof typeof ScheduleRunType];
export declare const SslCryptoProvider: {
    readonly Commoncrypto: "commoncrypto";
    readonly Openssl: "openssl";
};
/**
 * Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
 */
export type SslCryptoProvider = (typeof SslCryptoProvider)[keyof typeof SslCryptoProvider];
export declare const SslPreference: {
    readonly Disabled: "Disabled";
    readonly RootCertificate: "RootCertificate";
    readonly ServerCertificate: "ServerCertificate";
};
/**
 * Gets or sets certificate preference if secure communication is enabled.
 */
export type SslPreference = (typeof SslPreference)[keyof typeof SslPreference];
export declare const TieringMode: {
    readonly Invalid: "Invalid";
    readonly TierRecommended: "TierRecommended";
    readonly TierAfter: "TierAfter";
    readonly DoNotTier: "DoNotTier";
};
/**
 * Tiering Mode to control automatic tiering of recovery points. Supported values are:
 * 1. TierRecommended: Tier all recovery points recommended to be tiered
 * 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
 * 3. DoNotTier: Do not tier any recovery points
 */
export type TieringMode = (typeof TieringMode)[keyof typeof TieringMode];
export declare const VaultType: {
    readonly Existing: "Existing";
    readonly New: "New";
};
/**
 * The vault type, whether it is existing or has to be created.
 */
export type VaultType = (typeof VaultType)[keyof typeof VaultType];
export declare const WeekOfMonth: {
    readonly First: "First";
    readonly Second: "Second";
    readonly Third: "Third";
    readonly Fourth: "Fourth";
    readonly Last: "Last";
    readonly Invalid: "Invalid";
};
export type WeekOfMonth = (typeof WeekOfMonth)[keyof typeof WeekOfMonth];
export declare const WorkloadType: {
    readonly Invalid: "Invalid";
    readonly VM: "VM";
    readonly FileFolder: "FileFolder";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly SQLDB: "SQLDB";
    readonly Exchange: "Exchange";
    readonly Sharepoint: "Sharepoint";
    readonly VMwareVM: "VMwareVM";
    readonly SystemState: "SystemState";
    readonly Client: "Client";
    readonly GenericDataSource: "GenericDataSource";
    readonly SQLDataBase: "SQLDataBase";
    readonly AzureFileShare: "AzureFileShare";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseDatabase: "SAPAseDatabase";
    readonly SAPHanaDBInstance: "SAPHanaDBInstance";
};
/**
 * Type of workload for the backup management
 */
export type WorkloadType = (typeof WorkloadType)[keyof typeof WorkloadType];
