export declare const ConfigurationType: {
    readonly Skip: "Skip";
    readonly CreateAndMount: "CreateAndMount";
    readonly Mount: "Mount";
};
/**
 * The type of file share config.
 */
export type ConfigurationType = (typeof ConfigurationType)[keyof typeof ConfigurationType];
export declare const DiskSkuName: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Premium_LRS: "Premium_LRS";
    readonly StandardSSD_LRS: "StandardSSD_LRS";
    readonly UltraSSD_LRS: "UltraSSD_LRS";
    readonly Premium_ZRS: "Premium_ZRS";
    readonly StandardSSD_ZRS: "StandardSSD_ZRS";
    readonly PremiumV2_LRS: "PremiumV2_LRS";
};
/**
 * Defines the disk sku name.
 */
export type DiskSkuName = (typeof DiskSkuName)[keyof typeof DiskSkuName];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
};
/**
 * Type of manage identity
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const NamingPatternType: {
    readonly FullResourceName: "FullResourceName";
};
/**
 * The pattern type to be used for resource naming.
 */
export type NamingPatternType = (typeof NamingPatternType)[keyof typeof NamingPatternType];
export declare const OSType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * The OS Type
 */
export type OSType = (typeof OSType)[keyof typeof OSType];
export declare const RoutingPreference: {
    readonly Default: "Default";
    readonly RouteAll: "RouteAll";
};
/**
 * Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
 */
export type RoutingPreference = (typeof RoutingPreference)[keyof typeof RoutingPreference];
export declare const SAPConfigurationType: {
    readonly Deployment: "Deployment";
    readonly Discovery: "Discovery";
    readonly DeploymentWithOSConfig: "DeploymentWithOSConfig";
};
/**
 * The configuration Type.
 */
export type SAPConfigurationType = (typeof SAPConfigurationType)[keyof typeof SAPConfigurationType];
export declare const SAPDatabaseScaleMethod: {
    readonly ScaleUp: "ScaleUp";
};
/**
 * The DB scale method.
 */
export type SAPDatabaseScaleMethod = (typeof SAPDatabaseScaleMethod)[keyof typeof SAPDatabaseScaleMethod];
export declare const SAPDatabaseType: {
    readonly HANA: "HANA";
    readonly DB2: "DB2";
};
/**
 * The database type. Eg: HANA, DB2, etc
 */
export type SAPDatabaseType = (typeof SAPDatabaseType)[keyof typeof SAPDatabaseType];
export declare const SAPDeploymentType: {
    readonly SingleServer: "SingleServer";
    readonly ThreeTier: "ThreeTier";
};
/**
 * The deployment type. Eg: SingleServer/ThreeTier
 */
export type SAPDeploymentType = (typeof SAPDeploymentType)[keyof typeof SAPDeploymentType];
export declare const SAPEnvironmentType: {
    readonly NonProd: "NonProd";
    readonly Prod: "Prod";
};
/**
 * Defines the environment type - Production/Non Production.
 */
export type SAPEnvironmentType = (typeof SAPEnvironmentType)[keyof typeof SAPEnvironmentType];
export declare const SAPHighAvailabilityType: {
    readonly AvailabilitySet: "AvailabilitySet";
    readonly AvailabilityZone: "AvailabilityZone";
};
/**
 * The high availability type.
 */
export type SAPHighAvailabilityType = (typeof SAPHighAvailabilityType)[keyof typeof SAPHighAvailabilityType];
export declare const SAPProductType: {
    readonly ECC: "ECC";
    readonly S4HANA: "S4HANA";
    readonly Other: "Other";
};
/**
 * Defines the SAP Product type.
 */
export type SAPProductType = (typeof SAPProductType)[keyof typeof SAPProductType];
export declare const SAPSoftwareInstallationType: {
    readonly ServiceInitiated: "ServiceInitiated";
    readonly SAPInstallWithoutOSConfig: "SAPInstallWithoutOSConfig";
    readonly External: "External";
};
/**
 * The SAP software installation Type.
 */
export type SAPSoftwareInstallationType = (typeof SAPSoftwareInstallationType)[keyof typeof SAPSoftwareInstallationType];
export declare const SslPreference: {
    readonly Disabled: "Disabled";
    readonly RootCertificate: "RootCertificate";
    readonly ServerCertificate: "ServerCertificate";
};
/**
 * Gets or sets certificate preference if secure communication is enabled.
 */
export type SslPreference = (typeof SslPreference)[keyof typeof SslPreference];
