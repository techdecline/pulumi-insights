export declare const AzureFrontDoorEnabled: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable Azure front door
 */
export type AzureFrontDoorEnabled = (typeof AzureFrontDoorEnabled)[keyof typeof AzureFrontDoorEnabled];
export declare const DatabaseTier: {
    readonly Burstable: "Burstable";
    readonly GeneralPurpose: "GeneralPurpose";
    readonly MemoryOptimized: "MemoryOptimized";
};
/**
 * Tier of the server SKU
 */
export type DatabaseTier = (typeof DatabaseTier)[keyof typeof DatabaseTier];
export declare const DatabaseType: {
    readonly MySql: "MySql";
};
/**
 * Database type
 */
export type DatabaseType = (typeof DatabaseType)[keyof typeof DatabaseType];
export declare const DiskStorageType: {
    readonly Premium_LRS: "Premium_LRS";
    readonly Standard_LRS: "Standard_LRS";
    readonly StandardSSD_LRS: "StandardSSD_LRS";
};
/**
 * Storage type
 */
export type DiskStorageType = (typeof DiskStorageType)[keyof typeof DiskStorageType];
export declare const EnableBackup: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable Azure backup for the workload
 */
export type EnableBackup = (typeof EnableBackup)[keyof typeof EnableBackup];
export declare const EnableSslEnforcement: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable SSL enforcement on the database
 */
export type EnableSslEnforcement = (typeof EnableSslEnforcement)[keyof typeof EnableSslEnforcement];
export declare const FileShareStorageType: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Standard_GRS: "Standard_GRS";
    readonly Standard_ZRS: "Standard_ZRS";
    readonly Premium_LRS: "Premium_LRS";
};
/**
 * File share backing storage type
 */
export type FileShareStorageType = (typeof FileShareStorageType)[keyof typeof FileShareStorageType];
export declare const FileShareType: {
    readonly NfsOnController: "NfsOnController";
    readonly AzureFiles: "AzureFiles";
};
/**
 * Share type
 */
export type FileShareType = (typeof FileShareType)[keyof typeof FileShareType];
export declare const HAEnabled: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable HA for the server
 */
export type HAEnabled = (typeof HAEnabled)[keyof typeof HAEnabled];
export declare const LoadBalancerType: {
    readonly ApplicationGateway: "ApplicationGateway";
    readonly LoadBalancer: "LoadBalancer";
};
/**
 * Load balancer type
 */
export type LoadBalancerType = (typeof LoadBalancerType)[keyof typeof LoadBalancerType];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
};
/**
 * Type of manage identity
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const OSImageOffer: {
    readonly UbuntuServer: "UbuntuServer";
};
/**
 * OS image offer
 */
export type OSImageOffer = (typeof OSImageOffer)[keyof typeof OSImageOffer];
export declare const OSImagePublisher: {
    readonly Canonical: "Canonical";
};
/**
 * OS image publisher
 */
export type OSImagePublisher = (typeof OSImagePublisher)[keyof typeof OSImagePublisher];
export declare const OSImageSku: {
    readonly OSImageSku_18_04_LTS: "18.04-LTS";
    readonly OSImageSku_16_04_LTS: "16.04-LTS";
};
/**
 * OS image sku
 */
export type OSImageSku = (typeof OSImageSku)[keyof typeof OSImageSku];
export declare const OSImageVersion: {
    readonly Latest: "latest";
};
/**
 * OS image version
 */
export type OSImageVersion = (typeof OSImageVersion)[keyof typeof OSImageVersion];
export declare const PHPVersion: {
    readonly PHPVersion_7_2: "7.2";
    readonly PHPVersion_7_3: "7.3";
    readonly PHPVersion_7_4: "7.4";
};
/**
 * PHP version
 */
export type PHPVersion = (typeof PHPVersion)[keyof typeof PHPVersion];
export declare const RedisCacheFamily: {
    readonly C: "C";
    readonly P: "P";
};
/**
 * Cache family
 */
export type RedisCacheFamily = (typeof RedisCacheFamily)[keyof typeof RedisCacheFamily];
export declare const SAPDatabaseScaleMethod: {
    readonly ScaleUp: "ScaleUp";
};
/**
 * The DB scale method.
 */
export type SAPDatabaseScaleMethod = (typeof SAPDatabaseScaleMethod)[keyof typeof SAPDatabaseScaleMethod];
export declare const SAPDatabaseType: {
    readonly HANA: "HANA";
    readonly DB2: "DB2";
};
/**
 * The database type. Eg: HANA, DB2, etc
 */
export type SAPDatabaseType = (typeof SAPDatabaseType)[keyof typeof SAPDatabaseType];
export declare const SAPDeploymentType: {
    readonly SingleServer: "SingleServer";
    readonly ThreeTier: "ThreeTier";
};
/**
 * The deployment type. Eg: SingleServer/ThreeTier
 */
export type SAPDeploymentType = (typeof SAPDeploymentType)[keyof typeof SAPDeploymentType];
export declare const SAPEnvironmentType: {
    readonly NonProd: "NonProd";
    readonly Prod: "Prod";
};
/**
 * Defines the environment type - Production/Non Production.
 */
export type SAPEnvironmentType = (typeof SAPEnvironmentType)[keyof typeof SAPEnvironmentType];
export declare const SAPHighAvailabilityType: {
    readonly AvailabilitySet: "AvailabilitySet";
    readonly AvailabilityZone: "AvailabilityZone";
};
/**
 * The high availability type.
 */
export type SAPHighAvailabilityType = (typeof SAPHighAvailabilityType)[keyof typeof SAPHighAvailabilityType];
export declare const SAPProductType: {
    readonly ECC: "ECC";
    readonly S4HANA: "S4HANA";
    readonly Other: "Other";
};
/**
 * Defines the SAP Product type.
 */
export type SAPProductType = (typeof SAPProductType)[keyof typeof SAPProductType];
export declare const SearchType: {
    readonly Elastic: "Elastic";
};
/**
 * Search type
 */
export type SearchType = (typeof SearchType)[keyof typeof SearchType];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const WordpressVersions: {
    readonly WordpressVersions_5_4_3: "5.4.3";
    readonly WordpressVersions_5_4_2: "5.4.2";
    readonly WordpressVersions_5_4_1: "5.4.1";
    readonly WordpressVersions_5_4: "5.4";
};
/**
 * Application version
 */
export type WordpressVersions = (typeof WordpressVersions)[keyof typeof WordpressVersions];
export declare const WorkloadKind: {
    readonly WordPress: "WordPress";
};
/**
 * Indicates which kind of php workload this resource represent e.g WordPress
 */
export type WorkloadKind = (typeof WorkloadKind)[keyof typeof WorkloadKind];
