export declare const AlertAutoMitigate: {
    /**
     * The alert should be automatically resolved.
     */
    readonly Enable: "Enable";
    /**
     * The alert should not be automatically resolved.
     */
    readonly Disable: "Disable";
};
/**
 * The value that indicates whether the alert should be automatically resolved or not. The default is Disable.
 */
export type AlertAutoMitigate = (typeof AlertAutoMitigate)[keyof typeof AlertAutoMitigate];
export declare const AlertRuleStatus: {
    /**
     * The scheduled query rule is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * The scheduled query rule is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether the alert is in an enabled state.
 */
export type AlertRuleStatus = (typeof AlertRuleStatus)[keyof typeof AlertRuleStatus];
export declare const AppServicePlanTier: {
    /**
     * Elastic Premium plan
     */
    readonly ElasticPremium: "ElasticPremium";
    /**
     * Dedicated Premium V3 plan
     */
    readonly PremiumV3: "PremiumV3";
};
/**
 * The App Service plan tier.
 */
export type AppServicePlanTier = (typeof AppServicePlanTier)[keyof typeof AppServicePlanTier];
export declare const ConditionalOperator: {
    /**
     * The value is less than the specified value.
     */
    readonly LessThan: "LessThan";
    /**
     * The value is greater than the specified value.
     */
    readonly GreaterThan: "GreaterThan";
    /**
     * The value is equal to the specified value.
     */
    readonly Equal: "Equal";
    /**
     * The value is greater than or equal to the specified value.
     */
    readonly GreaterThanOrEqual: "GreaterThanOrEqual";
    /**
     * The value is less than or equal to the specified value.
     */
    readonly LessThanOrEqual: "LessThanOrEqual";
};
/**
 * The threshold operator of the alert.
 */
export type ConditionalOperator = (typeof ConditionalOperator)[keyof typeof ConditionalOperator];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const RoutingPreference: {
    /**
     * Default routing preference. Only RFC1918 traffic is routed to the customer VNET.
     */
    readonly Default: "Default";
    /**
     * Route all traffic to the customer VNET.
     */
    readonly RouteAll: "RouteAll";
};
/**
 * Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
 */
export type RoutingPreference = (typeof RoutingPreference)[keyof typeof RoutingPreference];
export declare const SslPreference: {
    /**
     * Secure communication is disabled.
     */
    readonly Disabled: "Disabled";
    /**
     * Secure communication is enabled with root certificate.
     */
    readonly RootCertificate: "RootCertificate";
    /**
     * Secure communication is enabled with server certificate.
     */
    readonly ServerCertificate: "ServerCertificate";
};
/**
 * Gets or sets certificate preference if secure communication is enabled.
 */
export type SslPreference = (typeof SslPreference)[keyof typeof SslPreference];
