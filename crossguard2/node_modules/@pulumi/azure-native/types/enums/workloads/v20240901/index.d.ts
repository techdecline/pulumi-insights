export declare const DiskSkuName: {
    /**
     * Standard LRS Disk SKU.
     */
    readonly Standard_LRS: "Standard_LRS";
    /**
     * Premium_LRS Disk SKU.
     */
    readonly Premium_LRS: "Premium_LRS";
    /**
     * StandardSSD_LRS Disk SKU.
     */
    readonly StandardSSD_LRS: "StandardSSD_LRS";
    /**
     * UltraSSD_LRS Disk SKU.
     */
    readonly UltraSSD_LRS: "UltraSSD_LRS";
    /**
     * Premium_ZRS Disk SKU.
     */
    readonly Premium_ZRS: "Premium_ZRS";
    /**
     * StandardSSD_ZRS Disk SKU.
     */
    readonly StandardSSD_ZRS: "StandardSSD_ZRS";
    /**
     * PremiumV2_LRS Disk SKU.
     */
    readonly PremiumV2_LRS: "PremiumV2_LRS";
};
/**
 * Defines the disk sku name.
 */
export type DiskSkuName = (typeof DiskSkuName)[keyof typeof DiskSkuName];
export declare const FileShareConfigurationType: {
    /**
     * Skip creating the file share.
     */
    readonly Skip: "Skip";
    /**
     * Fileshare will be created and mounted by service.
     */
    readonly CreateAndMount: "CreateAndMount";
    /**
     * Existing fileshare provided will be mounted by service.
     */
    readonly Mount: "Mount";
};
/**
 * The type of file share config, eg: Mount/CreateAndMount/Skip.
 */
export type FileShareConfigurationType = (typeof FileShareConfigurationType)[keyof typeof FileShareConfigurationType];
export declare const ManagedResourcesNetworkAccessType: {
    /**
     * Managed resources will be deployed with public network access enabled.
     */
    readonly Public: "Public";
    /**
     * Managed resources will be deployed with public network access disabled.
     */
    readonly Private: "Private";
};
/**
 * Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
 */
export type ManagedResourcesNetworkAccessType = (typeof ManagedResourcesNetworkAccessType)[keyof typeof ManagedResourcesNetworkAccessType];
export declare const NamingPatternType: {
    /**
     * Full resource names that will be created by service.
     */
    readonly FullResourceName: "FullResourceName";
};
/**
 * The pattern type to be used for resource naming.
 */
export type NamingPatternType = (typeof NamingPatternType)[keyof typeof NamingPatternType];
export declare const OSType: {
    /**
     * Linux OS Type.
     */
    readonly Linux: "Linux";
    /**
     * Windows OS Type.
     */
    readonly Windows: "Windows";
};
/**
 * The OS Type
 */
export type OSType = (typeof OSType)[keyof typeof OSType];
export declare const SAPConfigurationType: {
    /**
     * SAP system will be deployed by service. No OS configurations will be done.
     */
    readonly Deployment: "Deployment";
    /**
     * Existing SAP system will be registered.
     */
    readonly Discovery: "Discovery";
    /**
     * SAP system will be deployed by service. OS configurations will be done.
     */
    readonly DeploymentWithOSConfig: "DeploymentWithOSConfig";
};
/**
 * The configuration type. Eg: Deployment/Discovery
 */
export type SAPConfigurationType = (typeof SAPConfigurationType)[keyof typeof SAPConfigurationType];
export declare const SAPDatabaseScaleMethod: {
    /**
     * ScaleUp Hana Database deployment type
     */
    readonly ScaleUp: "ScaleUp";
};
/**
 * The DB scale method.
 */
export type SAPDatabaseScaleMethod = (typeof SAPDatabaseScaleMethod)[keyof typeof SAPDatabaseScaleMethod];
export declare const SAPDatabaseType: {
    /**
     * HANA Database type of SAP system.
     */
    readonly HANA: "HANA";
    /**
     * DB2 database type of the SAP system.
     */
    readonly DB2: "DB2";
};
/**
 * The database type.
 */
export type SAPDatabaseType = (typeof SAPDatabaseType)[keyof typeof SAPDatabaseType];
export declare const SAPDeploymentType: {
    /**
     * SAP Single server deployment type.
     */
    readonly SingleServer: "SingleServer";
    /**
     * SAP Distributed deployment type.
     */
    readonly ThreeTier: "ThreeTier";
};
/**
 * The deployment type. Eg: SingleServer/ThreeTier
 */
export type SAPDeploymentType = (typeof SAPDeploymentType)[keyof typeof SAPDeploymentType];
export declare const SAPEnvironmentType: {
    /**
     * Non Production SAP system.
     */
    readonly NonProd: "NonProd";
    /**
     * Production SAP system.
     */
    readonly Prod: "Prod";
};
/**
 * Defines the environment type - Production/Non Production.
 */
export type SAPEnvironmentType = (typeof SAPEnvironmentType)[keyof typeof SAPEnvironmentType];
export declare const SAPHighAvailabilityType: {
    /**
     * HA deployment with availability sets.
     */
    readonly AvailabilitySet: "AvailabilitySet";
    /**
     * HA deployment with availability zones.
     */
    readonly AvailabilityZone: "AvailabilityZone";
};
/**
 * The high availability type.
 */
export type SAPHighAvailabilityType = (typeof SAPHighAvailabilityType)[keyof typeof SAPHighAvailabilityType];
export declare const SAPProductType: {
    /**
     * SAP Product ECC.
     */
    readonly ECC: "ECC";
    /**
     * SAP Product S4HANA.
     */
    readonly S4HANA: "S4HANA";
    /**
     * SAP Products other than the ones listed.
     */
    readonly Other: "Other";
};
/**
 * Defines the SAP Product type.
 */
export type SAPProductType = (typeof SAPProductType)[keyof typeof SAPProductType];
export declare const SAPSoftwareInstallationType: {
    /**
     * SAP Install managed by service.
     */
    readonly ServiceInitiated: "ServiceInitiated";
    /**
     * SAP Install without OS Config.
     */
    readonly SAPInstallWithoutOSConfig: "SAPInstallWithoutOSConfig";
    /**
     * External software installation type.
     */
    readonly External: "External";
};
/**
 * The SAP software installation type.
 */
export type SAPSoftwareInstallationType = (typeof SAPSoftwareInstallationType)[keyof typeof SAPSoftwareInstallationType];
export declare const SAPVirtualInstanceIdentityType: {
    /**
     * No managed identity.
     */
    readonly None: "None";
    /**
     * User assigned managed identity.
     */
    readonly UserAssigned: "UserAssigned";
};
/**
 * The type of managed identity assigned to this resource.
 */
export type SAPVirtualInstanceIdentityType = (typeof SAPVirtualInstanceIdentityType)[keyof typeof SAPVirtualInstanceIdentityType];
