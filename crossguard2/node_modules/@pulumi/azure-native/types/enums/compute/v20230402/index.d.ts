export declare const Architecture: {
    readonly X64: "x64";
    readonly Arm64: "Arm64";
};
/**
 * CPU architecture supported by an OS disk.
 */
export type Architecture = (typeof Architecture)[keyof typeof Architecture];
export declare const CopyCompletionErrorReason: {
    /**
     * Indicates that the source snapshot was deleted while the background copy of the resource created via CopyStart operation was in progress.
     */
    readonly CopySourceNotFound: "CopySourceNotFound";
};
/**
 * Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
 */
export type CopyCompletionErrorReason = (typeof CopyCompletionErrorReason)[keyof typeof CopyCompletionErrorReason];
export declare const DataAccessAuthMode: {
    /**
     * When export/upload URL is used, the system checks if the user has an identity in Azure Active Directory and has necessary permissions to export/upload the data. Please refer to aka.ms/DisksAzureADAuth.
     */
    readonly AzureActiveDirectory: "AzureActiveDirectory";
    /**
     * No additional authentication would be performed when accessing export/upload URL.
     */
    readonly None: "None";
};
/**
 * Additional authentication requirements when exporting or uploading to a disk or snapshot.
 */
export type DataAccessAuthMode = (typeof DataAccessAuthMode)[keyof typeof DataAccessAuthMode];
export declare const DiskCreateOption: {
    /**
     * Create an empty data disk of a size given by diskSizeGB.
     */
    readonly Empty: "Empty";
    /**
     * Disk will be attached to a VM.
     */
    readonly Attach: "Attach";
    /**
     * Create a new disk from a platform image specified by the given imageReference or galleryImageReference.
     */
    readonly FromImage: "FromImage";
    /**
     * Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId.
     */
    readonly Import: "Import";
    /**
     * Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId.
     */
    readonly Copy: "Copy";
    /**
     * Create a new disk by copying from a backup recovery point.
     */
    readonly Restore: "Restore";
    /**
     * Create a new disk by obtaining a write token and using it to directly upload the contents of the disk.
     */
    readonly Upload: "Upload";
    /**
     * Create a new disk by using a deep copy process, where the resource creation is considered complete only after all data has been copied from the source.
     */
    readonly CopyStart: "CopyStart";
    /**
     * Similar to Import create option. Create a new Trusted Launch VM or Confidential VM supported disk by importing additional blob for VM guest state specified by securityDataUri in storage account specified by storageAccountId
     */
    readonly ImportSecure: "ImportSecure";
    /**
     * Similar to Upload create option. Create a new Trusted Launch VM or Confidential VM supported disk and upload using write token in both disk and VM guest state
     */
    readonly UploadPreparedSecure: "UploadPreparedSecure";
    /**
     * Create a new disk by exporting from elastic san volume snapshot
     */
    readonly CopyFromSanSnapshot: "CopyFromSanSnapshot";
};
/**
 * This enumerates the possible sources of a disk's creation.
 */
export type DiskCreateOption = (typeof DiskCreateOption)[keyof typeof DiskCreateOption];
export declare const DiskEncryptionSetIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
 */
export type DiskEncryptionSetIdentityType = (typeof DiskEncryptionSetIdentityType)[keyof typeof DiskEncryptionSetIdentityType];
export declare const DiskEncryptionSetType: {
    /**
     * Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer.
     */
    readonly EncryptionAtRestWithCustomerKey: "EncryptionAtRestWithCustomerKey";
    /**
     * Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
     */
    readonly EncryptionAtRestWithPlatformAndCustomerKeys: "EncryptionAtRestWithPlatformAndCustomerKeys";
    /**
     * Confidential VM supported disk and VM guest state would be encrypted with customer managed key.
     */
    readonly ConfidentialVmEncryptedWithCustomerKey: "ConfidentialVmEncryptedWithCustomerKey";
};
/**
 * The type of key used to encrypt the data of the disk.
 */
export type DiskEncryptionSetType = (typeof DiskEncryptionSetType)[keyof typeof DiskEncryptionSetType];
export declare const DiskSecurityTypes: {
    /**
     * Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM)
     */
    readonly TrustedLaunch: "TrustedLaunch";
    /**
     * Indicates Confidential VM disk with only VM guest state encrypted
     */
    readonly ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey: "ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey";
    /**
     * Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a platform managed key
     */
    readonly ConfidentialVM_DiskEncryptedWithPlatformKey: "ConfidentialVM_DiskEncryptedWithPlatformKey";
    /**
     * Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a customer managed key
     */
    readonly ConfidentialVM_DiskEncryptedWithCustomerKey: "ConfidentialVM_DiskEncryptedWithCustomerKey";
};
/**
 * Specifies the SecurityType of the VM. Applicable for OS disks only.
 */
export type DiskSecurityTypes = (typeof DiskSecurityTypes)[keyof typeof DiskSecurityTypes];
export declare const DiskStorageAccountTypes: {
    /**
     * Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access.
     */
    readonly Standard_LRS: "Standard_LRS";
    /**
     * Premium SSD locally redundant storage. Best for production and performance sensitive workloads.
     */
    readonly Premium_LRS: "Premium_LRS";
    /**
     * Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test.
     */
    readonly StandardSSD_LRS: "StandardSSD_LRS";
    /**
     * Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads.
     */
    readonly UltraSSD_LRS: "UltraSSD_LRS";
    /**
     * Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures.
     */
    readonly Premium_ZRS: "Premium_ZRS";
    /**
     * Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev/test that need storage resiliency against zone failures.
     */
    readonly StandardSSD_ZRS: "StandardSSD_ZRS";
    /**
     * Premium SSD v2 locally redundant storage. Best for production and performance-sensitive workloads that consistently require low latency and high IOPS and throughput.
     */
    readonly PremiumV2_LRS: "PremiumV2_LRS";
};
/**
 * The sku name.
 */
export type DiskStorageAccountTypes = (typeof DiskStorageAccountTypes)[keyof typeof DiskStorageAccountTypes];
export declare const EncryptionType: {
    /**
     * Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets.
     */
    readonly EncryptionAtRestWithPlatformKey: "EncryptionAtRestWithPlatformKey";
    /**
     * Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer.
     */
    readonly EncryptionAtRestWithCustomerKey: "EncryptionAtRestWithCustomerKey";
    /**
     * Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
     */
    readonly EncryptionAtRestWithPlatformAndCustomerKeys: "EncryptionAtRestWithPlatformAndCustomerKeys";
};
/**
 * The type of key used to encrypt the data of the disk.
 */
export type EncryptionType = (typeof EncryptionType)[keyof typeof EncryptionType];
export declare const ExtendedLocationTypes: {
    readonly EdgeZone: "EdgeZone";
};
/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const HyperVGeneration: {
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
 */
export type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];
export declare const NetworkAccessPolicy: {
    /**
     * The disk can be exported or uploaded to from any network.
     */
    readonly AllowAll: "AllowAll";
    /**
     * The disk can be exported or uploaded to using a DiskAccess resource's private endpoints.
     */
    readonly AllowPrivate: "AllowPrivate";
    /**
     * The disk cannot be exported.
     */
    readonly DenyAll: "DenyAll";
};
/**
 * Policy for accessing the disk via network.
 */
export type NetworkAccessPolicy = (typeof NetworkAccessPolicy)[keyof typeof NetworkAccessPolicy];
export declare const OperatingSystemTypes: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * The Operating System type.
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    /**
     * You can generate a SAS URI to access the underlying data of the disk publicly on the internet when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate.
     */
    readonly Enabled: "Enabled";
    /**
     * You cannot access the underlying data of the disk publicly on the internet even when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate.
     */
    readonly Disabled: "Disabled";
};
/**
 * Policy for controlling export on the disk.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const SnapshotStorageAccountTypes: {
    /**
     * Standard HDD locally redundant storage
     */
    readonly Standard_LRS: "Standard_LRS";
    /**
     * Premium SSD locally redundant storage
     */
    readonly Premium_LRS: "Premium_LRS";
    /**
     * Standard zone redundant storage
     */
    readonly Standard_ZRS: "Standard_ZRS";
};
/**
 * The sku name.
 */
export type SnapshotStorageAccountTypes = (typeof SnapshotStorageAccountTypes)[keyof typeof SnapshotStorageAccountTypes];
