export declare const AFDEndpointProtocols: {
    readonly Http: "Http";
    readonly Https: "Https";
};
/**
 * Supported protocols for the customer's endpoint.
 */
export type AFDEndpointProtocols = (typeof AFDEndpointProtocols)[keyof typeof AFDEndpointProtocols];
export declare const AfdQueryStringCachingBehavior: {
    readonly IgnoreQueryString: "IgnoreQueryString";
    readonly UseQueryString: "UseQueryString";
    readonly NotSet: "NotSet";
};
/**
 * Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
 */
export type AfdQueryStringCachingBehavior = (typeof AfdQueryStringCachingBehavior)[keyof typeof AfdQueryStringCachingBehavior];
export declare const EnabledState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
 */
export type EnabledState = (typeof EnabledState)[keyof typeof EnabledState];
export declare const ForwardingProtocol: {
    readonly HttpOnly: "HttpOnly";
    readonly HttpsOnly: "HttpsOnly";
    readonly MatchRequest: "MatchRequest";
};
/**
 * Protocol this rule will use when forwarding traffic to backends.
 */
export type ForwardingProtocol = (typeof ForwardingProtocol)[keyof typeof ForwardingProtocol];
export declare const HealthProbeRequestType: {
    readonly NotSet: "NotSet";
    readonly GET: "GET";
    readonly HEAD: "HEAD";
};
/**
 * The type of health probe request that is made.
 */
export type HealthProbeRequestType = (typeof HealthProbeRequestType)[keyof typeof HealthProbeRequestType];
export declare const HttpsRedirect: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
 */
export type HttpsRedirect = (typeof HttpsRedirect)[keyof typeof HttpsRedirect];
export declare const LinkToDefaultDomain: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * whether this route will be linked to the default endpoint domain.
 */
export type LinkToDefaultDomain = (typeof LinkToDefaultDomain)[keyof typeof LinkToDefaultDomain];
export declare const ProbeProtocol: {
    readonly NotSet: "NotSet";
    readonly Http: "Http";
    readonly Https: "Https";
};
/**
 * Protocol to use for health probe.
 */
export type ProbeProtocol = (typeof ProbeProtocol)[keyof typeof ProbeProtocol];
export declare const ResponseBasedDetectedErrorTypes: {
    readonly None: "None";
    readonly TcpErrorsOnly: "TcpErrorsOnly";
    readonly TcpAndHttpErrors: "TcpAndHttpErrors";
};
/**
 * Type of response errors for real user requests for which origin will be deemed unhealthy
 */
export type ResponseBasedDetectedErrorTypes = (typeof ResponseBasedDetectedErrorTypes)[keyof typeof ResponseBasedDetectedErrorTypes];
export declare const SkuName: {
    readonly Standard_Verizon: "Standard_Verizon";
    readonly Premium_Verizon: "Premium_Verizon";
    readonly Custom_Verizon: "Custom_Verizon";
    readonly Standard_Akamai: "Standard_Akamai";
    readonly Standard_ChinaCdn: "Standard_ChinaCdn";
    readonly Standard_Microsoft: "Standard_Microsoft";
    readonly Premium_ChinaCdn: "Premium_ChinaCdn";
    readonly Standard_AzureFrontDoor: "Standard_AzureFrontDoor";
    readonly Premium_AzureFrontDoor: "Premium_AzureFrontDoor";
    readonly Standard_955BandWidth_ChinaCdn: "Standard_955BandWidth_ChinaCdn";
    readonly Standard_AvgBandWidth_ChinaCdn: "Standard_AvgBandWidth_ChinaCdn";
    readonly StandardPlus_ChinaCdn: "StandardPlus_ChinaCdn";
    readonly StandardPlus_955BandWidth_ChinaCdn: "StandardPlus_955BandWidth_ChinaCdn";
    readonly StandardPlus_AvgBandWidth_ChinaCdn: "StandardPlus_AvgBandWidth_ChinaCdn";
};
/**
 * Name of the pricing tier.
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
