import * as v20170801preview from "./v20170801preview";
import * as v20190101preview from "./v20190101preview";
import * as v20190801 from "./v20190801";
import * as v20200101 from "./v20200101";
import * as v20200101preview from "./v20200101preview";
import * as v20210601 from "./v20210601";
import * as v20210701preview from "./v20210701preview";
import * as v20210801preview from "./v20210801preview";
import * as v20220101preview from "./v20220101preview";
import * as v20220701preview from "./v20220701preview";
import * as v20230301preview from "./v20230301preview";
import * as v20230501 from "./v20230501";
import * as v20230901preview from "./v20230901preview";
import * as v20231001preview from "./v20231001preview";
import * as v20231201preview from "./v20231201preview";
import * as v20240101 from "./v20240101";
import * as v20240301preview from "./v20240301preview";
import * as v20240401 from "./v20240401";
import * as v20240515preview from "./v20240515preview";
import * as v20240701preview from "./v20240701preview";
import * as v20240801 from "./v20240801";
import * as v20240801preview from "./v20240801preview";
export { v20170801preview, v20190101preview, v20190801, v20200101, v20200101preview, v20210601, v20210701preview, v20210801preview, v20220101preview, v20220701preview, v20230301preview, v20230501, v20230901preview, v20231001preview, v20231201preview, v20240101, v20240301preview, v20240401, v20240515preview, v20240701preview, v20240801, v20240801preview, };
export declare const ActionType: {
    readonly LogicApp: "LogicApp";
    readonly EventHub: "EventHub";
    readonly Workspace: "Workspace";
};
/**
 * The type of the action that will be triggered by the Automation
 */
export type ActionType = (typeof ActionType)[keyof typeof ActionType];
export declare const AdditionalWorkspaceDataType: {
    readonly Alerts: "Alerts";
    readonly RawEvents: "RawEvents";
};
/**
 * Data types sent to workspace.
 */
export type AdditionalWorkspaceDataType = (typeof AdditionalWorkspaceDataType)[keyof typeof AdditionalWorkspaceDataType];
export declare const AdditionalWorkspaceType: {
    readonly Sentinel: "Sentinel";
};
/**
 * Workspace type.
 */
export type AdditionalWorkspaceType = (typeof AdditionalWorkspaceType)[keyof typeof AdditionalWorkspaceType];
export declare const ApplicationSourceResourceType: {
    /**
     * The source of the application is assessments
     */
    readonly Assessments: "Assessments";
};
/**
 * The application source, what it affects, e.g. Assessments
 */
export type ApplicationSourceResourceType = (typeof ApplicationSourceResourceType)[keyof typeof ApplicationSourceResourceType];
export declare const AssessmentStatusCode: {
    /**
     * The resource is healthy
     */
    readonly Healthy: "Healthy";
    /**
     * The resource has a security issue that needs to be addressed
     */
    readonly Unhealthy: "Unhealthy";
    /**
     * Assessment for this resource did not happen
     */
    readonly NotApplicable: "NotApplicable";
};
/**
 * Programmatic code for the status of the assessment
 */
export type AssessmentStatusCode = (typeof AssessmentStatusCode)[keyof typeof AssessmentStatusCode];
export declare const AssessmentType: {
    /**
     * Microsoft Defender for Cloud managed assessments
     */
    readonly BuiltIn: "BuiltIn";
    /**
     * User defined policies that are automatically ingested from Azure Policy to Microsoft Defender for Cloud
     */
    readonly CustomPolicy: "CustomPolicy";
    /**
     * User assessments pushed directly by the user or other third party to Microsoft Defender for Cloud
     */
    readonly CustomerManaged: "CustomerManaged";
};
/**
 * BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
 */
export type AssessmentType = (typeof AssessmentType)[keyof typeof AssessmentType];
export declare const AttestationComplianceState: {
    readonly Unknown: "unknown";
    readonly Compliant: "compliant";
    readonly NonCompliant: "nonCompliant";
};
/**
 * Attest category of this assignment
 */
export type AttestationComplianceState = (typeof AttestationComplianceState)[keyof typeof AttestationComplianceState];
export declare const AuthenticationType: {
    /**
     * AWS cloud account connector user credentials authentication
     */
    readonly AwsCreds: "awsCreds";
    /**
     * AWS account connector assume role authentication
     */
    readonly AwsAssumeRole: "awsAssumeRole";
    /**
     * GCP account connector service to service authentication
     */
    readonly GcpCredentials: "gcpCredentials";
};
/**
 * Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
 */
export type AuthenticationType = (typeof AuthenticationType)[keyof typeof AuthenticationType];
export declare const AutoDiscovery: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
    readonly NotApplicable: "NotApplicable";
};
/**
 * AutoDiscovery states.
 */
export type AutoDiscovery = (typeof AutoDiscovery)[keyof typeof AutoDiscovery];
export declare const AutoProvision: {
    /**
     * Install missing Azure Arc agents on machines automatically
     */
    readonly On: "On";
    /**
     * Do not install Azure Arc agent on the machines automatically
     */
    readonly Off: "Off";
};
/**
 * Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
 */
export type AutoProvision = (typeof AutoProvision)[keyof typeof AutoProvision];
export declare const Categories: {
    readonly Compute: "Compute";
    readonly Networking: "Networking";
    readonly Data: "Data";
    readonly IdentityAndAccess: "IdentityAndAccess";
    readonly IoT: "IoT";
};
/**
 * The categories of resource that is at risk when the assessment is unhealthy
 */
export type Categories = (typeof Categories)[keyof typeof Categories];
export declare const CloudName: {
    readonly Azure: "Azure";
    readonly AWS: "AWS";
    readonly GCP: "GCP";
    readonly Github: "Github";
    readonly AzureDevOps: "AzureDevOps";
    readonly GitLab: "GitLab";
};
/**
 * The multi cloud resource's cloud name.
 */
export type CloudName = (typeof CloudName)[keyof typeof CloudName];
export declare const DataSource: {
    /**
     * Devices twin data
     */
    readonly TwinData: "TwinData";
};
export type DataSource = (typeof DataSource)[keyof typeof DataSource];
export declare const DescendantBehavior: {
    readonly Unknown: "Unknown";
    readonly Override: "Override";
    readonly FallBack: "FallBack";
};
/**
 * The behavior of a policy on descendant resources.
 */
export type DescendantBehavior = (typeof DescendantBehavior)[keyof typeof DescendantBehavior];
export declare const DevOpsPolicyType: {
    readonly Unknown: "Unknown";
    readonly Pipeline: "Pipeline";
};
/**
 * DevOps Policy resource types.
 */
export type DevOpsPolicyType = (typeof DevOpsPolicyType)[keyof typeof DevOpsPolicyType];
export declare const DevOpsProvisioningState: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
    readonly Pending: "Pending";
    readonly PendingDeletion: "PendingDeletion";
    readonly DeletionSuccess: "DeletionSuccess";
    readonly DeletionFailure: "DeletionFailure";
};
/**
 * The provisioning state of the resource.
 *
 * Pending - Provisioning pending.
 * Failed - Provisioning failed.
 * Succeeded - Successful provisioning.
 * Canceled - Provisioning canceled.
 * PendingDeletion - Deletion pending.
 * DeletionSuccess - Deletion successful.
 * DeletionFailure - Deletion failure.
 */
export type DevOpsProvisioningState = (typeof DevOpsProvisioningState)[keyof typeof DevOpsProvisioningState];
export declare const Effect: {
    readonly Audit: "Audit";
    readonly Exempt: "Exempt";
    readonly Attest: "Attest";
};
/**
 * Expected effect of this assignment (Audit/Exempt/Attest)
 */
export type Effect = (typeof Effect)[keyof typeof Effect];
export declare const Enforce: {
    /**
     * Allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False")
     */
    readonly False: "False";
    /**
     * Prevents overrides and forces the current scope's pricing configuration to all descendants
     */
    readonly True: "True";
};
/**
 * If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
 */
export type Enforce = (typeof Enforce)[keyof typeof Enforce];
export declare const EnvironmentType: {
    readonly AwsAccount: "AwsAccount";
    readonly GcpProject: "GcpProject";
    readonly GithubScope: "GithubScope";
    readonly AzureDevOpsScope: "AzureDevOpsScope";
    readonly GitlabScope: "GitlabScope";
};
/**
 * The type of the environment data.
 */
export type EnvironmentType = (typeof EnvironmentType)[keyof typeof EnvironmentType];
export declare const EventSource: {
    readonly Assessments: "Assessments";
    readonly AssessmentsSnapshot: "AssessmentsSnapshot";
    readonly SubAssessments: "SubAssessments";
    readonly SubAssessmentsSnapshot: "SubAssessmentsSnapshot";
    readonly Alerts: "Alerts";
    readonly SecureScores: "SecureScores";
    readonly SecureScoresSnapshot: "SecureScoresSnapshot";
    readonly SecureScoreControls: "SecureScoreControls";
    readonly SecureScoreControlsSnapshot: "SecureScoreControlsSnapshot";
    readonly RegulatoryComplianceAssessment: "RegulatoryComplianceAssessment";
    readonly RegulatoryComplianceAssessmentSnapshot: "RegulatoryComplianceAssessmentSnapshot";
};
/**
 * A valid event source type.
 */
export type EventSource = (typeof EventSource)[keyof typeof EventSource];
export declare const ExemptionCategory: {
    readonly Waiver: "waiver";
    readonly Mitigated: "mitigated";
};
/**
 * Exemption category of this assignment
 */
export type ExemptionCategory = (typeof ExemptionCategory)[keyof typeof ExemptionCategory];
export declare const ExportData: {
    /**
     * Agent raw events
     */
    readonly RawEvents: "RawEvents";
};
export type ExportData = (typeof ExportData)[keyof typeof ExportData];
export declare const GovernanceRuleOwnerSourceType: {
    /**
     * The rule source type defined using resource tag
     */
    readonly ByTag: "ByTag";
    /**
     * The rule source type defined manually
     */
    readonly Manually: "Manually";
};
/**
 * The owner type for the governance rule owner source
 */
export type GovernanceRuleOwnerSourceType = (typeof GovernanceRuleOwnerSourceType)[keyof typeof GovernanceRuleOwnerSourceType];
export declare const GovernanceRuleSourceResourceType: {
    /**
     * The source of the governance rule is assessments
     */
    readonly Assessments: "Assessments";
};
/**
 * The governance rule source, what the rule affects, e.g. Assessments
 */
export type GovernanceRuleSourceResourceType = (typeof GovernanceRuleSourceResourceType)[keyof typeof GovernanceRuleSourceResourceType];
export declare const GovernanceRuleType: {
    /**
     * The source of the rule type definition is integrated
     */
    readonly Integrated: "Integrated";
    /**
     * The source of the rule type definition is ServiceNow
     */
    readonly ServiceNow: "ServiceNow";
};
/**
 * The rule type of the governance rule, defines the source of the rule e.g. Integrated
 */
export type GovernanceRuleType = (typeof GovernanceRuleType)[keyof typeof GovernanceRuleType];
export declare const ImplementationEffort: {
    readonly Low: "Low";
    readonly Moderate: "Moderate";
    readonly High: "High";
};
/**
 * The implementation effort required to remediate this assessment
 */
export type ImplementationEffort = (typeof ImplementationEffort)[keyof typeof ImplementationEffort];
export declare const IsEnabled: {
    /**
     * Indicates the extension is enabled
     */
    readonly True: "True";
    /**
     * Indicates the extension is disabled
     */
    readonly False: "False";
};
/**
 * Indicates whether the extension is enabled.
 */
export type IsEnabled = (typeof IsEnabled)[keyof typeof IsEnabled];
export declare const MinimalSeverity: {
    /**
     * Get notifications on new alerts with High severity
     */
    readonly High: "High";
    /**
     * Get notifications on new alerts with medium or high severity
     */
    readonly Medium: "Medium";
    /**
     * Don't get notifications on new alerts with low, medium or high severity
     */
    readonly Low: "Low";
};
/**
 * Defines the minimal alert severity which will be sent as email notifications
 */
export type MinimalSeverity = (typeof MinimalSeverity)[keyof typeof MinimalSeverity];
export declare const OfferingType: {
    readonly CspmMonitorAws: "CspmMonitorAws";
    readonly DefenderForContainersAws: "DefenderForContainersAws";
    readonly DefenderForServersAws: "DefenderForServersAws";
    readonly DefenderForDatabasesAws: "DefenderForDatabasesAws";
    readonly InformationProtectionAws: "InformationProtectionAws";
    readonly CspmMonitorGcp: "CspmMonitorGcp";
    readonly CspmMonitorGithub: "CspmMonitorGithub";
    readonly CspmMonitorAzureDevOps: "CspmMonitorAzureDevOps";
    readonly DefenderForServersGcp: "DefenderForServersGcp";
    readonly DefenderForContainersGcp: "DefenderForContainersGcp";
    readonly DefenderForDatabasesGcp: "DefenderForDatabasesGcp";
    readonly DefenderCspmAws: "DefenderCspmAws";
    readonly DefenderCspmGcp: "DefenderCspmGcp";
    readonly DefenderForDevOpsGithub: "DefenderForDevOpsGithub";
    readonly DefenderForDevOpsAzureDevOps: "DefenderForDevOpsAzureDevOps";
    readonly CspmMonitorGitLab: "CspmMonitorGitLab";
    readonly DefenderForDevOpsGitLab: "DefenderForDevOpsGitLab";
};
/**
 * The type of the security offering.
 */
export type OfferingType = (typeof OfferingType)[keyof typeof OfferingType];
export declare const Operator: {
    /**
     * Applies for decimal and non-decimal operands
     */
    readonly Equals: "Equals";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThan: "GreaterThan";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThan: "LesserThan";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThanOrEqualTo: "LesserThanOrEqualTo";
    /**
     * Applies  for decimal and non-decimal operands
     */
    readonly NotEquals: "NotEquals";
    /**
     * Applies only for non-decimal operands
     */
    readonly Contains: "Contains";
    /**
     * Applies only for non-decimal operands
     */
    readonly StartsWith: "StartsWith";
    /**
     * Applies only for non-decimal operands
     */
    readonly EndsWith: "EndsWith";
};
/**
 * A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
 */
export type Operator = (typeof Operator)[keyof typeof Operator];
export declare const OrganizationMembershipType: {
    readonly Member: "Member";
    readonly Organization: "Organization";
};
/**
 * The multi cloud account's membership type in the organization
 */
export type OrganizationMembershipType = (typeof OrganizationMembershipType)[keyof typeof OrganizationMembershipType];
export declare const PricingTier: {
    /**
     * Get free Microsoft Defender for Cloud experience with basic security features
     */
    readonly Free: "Free";
    /**
     * Get the standard Microsoft Defender for Cloud experience with advanced security features
     */
    readonly Standard: "Standard";
};
/**
 * Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
 */
export type PricingTier = (typeof PricingTier)[keyof typeof PricingTier];
export declare const PropertyType: {
    readonly String: "String";
    readonly Integer: "Integer";
    readonly Number: "Number";
    readonly Boolean: "Boolean";
};
/**
 * The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
 */
export type PropertyType = (typeof PropertyType)[keyof typeof PropertyType];
export declare const Protocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
    readonly All: "*";
};
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const RecommendationConfigStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Recommendation status. When the recommendation status is disabled recommendations are not generated.
 */
export type RecommendationConfigStatus = (typeof RecommendationConfigStatus)[keyof typeof RecommendationConfigStatus];
export declare const RecommendationSupportedClouds: {
    readonly Azure: "Azure";
    readonly AWS: "AWS";
    readonly GCP: "GCP";
};
/**
 * The cloud that the recommendation is supported on.
 */
export type RecommendationSupportedClouds = (typeof RecommendationSupportedClouds)[keyof typeof RecommendationSupportedClouds];
export declare const RecommendationType: {
    /**
     * Authentication schema used for pull an edge module from an ACR repository does not use Service Principal Authentication.
     */
    readonly IoT_ACRAuthentication: "IoT_ACRAuthentication";
    /**
     * IoT agent message size capacity is currently underutilized, causing an increase in the number of sent messages. Adjust message intervals for better utilization.
     */
    readonly IoT_AgentSendsUnutilizedMessages: "IoT_AgentSendsUnutilizedMessages";
    /**
     * Identified security related system configuration issues.
     */
    readonly IoT_Baseline: "IoT_Baseline";
    /**
     * You can optimize Edge Hub memory usage by turning off protocol heads for any protocols not used by Edge modules in your solution.
     */
    readonly IoT_EdgeHubMemOptimize: "IoT_EdgeHubMemOptimize";
    /**
     * Logging is disabled for this edge module.
     */
    readonly IoT_EdgeLoggingOptions: "IoT_EdgeLoggingOptions";
    /**
     * A minority within a device security group has inconsistent Edge Module settings with the rest of their group.
     */
    readonly IoT_InconsistentModuleSettings: "IoT_InconsistentModuleSettings";
    /**
     * Install the Azure Security of Things Agent.
     */
    readonly IoT_InstallAgent: "IoT_InstallAgent";
    /**
     * IP Filter Configuration should have rules defined for allowed traffic and should deny all other traffic by default.
     */
    readonly IoT_IPFilter_DenyAll: "IoT_IPFilter_DenyAll";
    /**
     * An Allow IP Filter rules source IP range is too large. Overly permissive rules might expose your IoT hub to malicious intenders.
     */
    readonly IoT_IPFilter_PermissiveRule: "IoT_IPFilter_PermissiveRule";
    /**
     * A listening endpoint was found on the device.
     */
    readonly IoT_OpenPorts: "IoT_OpenPorts";
    /**
     * An Allowed firewall policy was found (INPUT/OUTPUT). The policy should Deny all traffic by default and define rules to allow necessary communication to/from the device.
     */
    readonly IoT_PermissiveFirewallPolicy: "IoT_PermissiveFirewallPolicy";
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    readonly IoT_PermissiveInputFirewallRules: "IoT_PermissiveInputFirewallRules";
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    readonly IoT_PermissiveOutputFirewallRules: "IoT_PermissiveOutputFirewallRules";
    /**
     * Edge module is configured to run in privileged mode, with extensive Linux capabilities or with host-level network access (send/receive data to host machine).
     */
    readonly IoT_PrivilegedDockerOptions: "IoT_PrivilegedDockerOptions";
    /**
     * Same authentication credentials to the IoT Hub used by multiple devices. This could indicate an illegitimate device impersonating a legitimate device. It also exposes the risk of device impersonation by an attacker.
     */
    readonly IoT_SharedCredentials: "IoT_SharedCredentials";
    /**
     * Insecure TLS configurations detected. Immediate upgrade recommended.
     */
    readonly IoT_VulnerableTLSCipherSuite: "IoT_VulnerableTLSCipherSuite";
};
/**
 * The type of IoT Security recommendation.
 */
export type RecommendationType = (typeof RecommendationType)[keyof typeof RecommendationType];
export declare const Roles: {
    /**
     * If enabled, send notification on new alerts to the account admins
     */
    readonly AccountAdmin: "AccountAdmin";
    /**
     * If enabled, send notification on new alerts to the service admins
     */
    readonly ServiceAdmin: "ServiceAdmin";
    /**
     * If enabled, send notification on new alerts to the subscription owners
     */
    readonly Owner: "Owner";
    /**
     * If enabled, send notification on new alerts to the subscription contributors
     */
    readonly Contributor: "Contributor";
};
/**
 * A possible role to configure sending security notification alerts to
 */
export type Roles = (typeof Roles)[keyof typeof Roles];
export declare const RuleState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly Expired: "Expired";
};
/**
 * Possible states of the rule
 */
export type RuleState = (typeof RuleState)[keyof typeof RuleState];
export declare const ScanningMode: {
    readonly Default: "Default";
};
/**
 * The scanning mode for the VM scan.
 */
export type ScanningMode = (typeof ScanningMode)[keyof typeof ScanningMode];
export declare const SecurityIssue: {
    readonly Vulnerability: "Vulnerability";
    readonly ExcessivePermissions: "ExcessivePermissions";
    readonly AnonymousAccess: "AnonymousAccess";
    readonly NetworkExposure: "NetworkExposure";
    readonly TrafficEncryption: "TrafficEncryption";
    readonly BestPractices: "BestPractices";
};
/**
 * The severity to relate to the assessments generated by this Recommendation.
 */
export type SecurityIssue = (typeof SecurityIssue)[keyof typeof SecurityIssue];
export declare const SecuritySolutionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Status of the IoT Security solution.
 */
export type SecuritySolutionStatus = (typeof SecuritySolutionStatus)[keyof typeof SecuritySolutionStatus];
export declare const ServerVulnerabilityAssessmentsAzureSettingSelectedProvider: {
    /**
     * Microsoft Defender for Endpoints threat and vulnerability management.
     */
    readonly MdeTvm: "MdeTvm";
};
/**
 * The selected vulnerability assessments provider on Azure servers in the defined scope.
 */
export type ServerVulnerabilityAssessmentsAzureSettingSelectedProvider = (typeof ServerVulnerabilityAssessmentsAzureSettingSelectedProvider)[keyof typeof ServerVulnerabilityAssessmentsAzureSettingSelectedProvider];
export declare const ServerVulnerabilityAssessmentsSettingKind: {
    readonly AzureServersSetting: "AzureServersSetting";
};
/**
 * The kind of the server vulnerability assessments setting.
 */
export type ServerVulnerabilityAssessmentsSettingKind = (typeof ServerVulnerabilityAssessmentsSettingKind)[keyof typeof ServerVulnerabilityAssessmentsSettingKind];
export declare const Severity: {
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
};
/**
 * The severity level of the assessment
 */
export type Severity = (typeof Severity)[keyof typeof Severity];
export declare const SeverityEnum: {
    readonly High: "High";
    readonly Medium: "Medium";
    readonly Low: "Low";
};
/**
 * The severity to relate to the assessments generated by this Recommendation.
 */
export type SeverityEnum = (typeof SeverityEnum)[keyof typeof SeverityEnum];
export declare const Source: {
    /**
     * Resource is in Azure
     */
    readonly Azure: "Azure";
    /**
     * Resource in an on premise machine connected to Azure cloud
     */
    readonly OnPremise: "OnPremise";
    /**
     * SQL Resource in an on premise machine connected to Azure cloud
     */
    readonly OnPremiseSql: "OnPremiseSql";
};
/**
 * The platform where the assessed resource resides
 */
export type Source = (typeof Source)[keyof typeof Source];
export declare const StandardSupportedCloud: {
    readonly Azure: "Azure";
    readonly AWS: "AWS";
    readonly GCP: "GCP";
};
/**
 * The cloud that the standard is supported on.
 */
export type StandardSupportedCloud = (typeof StandardSupportedCloud)[keyof typeof StandardSupportedCloud];
export declare const StandardSupportedClouds: {
    readonly AWS: "AWS";
    readonly GCP: "GCP";
};
/**
 * The cloud that the standard is supported on.
 */
export type StandardSupportedClouds = (typeof StandardSupportedClouds)[keyof typeof StandardSupportedClouds];
export declare const State: {
    /**
     * Send notification on new alerts to the subscription's admins
     */
    readonly On: "On";
    /**
     * Don't send notification on new alerts to the subscription's admins
     */
    readonly Off: "Off";
};
/**
 * Defines whether to send email notifications from AMicrosoft Defender for Cloud to persons with specific RBAC roles on the subscription.
 */
export type State = (typeof State)[keyof typeof State];
export declare const Status: {
    readonly Revoked: "Revoked";
    readonly Initiated: "Initiated";
};
/**
 * The status of the port
 */
export type Status = (typeof Status)[keyof typeof Status];
export declare const StatusReason: {
    readonly Expired: "Expired";
    readonly UserRequested: "UserRequested";
    readonly NewerRequestInitiated: "NewerRequestInitiated";
};
/**
 * A description of why the `status` has its value
 */
export type StatusReason = (typeof StatusReason)[keyof typeof StatusReason];
export declare const SubPlan: {
    readonly P1: "P1";
    readonly P2: "P2";
};
/**
 * The available sub plans
 */
export type SubPlan = (typeof SubPlan)[keyof typeof SubPlan];
export declare const SupportedCloudEnum: {
    readonly AWS: "AWS";
    readonly GCP: "GCP";
};
/**
 * Relevant cloud for the custom assessment automation.
 */
export type SupportedCloudEnum = (typeof SupportedCloudEnum)[keyof typeof SupportedCloudEnum];
export declare const Tactics: {
    readonly Reconnaissance: "Reconnaissance";
    readonly Resource_Development: "Resource Development";
    readonly Initial_Access: "Initial Access";
    readonly Execution: "Execution";
    readonly Persistence: "Persistence";
    readonly Privilege_Escalation: "Privilege Escalation";
    readonly Defense_Evasion: "Defense Evasion";
    readonly Credential_Access: "Credential Access";
    readonly Discovery: "Discovery";
    readonly Lateral_Movement: "Lateral Movement";
    readonly Collection: "Collection";
    readonly Command_and_Control: "Command and Control";
    readonly Exfiltration: "Exfiltration";
    readonly Impact: "Impact";
};
/**
 * Tactic of the assessment
 */
export type Tactics = (typeof Tactics)[keyof typeof Tactics];
export declare const Techniques: {
    readonly Abuse_Elevation_Control_Mechanism: "Abuse Elevation Control Mechanism";
    readonly Access_Token_Manipulation: "Access Token Manipulation";
    readonly Account_Discovery: "Account Discovery";
    readonly Account_Manipulation: "Account Manipulation";
    readonly Active_Scanning: "Active Scanning";
    readonly Application_Layer_Protocol: "Application Layer Protocol";
    readonly Audio_Capture: "Audio Capture";
    readonly Boot_or_Logon_Autostart_Execution: "Boot or Logon Autostart Execution";
    readonly Boot_or_Logon_Initialization_Scripts: "Boot or Logon Initialization Scripts";
    readonly Brute_Force: "Brute Force";
    readonly Cloud_Infrastructure_Discovery: "Cloud Infrastructure Discovery";
    readonly Cloud_Service_Dashboard: "Cloud Service Dashboard";
    readonly Cloud_Service_Discovery: "Cloud Service Discovery";
    readonly Command_and_Scripting_Interpreter: "Command and Scripting Interpreter";
    readonly Compromise_Client_Software_Binary: "Compromise Client Software Binary";
    readonly Compromise_Infrastructure: "Compromise Infrastructure";
    readonly Container_and_Resource_Discovery: "Container and Resource Discovery";
    readonly Create_Account: "Create Account";
    readonly Create_or_Modify_System_Process: "Create or Modify System Process";
    readonly Credentials_from_Password_Stores: "Credentials from Password Stores";
    readonly Data_Destruction: "Data Destruction";
    readonly Data_Encrypted_for_Impact: "Data Encrypted for Impact";
    readonly Data_from_Cloud_Storage_Object: "Data from Cloud Storage Object";
    readonly Data_from_Configuration_Repository: "Data from Configuration Repository";
    readonly Data_from_Information_Repositories: "Data from Information Repositories";
    readonly Data_from_Local_System: "Data from Local System";
    readonly Data_Manipulation: "Data Manipulation";
    readonly Data_Staged: "Data Staged";
    readonly Defacement: "Defacement";
    readonly Deobfuscate_Decode_Files_or_Information: "Deobfuscate/Decode Files or Information";
    readonly Disk_Wipe: "Disk Wipe";
    readonly Domain_Trust_Discovery: "Domain Trust Discovery";
    readonly Drive_by_Compromise: "Drive-by Compromise";
    readonly Dynamic_Resolution: "Dynamic Resolution";
    readonly Endpoint_Denial_of_Service: "Endpoint Denial of Service";
    readonly Event_Triggered_Execution: "Event Triggered Execution";
    readonly Exfiltration_Over_Alternative_Protocol: "Exfiltration Over Alternative Protocol";
    readonly Exploit_Public_Facing_Application: "Exploit Public-Facing Application";
    readonly Exploitation_for_Client_Execution: "Exploitation for Client Execution";
    readonly Exploitation_for_Credential_Access: "Exploitation for Credential Access";
    readonly Exploitation_for_Defense_Evasion: "Exploitation for Defense Evasion";
    readonly Exploitation_for_Privilege_Escalation: "Exploitation for Privilege Escalation";
    readonly Exploitation_of_Remote_Services: "Exploitation of Remote Services";
    readonly External_Remote_Services: "External Remote Services";
    readonly Fallback_Channels: "Fallback Channels";
    readonly File_and_Directory_Discovery: "File and Directory Discovery";
    readonly Gather_Victim_Network_Information: "Gather Victim Network Information";
    readonly Hide_Artifacts: "Hide Artifacts";
    readonly Hijack_Execution_Flow: "Hijack Execution Flow";
    readonly Impair_Defenses: "Impair Defenses";
    readonly Implant_Container_Image: "Implant Container Image";
    readonly Indicator_Removal_on_Host: "Indicator Removal on Host";
    readonly Indirect_Command_Execution: "Indirect Command Execution";
    readonly Ingress_Tool_Transfer: "Ingress Tool Transfer";
    readonly Input_Capture: "Input Capture";
    readonly Inter_Process_Communication: "Inter-Process Communication";
    readonly Lateral_Tool_Transfer: "Lateral Tool Transfer";
    readonly Man_in_the_Middle: "Man-in-the-Middle";
    readonly Masquerading: "Masquerading";
    readonly Modify_Authentication_Process: "Modify Authentication Process";
    readonly Modify_Registry: "Modify Registry";
    readonly Network_Denial_of_Service: "Network Denial of Service";
    readonly Network_Service_Scanning: "Network Service Scanning";
    readonly Network_Sniffing: "Network Sniffing";
    readonly Non_Application_Layer_Protocol: "Non-Application Layer Protocol";
    readonly Non_Standard_Port: "Non-Standard Port";
    readonly Obtain_Capabilities: "Obtain Capabilities";
    readonly Obfuscated_Files_or_Information: "Obfuscated Files or Information";
    readonly Office_Application_Startup: "Office Application Startup";
    readonly OS_Credential_Dumping: "OS Credential Dumping";
    readonly Permission_Groups_Discovery: "Permission Groups Discovery";
    readonly Phishing: "Phishing";
    readonly Pre_OS_Boot: "Pre-OS Boot";
    readonly Process_Discovery: "Process Discovery";
    readonly Process_Injection: "Process Injection";
    readonly Protocol_Tunneling: "Protocol Tunneling";
    readonly Proxy: "Proxy";
    readonly Query_Registry: "Query Registry";
    readonly Remote_Access_Software: "Remote Access Software";
    readonly Remote_Service_Session_Hijacking: "Remote Service Session Hijacking";
    readonly Remote_Services: "Remote Services";
    readonly Remote_System_Discovery: "Remote System Discovery";
    readonly Resource_Hijacking: "Resource Hijacking";
    readonly Scheduled_Task_Job: "Scheduled Task/Job";
    readonly Screen_Capture: "Screen Capture";
    readonly Search_Victim_Owned_Websites: "Search Victim-Owned Websites";
    readonly Server_Software_Component: "Server Software Component";
    readonly Service_Stop: "Service Stop";
    readonly Signed_Binary_Proxy_Execution: "Signed Binary Proxy Execution";
    readonly Software_Deployment_Tools: "Software Deployment Tools";
    readonly SQL_Stored_Procedures: "SQL Stored Procedures";
    readonly Steal_or_Forge_Kerberos_Tickets: "Steal or Forge Kerberos Tickets";
    readonly Subvert_Trust_Controls: "Subvert Trust Controls";
    readonly Supply_Chain_Compromise: "Supply Chain Compromise";
    readonly System_Information_Discovery: "System Information Discovery";
    readonly Taint_Shared_Content: "Taint Shared Content";
    readonly Traffic_Signaling: "Traffic Signaling";
    readonly Transfer_Data_to_Cloud_Account: "Transfer Data to Cloud Account";
    readonly Trusted_Relationship: "Trusted Relationship";
    readonly Unsecured_Credentials: "Unsecured Credentials";
    readonly User_Execution: "User Execution";
    readonly Valid_Accounts: "Valid Accounts";
    readonly Windows_Management_Instrumentation: "Windows Management Instrumentation";
    readonly File_and_Directory_Permissions_Modification: "File and Directory Permissions Modification";
};
/**
 * Techniques of the assessment
 */
export type Techniques = (typeof Techniques)[keyof typeof Techniques];
export declare const Threats: {
    readonly AccountBreach: "accountBreach";
    readonly DataExfiltration: "dataExfiltration";
    readonly DataSpillage: "dataSpillage";
    readonly MaliciousInsider: "maliciousInsider";
    readonly ElevationOfPrivilege: "elevationOfPrivilege";
    readonly ThreatResistance: "threatResistance";
    readonly MissingCoverage: "missingCoverage";
    readonly DenialOfService: "denialOfService";
};
/**
 * Threats impact of the assessment
 */
export type Threats = (typeof Threats)[keyof typeof Threats];
export declare const Type: {
    readonly Qualys: "Qualys";
    readonly TVM: "TVM";
};
/**
 * The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'
 */
export type Type = (typeof Type)[keyof typeof Type];
export declare const UnmaskedIpLoggingStatus: {
    /**
     * Unmasked IP logging is disabled
     */
    readonly Disabled: "Disabled";
    /**
     * Unmasked IP logging is enabled
     */
    readonly Enabled: "Enabled";
};
/**
 * Unmasked IP address logging status
 */
export type UnmaskedIpLoggingStatus = (typeof UnmaskedIpLoggingStatus)[keyof typeof UnmaskedIpLoggingStatus];
export declare const UserImpact: {
    readonly Low: "Low";
    readonly Moderate: "Moderate";
    readonly High: "High";
};
/**
 * The user impact of the assessment
 */
export type UserImpact = (typeof UserImpact)[keyof typeof UserImpact];
