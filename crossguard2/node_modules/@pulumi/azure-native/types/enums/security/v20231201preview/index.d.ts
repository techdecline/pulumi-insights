export declare const ActionType: {
    readonly LogicApp: "LogicApp";
    readonly EventHub: "EventHub";
    readonly Workspace: "Workspace";
};
/**
 * The type of the action that will be triggered by the Automation
 */
export type ActionType = (typeof ActionType)[keyof typeof ActionType];
export declare const EventSource: {
    readonly Assessments: "Assessments";
    readonly AssessmentsSnapshot: "AssessmentsSnapshot";
    readonly SubAssessments: "SubAssessments";
    readonly SubAssessmentsSnapshot: "SubAssessmentsSnapshot";
    readonly Alerts: "Alerts";
    readonly SecureScores: "SecureScores";
    readonly SecureScoresSnapshot: "SecureScoresSnapshot";
    readonly SecureScoreControls: "SecureScoreControls";
    readonly SecureScoreControlsSnapshot: "SecureScoreControlsSnapshot";
    readonly RegulatoryComplianceAssessment: "RegulatoryComplianceAssessment";
    readonly RegulatoryComplianceAssessmentSnapshot: "RegulatoryComplianceAssessmentSnapshot";
    readonly AttackPaths: "AttackPaths";
    readonly AttackPathsSnapshot: "AttackPathsSnapshot";
};
/**
 * A valid event source type.
 */
export type EventSource = (typeof EventSource)[keyof typeof EventSource];
export declare const MinimalRiskLevel: {
    /**
     * Get notifications on new attack paths with Critical risk level
     */
    readonly Critical: "Critical";
    /**
     * Get notifications on new attack paths with High or Critical risk level
     */
    readonly High: "High";
    /**
     * Get notifications on new attach paths with Medium, High or Critical risk level
     */
    readonly Medium: "Medium";
    /**
     * Get notifications on new attach paths with Low, Medium, High or Critical risk level
     */
    readonly Low: "Low";
};
/**
 * Defines the minimal attach path risk level which will be sent as email notifications
 */
export type MinimalRiskLevel = (typeof MinimalRiskLevel)[keyof typeof MinimalRiskLevel];
export declare const MinimalSeverity: {
    /**
     * Get notifications on new alerts with High severity
     */
    readonly High: "High";
    /**
     * Get notifications on new alerts with Medium or High severity
     */
    readonly Medium: "Medium";
    /**
     * Get notifications on new alerts with Low, Medium or High severity
     */
    readonly Low: "Low";
};
/**
 * Defines the minimal alert severity which will be sent as email notifications
 */
export type MinimalSeverity = (typeof MinimalSeverity)[keyof typeof MinimalSeverity];
export declare const Operator: {
    /**
     * Applies for decimal and non-decimal operands
     */
    readonly Equals: "Equals";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThan: "GreaterThan";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThan: "LesserThan";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThanOrEqualTo: "LesserThanOrEqualTo";
    /**
     * Applies  for decimal and non-decimal operands
     */
    readonly NotEquals: "NotEquals";
    /**
     * Applies only for non-decimal operands
     */
    readonly Contains: "Contains";
    /**
     * Applies only for non-decimal operands
     */
    readonly StartsWith: "StartsWith";
    /**
     * Applies only for non-decimal operands
     */
    readonly EndsWith: "EndsWith";
};
/**
 * A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
 */
export type Operator = (typeof Operator)[keyof typeof Operator];
export declare const PropertyType: {
    readonly String: "String";
    readonly Integer: "Integer";
    readonly Number: "Number";
    readonly Boolean: "Boolean";
};
/**
 * The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
 */
export type PropertyType = (typeof PropertyType)[keyof typeof PropertyType];
export declare const SecurityContactRole: {
    /**
     * If enabled, send notification on new alerts to the account admins
     */
    readonly AccountAdmin: "AccountAdmin";
    /**
     * If enabled, send notification on new alerts to the service admins
     */
    readonly ServiceAdmin: "ServiceAdmin";
    /**
     * If enabled, send notification on new alerts to the subscription owners
     */
    readonly Owner: "Owner";
    /**
     * If enabled, send notification on new alerts to the subscription contributors
     */
    readonly Contributor: "Contributor";
};
/**
 * A possible role to configure sending security notification alerts to
 */
export type SecurityContactRole = (typeof SecurityContactRole)[keyof typeof SecurityContactRole];
export declare const SourceType: {
    readonly Alert: "Alert";
    readonly AttackPath: "AttackPath";
};
/**
 * The source type that will trigger the notification
 */
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export declare const State: {
    /**
     * Send notification on new alerts to the subscription's admins
     */
    readonly On: "On";
    /**
     * Don't send notification on new alerts to the subscription's admins
     */
    readonly Off: "Off";
};
/**
 * Defines whether to send email notifications from AMicrosoft Defender for Cloud to persons with specific RBAC roles on the subscription.
 */
export type State = (typeof State)[keyof typeof State];
