"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowsVMGuestPatchMode = exports.WindowsVMGuestPatchAutomaticByPlatformRebootSetting = exports.WindowsPatchAssessmentMode = exports.StorageAccountTypes = exports.SpotAllocationStrategy = exports.SettingNames = exports.SecurityTypes = exports.SecurityEncryptionTypes = exports.RegularPriorityAllocationStrategy = exports.PublicIPAddressSkuTier = exports.PublicIPAddressSkuName = exports.ProtocolTypes = exports.PassName = exports.OperatingSystemTypes = exports.NetworkInterfaceAuxiliarySku = exports.NetworkInterfaceAuxiliaryMode = exports.NetworkApiVersion = exports.Mode = exports.ManagedServiceIdentityType = exports.LinuxVMGuestPatchMode = exports.LinuxVMGuestPatchAutomaticByPlatformRebootSetting = exports.LinuxPatchAssessmentMode = exports.IPVersion = exports.EvictionPolicy = exports.DomainNameLabelScopeTypes = exports.DiskDeleteOptionTypes = exports.DiskCreateOptionTypes = exports.DiskControllerTypes = exports.DiffDiskPlacement = exports.DiffDiskOptions = exports.DeleteOptions = exports.ComponentName = exports.CachingTypes = exports.v20241101 = exports.v20240501preview = exports.v20231101preview = void 0;
// Export sub-modules:
const v20231101preview = require("./v20231101preview");
exports.v20231101preview = v20231101preview;
const v20240501preview = require("./v20240501preview");
exports.v20240501preview = v20240501preview;
const v20241101 = require("./v20241101");
exports.v20241101 = v20241101;
exports.CachingTypes = {
    /**
     * 'None' is default for Standard Storage
     */
    None: "None",
    /**
     * 'ReadOnly' is default for Premium Storage
     */
    ReadOnly: "ReadOnly",
    /**
     * 'ReadWrite' is default for OS Disk
     */
    ReadWrite: "ReadWrite",
};
exports.ComponentName = {
    Microsoft_Windows_Shell_Setup: "Microsoft-Windows-Shell-Setup",
};
exports.DeleteOptions = {
    /**
     * Delete Option
     */
    Delete: "Delete",
    /**
     * Detach Option
     */
    Detach: "Detach",
};
exports.DiffDiskOptions = {
    /**
     * Local Option.
     */
    Local: "Local",
};
exports.DiffDiskPlacement = {
    /**
     * CacheDisk option.
     */
    CacheDisk: "CacheDisk",
    /**
     * Resource Disk option.
     */
    ResourceDisk: "ResourceDisk",
    /**
     * NvmeDisk option.
     */
    NvmeDisk: "NvmeDisk",
};
exports.DiskControllerTypes = {
    /**
     * SCSI disk type
     */
    SCSI: "SCSI",
    /**
     * NVMe disk type
     */
    NVMe: "NVMe",
};
exports.DiskCreateOptionTypes = {
    /**
     * This value is used when you are using an image to create the virtual machine.
     * If you are using a platform image, you also use the imageReference element
     * described above. If you are using a marketplace image, you also use the
     * plan element previously described.
     */
    FromImage: "FromImage",
    /**
     * This value is used when creating an empty data disk.
     */
    Empty: "Empty",
    /**
     * This value is used when you are using a specialized disk to create the virtual machine.
     */
    Attach: "Attach",
    /**
     * This value is used to create a data disk from a snapshot or another disk.
     */
    Copy: "Copy",
    /**
     * This value is used to create a data disk from a disk restore point.
     */
    Restore: "Restore",
};
exports.DiskDeleteOptionTypes = {
    /**
     * If this value is used, the managed disk is deleted when VM gets deleted.
     */
    Delete: "Delete",
    /**
     * If this value is used, the managed disk is retained after VM gets deleted.
     */
    Detach: "Detach",
};
exports.DomainNameLabelScopeTypes = {
    /**
     * TenantReuse type
     */
    TenantReuse: "TenantReuse",
    /**
     * SubscriptionReuse type
     */
    SubscriptionReuse: "SubscriptionReuse",
    /**
     * ResourceGroupReuse type
     */
    ResourceGroupReuse: "ResourceGroupReuse",
    /**
     * NoReuse type
     */
    NoReuse: "NoReuse",
};
exports.EvictionPolicy = {
    /**
     * When evicted, the Spot VM will be deleted and the corresponding capacity will be updated to reflect this.
     */
    Delete: "Delete",
    /**
     * When evicted, the Spot VM will be deallocated/stopped
     */
    Deallocate: "Deallocate",
};
exports.IPVersion = {
    /**
     * IPv4 version
     */
    IPv4: "IPv4",
    /**
     * IPv6 version
     */
    IPv6: "IPv6",
};
exports.LinuxPatchAssessmentMode = {
    /**
     * You control the timing of patch assessments on a virtual machine.
     */
    ImageDefault: "ImageDefault",
    /**
     * The platform will trigger periodic patch assessments.The property provisionVMAgent must be true.
     */
    AutomaticByPlatform: "AutomaticByPlatform",
};
exports.LinuxVMGuestPatchAutomaticByPlatformRebootSetting = {
    /**
     * Unknown Reboot setting
     */
    Unknown: "Unknown",
    /**
     * IfRequired Reboot setting
     */
    IfRequired: "IfRequired",
    /**
     * Never Reboot setting
     */
    Never: "Never",
    /**
     * Always Reboot setting
     */
    Always: "Always",
};
exports.LinuxVMGuestPatchMode = {
    /**
     * The virtual machine's default patching configuration is used.
     */
    ImageDefault: "ImageDefault",
    /**
     * The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true.
     */
    AutomaticByPlatform: "AutomaticByPlatform",
};
exports.ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
};
exports.Mode = {
    /**
     * Audit Mode
     */
    Audit: "Audit",
    /**
     * Enforce Mode
     */
    Enforce: "Enforce",
};
exports.NetworkApiVersion = {
    /**
     * Initial version supported. Later versions are supported as well.
     */
    V2020_11_01: "2020-11-01",
};
exports.NetworkInterfaceAuxiliaryMode = {
    /**
     * None Mode
     */
    None: "None",
    /**
     * AcceleratedConnections Mode
     */
    AcceleratedConnections: "AcceleratedConnections",
    /**
     * Floating Mode
     */
    Floating: "Floating",
};
exports.NetworkInterfaceAuxiliarySku = {
    /**
     * no sku
     */
    None: "None",
    /**
     * A1 sku
     */
    A1: "A1",
    /**
     * A2 sku
     */
    A2: "A2",
    /**
     * A4 sku
     */
    A4: "A4",
    /**
     * A8 sku
     */
    A8: "A8",
};
exports.OperatingSystemTypes = {
    /**
     * Windows OS type
     */
    Windows: "Windows",
    /**
     * Linux OS type
     */
    Linux: "Linux",
};
exports.PassName = {
    OobeSystem: "OobeSystem",
};
exports.ProtocolTypes = {
    /**
     * Http protocol
     */
    Http: "Http",
    /**
     * Https protocol
     */
    Https: "Https",
};
exports.PublicIPAddressSkuName = {
    /**
     * Basic sku name
     */
    Basic: "Basic",
    /**
     * Standard sku name
     */
    Standard: "Standard",
};
exports.PublicIPAddressSkuTier = {
    /**
     * Regional sku tier
     */
    Regional: "Regional",
    /**
     * Global sku tier
     */
    Global: "Global",
};
exports.RegularPriorityAllocationStrategy = {
    /**
     * Default. VM sizes distribution will be determined to optimize for price.
     */
    LowestPrice: "LowestPrice",
    /**
     * VM sizes distribution will be determined to optimize for the 'priority' as specified for each vm size.
     */
    Prioritized: "Prioritized",
};
exports.SecurityEncryptionTypes = {
    /**
     * EncryptionType of the managed disk is set to VMGuestStateOnly for encryption
     * of just the VMGuestState blob.
     */
    VMGuestStateOnly: "VMGuestStateOnly",
    /**
     * EncryptionType of the managed disk is set to DiskWithVMGuestState for encryption
     * of the managed disk along with VMGuestState blob.
     */
    DiskWithVMGuestState: "DiskWithVMGuestState",
    /**
     * EncryptionType of the managed disk is set to NonPersistedTPM for not persisting
     * firmware state in the VMGuestState blob.
     */
    NonPersistedTPM: "NonPersistedTPM",
};
exports.SecurityTypes = {
    /**
     * TrustedLaunch security type
     */
    TrustedLaunch: "TrustedLaunch",
    /**
     * ConfidentialVM security type
     */
    ConfidentialVM: "ConfidentialVM",
};
exports.SettingNames = {
    /**
     * AutoLogon setting
     */
    AutoLogon: "AutoLogon",
    /**
     * FirstLogonCommands setting
     */
    FirstLogonCommands: "FirstLogonCommands",
};
exports.SpotAllocationStrategy = {
    /**
     * Default. VM sizes distribution will be determined to optimize for both price and capacity.
     */
    PriceCapacityOptimized: "PriceCapacityOptimized",
    /**
     * VM sizes distribution will be determined to optimize for price. Note: Capacity will still be considered here but will be given much less weight.
     */
    LowestPrice: "LowestPrice",
    /**
     * VM sizes distribution will be determined to optimize for capacity.
     */
    CapacityOptimized: "CapacityOptimized",
};
exports.StorageAccountTypes = {
    /**
     * Standard_LRS option.
     */
    Standard_LRS: "Standard_LRS",
    /**
     * Premium_LRS option.
     */
    Premium_LRS: "Premium_LRS",
    /**
     * StandardSSD_LRS option.
     */
    StandardSSD_LRS: "StandardSSD_LRS",
    /**
     * UltraSSD_LRS option.
     */
    UltraSSD_LRS: "UltraSSD_LRS",
    /**
     * Premium_ZRS option.
     */
    Premium_ZRS: "Premium_ZRS",
    /**
     * StandardSSD_ZRS option.
     */
    StandardSSD_ZRS: "StandardSSD_ZRS",
    /**
     * PremiumV2_LRS option.
     */
    PremiumV2_LRS: "PremiumV2_LRS",
};
exports.WindowsPatchAssessmentMode = {
    /**
     * You control the timing of patch assessments on a virtual machine.
     */
    ImageDefault: "ImageDefault",
    /**
     * The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
     */
    AutomaticByPlatform: "AutomaticByPlatform",
};
exports.WindowsVMGuestPatchAutomaticByPlatformRebootSetting = {
    /**
     * Unknown Reboot setting
     */
    Unknown: "Unknown",
    /**
     * IfRequired Reboot setting
     */
    IfRequired: "IfRequired",
    /**
     * Never Reboot setting
     */
    Never: "Never",
    /**
     * Always Reboot setting
     */
    Always: "Always",
};
exports.WindowsVMGuestPatchMode = {
    /**
     * You control the application of patches to a virtual machine.
     * You do this by applying patches manually inside the VM. In this mode,
     * automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates
     * must be false
     */
    Manual: "Manual",
    /**
     * The virtual machine will automatically be updated by the OS.
     * The property WindowsConfiguration.enableAutomaticUpdates must be true.
     */
    AutomaticByOS: "AutomaticByOS",
    /**
     * The virtual machine will automatically updated by the platform. The properties
     * provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true.
     */
    AutomaticByPlatform: "AutomaticByPlatform",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9henVyZWZsZWV0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzRUFBc0U7QUFDdEUsaUZBQWlGOzs7QUFFakYsc0JBQXNCO0FBQ3RCLHVEQUF1RDtBQUtuRCw0Q0FBZ0I7QUFKcEIsdURBQXVEO0FBS25ELDRDQUFnQjtBQUpwQix5Q0FBeUM7QUFLckMsOEJBQVM7QUFHQSxRQUFBLFlBQVksR0FBRztJQUN4Qjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0NBQ2hCLENBQUM7QUFTRSxRQUFBLGFBQWEsR0FBRztJQUN6Qiw2QkFBNkIsRUFBRSwrQkFBK0I7Q0FDeEQsQ0FBQztBQVFFLFFBQUEsYUFBYSxHQUFHO0lBQ3pCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtDQUNWLENBQUM7QUFPRSxRQUFBLGVBQWUsR0FBRztJQUMzQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0NBQ1IsQ0FBQztBQU9FLFFBQUEsaUJBQWlCLEdBQUc7SUFDN0I7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFlBQVksRUFBRSxjQUFjO0lBQzVCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBYUUsUUFBQSxtQkFBbUIsR0FBRztJQUMvQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLHFCQUFxQixHQUFHO0lBQ2pDOzs7OztPQUtHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNk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