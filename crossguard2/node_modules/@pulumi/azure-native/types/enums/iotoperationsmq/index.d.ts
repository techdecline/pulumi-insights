import * as v20231004preview from "./v20231004preview";
export { v20231004preview, };
export declare const BrokerMemoryProfile: {
    /**
     * Tiny memory profile.
     */
    readonly Tiny: "tiny";
    /**
     * Low memory profile.
     */
    readonly Low: "low";
    /**
     * Medium memory profile.
     */
    readonly Medium: "medium";
    /**
     * High memory profile.
     */
    readonly High: "high";
};
/**
 * Memory profile of broker.
 */
export type BrokerMemoryProfile = (typeof BrokerMemoryProfile)[keyof typeof BrokerMemoryProfile];
export declare const DataLakeDatabaseFormat: {
    /**
     * Delta format.
     */
    readonly Delta: "delta";
    /**
     * Parquet format.
     */
    readonly Parquet: "parquet";
};
/**
 * DataLake database format to use.
 */
export type DataLakeDatabaseFormat = (typeof DataLakeDatabaseFormat)[keyof typeof DataLakeDatabaseFormat];
export declare const DeltaTableFormatEnum: {
    /**
     * Bool format
     */
    readonly Boolean: "boolean";
    /**
     * Signed integer 8
     */
    readonly Int8: "int8";
    /**
     * Signed integer 16
     */
    readonly Int16: "int16";
    /**
     * Signed integer 32
     */
    readonly Int32: "int32";
    /**
     * Unsigned integer 8
     */
    readonly UInt8: "uInt8";
    /**
     * Unsigned integer 16
     */
    readonly UInt16: "uInt16";
    /**
     * Unsigned integer 32
     */
    readonly UInt32: "uInt32";
    /**
     * Unsigned integer 64
     */
    readonly UInt64: "uInt64";
    /**
     * Float 16
     */
    readonly Float16: "float16";
    /**
     * Float 32
     */
    readonly Float32: "float32";
    /**
     * Float 64
     */
    readonly Float64: "float64";
    /**
     * Date 32
     */
    readonly Date32: "date32";
    /**
     * Date 64
     */
    readonly Date64: "date64";
    /**
     * Binary data
     */
    readonly Binary: "binary";
    /**
     * UTF8 format
     */
    readonly Utf8: "utf8";
};
/**
 * Delta table format supported.
 */
export type DeltaTableFormatEnum = (typeof DeltaTableFormatEnum)[keyof typeof DeltaTableFormatEnum];
export declare const ExtendedLocationType: {
    /**
     * CustomLocation type
     */
    readonly CustomLocation: "CustomLocation";
};
/**
 * Type of ExtendedLocation.
 */
export type ExtendedLocationType = (typeof ExtendedLocationType)[keyof typeof ExtendedLocationType];
export declare const FabricPathType: {
    /**
     * Fabric path type is Files.
     */
    readonly Files: "files";
    /**
     * Fabric path type is Tables.
     */
    readonly Tables: "tables";
};
/**
 * Fabric path type to use.
 */
export type FabricPathType = (typeof FabricPathType)[keyof typeof FabricPathType];
export declare const KafkaAcks: {
    /**
     * Kafka acks zero.
     */
    readonly Zero: "zero";
    /**
     * Kafka acks one.
     */
    readonly One: "one";
    /**
     * Kafka acks all.
     */
    readonly All: "all";
};
/**
 * The kafka acks to use.
 */
export type KafkaAcks = (typeof KafkaAcks)[keyof typeof KafkaAcks];
export declare const KafkaMessageCompressionType: {
    /**
     * No Kafka message compression.
     */
    readonly None: "none";
    /**
     * Gzip Kafka message compression.
     */
    readonly Gzip: "gzip";
    /**
     * Snappy Kafka message compression.
     */
    readonly Snappy: "snappy";
    /**
     * Lz4 Kafka message compression.
     */
    readonly Lz4: "lz4";
};
/**
 * The compression to use for kafka messages.
 */
export type KafkaMessageCompressionType = (typeof KafkaMessageCompressionType)[keyof typeof KafkaMessageCompressionType];
export declare const KafkaPartitionStrategy: {
    /**
     * Default partition strategy.
     */
    readonly Default: "default";
    /**
     * Static partition strategy.
     */
    readonly Static: "static";
    /**
     * Topic partition strategy.
     */
    readonly Topic: "topic";
    /**
     * Property partition strategy.
     */
    readonly Property: "property";
};
/**
 * The partition strategy to use for Kafka.
 */
export type KafkaPartitionStrategy = (typeof KafkaPartitionStrategy)[keyof typeof KafkaPartitionStrategy];
export declare const KafkaSaslType: {
    /**
     * Sasl Plain authentication.
     */
    readonly Plain: "plain";
    /**
     * Sasl ScramSha256 authentication.
     */
    readonly ScramSha256: "scramSha256";
    /**
     * Sasl ScramSha512 authentication.
     */
    readonly ScramSha512: "scramSha512";
};
/**
 * Sasl Mechanism for remote broker authentication.
 */
export type KafkaSaslType = (typeof KafkaSaslType)[keyof typeof KafkaSaslType];
export declare const MqttBridgeRemoteBrokerProtocol: {
    /**
     * MQTT protocol.
     */
    readonly Mqtt: "mqtt";
    /**
     * MQTT over WebSocket protocol.
     */
    readonly WebSocket: "webSocket";
};
/**
 * Protocol for remote connection.
 */
export type MqttBridgeRemoteBrokerProtocol = (typeof MqttBridgeRemoteBrokerProtocol)[keyof typeof MqttBridgeRemoteBrokerProtocol];
export declare const MqttBridgeRouteDirection: {
    /**
     * Remote to Local Broker.
     */
    readonly RemoteToLocal: "remote-to-local";
    /**
     * Local to Remote Broker.
     */
    readonly LocalToRemote: "local-to-remote";
};
/**
 * Direction of the route.
 */
export type MqttBridgeRouteDirection = (typeof MqttBridgeRouteDirection)[keyof typeof MqttBridgeRouteDirection];
export declare const MqttProtocol: {
    /**
     * Mqttv3
     */
    readonly V3: "v3";
    /**
     * Mqttv5
     */
    readonly V5: "v5";
};
/**
 * The protocol to use for connecting with Brokers.
 */
export type MqttProtocol = (typeof MqttProtocol)[keyof typeof MqttProtocol];
export declare const ResourceInfoDefinitionMethods: {
    /**
     * Allowed Connecting to Broker
     */
    readonly Connect: "Connect";
    /**
     * Allowed Publishing to Broker
     */
    readonly Publish: "Publish";
    /**
     * Allowed Subscribing to Broker
     */
    readonly Subscribe: "Subscribe";
};
/**
 * The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
 */
export type ResourceInfoDefinitionMethods = (typeof ResourceInfoDefinitionMethods)[keyof typeof ResourceInfoDefinitionMethods];
export declare const RunMode: {
    /**
     * Automatically provision Frontend and Backend pods.
     */
    readonly Auto: "auto";
    /**
     * Use Cardinality to set Frontend and Backend pods.
     */
    readonly Distributed: "distributed";
};
/**
 * The Running Mode of the Broker Deployment.
 */
export type RunMode = (typeof RunMode)[keyof typeof RunMode];
export declare const ServiceType: {
    /**
     * Cluster IP Service.
     */
    readonly ClusterIp: "clusterIp";
    /**
     * Load Balancer Service.
     */
    readonly LoadBalancer: "loadBalancer";
    /**
     * Node Port Service.
     */
    readonly NodePort: "nodePort";
};
/**
 * The Kubernetes Service type to deploy for Listener.
 */
export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];
