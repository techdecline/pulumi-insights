"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceType = exports.RunMode = exports.ResourceInfoDefinitionMethods = exports.MqttProtocol = exports.MqttBridgeRouteDirection = exports.MqttBridgeRemoteBrokerProtocol = exports.KafkaSaslType = exports.KafkaPartitionStrategy = exports.KafkaMessageCompressionType = exports.KafkaAcks = exports.FabricPathType = exports.ExtendedLocationType = exports.DeltaTableFormatEnum = exports.DataLakeDatabaseFormat = exports.BrokerMemoryProfile = void 0;
exports.BrokerMemoryProfile = {
    /**
     * Tiny memory profile.
     */
    Tiny: "tiny",
    /**
     * Low memory profile.
     */
    Low: "low",
    /**
     * Medium memory profile.
     */
    Medium: "medium",
    /**
     * High memory profile.
     */
    High: "high",
};
exports.DataLakeDatabaseFormat = {
    /**
     * Delta format.
     */
    Delta: "delta",
    /**
     * Parquet format.
     */
    Parquet: "parquet",
};
exports.DeltaTableFormatEnum = {
    /**
     * Bool format
     */
    Boolean: "boolean",
    /**
     * Signed integer 8
     */
    Int8: "int8",
    /**
     * Signed integer 16
     */
    Int16: "int16",
    /**
     * Signed integer 32
     */
    Int32: "int32",
    /**
     * Unsigned integer 8
     */
    UInt8: "uInt8",
    /**
     * Unsigned integer 16
     */
    UInt16: "uInt16",
    /**
     * Unsigned integer 32
     */
    UInt32: "uInt32",
    /**
     * Unsigned integer 64
     */
    UInt64: "uInt64",
    /**
     * Float 16
     */
    Float16: "float16",
    /**
     * Float 32
     */
    Float32: "float32",
    /**
     * Float 64
     */
    Float64: "float64",
    /**
     * Date 32
     */
    Date32: "date32",
    /**
     * Date 64
     */
    Date64: "date64",
    /**
     * Binary data
     */
    Binary: "binary",
    /**
     * UTF8 format
     */
    Utf8: "utf8",
};
exports.ExtendedLocationType = {
    /**
     * CustomLocation type
     */
    CustomLocation: "CustomLocation",
};
exports.FabricPathType = {
    /**
     * Fabric path type is Files.
     */
    Files: "files",
    /**
     * Fabric path type is Tables.
     */
    Tables: "tables",
};
exports.KafkaAcks = {
    /**
     * Kafka acks zero.
     */
    Zero: "zero",
    /**
     * Kafka acks one.
     */
    One: "one",
    /**
     * Kafka acks all.
     */
    All: "all",
};
exports.KafkaMessageCompressionType = {
    /**
     * No Kafka message compression.
     */
    None: "none",
    /**
     * Gzip Kafka message compression.
     */
    Gzip: "gzip",
    /**
     * Snappy Kafka message compression.
     */
    Snappy: "snappy",
    /**
     * Lz4 Kafka message compression.
     */
    Lz4: "lz4",
};
exports.KafkaPartitionStrategy = {
    /**
     * Default partition strategy.
     */
    Default: "default",
    /**
     * Static partition strategy.
     */
    Static: "static",
    /**
     * Topic partition strategy.
     */
    Topic: "topic",
    /**
     * Property partition strategy.
     */
    Property: "property",
};
exports.KafkaSaslType = {
    /**
     * Sasl Plain authentication.
     */
    Plain: "plain",
    /**
     * Sasl ScramSha256 authentication.
     */
    ScramSha256: "scramSha256",
    /**
     * Sasl ScramSha512 authentication.
     */
    ScramSha512: "scramSha512",
};
exports.MqttBridgeRemoteBrokerProtocol = {
    /**
     * MQTT protocol.
     */
    Mqtt: "mqtt",
    /**
     * MQTT over WebSocket protocol.
     */
    WebSocket: "webSocket",
};
exports.MqttBridgeRouteDirection = {
    /**
     * Remote to Local Broker.
     */
    RemoteToLocal: "remote-to-local",
    /**
     * Local to Remote Broker.
     */
    LocalToRemote: "local-to-remote",
};
exports.MqttProtocol = {
    /**
     * Mqttv3
     */
    V3: "v3",
    /**
     * Mqttv5
     */
    V5: "v5",
};
exports.ResourceInfoDefinitionMethods = {
    /**
     * Allowed Connecting to Broker
     */
    Connect: "Connect",
    /**
     * Allowed Publishing to Broker
     */
    Publish: "Publish",
    /**
     * Allowed Subscribing to Broker
     */
    Subscribe: "Subscribe",
};
exports.RunMode = {
    /**
     * Automatically provision Frontend and Backend pods.
     */
    Auto: "auto",
    /**
     * Use Cardinality to set Frontend and Backend pods.
     */
    Distributed: "distributed",
};
exports.ServiceType = {
    /**
     * Cluster IP Service.
     */
    ClusterIp: "clusterIp",
    /**
     * Load Balancer Service.
     */
    LoadBalancer: "loadBalancer",
    /**
     * Node Port Service.
     */
    NodePort: "nodePort",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9pb3RvcGVyYXRpb25zbXEvdjIwMjMxMDA0cHJldmlldy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0VBQXNFO0FBQ3RFLGlGQUFpRjs7O0FBR3BFLFFBQUEsbUJBQW1CLEdBQUc7SUFDL0I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07Q0FDTixDQUFDO0FBT0UsUUFBQSxzQkFBc0IsR0FBRztJQUNsQzs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztDQUNaLENBQUM7QUFPRSxRQUFBLG9CQUFvQixHQUFHO0lBQ2hDOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07Q0FDTixDQUFDO0FBT0UsUUFBQSxvQkFBb0IsR0FBRztJQUNoQzs7T0FFRztJQUNILGNBQWMsRUFBRSxnQkFBZ0I7Q0FDMUIsQ0FBQztBQU9FLFFBQUEsY0FBYyxHQUFHO0lBQzFCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0NBQ1YsQ0FBQztBQU9FLFFBQUEsU0FBUyxHQUFHO0lBQ3JCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILEdBQUcsRUFBRSxLQUFLO0lBQ1Y7O09BRUc7SUFDSCxHQUFHLEVBQUUsS0FBSztDQUNKLENBQUM7QUFPRSxRQUFBLDJCQUEyQixHQUFHO0lBQ3ZDOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILEdBQUcsRUFBRSxLQUFLO0NBQ0osQ0FBQztBQU9FLFFBQUEsc0JBQXNCLEdBQUc7SUFDbEM7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0NBQ2QsQ0FBQztBQU9FLFFBQUEsYUFBYSxHQUFHO0lBQ3pCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILFdBQVcsRUFBRSxhQUFhO0lBQzFCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7Q0FDcEIsQ0FBQztBQU9FLFFBQUEsOEJBQThCLEdBQUc7SUFDMUM7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7Q0FDaEIsQ0FBQztBQU9FLFFBQUEsd0JBQXdCLEdBQUc7SUFDcEM7O09BRUc7SUFDSCxhQUFhLEVBQUUsaUJBQWlCO0lBQ2hDOztPQUVHO0lBQ0gsYUFBYSxFQUFFLGlCQUFpQjtDQUMxQixDQUFDO0FBT0UsUUFBQSxZQUFZLEdBQUc7SUFDeEI7O09BRUc7SUFDSCxFQUFFLEVBQUUsSUFBSTtJQUNSOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7Q0FDRixDQUFDO0FBT0UsUUFBQSw2QkFBNkIsR0FBRztJQUN6Qzs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztDQUNoQixDQUFDO0FBT0UsUUFBQSxPQUFPLEdBQUc7SUFDbkI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7Q0FDcEIsQ0FBQztBQU9FLFFBQUEsV0FBVyxHQUFHO0lBQ3ZCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxZQUFZLEVBQUUsY0FBYztJQUM1Qjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0NBQ2QsQ0FBQyJ9