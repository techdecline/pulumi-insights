export declare const DockerfileGenerationMode: {
    /**
     * Dockerfiles will be generated
     */
    readonly Enabled: "enabled";
    /**
     * Dockerfiles will not be generated
     */
    readonly Disabled: "disabled";
};
/**
 * The mode of generation to be used for generating Dockerfiles.
 */
export type DockerfileGenerationMode = (typeof DockerfileGenerationMode)[keyof typeof DockerfileGenerationMode];
export declare const GenerationLanguage: {
    /**
     * clojure language
     */
    readonly Clojure: "clojure";
    /**
     * csharp language
     */
    readonly Csharp: "csharp";
    /**
     * erlang language
     */
    readonly Erlang: "erlang";
    /**
     * go language
     */
    readonly Go: "go";
    /**
     * gomodule language
     */
    readonly Gomodule: "gomodule";
    /**
     * gradle language
     */
    readonly Gradle: "gradle";
    /**
     * java language
     */
    readonly Java: "java";
    /**
     * javascript language
     */
    readonly Javascript: "javascript";
    /**
     * php language
     */
    readonly Php: "php";
    /**
     * python language
     */
    readonly Python: "python";
    /**
     * ruby language
     */
    readonly Ruby: "ruby";
    /**
     * rust language
     */
    readonly Rust: "rust";
    /**
     * swift language
     */
    readonly Swift: "swift";
};
/**
 * The programming language used.
 */
export type GenerationLanguage = (typeof GenerationLanguage)[keyof typeof GenerationLanguage];
export declare const GenerationManifestType: {
    /**
     * Helm manifests
     */
    readonly Helm: "helm";
    /**
     * Kubernetes manifests
     */
    readonly Kube: "kube";
};
/**
 * Determines the type of manifests to be generated.
 */
export type GenerationManifestType = (typeof GenerationManifestType)[keyof typeof GenerationManifestType];
export declare const ManifestGenerationMode: {
    /**
     * Manifests will be generated
     */
    readonly Enabled: "enabled";
    /**
     * Manifests will not be generated
     */
    readonly Disabled: "disabled";
};
/**
 * The mode of generation to be used for generating Manifest.
 */
export type ManifestGenerationMode = (typeof ManifestGenerationMode)[keyof typeof ManifestGenerationMode];
export declare const ManifestType: {
    /**
     * Repositories using helm
     */
    readonly Helm: "helm";
    /**
     * Repositories using kubernetes manifests
     */
    readonly Kube: "kube";
};
/**
 * Determines the type of manifests within the repository.
 */
export type ManifestType = (typeof ManifestType)[keyof typeof ManifestType];
export declare const WorkflowRunStatus: {
    /**
     * Workflow run is queued
     */
    readonly Queued: "queued";
    /**
     * Workflow run is inprogress
     */
    readonly Inprogress: "inprogress";
    /**
     * Workflow run is completed
     */
    readonly Completed: "completed";
};
/**
 * Describes the status of the workflow run
 */
export type WorkflowRunStatus = (typeof WorkflowRunStatus)[keyof typeof WorkflowRunStatus];
