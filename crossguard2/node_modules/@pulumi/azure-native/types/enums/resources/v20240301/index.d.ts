export declare const DenySettingsMode: {
    /**
     * Authorized users are able to read and modify the resources, but cannot delete.
     */
    readonly DenyDelete: "denyDelete";
    /**
     * Authorized users can read from a resource, but cannot modify or delete it.
     */
    readonly DenyWriteAndDelete: "denyWriteAndDelete";
    /**
     * No denyAssignments have been applied.
     */
    readonly None: "none";
};
/**
 * denySettings Mode that defines denied actions.
 */
export type DenySettingsMode = (typeof DenySettingsMode)[keyof typeof DenySettingsMode];
export declare const DeploymentMode: {
    readonly Incremental: "Incremental";
    readonly Complete: "Complete";
};
/**
 * The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
 */
export type DeploymentMode = (typeof DeploymentMode)[keyof typeof DeploymentMode];
export declare const DeploymentStacksDeleteDetachEnum: {
    readonly Delete: "delete";
    readonly Detach: "detach";
};
/**
 * Specifies an action for a newly unmanaged resource. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
 */
export type DeploymentStacksDeleteDetachEnum = (typeof DeploymentStacksDeleteDetachEnum)[keyof typeof DeploymentStacksDeleteDetachEnum];
export declare const ExpressionEvaluationOptionsScopeType: {
    readonly NotSpecified: "NotSpecified";
    readonly Outer: "Outer";
    readonly Inner: "Inner";
};
/**
 * The scope to be used for evaluation of parameters, variables and functions in a nested template.
 */
export type ExpressionEvaluationOptionsScopeType = (typeof ExpressionEvaluationOptionsScopeType)[keyof typeof ExpressionEvaluationOptionsScopeType];
export declare const ExtendedLocationType: {
    readonly EdgeZone: "EdgeZone";
};
/**
 * The extended location type.
 */
export type ExtendedLocationType = (typeof ExtendedLocationType)[keyof typeof ExtendedLocationType];
export declare const OnErrorDeploymentType: {
    readonly LastSuccessful: "LastSuccessful";
    readonly SpecificDeployment: "SpecificDeployment";
};
/**
 * The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
 */
export type OnErrorDeploymentType = (typeof OnErrorDeploymentType)[keyof typeof OnErrorDeploymentType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
