import * as v20200515 from "./v20200515";
import * as v20210331preview from "./v20210331preview";
import * as v20210630preview from "./v20210630preview";
export { v20200515, v20210331preview, v20210630preview, };
export declare const AccessPolicyRole: {
    readonly Reader: "Reader";
    readonly Contributor: "Contributor";
};
/**
 * A role defining the data plane operations that a principal can perform on a Time Series Insights client.
 */
export type AccessPolicyRole = (typeof AccessPolicyRole)[keyof typeof AccessPolicyRole];
export declare const DataStringComparisonBehavior: {
    readonly Ordinal: "Ordinal";
    readonly OrdinalIgnoreCase: "OrdinalIgnoreCase";
};
/**
 * The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used.
 */
export type DataStringComparisonBehavior = (typeof DataStringComparisonBehavior)[keyof typeof DataStringComparisonBehavior];
export declare const EnvironmentKind: {
    readonly Gen1: "Gen1";
    readonly Gen2: "Gen2";
};
/**
 * The kind of the environment.
 */
export type EnvironmentKind = (typeof EnvironmentKind)[keyof typeof EnvironmentKind];
export declare const EventSourceKind: {
    readonly Microsoft_EventHub: "Microsoft.EventHub";
    readonly Microsoft_IoTHub: "Microsoft.IoTHub";
};
/**
 * The kind of the event source.
 */
export type EventSourceKind = (typeof EventSourceKind)[keyof typeof EventSourceKind];
export declare const IngressStartAtType: {
    readonly EarliestAvailable: "EarliestAvailable";
    readonly EventSourceCreationTime: "EventSourceCreationTime";
    readonly CustomEnqueuedTime: "CustomEnqueuedTime";
};
/**
 * The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
 */
export type IngressStartAtType = (typeof IngressStartAtType)[keyof typeof IngressStartAtType];
export declare const LocalTimestampFormat: {
    readonly Embedded: "Embedded";
};
/**
 * An enum that represents the format of the local timestamp property that needs to be set.
 */
export type LocalTimestampFormat = (typeof LocalTimestampFormat)[keyof typeof LocalTimestampFormat];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PropertyType: {
    readonly String: "String";
};
/**
 * The type of the property.
 */
export type PropertyType = (typeof PropertyType)[keyof typeof PropertyType];
export declare const ReferenceDataKeyPropertyType: {
    readonly String: "String";
    readonly Double: "Double";
    readonly Bool: "Bool";
    readonly DateTime: "DateTime";
};
/**
 * The type of the key property.
 */
export type ReferenceDataKeyPropertyType = (typeof ReferenceDataKeyPropertyType)[keyof typeof ReferenceDataKeyPropertyType];
export declare const SkuName: {
    readonly S1: "S1";
    readonly S2: "S2";
    readonly P1: "P1";
    readonly L1: "L1";
};
/**
 * The name of this SKU.
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const StorageLimitExceededBehavior: {
    readonly PurgeOldData: "PurgeOldData";
    readonly PauseIngress: "PauseIngress";
};
/**
 * The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
 */
export type StorageLimitExceededBehavior = (typeof StorageLimitExceededBehavior)[keyof typeof StorageLimitExceededBehavior];
