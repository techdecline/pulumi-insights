export declare const DeploymentModelVersionUpgradeOption: {
    readonly OnceNewDefaultVersionAvailable: "OnceNewDefaultVersionAvailable";
    readonly OnceCurrentVersionExpired: "OnceCurrentVersionExpired";
    readonly NoAutoUpgrade: "NoAutoUpgrade";
};
/**
 * Deployment model version upgrade option.
 */
export type DeploymentModelVersionUpgradeOption = (typeof DeploymentModelVersionUpgradeOption)[keyof typeof DeploymentModelVersionUpgradeOption];
export declare const DeploymentScaleType: {
    readonly Standard: "Standard";
    readonly Manual: "Manual";
};
/**
 * Deployment scale type.
 */
export type DeploymentScaleType = (typeof DeploymentScaleType)[keyof typeof DeploymentScaleType];
export declare const HostingModel: {
    readonly Web: "Web";
    readonly ConnectedContainer: "ConnectedContainer";
    readonly DisconnectedContainer: "DisconnectedContainer";
    readonly ProvisionedWeb: "ProvisionedWeb";
};
/**
 * Account hosting model.
 */
export type HostingModel = (typeof HostingModel)[keyof typeof HostingModel];
export declare const KeySource: {
    readonly Microsoft_CognitiveServices: "Microsoft.CognitiveServices";
    readonly Microsoft_KeyVault: "Microsoft.KeyVault";
};
/**
 * Enumerates the possible value of keySource for Encryption
 */
export type KeySource = (typeof KeySource)[keyof typeof KeySource];
export declare const NetworkRuleAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
 */
export type NetworkRuleAction = (typeof NetworkRuleAction)[keyof typeof NetworkRuleAction];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public endpoint access is allowed for this account.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const ResourceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const RoutingMethods: {
    readonly Priority: "Priority";
    readonly Weighted: "Weighted";
    readonly Performance: "Performance";
};
/**
 * Multiregion routing methods.
 */
export type RoutingMethods = (typeof RoutingMethods)[keyof typeof RoutingMethods];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly Enterprise: "Enterprise";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
