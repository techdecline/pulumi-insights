export declare const ApiKey: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The api key setting of the Grafana instance.
 */
export type ApiKey = (typeof ApiKey)[keyof typeof ApiKey];
export declare const AutoGeneratedDomainNameLabelScope: {
    readonly TenantReuse: "TenantReuse";
};
/**
 * Scope for dns deterministic name hash calculation.
 */
export type AutoGeneratedDomainNameLabelScope = (typeof AutoGeneratedDomainNameLabelScope)[keyof typeof AutoGeneratedDomainNameLabelScope];
export declare const DeterministicOutboundIP: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Whether a Grafana instance uses deterministic outbound IPs.
 */
export type DeterministicOutboundIP = (typeof DeterministicOutboundIP)[keyof typeof DeterministicOutboundIP];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const MarketplaceAutoRenew: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The AutoRenew setting of the Enterprise subscription
 */
export type MarketplaceAutoRenew = (typeof MarketplaceAutoRenew)[keyof typeof MarketplaceAutoRenew];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicate the state for enable or disable traffic over the public interface.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const StartTLSPolicy: {
    readonly OpportunisticStartTLS: "OpportunisticStartTLS";
    readonly MandatoryStartTLS: "MandatoryStartTLS";
    readonly NoStartTLS: "NoStartTLS";
};
/**
 * The StartTLSPolicy setting of the SMTP configuration
 * https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
 */
export type StartTLSPolicy = (typeof StartTLSPolicy)[keyof typeof StartTLSPolicy];
export declare const ZoneRedundancy: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The zone redundancy setting of the Grafana instance.
 */
export type ZoneRedundancy = (typeof ZoneRedundancy)[keyof typeof ZoneRedundancy];
