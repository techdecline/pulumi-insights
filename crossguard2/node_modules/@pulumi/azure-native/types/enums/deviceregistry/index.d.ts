import * as v20231101preview from "./v20231101preview";
import * as v20240901preview from "./v20240901preview";
import * as v20241101 from "./v20241101";
export { v20231101preview, v20240901preview, v20241101, };
export declare const AuthenticationMethod: {
    /**
     * The user authentication method is anonymous.
     */
    readonly Anonymous: "Anonymous";
    /**
     * The user authentication method is an x509 certificate.
     */
    readonly Certificate: "Certificate";
    /**
     * The user authentication method is a username and password.
     */
    readonly UsernamePassword: "UsernamePassword";
};
/**
 * The method to authenticate the user of the client at the server.
 */
export type AuthenticationMethod = (typeof AuthenticationMethod)[keyof typeof AuthenticationMethod];
export declare const DataPointsObservabilityMode: {
    /**
     * No mapping to OpenTelemetry.
     */
    readonly None: "none";
    /**
     * Map as counter to OpenTelemetry.
     */
    readonly Counter: "counter";
    /**
     * Map as gauge to OpenTelemetry.
     */
    readonly Gauge: "gauge";
    /**
     * Map as histogram to OpenTelemetry.
     */
    readonly Histogram: "histogram";
    /**
     * Map as log to OpenTelemetry.
     */
    readonly Log: "log";
};
/**
 * An indication of how the data point should be mapped to OpenTelemetry.
 */
export type DataPointsObservabilityMode = (typeof DataPointsObservabilityMode)[keyof typeof DataPointsObservabilityMode];
export declare const EventsObservabilityMode: {
    /**
     * No mapping to OpenTelemetry.
     */
    readonly None: "none";
    /**
     * Map as log to OpenTelemetry.
     */
    readonly Log: "log";
};
/**
 * An indication of how the event should be mapped to OpenTelemetry.
 */
export type EventsObservabilityMode = (typeof EventsObservabilityMode)[keyof typeof EventsObservabilityMode];
export declare const Format: {
    /**
     * JSON Schema version draft 7 format
     */
    readonly JsonSchema_draft7: "JsonSchema/draft-07";
    /**
     * Delta format
     */
    readonly Delta_1_0: "Delta/1.0";
};
/**
 * Format of the schema.
 */
export type Format = (typeof Format)[keyof typeof Format];
export declare const SchemaType: {
    /**
     * Message Schema schema type
     */
    readonly MessageSchema: "MessageSchema";
};
/**
 * Type of the schema.
 */
export type SchemaType = (typeof SchemaType)[keyof typeof SchemaType];
export declare const SystemAssignedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * Type of managed service identity (either system assigned, or none).
 */
export type SystemAssignedServiceIdentityType = (typeof SystemAssignedServiceIdentityType)[keyof typeof SystemAssignedServiceIdentityType];
export declare const TopicRetainType: {
    /**
     * Retain the messages.
     */
    readonly Keep: "Keep";
    /**
     * Never retain messages.
     */
    readonly Never: "Never";
};
/**
 * When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
 */
export type TopicRetainType = (typeof TopicRetainType)[keyof typeof TopicRetainType];
export declare const UserAuthenticationMode: {
    /**
     * The user authentication method is anonymous.
     */
    readonly Anonymous: "Anonymous";
    /**
     * The user authentication method is an x509 certificate.
     */
    readonly Certificate: "Certificate";
    /**
     * The user authentication method is a username and password.
     */
    readonly UsernamePassword: "UsernamePassword";
};
/**
 * Defines the method to authenticate the user of the client at the server.
 */
export type UserAuthenticationMode = (typeof UserAuthenticationMode)[keyof typeof UserAuthenticationMode];
