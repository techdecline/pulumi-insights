export declare const AuthenticationMethod: {
    /**
     * The user authentication method is anonymous.
     */
    readonly Anonymous: "Anonymous";
    /**
     * The user authentication method is an x509 certificate.
     */
    readonly Certificate: "Certificate";
    /**
     * The user authentication method is a username and password.
     */
    readonly UsernamePassword: "UsernamePassword";
};
/**
 * Defines the method to authenticate the user of the client at the server.
 */
export type AuthenticationMethod = (typeof AuthenticationMethod)[keyof typeof AuthenticationMethod];
export declare const DataPointObservabilityMode: {
    /**
     * No mapping to OpenTelemetry.
     */
    readonly None: "None";
    /**
     * Map as counter to OpenTelemetry.
     */
    readonly Counter: "Counter";
    /**
     * Map as gauge to OpenTelemetry.
     */
    readonly Gauge: "Gauge";
    /**
     * Map as histogram to OpenTelemetry.
     */
    readonly Histogram: "Histogram";
    /**
     * Map as log to OpenTelemetry.
     */
    readonly Log: "Log";
};
/**
 * An indication of how the data point should be mapped to OpenTelemetry.
 */
export type DataPointObservabilityMode = (typeof DataPointObservabilityMode)[keyof typeof DataPointObservabilityMode];
export declare const EventObservabilityMode: {
    /**
     * No mapping to OpenTelemetry.
     */
    readonly None: "None";
    /**
     * Map as log to OpenTelemetry.
     */
    readonly Log: "Log";
};
/**
 * An indication of how the event should be mapped to OpenTelemetry.
 */
export type EventObservabilityMode = (typeof EventObservabilityMode)[keyof typeof EventObservabilityMode];
export declare const TopicRetainType: {
    /**
     * Retain the messages.
     */
    readonly Keep: "Keep";
    /**
     * Never retain messages.
     */
    readonly Never: "Never";
};
/**
 * When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
 */
export type TopicRetainType = (typeof TopicRetainType)[keyof typeof TopicRetainType];
