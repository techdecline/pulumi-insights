export declare const ActiveDirectoryAuthEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * If Enabled, Azure Active Directory authentication is enabled.
 */
export type ActiveDirectoryAuthEnum = (typeof ActiveDirectoryAuthEnum)[keyof typeof ActiveDirectoryAuthEnum];
export declare const ArmServerKeyType: {
    readonly SystemManaged: "SystemManaged";
    readonly AzureKeyVault: "AzureKeyVault";
};
/**
 * Data encryption type to depict if it is System Managed vs Azure Key vault.
 */
export type ArmServerKeyType = (typeof ArmServerKeyType)[keyof typeof ArmServerKeyType];
export declare const AzureManagedDiskPerformanceTiers: {
    readonly P1: "P1";
    readonly P2: "P2";
    readonly P3: "P3";
    readonly P4: "P4";
    readonly P6: "P6";
    readonly P10: "P10";
    readonly P15: "P15";
    readonly P20: "P20";
    readonly P30: "P30";
    readonly P40: "P40";
    readonly P50: "P50";
    readonly P60: "P60";
    readonly P70: "P70";
    readonly P80: "P80";
};
/**
 * Name of storage tier for IOPS.
 */
export type AzureManagedDiskPerformanceTiers = (typeof AzureManagedDiskPerformanceTiers)[keyof typeof AzureManagedDiskPerformanceTiers];
export declare const CancelEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * To trigger cancel for entire migration we need to send this flag as True
 */
export type CancelEnum = (typeof CancelEnum)[keyof typeof CancelEnum];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly Create: "Create";
    readonly Update: "Update";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly GeoRestore: "GeoRestore";
    readonly Replica: "Replica";
    readonly ReviveDropped: "ReviveDropped";
};
/**
 * The mode to create a new PostgreSQL server.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const GeoRedundantBackupEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * A value indicating whether Geo-Redundant backup is enabled on the server.
 */
export type GeoRedundantBackupEnum = (typeof GeoRedundantBackupEnum)[keyof typeof GeoRedundantBackupEnum];
export declare const HighAvailabilityMode: {
    readonly Disabled: "Disabled";
    readonly ZoneRedundant: "ZoneRedundant";
    readonly SameZone: "SameZone";
};
/**
 * The HA mode for the server.
 */
export type HighAvailabilityMode = (typeof HighAvailabilityMode)[keyof typeof HighAvailabilityMode];
export declare const IdentityType: {
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
};
/**
 * the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
 */
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const KeyStatusEnum: {
    readonly Valid: "Valid";
    readonly Invalid: "Invalid";
};
/**
 * Primary encryption key status for Data encryption enabled server.
 */
export type KeyStatusEnum = (typeof KeyStatusEnum)[keyof typeof KeyStatusEnum];
export declare const LogicalReplicationOnSourceDbEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Indicates whether to setup LogicalReplicationOnSourceDb, if needed
 */
export type LogicalReplicationOnSourceDbEnum = (typeof LogicalReplicationOnSourceDbEnum)[keyof typeof LogicalReplicationOnSourceDbEnum];
export declare const MigrateRolesEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * To migrate roles and permissions we need to send this flag as True
 */
export type MigrateRolesEnum = (typeof MigrateRolesEnum)[keyof typeof MigrateRolesEnum];
export declare const MigrationMode: {
    readonly Offline: "Offline";
    readonly Online: "Online";
};
/**
 * There are two types of migration modes Online and Offline
 */
export type MigrationMode = (typeof MigrationMode)[keyof typeof MigrationMode];
export declare const MigrationOption: {
    readonly Validate: "Validate";
    readonly Migrate: "Migrate";
    readonly ValidateAndMigrate: "ValidateAndMigrate";
};
/**
 * This indicates the supported Migration option for the migration
 */
export type MigrationOption = (typeof MigrationOption)[keyof typeof MigrationOption];
export declare const OverwriteDbsInTargetEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
 */
export type OverwriteDbsInTargetEnum = (typeof OverwriteDbsInTargetEnum)[keyof typeof OverwriteDbsInTargetEnum];
export declare const PasswordAuthEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * If Enabled, Password authentication is enabled.
 */
export type PasswordAuthEnum = (typeof PasswordAuthEnum)[keyof typeof PasswordAuthEnum];
export declare const PrincipalType: {
    readonly Unknown: "Unknown";
    readonly User: "User";
    readonly Group: "Group";
    readonly ServicePrincipal: "ServicePrincipal";
};
/**
 * The principal type used to represent the type of Active Directory Administrator.
 */
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const ReadReplicaPromoteMode: {
    readonly Standalone: "standalone";
    readonly Switchover: "switchover";
};
/**
 * Sets the promote mode for a replica server. This is a write only property.
 */
export type ReadReplicaPromoteMode = (typeof ReadReplicaPromoteMode)[keyof typeof ReadReplicaPromoteMode];
export declare const ReplicationPromoteOption: {
    readonly Planned: "planned";
    readonly Forced: "forced";
};
/**
 * Sets the promote options for a replica server. This is a write only property.
 */
export type ReplicationPromoteOption = (typeof ReplicationPromoteOption)[keyof typeof ReplicationPromoteOption];
export declare const ReplicationRole: {
    readonly None: "None";
    readonly Primary: "Primary";
    readonly AsyncReplica: "AsyncReplica";
    readonly GeoAsyncReplica: "GeoAsyncReplica";
};
/**
 * Replication role of the server
 */
export type ReplicationRole = (typeof ReplicationRole)[keyof typeof ReplicationRole];
export declare const ServerPublicNetworkAccessState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * public network access is enabled or not
 */
export type ServerPublicNetworkAccessState = (typeof ServerPublicNetworkAccessState)[keyof typeof ServerPublicNetworkAccessState];
export declare const ServerVersion: {
    readonly ServerVersion_16: "16";
    readonly ServerVersion_15: "15";
    readonly ServerVersion_14: "14";
    readonly ServerVersion_13: "13";
    readonly ServerVersion_12: "12";
    readonly ServerVersion_11: "11";
};
/**
 * PostgreSQL Server version.
 */
export type ServerVersion = (typeof ServerVersion)[keyof typeof ServerVersion];
export declare const SkuTier: {
    readonly Burstable: "Burstable";
    readonly GeneralPurpose: "GeneralPurpose";
    readonly MemoryOptimized: "MemoryOptimized";
};
/**
 * The tier of the particular SKU, e.g. Burstable.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const SourceType: {
    readonly OnPremises: "OnPremises";
    readonly AWS: "AWS";
    readonly GCP: "GCP";
    readonly AzureVM: "AzureVM";
    readonly PostgreSQLSingleServer: "PostgreSQLSingleServer";
    readonly AWS_RDS: "AWS_RDS";
    readonly AWS_AURORA: "AWS_AURORA";
    readonly AWS_EC2: "AWS_EC2";
    readonly GCP_CloudSQL: "GCP_CloudSQL";
    readonly GCP_AlloyDB: "GCP_AlloyDB";
    readonly GCP_Compute: "GCP_Compute";
    readonly EDB: "EDB";
};
/**
 * migration source server type : OnPremises, AWS, GCP, AzureVM, PostgreSQLSingleServer, AWS_RDS, AWS_AURORA, AWS_EC2, GCP_CloudSQL, GCP_AlloyDB, GCP_Compute, or EDB
 */
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export declare const SslMode: {
    readonly Prefer: "Prefer";
    readonly Require: "Require";
    readonly VerifyCA: "VerifyCA";
    readonly VerifyFull: "VerifyFull";
};
/**
 * SSL modes for migration. Default SSL mode for PostgreSQLSingleServer is VerifyFull and Prefer for other source types
 */
export type SslMode = (typeof SslMode)[keyof typeof SslMode];
export declare const StartDataMigrationEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Indicates whether the data migration should start right away
 */
export type StartDataMigrationEnum = (typeof StartDataMigrationEnum)[keyof typeof StartDataMigrationEnum];
export declare const StorageAutoGrow: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Flag to enable / disable Storage Auto grow for flexible server.
 */
export type StorageAutoGrow = (typeof StorageAutoGrow)[keyof typeof StorageAutoGrow];
export declare const StorageType: {
    readonly Premium_LRS: "Premium_LRS";
    readonly PremiumV2_LRS: "PremiumV2_LRS";
};
/**
 * Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
 */
export type StorageType = (typeof StorageType)[keyof typeof StorageType];
export declare const TriggerCutoverEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * To trigger cutover for entire migration we need to send this flag as True
 */
export type TriggerCutoverEnum = (typeof TriggerCutoverEnum)[keyof typeof TriggerCutoverEnum];
export declare const VirtualEndpointType: {
    readonly ReadWrite: "ReadWrite";
};
/**
 * The endpoint type for the virtual endpoint.
 */
export type VirtualEndpointType = (typeof VirtualEndpointType)[keyof typeof VirtualEndpointType];
