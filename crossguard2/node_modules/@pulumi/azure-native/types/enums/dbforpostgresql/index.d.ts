import * as v20171201 from "./v20171201";
import * as v20171201preview from "./v20171201preview";
import * as v20200214preview from "./v20200214preview";
import * as v20200214privatepreview from "./v20200214privatepreview";
import * as v20201005privatepreview from "./v20201005privatepreview";
import * as v20210410privatepreview from "./v20210410privatepreview";
import * as v20210615privatepreview from "./v20210615privatepreview";
import * as v20220308preview from "./v20220308preview";
import * as v20220308privatepreview from "./v20220308privatepreview";
import * as v20220501preview from "./v20220501preview";
import * as v20221108 from "./v20221108";
import * as v20221201 from "./v20221201";
import * as v20230301preview from "./v20230301preview";
import * as v20230302preview from "./v20230302preview";
import * as v20230601preview from "./v20230601preview";
import * as v20231201preview from "./v20231201preview";
import * as v20240301preview from "./v20240301preview";
import * as v20240801 from "./v20240801";
import * as v20241101preview from "./v20241101preview";
export { v20171201, v20171201preview, v20200214preview, v20200214privatepreview, v20201005privatepreview, v20210410privatepreview, v20210615privatepreview, v20220308preview, v20220308privatepreview, v20220501preview, v20221108, v20221201, v20230301preview, v20230302preview, v20230601preview, v20231201preview, v20240301preview, v20240801, v20241101preview, };
export declare const ActiveDirectoryAuthEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * If Enabled, Azure Active Directory authentication is enabled.
 */
export type ActiveDirectoryAuthEnum = (typeof ActiveDirectoryAuthEnum)[keyof typeof ActiveDirectoryAuthEnum];
export declare const ArmServerKeyType: {
    readonly SystemManaged: "SystemManaged";
    readonly AzureKeyVault: "AzureKeyVault";
};
/**
 * Data encryption type to depict if it is System Managed vs Azure Key vault.
 */
export type ArmServerKeyType = (typeof ArmServerKeyType)[keyof typeof ArmServerKeyType];
export declare const CancelEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * To trigger cancel for entire migration we need to send this flag as True
 */
export type CancelEnum = (typeof CancelEnum)[keyof typeof CancelEnum];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly Create: "Create";
    readonly Update: "Update";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly GeoRestore: "GeoRestore";
    readonly Replica: "Replica";
};
/**
 * The mode to create a new PostgreSQL server.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const GeoRedundantBackupEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * A value indicating whether Geo-Redundant backup is enabled on the server.
 */
export type GeoRedundantBackupEnum = (typeof GeoRedundantBackupEnum)[keyof typeof GeoRedundantBackupEnum];
export declare const HighAvailabilityMode: {
    readonly Disabled: "Disabled";
    readonly ZoneRedundant: "ZoneRedundant";
    readonly SameZone: "SameZone";
};
/**
 * The HA mode for the server.
 */
export type HighAvailabilityMode = (typeof HighAvailabilityMode)[keyof typeof HighAvailabilityMode];
export declare const IdentityType: {
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
};
/**
 * the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
 */
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const LogicalReplicationOnSourceDbEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Indicates whether to setup LogicalReplicationOnSourceDb, if needed
 */
export type LogicalReplicationOnSourceDbEnum = (typeof LogicalReplicationOnSourceDbEnum)[keyof typeof LogicalReplicationOnSourceDbEnum];
export declare const MigrationMode: {
    readonly Offline: "Offline";
    readonly Online: "Online";
};
/**
 * There are two types of migration modes Online and Offline
 */
export type MigrationMode = (typeof MigrationMode)[keyof typeof MigrationMode];
export declare const OverwriteDbsInTargetEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
 */
export type OverwriteDbsInTargetEnum = (typeof OverwriteDbsInTargetEnum)[keyof typeof OverwriteDbsInTargetEnum];
export declare const PasswordAuthEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * If Enabled, Password authentication is enabled.
 */
export type PasswordAuthEnum = (typeof PasswordAuthEnum)[keyof typeof PasswordAuthEnum];
export declare const PrincipalType: {
    readonly Unknown: "Unknown";
    readonly User: "User";
    readonly Group: "Group";
    readonly ServicePrincipal: "ServicePrincipal";
};
/**
 * The principal type used to represent the type of Active Directory Administrator.
 */
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const ReplicationRole: {
    readonly None: "None";
    readonly Primary: "Primary";
    readonly AsyncReplica: "AsyncReplica";
    readonly GeoAsyncReplica: "GeoAsyncReplica";
};
/**
 * Replication role of the server
 */
export type ReplicationRole = (typeof ReplicationRole)[keyof typeof ReplicationRole];
export declare const ServerVersion: {
    readonly ServerVersion_14: "14";
    readonly ServerVersion_13: "13";
    readonly ServerVersion_12: "12";
    readonly ServerVersion_11: "11";
};
/**
 * PostgreSQL Server version.
 */
export type ServerVersion = (typeof ServerVersion)[keyof typeof ServerVersion];
export declare const SkuTier: {
    readonly Burstable: "Burstable";
    readonly GeneralPurpose: "GeneralPurpose";
    readonly MemoryOptimized: "MemoryOptimized";
};
/**
 * The tier of the particular SKU, e.g. Burstable.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const StartDataMigrationEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Indicates whether the data migration should start right away
 */
export type StartDataMigrationEnum = (typeof StartDataMigrationEnum)[keyof typeof StartDataMigrationEnum];
export declare const TriggerCutoverEnum: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * To trigger cutover for entire migration we need to send this flag as True
 */
export type TriggerCutoverEnum = (typeof TriggerCutoverEnum)[keyof typeof TriggerCutoverEnum];
export declare const VirtualEndpointType: {
    readonly ReadWrite: "ReadWrite";
};
/**
 * The endpoint type for the virtual endpoint.
 */
export type VirtualEndpointType = (typeof VirtualEndpointType)[keyof typeof VirtualEndpointType];
