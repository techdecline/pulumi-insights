export declare const ApplicationGroupType: {
    readonly RemoteApp: "RemoteApp";
    readonly Desktop: "Desktop";
};
/**
 * Resource Type of ApplicationGroup.
 */
export type ApplicationGroupType = (typeof ApplicationGroupType)[keyof typeof ApplicationGroupType];
export declare const CommandLineSetting: {
    readonly DoNotAllow: "DoNotAllow";
    readonly Allow: "Allow";
    readonly Require: "Require";
};
/**
 * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
 */
export type CommandLineSetting = (typeof CommandLineSetting)[keyof typeof CommandLineSetting];
export declare const DayOfWeek: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const DirectUDP: {
    readonly Default: "Default";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
 */
export type DirectUDP = (typeof DirectUDP)[keyof typeof DirectUDP];
export declare const FailHealthCheckOnStagingFailure: {
    readonly Unhealthy: "Unhealthy";
    readonly NeedsAssistance: "NeedsAssistance";
    readonly DoNotFail: "DoNotFail";
};
/**
 * Parameter indicating how the health check should behave if this package fails staging
 */
export type FailHealthCheckOnStagingFailure = (typeof FailHealthCheckOnStagingFailure)[keyof typeof FailHealthCheckOnStagingFailure];
export declare const HostPoolType: {
    /**
     * Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
     */
    readonly Personal: "Personal";
    /**
     * Users get a new (random) SessionHost every time it connects to the HostPool.
     */
    readonly Pooled: "Pooled";
    /**
     * Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
     */
    readonly BYODesktop: "BYODesktop";
};
/**
 * HostPool type for desktop.
 */
export type HostPoolType = (typeof HostPoolType)[keyof typeof HostPoolType];
export declare const HostpoolPublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly EnabledForSessionHostsOnly: "EnabledForSessionHostsOnly";
    readonly EnabledForClientsOnly: "EnabledForClientsOnly";
};
/**
 * Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints
 */
export type HostpoolPublicNetworkAccess = (typeof HostpoolPublicNetworkAccess)[keyof typeof HostpoolPublicNetworkAccess];
export declare const LoadBalancerType: {
    readonly BreadthFirst: "BreadthFirst";
    readonly DepthFirst: "DepthFirst";
    readonly Persistent: "Persistent";
    readonly MultiplePersistent: "MultiplePersistent";
};
/**
 * The type of the load balancer.
 */
export type LoadBalancerType = (typeof LoadBalancerType)[keyof typeof LoadBalancerType];
export declare const ManagedPrivateUDP: {
    readonly Default: "Default";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
 */
export type ManagedPrivateUDP = (typeof ManagedPrivateUDP)[keyof typeof ManagedPrivateUDP];
export declare const ManagementType: {
    readonly Automated: "Automated";
    readonly Standard: "Standard";
};
/**
 * The type of management for this hostpool, Automated or Standard. The default value is Automated.
 */
export type ManagementType = (typeof ManagementType)[keyof typeof ManagementType];
export declare const PackageTimestamped: {
    readonly Timestamped: "Timestamped";
    readonly NotTimestamped: "NotTimestamped";
};
/**
 * Is package timestamped so it can ignore the certificate expiry date
 */
export type PackageTimestamped = (typeof PackageTimestamped)[keyof typeof PackageTimestamped];
export declare const PersonalDesktopAssignmentType: {
    readonly Automatic: "Automatic";
    readonly Direct: "Direct";
};
/**
 * PersonalDesktopAssignment type for HostPool.
 */
export type PersonalDesktopAssignmentType = (typeof PersonalDesktopAssignmentType)[keyof typeof PersonalDesktopAssignmentType];
export declare const PreferredAppGroupType: {
    readonly None: "None";
    readonly Desktop: "Desktop";
    readonly RailApplications: "RailApplications";
};
/**
 * The type of preferred application group type, default to Desktop Application Group
 */
export type PreferredAppGroupType = (typeof PreferredAppGroupType)[keyof typeof PreferredAppGroupType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const PublicUDP: {
    readonly Default: "Default";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
 */
export type PublicUDP = (typeof PublicUDP)[keyof typeof PublicUDP];
export declare const RegistrationTokenOperation: {
    readonly Delete: "Delete";
    readonly None: "None";
    readonly Update: "Update";
};
/**
 * The type of resetting the token.
 */
export type RegistrationTokenOperation = (typeof RegistrationTokenOperation)[keyof typeof RegistrationTokenOperation];
export declare const RelayUDP: {
    readonly Default: "Default";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections
 */
export type RelayUDP = (typeof RelayUDP)[keyof typeof RelayUDP];
export declare const RemoteApplicationType: {
    readonly InBuilt: "InBuilt";
    readonly MsixApplication: "MsixApplication";
};
/**
 * Resource Type of Application.
 */
export type RemoteApplicationType = (typeof RemoteApplicationType)[keyof typeof RemoteApplicationType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SSOSecretType: {
    readonly SharedKey: "SharedKey";
    readonly Certificate: "Certificate";
    readonly SharedKeyInKeyVault: "SharedKeyInKeyVault";
    readonly CertificateInKeyVault: "CertificateInKeyVault";
};
/**
 * The type of single sign on Secret Type.
 */
export type SSOSecretType = (typeof SSOSecretType)[keyof typeof SSOSecretType];
export declare const ScalingHostPoolType: {
    /**
     * Users get a new (random) SessionHost every time it connects to the HostPool.
     */
    readonly Pooled: "Pooled";
};
/**
 * HostPool type for desktop.
 */
export type ScalingHostPoolType = (typeof ScalingHostPoolType)[keyof typeof ScalingHostPoolType];
export declare const SessionHandlingOperation: {
    readonly None: "None";
    readonly Deallocate: "Deallocate";
};
/**
 * Action to be taken after a logoff during the ramp up period.
 */
export type SessionHandlingOperation = (typeof SessionHandlingOperation)[keyof typeof SessionHandlingOperation];
export declare const SessionHostComponentUpdateType: {
    /**
     * Agent and other agent side components are delivery schedule is controlled by WVD Infra.
     */
    readonly Default: "Default";
    /**
     * TenantAdmin have opted in for Scheduled Component Update feature.
     */
    readonly Scheduled: "Scheduled";
};
/**
 * The type of maintenance for session host components.
 */
export type SessionHostComponentUpdateType = (typeof SessionHostComponentUpdateType)[keyof typeof SessionHostComponentUpdateType];
export declare const SessionHostLoadBalancingAlgorithm: {
    readonly BreadthFirst: "BreadthFirst";
    readonly DepthFirst: "DepthFirst";
};
/**
 * Load balancing algorithm for ramp up period.
 */
export type SessionHostLoadBalancingAlgorithm = (typeof SessionHostLoadBalancingAlgorithm)[keyof typeof SessionHostLoadBalancingAlgorithm];
export declare const SetStartVMOnConnect: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
 */
export type SetStartVMOnConnect = (typeof SetStartVMOnConnect)[keyof typeof SetStartVMOnConnect];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const StartupBehavior: {
    /**
     * Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts.
     */
    readonly None: "None";
    /**
     * Session hosts with an assigned user will be started during Ramp Up
     */
    readonly WithAssignedUser: "WithAssignedUser";
    /**
     * All personal session hosts in the hostpool will be started during ramp up.
     */
    readonly All: "All";
};
/**
 * The desired startup behavior during the ramp up period for personal vms in the hostpool.
 */
export type StartupBehavior = (typeof StartupBehavior)[keyof typeof StartupBehavior];
export declare const StopHostsWhen: {
    readonly ZeroSessions: "ZeroSessions";
    readonly ZeroActiveSessions: "ZeroActiveSessions";
};
/**
 * Specifies when to stop hosts during ramp down period.
 */
export type StopHostsWhen = (typeof StopHostsWhen)[keyof typeof StopHostsWhen];
