export declare const ApplicationGroupType: {
    readonly RemoteApp: "RemoteApp";
    readonly Desktop: "Desktop";
};
/**
 * Resource Type of ApplicationGroup.
 */
export type ApplicationGroupType = (typeof ApplicationGroupType)[keyof typeof ApplicationGroupType];
export declare const CommandLineSetting: {
    readonly DoNotAllow: "DoNotAllow";
    readonly Allow: "Allow";
    readonly Require: "Require";
};
/**
 * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
 */
export type CommandLineSetting = (typeof CommandLineSetting)[keyof typeof CommandLineSetting];
export declare const DayOfWeek: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const HostPoolType: {
    /**
     * Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
     */
    readonly Personal: "Personal";
    /**
     * Users get a new (random) SessionHost every time it connects to the HostPool.
     */
    readonly Pooled: "Pooled";
    /**
     * Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
     */
    readonly BYODesktop: "BYODesktop";
};
/**
 * HostPool type for desktop.
 */
export type HostPoolType = (typeof HostPoolType)[keyof typeof HostPoolType];
export declare const LoadBalancerType: {
    readonly BreadthFirst: "BreadthFirst";
    readonly DepthFirst: "DepthFirst";
    readonly Persistent: "Persistent";
};
/**
 * The type of the load balancer.
 */
export type LoadBalancerType = (typeof LoadBalancerType)[keyof typeof LoadBalancerType];
export declare const PersonalDesktopAssignmentType: {
    readonly Automatic: "Automatic";
    readonly Direct: "Direct";
};
/**
 * PersonalDesktopAssignment type for HostPool.
 */
export type PersonalDesktopAssignmentType = (typeof PersonalDesktopAssignmentType)[keyof typeof PersonalDesktopAssignmentType];
export declare const PreferredAppGroupType: {
    readonly None: "None";
    readonly Desktop: "Desktop";
    readonly RailApplications: "RailApplications";
};
/**
 * The type of preferred application group type, default to Desktop Application Group
 */
export type PreferredAppGroupType = (typeof PreferredAppGroupType)[keyof typeof PreferredAppGroupType];
export declare const RegistrationTokenOperation: {
    readonly Delete: "Delete";
    readonly None: "None";
    readonly Update: "Update";
};
/**
 * The type of resetting the token.
 */
export type RegistrationTokenOperation = (typeof RegistrationTokenOperation)[keyof typeof RegistrationTokenOperation];
export declare const RemoteApplicationType: {
    readonly InBuilt: "InBuilt";
    readonly MsixApplication: "MsixApplication";
};
/**
 * Resource Type of Application.
 */
export type RemoteApplicationType = (typeof RemoteApplicationType)[keyof typeof RemoteApplicationType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SSOSecretType: {
    readonly SharedKey: "SharedKey";
    readonly Certificate: "Certificate";
    readonly SharedKeyInKeyVault: "SharedKeyInKeyVault";
    readonly CertificateInKeyVault: "CertificateInKeyVault";
};
/**
 * The type of single sign on Secret Type.
 */
export type SSOSecretType = (typeof SSOSecretType)[keyof typeof SSOSecretType];
export declare const ScalingHostPoolType: {
    /**
     * Users get a new (random) SessionHost every time it connects to the HostPool.
     */
    readonly Pooled: "Pooled";
};
/**
 * HostPool type for desktop.
 */
export type ScalingHostPoolType = (typeof ScalingHostPoolType)[keyof typeof ScalingHostPoolType];
export declare const SessionHostComponentUpdateType: {
    /**
     * Agent and other agent side components are delivery schedule is controlled by WVD Infra.
     */
    readonly Default: "Default";
    /**
     * TenantAdmin have opted in for Scheduled Component Update feature.
     */
    readonly Scheduled: "Scheduled";
};
/**
 * The type of maintenance for session host components.
 */
export type SessionHostComponentUpdateType = (typeof SessionHostComponentUpdateType)[keyof typeof SessionHostComponentUpdateType];
export declare const SessionHostLoadBalancingAlgorithm: {
    readonly BreadthFirst: "BreadthFirst";
    readonly DepthFirst: "DepthFirst";
};
/**
 * Load balancing algorithm for ramp up period.
 */
export type SessionHostLoadBalancingAlgorithm = (typeof SessionHostLoadBalancingAlgorithm)[keyof typeof SessionHostLoadBalancingAlgorithm];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const StopHostsWhen: {
    readonly ZeroSessions: "ZeroSessions";
    readonly ZeroActiveSessions: "ZeroActiveSessions";
};
/**
 * Specifies when to stop hosts during ramp down period.
 */
export type StopHostsWhen = (typeof StopHostsWhen)[keyof typeof StopHostsWhen];
