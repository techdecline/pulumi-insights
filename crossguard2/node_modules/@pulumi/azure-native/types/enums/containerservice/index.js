"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpFamily = exports.GPUInstanceProfile = exports.ExtendedLocationTypes = exports.Expander = exports.ConnectionStatus = exports.Code = exports.AutoUpgradeNodeImageSelectionType = exports.AgentPoolType = exports.AgentPoolMode = exports.v20241001 = exports.v20240902preview = exports.v20240901 = exports.v20240801 = exports.v20240702preview = exports.v20240701 = exports.v20240602preview = exports.v20240502preview = exports.v20240501 = exports.v20240402preview = exports.v20240401 = exports.v20240302preview = exports.v20240202preview = exports.v20240201 = exports.v20240102preview = exports.v20240101 = exports.v20231102preview = exports.v20231101 = exports.v20231015 = exports.v20231002preview = exports.v20231001 = exports.v20230902preview = exports.v20230901 = exports.v20230815preview = exports.v20230802preview = exports.v20230801 = exports.v20230702preview = exports.v20230701 = exports.v20230615preview = exports.v20230602preview = exports.v20230601 = exports.v20230502preview = exports.v20230401 = exports.v20230315preview = exports.v20220402preview = exports.v20210801 = exports.v20210501 = exports.v20210201 = exports.v20200601 = exports.v20191027preview = exports.v20190601 = void 0;
exports.WorkloadRuntime = exports.WeekDay = exports.UpgradeChannel = exports.SnapshotType = exports.ScaleSetPriority = exports.ScaleSetEvictionPolicy = exports.ScaleDownMode = exports.ResourceIdentityType = exports.PublicNetworkAccess = exports.OutboundType = exports.Operator = exports.OpenShiftContainerServiceVMSize = exports.OpenShiftAgentPoolProfileRole = exports.OSType = exports.OSSKU = exports.OSDiskType = exports.NetworkPolicy = exports.NetworkPluginMode = exports.NetworkPlugin = exports.NetworkMode = exports.NetworkDataplane = exports.ManagedClusterUpgradeType = exports.ManagedClusterSKUTier = exports.ManagedClusterSKUName = exports.LoadBalancerSku = exports.LicenseType = exports.KubernetesSupportPlan = exports.KubeletDiskType = exports.KeyVaultNetworkAccessTypes = void 0;
// Export sub-modules:
const v20190601 = require("./v20190601");
exports.v20190601 = v20190601;
const v20191027preview = require("./v20191027preview");
exports.v20191027preview = v20191027preview;
const v20200601 = require("./v20200601");
exports.v20200601 = v20200601;
const v20210201 = require("./v20210201");
exports.v20210201 = v20210201;
const v20210501 = require("./v20210501");
exports.v20210501 = v20210501;
const v20210801 = require("./v20210801");
exports.v20210801 = v20210801;
const v20220402preview = require("./v20220402preview");
exports.v20220402preview = v20220402preview;
const v20230315preview = require("./v20230315preview");
exports.v20230315preview = v20230315preview;
const v20230401 = require("./v20230401");
exports.v20230401 = v20230401;
const v20230502preview = require("./v20230502preview");
exports.v20230502preview = v20230502preview;
const v20230601 = require("./v20230601");
exports.v20230601 = v20230601;
const v20230602preview = require("./v20230602preview");
exports.v20230602preview = v20230602preview;
const v20230615preview = require("./v20230615preview");
exports.v20230615preview = v20230615preview;
const v20230701 = require("./v20230701");
exports.v20230701 = v20230701;
const v20230702preview = require("./v20230702preview");
exports.v20230702preview = v20230702preview;
const v20230801 = require("./v20230801");
exports.v20230801 = v20230801;
const v20230802preview = require("./v20230802preview");
exports.v20230802preview = v20230802preview;
const v20230815preview = require("./v20230815preview");
exports.v20230815preview = v20230815preview;
const v20230901 = require("./v20230901");
exports.v20230901 = v20230901;
const v20230902preview = require("./v20230902preview");
exports.v20230902preview = v20230902preview;
const v20231001 = require("./v20231001");
exports.v20231001 = v20231001;
const v20231002preview = require("./v20231002preview");
exports.v20231002preview = v20231002preview;
const v20231015 = require("./v20231015");
exports.v20231015 = v20231015;
const v20231101 = require("./v20231101");
exports.v20231101 = v20231101;
const v20231102preview = require("./v20231102preview");
exports.v20231102preview = v20231102preview;
const v20240101 = require("./v20240101");
exports.v20240101 = v20240101;
const v20240102preview = require("./v20240102preview");
exports.v20240102preview = v20240102preview;
const v20240201 = require("./v20240201");
exports.v20240201 = v20240201;
const v20240202preview = require("./v20240202preview");
exports.v20240202preview = v20240202preview;
const v20240302preview = require("./v20240302preview");
exports.v20240302preview = v20240302preview;
const v20240401 = require("./v20240401");
exports.v20240401 = v20240401;
const v20240402preview = require("./v20240402preview");
exports.v20240402preview = v20240402preview;
const v20240501 = require("./v20240501");
exports.v20240501 = v20240501;
const v20240502preview = require("./v20240502preview");
exports.v20240502preview = v20240502preview;
const v20240602preview = require("./v20240602preview");
exports.v20240602preview = v20240602preview;
const v20240701 = require("./v20240701");
exports.v20240701 = v20240701;
const v20240702preview = require("./v20240702preview");
exports.v20240702preview = v20240702preview;
const v20240801 = require("./v20240801");
exports.v20240801 = v20240801;
const v20240901 = require("./v20240901");
exports.v20240901 = v20240901;
const v20240902preview = require("./v20240902preview");
exports.v20240902preview = v20240902preview;
const v20241001 = require("./v20241001");
exports.v20241001 = v20241001;
exports.AgentPoolMode = {
    /**
     * System agent pools are primarily for hosting critical system pods such as CoreDNS and metrics-server. System agent pools osType must be Linux. System agent pools VM SKU must have at least 2vCPUs and 4GB of memory.
     */
    System: "System",
    /**
     * User agent pools are primarily for hosting your application pods.
     */
    User: "User",
};
exports.AgentPoolType = {
    /**
     * Create an Agent Pool backed by a Virtual Machine Scale Set.
     */
    VirtualMachineScaleSets: "VirtualMachineScaleSets",
    /**
     * Use of this is strongly discouraged.
     */
    AvailabilitySet: "AvailabilitySet",
};
exports.AutoUpgradeNodeImageSelectionType = {
    /**
     * Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions.
     */
    Latest: "Latest",
    /**
     * The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'.
     */
    Consistent: "Consistent",
};
exports.Code = {
    /**
     * The cluster is running.
     */
    Running: "Running",
    /**
     * The cluster is stopped.
     */
    Stopped: "Stopped",
};
exports.ConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
    Disconnected: "Disconnected",
};
exports.Expander = {
    /**
     * Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources.
     */
    Least_waste: "least-waste",
    /**
     * Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won't cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once.
     */
    Most_pods: "most-pods",
    /**
     * Selects the node group that has the highest priority assigned by the user. It's configuration is described in more details [here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md).
     */
    Priority: "priority",
    /**
     * Used when you don't have a particular need for the node groups to scale differently.
     */
    Random: "random",
};
exports.ExtendedLocationTypes = {
    EdgeZone: "EdgeZone",
};
exports.GPUInstanceProfile = {
    MIG1g: "MIG1g",
    MIG2g: "MIG2g",
    MIG3g: "MIG3g",
    MIG4g: "MIG4g",
    MIG7g: "MIG7g",
};
exports.IpFamily = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.KeyVaultNetworkAccessTypes = {
    Public: "Public",
    Private: "Private",
};
exports.KubeletDiskType = {
    /**
     * Kubelet will use the OS disk for its data.
     */
    OS: "OS",
    /**
     * Kubelet will use the temporary disk for its data.
     */
    Temporary: "Temporary",
};
exports.KubernetesSupportPlan = {
    /**
     * Support for the version is the same as for the open source Kubernetes offering. Official Kubernetes open source community support versions for 1 year after release.
     */
    KubernetesOfficial: "KubernetesOfficial",
    /**
     * Support for the version extended past the KubernetesOfficial support of 1 year. AKS continues to patch CVEs for another 1 year, for a total of 2 years of support.
     */
    AKSLongTermSupport: "AKSLongTermSupport",
};
exports.LicenseType = {
    /**
     * No additional licensing is applied.
     */
    None: "None",
    /**
     * Enables Azure Hybrid User Benefits for Windows VMs.
     */
    Windows_Server: "Windows_Server",
};
exports.LoadBalancerSku = {
    /**
     * Use a a standard Load Balancer. This is the recommended Load Balancer SKU. For more information about on working with the load balancer in the managed cluster, see the [standard Load Balancer](https://docs.microsoft.com/azure/aks/load-balancer-standard) article.
     */
    Standard: "standard",
    /**
     * Use a basic Load Balancer with limited functionality.
     */
    Basic: "basic",
};
exports.ManagedClusterSKUName = {
    /**
     * Base option for the AKS control plane.
     */
    Base: "Base",
};
exports.ManagedClusterSKUTier = {
    /**
     * Cluster has premium capabilities in addition to all of the capabilities included in 'Standard'. Premium enables selection of LongTermSupport (aka.ms/aks/lts) for certain Kubernetes versions.
     */
    Premium: "Premium",
    /**
     * Recommended for mission-critical and production workloads. Includes Kubernetes control plane autoscaling, workload-intensive testing, and up to 5,000 nodes per cluster. Guarantees 99.95% availability of the Kubernetes API server endpoint for clusters that use Availability Zones and 99.9% of availability for clusters that don't use Availability Zones.
     */
    Standard: "Standard",
    /**
     * The cluster management is free, but charged for VM, storage, and networking usage. Best for experimenting, learning, simple testing, or workloads with fewer than 10 nodes. Not recommended for production use cases.
     */
    Free: "Free",
};
exports.ManagedClusterUpgradeType = {
    /**
     * Full upgrades the control plane and all agent pools of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set.
     */
    Full: "Full",
    /**
     * NodeImageOnly upgrades only the node images of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to NOT be set.
     */
    NodeImageOnly: "NodeImageOnly",
};
exports.NetworkDataplane = {
    /**
     * Use Azure network dataplane.
     */
    Azure: "azure",
    /**
     * Use Cilium network dataplane. See [Azure CNI Powered by Cilium](https://learn.microsoft.com/azure/aks/azure-cni-powered-by-cilium) for more information.
     */
    Cilium: "cilium",
};
exports.NetworkMode = {
    /**
     * No bridge is created. Intra-VM Pod to Pod communication is through IP routes created by Azure CNI. See [Transparent Mode](https://docs.microsoft.com/azure/aks/faq#transparent-mode) for more information.
     */
    Transparent: "transparent",
    /**
     * This is no longer supported
     */
    Bridge: "bridge",
};
exports.NetworkPlugin = {
    /**
     * Use the Azure CNI network plugin. See [Azure CNI (advanced) networking](https://docs.microsoft.com/azure/aks/concepts-network#azure-cni-advanced-networking) for more information.
     */
    Azure: "azure",
    /**
     * Use the Kubenet network plugin. See [Kubenet (basic) networking](https://docs.microsoft.com/azure/aks/concepts-network#kubenet-basic-networking) for more information.
     */
    Kubenet: "kubenet",
    /**
     * No CNI plugin is pre-installed. See [BYO CNI](https://docs.microsoft.com/en-us/azure/aks/use-byo-cni) for more information.
     */
    None: "none",
};
exports.NetworkPluginMode = {
    /**
     * Used with networkPlugin=azure, pods are given IPs from the PodCIDR address space but use Azure Routing Domains rather than Kubenet's method of route tables. For more information visit https://aka.ms/aks/azure-cni-overlay.
     */
    Overlay: "overlay",
};
exports.NetworkPolicy = {
    /**
     * Use Calico network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
     */
    Calico: "calico",
    /**
     * Use Azure network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
     */
    Azure: "azure",
    /**
     * Use Cilium to enforce network policies. This requires networkDataplane to be 'cilium'.
     */
    Cilium: "cilium",
};
exports.OSDiskType = {
    /**
     * Azure replicates the operating system disk for a virtual machine to Azure storage to avoid data loss should the VM need to be relocated to another host. Since containers aren't designed to have local state persisted, this behavior offers limited value while providing some drawbacks, including slower node provisioning and higher read/write latency.
     */
    Managed: "Managed",
    /**
     * Ephemeral OS disks are stored only on the host machine, just like a temporary disk. This provides lower read/write latency, along with faster node scaling and cluster upgrades.
     */
    Ephemeral: "Ephemeral",
};
exports.OSSKU = {
    /**
     * Use Ubuntu as the OS for node images.
     */
    Ubuntu: "Ubuntu",
    /**
     * Use AzureLinux as the OS for node images. Azure Linux is a container-optimized Linux distro built by Microsoft, visit https://aka.ms/azurelinux for more information.
     */
    AzureLinux: "AzureLinux",
    /**
     * Deprecated OSSKU. Microsoft recommends that new deployments choose 'AzureLinux' instead.
     */
    CBLMariner: "CBLMariner",
    /**
     * Use Windows2019 as the OS for node images. Unsupported for system node pools. Windows2019 only supports Windows2019 containers; it cannot run Windows2022 containers and vice versa.
     */
    Windows2019: "Windows2019",
    /**
     * Use Windows2022 as the OS for node images. Unsupported for system node pools. Windows2022 only supports Windows2022 containers; it cannot run Windows2019 containers and vice versa.
     */
    Windows2022: "Windows2022",
};
exports.OSType = {
    Linux: "Linux",
    Windows: "Windows",
};
exports.OpenShiftAgentPoolProfileRole = {
    Compute: "compute",
    Infra: "infra",
};
exports.OpenShiftContainerServiceVMSize = {
    Standard_D2s_v3: "Standard_D2s_v3",
    Standard_D4s_v3: "Standard_D4s_v3",
    Standard_D8s_v3: "Standard_D8s_v3",
    Standard_D16s_v3: "Standard_D16s_v3",
    Standard_D32s_v3: "Standard_D32s_v3",
    Standard_D64s_v3: "Standard_D64s_v3",
    Standard_DS4_v2: "Standard_DS4_v2",
    Standard_DS5_v2: "Standard_DS5_v2",
    Standard_F8s_v2: "Standard_F8s_v2",
    Standard_F16s_v2: "Standard_F16s_v2",
    Standard_F32s_v2: "Standard_F32s_v2",
    Standard_F64s_v2: "Standard_F64s_v2",
    Standard_F72s_v2: "Standard_F72s_v2",
    Standard_F8s: "Standard_F8s",
    Standard_F16s: "Standard_F16s",
    Standard_E4s_v3: "Standard_E4s_v3",
    Standard_E8s_v3: "Standard_E8s_v3",
    Standard_E16s_v3: "Standard_E16s_v3",
    Standard_E20s_v3: "Standard_E20s_v3",
    Standard_E32s_v3: "Standard_E32s_v3",
    Standard_E64s_v3: "Standard_E64s_v3",
    Standard_GS2: "Standard_GS2",
    Standard_GS3: "Standard_GS3",
    Standard_GS4: "Standard_GS4",
    Standard_GS5: "Standard_GS5",
    Standard_DS12_v2: "Standard_DS12_v2",
    Standard_DS13_v2: "Standard_DS13_v2",
    Standard_DS14_v2: "Standard_DS14_v2",
    Standard_DS15_v2: "Standard_DS15_v2",
    Standard_L4s: "Standard_L4s",
    Standard_L8s: "Standard_L8s",
    Standard_L16s: "Standard_L16s",
    Standard_L32s: "Standard_L32s",
};
exports.Operator = {
    /**
     * The value of the key should be in the given list.
     */
    In: "In",
    /**
     * The value of the key should not be in the given list.
     */
    NotIn: "NotIn",
    /**
     * The value of the key should exist.
     */
    Exists: "Exists",
    /**
     * The value of the key should not exist.
     */
    DoesNotExist: "DoesNotExist",
};
exports.OutboundType = {
    /**
     * The load balancer is used for egress through an AKS assigned public IP. This supports Kubernetes services of type 'loadBalancer'. For more information see [outbound type loadbalancer](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-loadbalancer).
     */
    LoadBalancer: "loadBalancer",
    /**
     * Egress paths must be defined by the user. This is an advanced scenario and requires proper network configuration. For more information see [outbound type userDefinedRouting](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-userdefinedrouting).
     */
    UserDefinedRouting: "userDefinedRouting",
    /**
     * The AKS-managed NAT gateway is used for egress.
     */
    ManagedNATGateway: "managedNATGateway",
    /**
     * The user-assigned NAT gateway associated to the cluster subnet is used for egress. This is an advanced scenario and requires proper network configuration.
     */
    UserAssignedNATGateway: "userAssignedNATGateway",
};
exports.PublicNetworkAccess = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ResourceIdentityType = {
    /**
     * Use an implicitly created system assigned managed identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the system assigned managed identity to manipulate Azure resources.
     */
    SystemAssigned: "SystemAssigned",
    /**
     * Use a user-specified identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the specified user assigned managed identity to manipulate Azure resources.
     */
    UserAssigned: "UserAssigned",
    /**
     * Do not use a managed identity for the Managed Cluster, service principal will be used instead.
     */
    None: "None",
};
exports.ScaleDownMode = {
    /**
     * Create new instances during scale up and remove instances during scale down.
     */
    Delete: "Delete",
    /**
     * Attempt to start deallocated instances (if they exist) during scale up and deallocate instances during scale down.
     */
    Deallocate: "Deallocate",
};
exports.ScaleSetEvictionPolicy = {
    /**
     * Nodes in the underlying Scale Set of the node pool are deleted when they're evicted.
     */
    Delete: "Delete",
    /**
     * Nodes in the underlying Scale Set of the node pool are set to the stopped-deallocated state upon eviction. Nodes in the stopped-deallocated state count against your compute quota and can cause issues with cluster scaling or upgrading.
     */
    Deallocate: "Deallocate",
};
exports.ScaleSetPriority = {
    /**
     * Spot priority VMs will be used. There is no SLA for spot nodes. See [spot on AKS](https://docs.microsoft.com/azure/aks/spot-node-pool) for more information.
     */
    Spot: "Spot",
    /**
     * Regular VMs will be used.
     */
    Regular: "Regular",
};
exports.SnapshotType = {
    /**
     * The snapshot is a snapshot of a node pool.
     */
    NodePool: "NodePool",
};
exports.UpgradeChannel = {
    /**
     * Automatically upgrade the cluster to the latest supported patch release on the latest supported minor version. In cases where the cluster is at a version of Kubernetes that is at an N-2 minor version where N is the latest supported minor version, the cluster first upgrades to the latest supported patch version on N-1 minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster first is upgraded to 1.18.6, then is upgraded to 1.19.1.
     */
    Rapid: "rapid",
    /**
     * Automatically upgrade the cluster to the latest supported patch release on minor version N-1, where N is the latest supported minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.18.6.
     */
    Stable: "stable",
    /**
     * Automatically upgrade the cluster to the latest supported patch version when it becomes available while keeping the minor version the same. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.17.9.
     */
    Patch: "patch",
    /**
     * Automatically upgrade the node image to the latest version available. Microsoft provides patches and new images for image nodes frequently (usually weekly), but your running nodes won't get the new images unless you do a node image upgrade. Turning on the node-image channel will automatically update your node images whenever a new version is available.
     */
    Node_image: "node-image",
    /**
     * Disables auto-upgrades and keeps the cluster at its current version of Kubernetes.
     */
    None: "none",
};
exports.WeekDay = {
    Sunday: "Sunday",
    Monday: "Monday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
    Thursday: "Thursday",
    Friday: "Friday",
    Saturday: "Saturday",
};
exports.WorkloadRuntime = {
    /**
     * Nodes will use Kubelet to run standard OCI container workloads.
     */
    OCIContainer: "OCIContainer",
    /**
     * Nodes will use Krustlet to run WASM workloads using the WASI provider (Preview).
     */
    WasmWasi: "WasmWasi",
};
//# sourceMappingURL=data:application/json;base64,