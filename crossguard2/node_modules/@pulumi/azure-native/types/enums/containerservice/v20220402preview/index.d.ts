export declare const AgentPoolMode: {
    /**
     * System agent pools are primarily for hosting critical system pods such as CoreDNS and metrics-server. System agent pools osType must be Linux. System agent pools VM SKU must have at least 2vCPUs and 4GB of memory.
     */
    readonly System: "System";
    /**
     * User agent pools are primarily for hosting your application pods.
     */
    readonly User: "User";
};
/**
 * A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
 */
export type AgentPoolMode = (typeof AgentPoolMode)[keyof typeof AgentPoolMode];
export declare const AgentPoolType: {
    /**
     * Create an Agent Pool backed by a Virtual Machine Scale Set.
     */
    readonly VirtualMachineScaleSets: "VirtualMachineScaleSets";
    /**
     * Use of this is strongly discouraged.
     */
    readonly AvailabilitySet: "AvailabilitySet";
};
/**
 * The type of Agent Pool.
 */
export type AgentPoolType = (typeof AgentPoolType)[keyof typeof AgentPoolType];
export declare const Code: {
    /**
     * The cluster is running.
     */
    readonly Running: "Running";
    /**
     * The cluster is stopped.
     */
    readonly Stopped: "Stopped";
};
/**
 * Tells whether the cluster is Running or Stopped
 */
export type Code = (typeof Code)[keyof typeof Code];
export declare const GPUInstanceProfile: {
    readonly MIG1g: "MIG1g";
    readonly MIG2g: "MIG2g";
    readonly MIG3g: "MIG3g";
    readonly MIG4g: "MIG4g";
    readonly MIG7g: "MIG7g";
};
/**
 * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
 */
export type GPUInstanceProfile = (typeof GPUInstanceProfile)[keyof typeof GPUInstanceProfile];
export declare const KubeletDiskType: {
    /**
     * Kubelet will use the OS disk for its data.
     */
    readonly OS: "OS";
    /**
     * Kubelet will use the temporary disk for its data.
     */
    readonly Temporary: "Temporary";
};
/**
 * Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
 */
export type KubeletDiskType = (typeof KubeletDiskType)[keyof typeof KubeletDiskType];
export declare const OSDiskType: {
    /**
     * Azure replicates the operating system disk for a virtual machine to Azure storage to avoid data loss should the VM need to be relocated to another host. Since containers aren't designed to have local state persisted, this behavior offers limited value while providing some drawbacks, including slower node provisioning and higher read/write latency.
     */
    readonly Managed: "Managed";
    /**
     * Ephemeral OS disks are stored only on the host machine, just like a temporary disk. This provides lower read/write latency, along with faster node scaling and cluster upgrades.
     */
    readonly Ephemeral: "Ephemeral";
};
/**
 * The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
 */
export type OSDiskType = (typeof OSDiskType)[keyof typeof OSDiskType];
export declare const OSSKU: {
    readonly Ubuntu: "Ubuntu";
    readonly CBLMariner: "CBLMariner";
    readonly Windows2019: "Windows2019";
    readonly Windows2022: "Windows2022";
};
/**
 * Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if OSType=Linux or Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after Windows2019 is deprecated.
 */
export type OSSKU = (typeof OSSKU)[keyof typeof OSSKU];
export declare const OSType: {
    /**
     * Use Linux.
     */
    readonly Linux: "Linux";
    /**
     * Use Windows.
     */
    readonly Windows: "Windows";
};
/**
 * The operating system type. The default is Linux.
 */
export type OSType = (typeof OSType)[keyof typeof OSType];
export declare const ScaleDownMode: {
    /**
     * Create new instances during scale up and remove instances during scale down.
     */
    readonly Delete: "Delete";
    /**
     * Attempt to start deallocated instances (if they exist) during scale up and deallocate instances during scale down.
     */
    readonly Deallocate: "Deallocate";
};
/**
 * This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
 */
export type ScaleDownMode = (typeof ScaleDownMode)[keyof typeof ScaleDownMode];
export declare const ScaleSetEvictionPolicy: {
    /**
     * Nodes in the underlying Scale Set of the node pool are deleted when they're evicted.
     */
    readonly Delete: "Delete";
    /**
     * Nodes in the underlying Scale Set of the node pool are set to the stopped-deallocated state upon eviction. Nodes in the stopped-deallocated state count against your compute quota and can cause issues with cluster scaling or upgrading.
     */
    readonly Deallocate: "Deallocate";
};
/**
 * This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
 */
export type ScaleSetEvictionPolicy = (typeof ScaleSetEvictionPolicy)[keyof typeof ScaleSetEvictionPolicy];
export declare const ScaleSetPriority: {
    /**
     * Spot priority VMs will be used. There is no SLA for spot nodes. See [spot on AKS](https://docs.microsoft.com/azure/aks/spot-node-pool) for more information.
     */
    readonly Spot: "Spot";
    /**
     * Regular VMs will be used.
     */
    readonly Regular: "Regular";
};
/**
 * The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
 */
export type ScaleSetPriority = (typeof ScaleSetPriority)[keyof typeof ScaleSetPriority];
export declare const WorkloadRuntime: {
    /**
     * Nodes will use Kubelet to run standard OCI container workloads.
     */
    readonly OCIContainer: "OCIContainer";
    /**
     * Nodes will use Krustlet to run WASM workloads using the WASI provider (Preview).
     */
    readonly WasmWasi: "WasmWasi";
};
/**
 * Determines the type of workload a node can run.
 */
export type WorkloadRuntime = (typeof WorkloadRuntime)[keyof typeof WorkloadRuntime];
