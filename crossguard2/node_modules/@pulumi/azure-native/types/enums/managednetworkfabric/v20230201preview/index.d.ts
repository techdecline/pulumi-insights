export declare const AddressFamily: {
    readonly Ipv4: "ipv4";
    readonly Ipv6: "ipv6";
};
/**
 * IP address family. Example: ipv4 | ipv6.
 */
export type AddressFamily = (typeof AddressFamily)[keyof typeof AddressFamily];
export declare const AllowASOverride: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * Enable Or Disable state.
 */
export type AllowASOverride = (typeof AllowASOverride)[keyof typeof AllowASOverride];
export declare const BooleanEnumProperty: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Based on this parameter the layer2/layer3 is made as mandatory. Example: True/False
 */
export type BooleanEnumProperty = (typeof BooleanEnumProperty)[keyof typeof BooleanEnumProperty];
export declare const CommunityActionTypes: {
    readonly Permit: "Permit";
    readonly Deny: "Deny";
};
/**
 * action. Example: Permit | Deny.
 */
export type CommunityActionTypes = (typeof CommunityActionTypes)[keyof typeof CommunityActionTypes];
export declare const Condition: {
    readonly EqualTo: "EqualTo";
    readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
    readonly LesserThanOrEqualTo: "LesserThanOrEqualTo";
};
/**
 * Specify prefix-list bounds.
 */
export type Condition = (typeof Condition)[keyof typeof Condition];
export declare const ConditionActionType: {
    readonly Allow: "allow";
    readonly Deny: "deny";
};
/**
 * action. Example: allow | deny.
 */
export type ConditionActionType = (typeof ConditionActionType)[keyof typeof ConditionActionType];
export declare const NetworkDeviceRoleTypes: {
    readonly CE: "CE";
    readonly ToR: "ToR";
    readonly NPB: "NPB";
    readonly TS: "TS";
    readonly Management: "Management";
};
/**
 * networkDeviceRole is the device role: Example: CE | ToR.
 */
export type NetworkDeviceRoleTypes = (typeof NetworkDeviceRoleTypes)[keyof typeof NetworkDeviceRoleTypes];
export declare const NniType: {
    readonly CE: "CE";
    readonly NPB: "NPB";
};
/**
 * Type of NNI used. Example: CE | NPB
 */
export type NniType = (typeof NniType)[keyof typeof NniType];
export declare const PeeringOption: {
    readonly OptionA: "OptionA";
    readonly OptionB: "OptionB";
};
/**
 * Peering option list.
 */
export type PeeringOption = (typeof PeeringOption)[keyof typeof PeeringOption];
export declare const RedistributeConnectedSubnets: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Advertise Connected Subnets. Ex: "True" | "False".
 */
export type RedistributeConnectedSubnets = (typeof RedistributeConnectedSubnets)[keyof typeof RedistributeConnectedSubnets];
export declare const RedistributeStaticRoutes: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Advertise Static Routes. Ex: "True" | "False".
 */
export type RedistributeStaticRoutes = (typeof RedistributeStaticRoutes)[keyof typeof RedistributeStaticRoutes];
export declare const WellKnownCommunities: {
    readonly Internet: "Internet";
    readonly LocalAS: "LocalAS";
    readonly NoAdvertise: "NoAdvertise";
    readonly NoExport: "NoExport";
    readonly GShut: "GShut";
};
/**
 *
 * `Internet` - Advertise routes to internet community.
 *  `LocalAS` - Advertise routes to only localAS peers.
 *  `NoAdvertise` - Don't advertise routes to any peer.
 * `NoExport` - Don't export to next AS.
 * `GShut` - Graceful Shutdown (GSHUT) withdraw routes before terminating BGP connection.
 */
export type WellKnownCommunities = (typeof WellKnownCommunities)[keyof typeof WellKnownCommunities];
