export declare const AclActionType: {
    readonly Drop: "Drop";
    readonly Count: "Count";
    readonly Log: "Log";
};
/**
 * Type of actions that can be performed.
 */
export type AclActionType = (typeof AclActionType)[keyof typeof AclActionType];
export declare const Action: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * Specify action.
 */
export type Action = (typeof Action)[keyof typeof Action];
export declare const AddressFamilyType: {
    readonly IPv4: "IPv4";
    readonly IPv6: "IPv6";
};
/**
 * AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
 */
export type AddressFamilyType = (typeof AddressFamilyType)[keyof typeof AddressFamilyType];
export declare const AllowASOverride: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * Enable Or Disable state.
 */
export type AllowASOverride = (typeof AllowASOverride)[keyof typeof AllowASOverride];
export declare const BooleanEnumProperty: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Based on this option layer3 parameters are mandatory. Example: True/False
 */
export type BooleanEnumProperty = (typeof BooleanEnumProperty)[keyof typeof BooleanEnumProperty];
export declare const CommunityActionTypes: {
    readonly Permit: "Permit";
    readonly Deny: "Deny";
};
/**
 * Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
 */
export type CommunityActionTypes = (typeof CommunityActionTypes)[keyof typeof CommunityActionTypes];
export declare const Condition: {
    readonly EqualTo: "EqualTo";
    readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
    readonly LesserThanOrEqualTo: "LesserThanOrEqualTo";
    readonly Range: "Range";
};
/**
 * Specify prefix-list bounds.
 */
export type Condition = (typeof Condition)[keyof typeof Condition];
export declare const ConfigurationType: {
    readonly File: "File";
    readonly Inline: "Inline";
};
/**
 * Input method to configure Network Tap Rule.
 */
export type ConfigurationType = (typeof ConfigurationType)[keyof typeof ConfigurationType];
export declare const DestinationType: {
    readonly IsolationDomain: "IsolationDomain";
    readonly Direct: "Direct";
};
/**
 * Type of destination. Input can be IsolationDomain or Direct.
 */
export type DestinationType = (typeof DestinationType)[keyof typeof DestinationType];
export declare const Encapsulation: {
    readonly None: "None";
    readonly GRE: "GRE";
};
/**
 * Type of encapsulation.
 */
export type Encapsulation = (typeof Encapsulation)[keyof typeof Encapsulation];
export declare const EncapsulationType: {
    readonly None: "None";
    readonly GTPv1: "GTPv1";
};
/**
 * Encapsulation Type that needs to be matched.
 */
export type EncapsulationType = (typeof EncapsulationType)[keyof typeof EncapsulationType];
export declare const Extension: {
    readonly NoExtension: "NoExtension";
    readonly NPB: "NPB";
};
/**
 * Extension. Example: NoExtension | NPB.
 */
export type Extension = (typeof Extension)[keyof typeof Extension];
export declare const GatewayType: {
    readonly Infrastructure: "Infrastructure";
    readonly Workload: "Workload";
};
/**
 * Gateway Type of the resource.
 */
export type GatewayType = (typeof GatewayType)[keyof typeof GatewayType];
export declare const IPAddressType: {
    readonly IPv4: "IPv4";
    readonly IPv6: "IPv6";
};
/**
 * Type of IP Address. IPv4 or IPv6
 */
export type IPAddressType = (typeof IPAddressType)[keyof typeof IPAddressType];
export declare const IsManagementType: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Configuration to use NNI for Infrastructure Management. Example: True/False.
 */
export type IsManagementType = (typeof IsManagementType)[keyof typeof IsManagementType];
export declare const IsMonitoringEnabled: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * To check whether monitoring of internal network is enabled or not.
 */
export type IsMonitoringEnabled = (typeof IsMonitoringEnabled)[keyof typeof IsMonitoringEnabled];
export declare const IsWorkloadManagementNetworkEnabled: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
 */
export type IsWorkloadManagementNetworkEnabled = (typeof IsWorkloadManagementNetworkEnabled)[keyof typeof IsWorkloadManagementNetworkEnabled];
export declare const Layer4Protocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
};
/**
 * Layer4 protocol type that needs to be matched.
 */
export type Layer4Protocol = (typeof Layer4Protocol)[keyof typeof Layer4Protocol];
export declare const NetworkRackType: {
    readonly Aggregate: "Aggregate";
    readonly Compute: "Compute";
    readonly Combined: "Combined";
};
/**
 * Network Rack SKU name.
 */
export type NetworkRackType = (typeof NetworkRackType)[keyof typeof NetworkRackType];
export declare const NfcSku: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly HighPerformance: "HighPerformance";
};
/**
 * Network Fabric Controller SKU.
 */
export type NfcSku = (typeof NfcSku)[keyof typeof NfcSku];
export declare const NniType: {
    readonly CE: "CE";
    readonly NPB: "NPB";
};
/**
 * Type of NNI used. Example: CE | NPB
 */
export type NniType = (typeof NniType)[keyof typeof NniType];
export declare const PeeringOption: {
    readonly OptionA: "OptionA";
    readonly OptionB: "OptionB";
};
/**
 * Peering option list.
 */
export type PeeringOption = (typeof PeeringOption)[keyof typeof PeeringOption];
export declare const PollingType: {
    readonly Pull: "Pull";
    readonly Push: "Push";
};
/**
 * Polling type.
 */
export type PollingType = (typeof PollingType)[keyof typeof PollingType];
export declare const PortType: {
    readonly SourcePort: "SourcePort";
    readonly DestinationPort: "DestinationPort";
};
/**
 * Port type that needs to be matched.
 */
export type PortType = (typeof PortType)[keyof typeof PortType];
export declare const PrefixType: {
    readonly Prefix: "Prefix";
    readonly LongestPrefix: "LongestPrefix";
};
/**
 * IP Prefix Type that needs to be matched.
 */
export type PrefixType = (typeof PrefixType)[keyof typeof PrefixType];
export declare const RedistributeConnectedSubnets: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Advertise Connected Subnets. Ex: "True" | "False".
 */
export type RedistributeConnectedSubnets = (typeof RedistributeConnectedSubnets)[keyof typeof RedistributeConnectedSubnets];
export declare const RedistributeStaticRoutes: {
    readonly True: "True";
    readonly False: "False";
};
/**
 * Advertise Static Routes. Ex: "True" | "False".
 */
export type RedistributeStaticRoutes = (typeof RedistributeStaticRoutes)[keyof typeof RedistributeStaticRoutes];
export declare const RoutePolicyActionType: {
    readonly Permit: "Permit";
    readonly Deny: "Deny";
    readonly Continue: "Continue";
};
/**
 * Action type. Example: Permit | Deny | Continue.
 */
export type RoutePolicyActionType = (typeof RoutePolicyActionType)[keyof typeof RoutePolicyActionType];
export declare const RoutePolicyConditionType: {
    readonly Or: "Or";
    readonly And: "And";
};
/**
 * Type of the condition used.
 */
export type RoutePolicyConditionType = (typeof RoutePolicyConditionType)[keyof typeof RoutePolicyConditionType];
export declare const SourceDestinationType: {
    readonly SourceIP: "SourceIP";
    readonly DestinationIP: "DestinationIP";
};
/**
 * IP Address type that needs to be matched.
 */
export type SourceDestinationType = (typeof SourceDestinationType)[keyof typeof SourceDestinationType];
export declare const TapRuleActionType: {
    readonly Drop: "Drop";
    readonly Count: "Count";
    readonly Log: "Log";
    readonly Replicate: "Replicate";
    readonly Goto: "Goto";
    readonly Redirect: "Redirect";
    readonly Mirror: "Mirror";
};
/**
 * Type of actions that can be performed.
 */
export type TapRuleActionType = (typeof TapRuleActionType)[keyof typeof TapRuleActionType];
export declare const WellKnownCommunities: {
    readonly Internet: "Internet";
    readonly LocalAS: "LocalAS";
    readonly NoAdvertise: "NoAdvertise";
    readonly NoExport: "NoExport";
    readonly GShut: "GShut";
};
/**
 *
 * `Internet` - Advertise routes to internet community.
 *  `LocalAS` - Advertise routes to only localAS peers.
 *  `NoAdvertise` - Don't advertise routes to any peer.
 * `NoExport` - Don't export to next AS.
 * `GShut` - Graceful Shutdown (GSHUT) withdraw routes before terminating BGP connection.
 */
export type WellKnownCommunities = (typeof WellKnownCommunities)[keyof typeof WellKnownCommunities];
