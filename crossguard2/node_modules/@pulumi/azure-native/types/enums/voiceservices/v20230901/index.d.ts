export declare const ApiBridgeActivationState: {
    /**
     * API Bridge is enabled
     */
    readonly Enabled: "enabled";
    /**
     * API Bridge is disabled
     */
    readonly Disabled: "disabled";
};
/**
 * The activation state of the API Bridge for this Communications Gateway
 */
export type ApiBridgeActivationState = (typeof ApiBridgeActivationState)[keyof typeof ApiBridgeActivationState];
export declare const AutoGeneratedDomainNameLabelScope: {
    /**
     * Generated domain name label depends on resource name and tenant ID.
     */
    readonly TenantReuse: "TenantReuse";
    /**
     * Generated domain name label depends on resource name, tenant ID and subscription ID.
     */
    readonly SubscriptionReuse: "SubscriptionReuse";
    /**
     * Generated domain name label depends on resource name, tenant ID, subscription ID and resource group name.
     */
    readonly ResourceGroupReuse: "ResourceGroupReuse";
    /**
     * Generated domain name label is always unique.
     */
    readonly NoReuse: "NoReuse";
};
/**
 * The scope at which the auto-generated domain name can be re-used
 */
export type AutoGeneratedDomainNameLabelScope = (typeof AutoGeneratedDomainNameLabelScope)[keyof typeof AutoGeneratedDomainNameLabelScope];
export declare const CommunicationsPlatform: {
    /**
     * Operator Connect
     */
    readonly OperatorConnect: "OperatorConnect";
    /**
     * Teams Phone Mobile
     */
    readonly TeamsPhoneMobile: "TeamsPhoneMobile";
    /**
     * Teams Direct Routing
     */
    readonly TeamsDirectRouting: "TeamsDirectRouting";
};
/**
 * Available platform types.
 */
export type CommunicationsPlatform = (typeof CommunicationsPlatform)[keyof typeof CommunicationsPlatform];
export declare const Connectivity: {
    /**
     * This deployment connects to the operator network using a Public IP address, e.g. when using MAPS
     */
    readonly PublicAddress: "PublicAddress";
};
/**
 * How to connect back to the operator network, e.g. MAPS
 */
export type Connectivity = (typeof Connectivity)[keyof typeof Connectivity];
export declare const E911Type: {
    /**
     * Emergency calls are not handled different from other calls
     */
    readonly Standard: "Standard";
    /**
     * Emergency calls are routed directly to the ESRP
     */
    readonly DirectToEsrp: "DirectToEsrp";
};
/**
 * How to handle 911 calls
 */
export type E911Type = (typeof E911Type)[keyof typeof E911Type];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const TeamsCodecs: {
    /**
     * Pulse code modulation(PCM) U-law narrowband audio codec(G.711u)
     */
    readonly PCMA: "PCMA";
    /**
     * Pulse code modulation(PCM) U-law narrowband audio codec(G.711u)
     */
    readonly PCMU: "PCMU";
    /**
     * G.722 wideband audio codec
     */
    readonly G722: "G722";
    /**
     * G.722.2 wideband audio codec
     */
    readonly G722_2: "G722_2";
    /**
     * SILK/8000 narrowband audio codec
     */
    readonly SILK_8: "SILK_8";
    /**
     * SILK/16000 wideband audio codec
     */
    readonly SILK_16: "SILK_16";
};
/**
 * The voice codecs expected for communication with Teams.
 */
export type TeamsCodecs = (typeof TeamsCodecs)[keyof typeof TeamsCodecs];
export declare const TestLinePurpose: {
    /**
     * The test line is used for manual testing
     */
    readonly Manual: "Manual";
    /**
     * The test line is used for automated testing
     */
    readonly Automated: "Automated";
};
/**
 * Purpose of this test line, e.g. automated or manual testing
 */
export type TestLinePurpose = (typeof TestLinePurpose)[keyof typeof TestLinePurpose];
