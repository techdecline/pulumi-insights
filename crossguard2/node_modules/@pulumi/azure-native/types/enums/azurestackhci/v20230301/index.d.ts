export declare const AvailabilityType: {
    readonly Local: "Local";
    readonly Online: "Online";
    readonly Notify: "Notify";
};
/**
 * Indicates the way the update content can be downloaded.
 */
export type AvailabilityType = (typeof AvailabilityType)[keyof typeof AvailabilityType];
export declare const DiagnosticLevel: {
    readonly Off: "Off";
    readonly Basic: "Basic";
    readonly Enhanced: "Enhanced";
};
/**
 * Desired level of diagnostic data emitted by the cluster.
 */
export type DiagnosticLevel = (typeof DiagnosticLevel)[keyof typeof DiagnosticLevel];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const SoftwareAssuranceIntent: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * Customer Intent for Software Assurance Benefit.
 */
export type SoftwareAssuranceIntent = (typeof SoftwareAssuranceIntent)[keyof typeof SoftwareAssuranceIntent];
export declare const SoftwareAssuranceStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Status of the Software Assurance for the cluster.
 */
export type SoftwareAssuranceStatus = (typeof SoftwareAssuranceStatus)[keyof typeof SoftwareAssuranceStatus];
export declare const State: {
    readonly HasPrerequisite: "HasPrerequisite";
    readonly Obsolete: "Obsolete";
    readonly Ready: "Ready";
    readonly NotApplicableBecauseAnotherUpdateIsInProgress: "NotApplicableBecauseAnotherUpdateIsInProgress";
    readonly Preparing: "Preparing";
    readonly Installing: "Installing";
    readonly Installed: "Installed";
    readonly PreparationFailed: "PreparationFailed";
    readonly InstallationFailed: "InstallationFailed";
    readonly Invalid: "Invalid";
    readonly Recalled: "Recalled";
    readonly Downloading: "Downloading";
    readonly DownloadFailed: "DownloadFailed";
    readonly HealthChecking: "HealthChecking";
    readonly HealthCheckFailed: "HealthCheckFailed";
    readonly ReadyToInstall: "ReadyToInstall";
    readonly ScanInProgress: "ScanInProgress";
    readonly ScanFailed: "ScanFailed";
};
/**
 * State of the update as it relates to this stamp.
 */
export type State = (typeof State)[keyof typeof State];
export declare const UpdateRunPropertiesState: {
    readonly Unknown: "Unknown";
    readonly Succeeded: "Succeeded";
    readonly InProgress: "InProgress";
    readonly Failed: "Failed";
};
/**
 * State of the update run.
 */
export type UpdateRunPropertiesState = (typeof UpdateRunPropertiesState)[keyof typeof UpdateRunPropertiesState];
export declare const UpdateSummariesPropertiesState: {
    readonly Unknown: "Unknown";
    readonly AppliedSuccessfully: "AppliedSuccessfully";
    readonly UpdateAvailable: "UpdateAvailable";
    readonly UpdateInProgress: "UpdateInProgress";
    readonly UpdateFailed: "UpdateFailed";
    readonly NeedsAttention: "NeedsAttention";
    readonly PreparationInProgress: "PreparationInProgress";
    readonly PreparationFailed: "PreparationFailed";
};
/**
 * Overall update state of the stamp.
 */
export type UpdateSummariesPropertiesState = (typeof UpdateSummariesPropertiesState)[keyof typeof UpdateSummariesPropertiesState];
export declare const WindowsServerSubscription: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Desired state of Windows Server Subscription.
 */
export type WindowsServerSubscription = (typeof WindowsServerSubscription)[keyof typeof WindowsServerSubscription];
