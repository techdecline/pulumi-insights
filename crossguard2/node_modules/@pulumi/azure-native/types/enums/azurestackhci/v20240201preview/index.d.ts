export declare const CloudInitDataSource: {
    /**
     * NoCloud is used as the datasource
     */
    readonly NoCloud: "NoCloud";
    /**
     * Azure is used as the datasource
     */
    readonly Azure: "Azure";
};
/**
 * Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
 */
export type CloudInitDataSource = (typeof CloudInitDataSource)[keyof typeof CloudInitDataSource];
export declare const DiskFileFormat: {
    /**
     * VHDX file format
     */
    readonly Vhdx: "vhdx";
    /**
     * VHD file format
     */
    readonly Vhd: "vhd";
};
/**
 * The format of the actual VHD file [vhd, vhdx]
 */
export type DiskFileFormat = (typeof DiskFileFormat)[keyof typeof DiskFileFormat];
export declare const ExtendedLocationTypes: {
    /**
     * Custom extended location type
     */
    readonly CustomLocation: "CustomLocation";
};
/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const HyperVGeneration: {
    /**
     * Generation 1 (V1) hypervisor
     */
    readonly V1: "V1";
    /**
     * Generation 2 (V2) hypervisor
     */
    readonly V2: "V2";
};
/**
 * The hypervisor generation of the Virtual Machine [V1, V2]
 */
export type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];
export declare const IPPoolTypeEnum: {
    /**
     * Virtual Machine IP Pool
     */
    readonly Vm: "vm";
    /**
     * VIP Pool
     */
    readonly Vippool: "vippool";
};
/**
 * Type of the IP Pool [vm, vippool]
 */
export type IPPoolTypeEnum = (typeof IPPoolTypeEnum)[keyof typeof IPPoolTypeEnum];
export declare const IpAllocationMethodEnum: {
    /**
     * Dynamic IP allocation method
     */
    readonly Dynamic: "Dynamic";
    /**
     * Static IP allocation method
     */
    readonly Static: "Static";
};
/**
 * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type IpAllocationMethodEnum = (typeof IpAllocationMethodEnum)[keyof typeof IpAllocationMethodEnum];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const OperatingSystemTypes: {
    /**
     * Windows operating system
     */
    readonly Windows: "Windows";
    /**
     * Linux operating system
     */
    readonly Linux: "Linux";
};
/**
 * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const ProvisioningAction: {
    /**
     * Install guest agent
     */
    readonly Install: "install";
    /**
     * Uninstall guest agent
     */
    readonly Uninstall: "uninstall";
    /**
     * Repair guest agent
     */
    readonly Repair: "repair";
};
/**
 * The guest agent provisioning action.
 */
export type ProvisioningAction = (typeof ProvisioningAction)[keyof typeof ProvisioningAction];
export declare const SecurityRuleAccess: {
    /**
     * Network traffic is allowed
     */
    readonly Allow: "Allow";
    /**
     * Network traffic is denied
     */
    readonly Deny: "Deny";
};
/**
 * The network traffic is allowed or denied.
 */
export type SecurityRuleAccess = (typeof SecurityRuleAccess)[keyof typeof SecurityRuleAccess];
export declare const SecurityRuleDirection: {
    /**
     * Rule is evaluated on incoming traffic
     */
    readonly Inbound: "Inbound";
    /**
     * Rule is evaluated on outgoing traffic
     */
    readonly Outbound: "Outbound";
};
/**
 * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
 */
export type SecurityRuleDirection = (typeof SecurityRuleDirection)[keyof typeof SecurityRuleDirection];
export declare const SecurityRuleProtocol: {
    /**
     * Transmission Control Protocol
     */
    readonly Tcp: "Tcp";
    /**
     * User Datagram Protocol
     */
    readonly Udp: "Udp";
    /**
     * Internet Control Message Protocol
     */
    readonly Icmp: "Icmp";
    /**
     * Wildcard rule for all protocols
     */
    readonly Asterisk: "*";
};
/**
 * Network protocol this rule applies to.
 */
export type SecurityRuleProtocol = (typeof SecurityRuleProtocol)[keyof typeof SecurityRuleProtocol];
export declare const SecurityTypes: {
    /**
     * Trusted Launch security type
     */
    readonly TrustedLaunch: "TrustedLaunch";
    /**
     * Confidential VM security type
     */
    readonly ConfidentialVM: "ConfidentialVM";
};
/**
 * Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
 */
export type SecurityTypes = (typeof SecurityTypes)[keyof typeof SecurityTypes];
export declare const VmSizeEnum: {
    /**
     * Default virtual machine size
     */
    readonly Default: "Default";
    /**
     * Standard A2 v2 virtual machine size
     */
    readonly Standard_A2_v2: "Standard_A2_v2";
    /**
     * Standard A4 v2 virtual machine size
     */
    readonly Standard_A4_v2: "Standard_A4_v2";
    /**
     * Standard D2s v3 virtual machine size
     */
    readonly Standard_D2s_v3: "Standard_D2s_v3";
    /**
     * Standard D4s v3 virtual machine size
     */
    readonly Standard_D4s_v3: "Standard_D4s_v3";
    /**
     * Standard D8s v3 virtual machine size
     */
    readonly Standard_D8s_v3: "Standard_D8s_v3";
    /**
     * Standard D16s v3 virtual machine size
     */
    readonly Standard_D16s_v3: "Standard_D16s_v3";
    /**
     * Standard D32s v3 virtual machine size
     */
    readonly Standard_D32s_v3: "Standard_D32s_v3";
    /**
     * Standard DS2 v2 virtual machine size
     */
    readonly Standard_DS2_v2: "Standard_DS2_v2";
    /**
     * Standard DS3 v2 virtual machine size
     */
    readonly Standard_DS3_v2: "Standard_DS3_v2";
    /**
     * Standard DS4 v2 virtual machine size
     */
    readonly Standard_DS4_v2: "Standard_DS4_v2";
    /**
     * Standard DS5 v2 virtual machine size
     */
    readonly Standard_DS5_v2: "Standard_DS5_v2";
    /**
     * Standard DS13 v2 virtual machine size
     */
    readonly Standard_DS13_v2: "Standard_DS13_v2";
    /**
     * Standard K8S v1 virtual machine size
     */
    readonly Standard_K8S_v1: "Standard_K8S_v1";
    /**
     * Standard K8S2 v1 virtual machine size
     */
    readonly Standard_K8S2_v1: "Standard_K8S2_v1";
    /**
     * Standard K8S3 v1 virtual machine size
     */
    readonly Standard_K8S3_v1: "Standard_K8S3_v1";
    /**
     * Standard K8S4 v1 virtual machine size
     */
    readonly Standard_K8S4_v1: "Standard_K8S4_v1";
    /**
     * Standard NK6 virtual machine size
     */
    readonly Standard_NK6: "Standard_NK6";
    /**
     * Standard NK12 virtual machine size
     */
    readonly Standard_NK12: "Standard_NK12";
    /**
     * Standard NV6 virtual machine size
     */
    readonly Standard_NV6: "Standard_NV6";
    /**
     * Standard NV12 virtual machine size
     */
    readonly Standard_NV12: "Standard_NV12";
    /**
     * Standard K8S5 v1 virtual machine size
     */
    readonly Standard_K8S5_v1: "Standard_K8S5_v1";
    /**
     * Custom virtual machine size
     */
    readonly Custom: "Custom";
};
/**
 * Enum of VM Sizes
 */
export type VmSizeEnum = (typeof VmSizeEnum)[keyof typeof VmSizeEnum];
