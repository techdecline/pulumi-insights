export declare const AvailabilityType: {
    readonly Local: "Local";
    readonly Online: "Online";
    readonly Notify: "Notify";
};
/**
 * Indicates the way the update content can be downloaded.
 */
export type AvailabilityType = (typeof AvailabilityType)[keyof typeof AvailabilityType];
export declare const CloudInitDataSource: {
    readonly NoCloud: "NoCloud";
    readonly Azure: "Azure";
};
/**
 * Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
 */
export type CloudInitDataSource = (typeof CloudInitDataSource)[keyof typeof CloudInitDataSource];
export declare const CreatedByType: {
    readonly User: "User";
    readonly Application: "Application";
    readonly ManagedIdentity: "ManagedIdentity";
    readonly Key: "Key";
};
/**
 * The type of identity that last modified the resource.
 */
export type CreatedByType = (typeof CreatedByType)[keyof typeof CreatedByType];
export declare const DiagnosticLevel: {
    readonly Off: "Off";
    readonly Basic: "Basic";
    readonly Enhanced: "Enhanced";
};
/**
 * Desired level of diagnostic data emitted by the cluster.
 */
export type DiagnosticLevel = (typeof DiagnosticLevel)[keyof typeof DiagnosticLevel];
export declare const DiskFileFormat: {
    readonly Vhdx: "vhdx";
    readonly Vhd: "vhd";
};
/**
 * The format of the actual VHD file [vhd, vhdx]
 */
export type DiskFileFormat = (typeof DiskFileFormat)[keyof typeof DiskFileFormat];
export declare const ExtendedLocationTypes: {
    readonly CustomLocation: "CustomLocation";
};
/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const HyperVGeneration: {
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The hypervisor generation of the Virtual Machine [V1, V2]
 */
export type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];
export declare const IPPoolTypeEnum: {
    readonly Vm: "vm";
    readonly Vippool: "vippool";
};
/**
 * ip pool type
 */
export type IPPoolTypeEnum = (typeof IPPoolTypeEnum)[keyof typeof IPPoolTypeEnum];
export declare const IpAllocationMethodEnum: {
    readonly Dynamic: "Dynamic";
    readonly Static: "Static";
};
/**
 * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type IpAllocationMethodEnum = (typeof IpAllocationMethodEnum)[keyof typeof IpAllocationMethodEnum];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const NetworkTypeEnum: {
    readonly NAT: "NAT";
    readonly Transparent: "Transparent";
    readonly L2Bridge: "L2Bridge";
    readonly L2Tunnel: "L2Tunnel";
    readonly ICS: "ICS";
    readonly Private: "Private";
    readonly Overlay: "Overlay";
    readonly Internal: "Internal";
    readonly Mirrored: "Mirrored";
};
/**
 * Type of the network
 */
export type NetworkTypeEnum = (typeof NetworkTypeEnum)[keyof typeof NetworkTypeEnum];
export declare const OperatingSystemTypes: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * Operating system type that the gallery image uses [Windows, Linux]
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const OsTypeEnum: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * OsType - string specifying whether the OS is Linux or Windows
 */
export type OsTypeEnum = (typeof OsTypeEnum)[keyof typeof OsTypeEnum];
export declare const PrivateIPAllocationMethodEnum: {
    readonly Dynamic: "Dynamic";
    readonly Static: "Static";
};
/**
 * PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type PrivateIPAllocationMethodEnum = (typeof PrivateIPAllocationMethodEnum)[keyof typeof PrivateIPAllocationMethodEnum];
export declare const ProvisioningAction: {
    readonly Install: "install";
    readonly Uninstall: "uninstall";
    readonly Repair: "repair";
};
/**
 * The guest agent provisioning action.
 */
export type ProvisioningAction = (typeof ProvisioningAction)[keyof typeof ProvisioningAction];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SoftwareAssuranceIntent: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * Customer Intent for Software Assurance Benefit.
 */
export type SoftwareAssuranceIntent = (typeof SoftwareAssuranceIntent)[keyof typeof SoftwareAssuranceIntent];
export declare const SoftwareAssuranceStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Status of the Software Assurance for the cluster.
 */
export type SoftwareAssuranceStatus = (typeof SoftwareAssuranceStatus)[keyof typeof SoftwareAssuranceStatus];
export declare const State: {
    readonly HasPrerequisite: "HasPrerequisite";
    readonly Obsolete: "Obsolete";
    readonly Ready: "Ready";
    readonly NotApplicableBecauseAnotherUpdateIsInProgress: "NotApplicableBecauseAnotherUpdateIsInProgress";
    readonly Preparing: "Preparing";
    readonly Installing: "Installing";
    readonly Installed: "Installed";
    readonly PreparationFailed: "PreparationFailed";
    readonly InstallationFailed: "InstallationFailed";
    readonly Invalid: "Invalid";
    readonly Recalled: "Recalled";
    readonly Downloading: "Downloading";
    readonly DownloadFailed: "DownloadFailed";
    readonly HealthChecking: "HealthChecking";
    readonly HealthCheckFailed: "HealthCheckFailed";
    readonly ReadyToInstall: "ReadyToInstall";
    readonly ScanInProgress: "ScanInProgress";
    readonly ScanFailed: "ScanFailed";
};
/**
 * State of the update as it relates to this stamp.
 */
export type State = (typeof State)[keyof typeof State];
export declare const UpdateRunPropertiesState: {
    readonly Unknown: "Unknown";
    readonly Succeeded: "Succeeded";
    readonly InProgress: "InProgress";
    readonly Failed: "Failed";
};
/**
 * State of the update run.
 */
export type UpdateRunPropertiesState = (typeof UpdateRunPropertiesState)[keyof typeof UpdateRunPropertiesState];
export declare const UpdateSummariesPropertiesState: {
    readonly Unknown: "Unknown";
    readonly AppliedSuccessfully: "AppliedSuccessfully";
    readonly UpdateAvailable: "UpdateAvailable";
    readonly UpdateInProgress: "UpdateInProgress";
    readonly UpdateFailed: "UpdateFailed";
    readonly NeedsAttention: "NeedsAttention";
    readonly PreparationInProgress: "PreparationInProgress";
    readonly PreparationFailed: "PreparationFailed";
};
/**
 * Overall update state of the stamp.
 */
export type UpdateSummariesPropertiesState = (typeof UpdateSummariesPropertiesState)[keyof typeof UpdateSummariesPropertiesState];
export declare const VmSizeEnum: {
    readonly Default: "Default";
    readonly Standard_A2_v2: "Standard_A2_v2";
    readonly Standard_A4_v2: "Standard_A4_v2";
    readonly Standard_D2s_v3: "Standard_D2s_v3";
    readonly Standard_D4s_v3: "Standard_D4s_v3";
    readonly Standard_D8s_v3: "Standard_D8s_v3";
    readonly Standard_D16s_v3: "Standard_D16s_v3";
    readonly Standard_D32s_v3: "Standard_D32s_v3";
    readonly Standard_DS2_v2: "Standard_DS2_v2";
    readonly Standard_DS3_v2: "Standard_DS3_v2";
    readonly Standard_DS4_v2: "Standard_DS4_v2";
    readonly Standard_DS5_v2: "Standard_DS5_v2";
    readonly Standard_DS13_v2: "Standard_DS13_v2";
    readonly Standard_K8S_v1: "Standard_K8S_v1";
    readonly Standard_K8S2_v1: "Standard_K8S2_v1";
    readonly Standard_K8S3_v1: "Standard_K8S3_v1";
    readonly Standard_K8S4_v1: "Standard_K8S4_v1";
    readonly Standard_NK6: "Standard_NK6";
    readonly Standard_NK12: "Standard_NK12";
    readonly Standard_NV6: "Standard_NV6";
    readonly Standard_NV12: "Standard_NV12";
    readonly Standard_K8S5_v1: "Standard_K8S5_v1";
    readonly Custom: "Custom";
};
export type VmSizeEnum = (typeof VmSizeEnum)[keyof typeof VmSizeEnum];
export declare const WindowsServerSubscription: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Desired state of Windows Server Subscription.
 */
export type WindowsServerSubscription = (typeof WindowsServerSubscription)[keyof typeof WindowsServerSubscription];
