export declare const CloudInitDataSource: {
    readonly NoCloud: "NoCloud";
    readonly Azure: "Azure";
};
/**
 * Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
 */
export type CloudInitDataSource = (typeof CloudInitDataSource)[keyof typeof CloudInitDataSource];
export declare const DiskFileFormat: {
    readonly Vhdx: "vhdx";
    readonly Vhd: "vhd";
};
/**
 * The format of the actual VHD file [vhd, vhdx]
 */
export type DiskFileFormat = (typeof DiskFileFormat)[keyof typeof DiskFileFormat];
export declare const ExtendedLocationTypes: {
    readonly CustomLocation: "CustomLocation";
};
/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const HyperVGeneration: {
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The hypervisor generation of the Virtual Machine [V1, V2]
 */
export type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];
export declare const IpAllocationMethodEnum: {
    readonly Dynamic: "Dynamic";
    readonly Static: "Static";
};
/**
 * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type IpAllocationMethodEnum = (typeof IpAllocationMethodEnum)[keyof typeof IpAllocationMethodEnum];
export declare const NetworkTypeEnum: {
    readonly NAT: "NAT";
    readonly Transparent: "Transparent";
    readonly L2Bridge: "L2Bridge";
    readonly L2Tunnel: "L2Tunnel";
    readonly ICS: "ICS";
    readonly Private: "Private";
    readonly Overlay: "Overlay";
    readonly Internal: "Internal";
    readonly Mirrored: "Mirrored";
};
/**
 * Type of the network
 */
export type NetworkTypeEnum = (typeof NetworkTypeEnum)[keyof typeof NetworkTypeEnum];
export declare const OperatingSystemTypes: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const ProvisioningAction: {
    readonly Install: "install";
    readonly Uninstall: "uninstall";
    readonly Repair: "repair";
};
/**
 * The guest agent provisioning action.
 */
export type ProvisioningAction = (typeof ProvisioningAction)[keyof typeof ProvisioningAction];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SecurityTypes: {
    readonly TrustedLaunch: "TrustedLaunch";
    readonly ConfidentialVM: "ConfidentialVM";
};
/**
 * Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
 */
export type SecurityTypes = (typeof SecurityTypes)[keyof typeof SecurityTypes];
export declare const VmSizeEnum: {
    readonly Default: "Default";
    readonly Standard_A2_v2: "Standard_A2_v2";
    readonly Standard_A4_v2: "Standard_A4_v2";
    readonly Standard_D2s_v3: "Standard_D2s_v3";
    readonly Standard_D4s_v3: "Standard_D4s_v3";
    readonly Standard_D8s_v3: "Standard_D8s_v3";
    readonly Standard_D16s_v3: "Standard_D16s_v3";
    readonly Standard_D32s_v3: "Standard_D32s_v3";
    readonly Standard_DS2_v2: "Standard_DS2_v2";
    readonly Standard_DS3_v2: "Standard_DS3_v2";
    readonly Standard_DS4_v2: "Standard_DS4_v2";
    readonly Standard_DS5_v2: "Standard_DS5_v2";
    readonly Standard_DS13_v2: "Standard_DS13_v2";
    readonly Standard_K8S_v1: "Standard_K8S_v1";
    readonly Standard_K8S2_v1: "Standard_K8S2_v1";
    readonly Standard_K8S3_v1: "Standard_K8S3_v1";
    readonly Standard_K8S4_v1: "Standard_K8S4_v1";
    readonly Standard_NK6: "Standard_NK6";
    readonly Standard_NK12: "Standard_NK12";
    readonly Standard_NV6: "Standard_NV6";
    readonly Standard_NV12: "Standard_NV12";
    readonly Standard_K8S5_v1: "Standard_K8S5_v1";
    readonly Custom: "Custom";
};
export type VmSizeEnum = (typeof VmSizeEnum)[keyof typeof VmSizeEnum];
