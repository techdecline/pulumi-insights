import * as v20210901preview from "./v20210901preview";
import * as v20220101 from "./v20220101";
import * as v20220901 from "./v20220901";
import * as v20221215preview from "./v20221215preview";
import * as v20230301 from "./v20230301";
import * as v20230601 from "./v20230601";
import * as v20230701preview from "./v20230701preview";
import * as v20230801 from "./v20230801";
import * as v20230801preview from "./v20230801preview";
import * as v20230901preview from "./v20230901preview";
import * as v20231101preview from "./v20231101preview";
import * as v20240101 from "./v20240101";
import * as v20240201preview from "./v20240201preview";
import * as v20240215preview from "./v20240215preview";
import * as v20240401 from "./v20240401";
import * as v20240501preview from "./v20240501preview";
import * as v20240715preview from "./v20240715preview";
import * as v20240801preview from "./v20240801preview";
import * as v20240901preview from "./v20240901preview";
import * as v20241001preview from "./v20241001preview";
import * as v20241201preview from "./v20241201preview";
import * as v20250201preview from "./v20250201preview";
export { v20210901preview, v20220101, v20220901, v20221215preview, v20230301, v20230601, v20230701preview, v20230801, v20230801preview, v20230901preview, v20231101preview, v20240101, v20240201preview, v20240215preview, v20240401, v20240501preview, v20240715preview, v20240801preview, v20240901preview, v20241001preview, v20241201preview, v20250201preview, };
export declare const AvailabilityType: {
    readonly Local: "Local";
    readonly Online: "Online";
    readonly Notify: "Notify";
};
/**
 * Indicates the way the update content can be downloaded.
 */
export type AvailabilityType = (typeof AvailabilityType)[keyof typeof AvailabilityType];
export declare const CloudInitDataSource: {
    readonly NoCloud: "NoCloud";
    readonly Azure: "Azure";
};
/**
 * Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
 */
export type CloudInitDataSource = (typeof CloudInitDataSource)[keyof typeof CloudInitDataSource];
export declare const ComplianceAssignmentType: {
    /**
     * Report on the state of the machine, but don't make changes.
     */
    readonly Audit: "Audit";
    /**
     * Applied to the machine. If it drifts, the local service inside the machine makes a correction at the next evaluation.
     */
    readonly ApplyAndAutoCorrect: "ApplyAndAutoCorrect";
};
/**
 * Secured Core Compliance Assignment
 */
export type ComplianceAssignmentType = (typeof ComplianceAssignmentType)[keyof typeof ComplianceAssignmentType];
export declare const DeploymentMode: {
    /**
     * Validate ECE action deployment for a cluster.
     */
    readonly Validate: "Validate";
    /**
     * Deploy ECE action deployment for a cluster.
     */
    readonly Deploy: "Deploy";
};
/**
 * Deployment mode to trigger job.
 */
export type DeploymentMode = (typeof DeploymentMode)[keyof typeof DeploymentMode];
export declare const DiagnosticLevel: {
    readonly Off: "Off";
    readonly Basic: "Basic";
    readonly Enhanced: "Enhanced";
};
/**
 * Desired level of diagnostic data emitted by the cluster.
 */
export type DiagnosticLevel = (typeof DiagnosticLevel)[keyof typeof DiagnosticLevel];
export declare const DiskFileFormat: {
    readonly Vhdx: "vhdx";
    readonly Vhd: "vhd";
};
/**
 * The format of the actual VHD file [vhd, vhdx]
 */
export type DiskFileFormat = (typeof DiskFileFormat)[keyof typeof DiskFileFormat];
export declare const EdgeDeviceKind: {
    /**
     * Arc-enabled edge device with HCI OS.
     */
    readonly HCI: "HCI";
};
/**
 * Edge Solution type to support polymorphic resource.
 */
export type EdgeDeviceKind = (typeof EdgeDeviceKind)[keyof typeof EdgeDeviceKind];
export declare const ExtendedLocationTypes: {
    readonly CustomLocation: "CustomLocation";
};
/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const HciEdgeDeviceJobType: {
    /**
     * Job to collect logs from the device.
     */
    readonly CollectLog: "CollectLog";
    /**
     * Job to provide remote support to the device.
     */
    readonly RemoteSupport: "RemoteSupport";
};
/**
 * Job Type to support polymorphic resource.
 */
export type HciEdgeDeviceJobType = (typeof HciEdgeDeviceJobType)[keyof typeof HciEdgeDeviceJobType];
export declare const HyperVGeneration: {
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The hypervisor generation of the Virtual Machine [V1, V2]
 */
export type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];
export declare const IPPoolTypeEnum: {
    readonly Vm: "vm";
    readonly Vippool: "vippool";
};
/**
 * ip pool type
 */
export type IPPoolTypeEnum = (typeof IPPoolTypeEnum)[keyof typeof IPPoolTypeEnum];
export declare const IpAllocationMethodEnum: {
    readonly Dynamic: "Dynamic";
    readonly Static: "Static";
};
/**
 * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type IpAllocationMethodEnum = (typeof IpAllocationMethodEnum)[keyof typeof IpAllocationMethodEnum];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const NetworkTypeEnum: {
    readonly NAT: "NAT";
    readonly Transparent: "Transparent";
    readonly L2Bridge: "L2Bridge";
    readonly L2Tunnel: "L2Tunnel";
    readonly ICS: "ICS";
    readonly Private: "Private";
    readonly Overlay: "Overlay";
    readonly Internal: "Internal";
    readonly Mirrored: "Mirrored";
};
/**
 * Type of the network
 */
export type NetworkTypeEnum = (typeof NetworkTypeEnum)[keyof typeof NetworkTypeEnum];
export declare const OperatingSystemTypes: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const OsTypeEnum: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * OsType - string specifying whether the OS is Linux or Windows
 */
export type OsTypeEnum = (typeof OsTypeEnum)[keyof typeof OsTypeEnum];
export declare const PrivateIPAllocationMethodEnum: {
    readonly Dynamic: "Dynamic";
    readonly Static: "Static";
};
/**
 * PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type PrivateIPAllocationMethodEnum = (typeof PrivateIPAllocationMethodEnum)[keyof typeof PrivateIPAllocationMethodEnum];
export declare const ProvisioningAction: {
    readonly Install: "install";
    readonly Uninstall: "uninstall";
    readonly Repair: "repair";
};
/**
 * The guest agent provisioning action.
 */
export type ProvisioningAction = (typeof ProvisioningAction)[keyof typeof ProvisioningAction];
export declare const RemoteSupportAccessLevel: {
    /**
     * No remote support access is granted.
     */
    readonly None: "None";
    /**
     * Access is limited to diagnostics information only.
     */
    readonly Diagnostics: "Diagnostics";
    /**
     * Access includes diagnostics information and the ability to perform repairs.
     */
    readonly DiagnosticsAndRepair: "DiagnosticsAndRepair";
};
/**
 * Remote support access level.
 */
export type RemoteSupportAccessLevel = (typeof RemoteSupportAccessLevel)[keyof typeof RemoteSupportAccessLevel];
export declare const RemoteSupportType: {
    /**
     * Enables remote support for the edge device.
     */
    readonly Enable: "Enable";
    /**
     * Revokes previously granted remote support access for the edge device.
     */
    readonly Revoke: "Revoke";
};
/**
 * Remote support type.
 */
export type RemoteSupportType = (typeof RemoteSupportType)[keyof typeof RemoteSupportType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SecurityRuleAccess: {
    /**
     * Network traffic is allowed
     */
    readonly Allow: "Allow";
    /**
     * Network traffic is denied
     */
    readonly Deny: "Deny";
};
/**
 * The network traffic is allowed or denied.
 */
export type SecurityRuleAccess = (typeof SecurityRuleAccess)[keyof typeof SecurityRuleAccess];
export declare const SecurityRuleDirection: {
    /**
     * Rule is evaluated on incoming traffic
     */
    readonly Inbound: "Inbound";
    /**
     * Rule is evaluated on outgoing traffic
     */
    readonly Outbound: "Outbound";
};
/**
 * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
 */
export type SecurityRuleDirection = (typeof SecurityRuleDirection)[keyof typeof SecurityRuleDirection];
export declare const SecurityRuleProtocol: {
    /**
     * Transmission Control Protocol
     */
    readonly Tcp: "Tcp";
    /**
     * User Datagram Protocol
     */
    readonly Udp: "Udp";
    /**
     * Internet Control Message Protocol
     */
    readonly Icmp: "Icmp";
    /**
     * Wildcard rule for all protocols
     */
    readonly Asterisk: "*";
};
/**
 * Network protocol this rule applies to.
 */
export type SecurityRuleProtocol = (typeof SecurityRuleProtocol)[keyof typeof SecurityRuleProtocol];
export declare const SecurityTypes: {
    readonly TrustedLaunch: "TrustedLaunch";
    readonly ConfidentialVM: "ConfidentialVM";
};
/**
 * Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
 */
export type SecurityTypes = (typeof SecurityTypes)[keyof typeof SecurityTypes];
export declare const SoftwareAssuranceIntent: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * Customer Intent for Software Assurance Benefit.
 */
export type SoftwareAssuranceIntent = (typeof SoftwareAssuranceIntent)[keyof typeof SoftwareAssuranceIntent];
export declare const SoftwareAssuranceStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Status of the Software Assurance for the cluster.
 */
export type SoftwareAssuranceStatus = (typeof SoftwareAssuranceStatus)[keyof typeof SoftwareAssuranceStatus];
export declare const State: {
    readonly HasPrerequisite: "HasPrerequisite";
    readonly Obsolete: "Obsolete";
    readonly Ready: "Ready";
    readonly NotApplicableBecauseAnotherUpdateIsInProgress: "NotApplicableBecauseAnotherUpdateIsInProgress";
    readonly Preparing: "Preparing";
    readonly Installing: "Installing";
    readonly Installed: "Installed";
    readonly PreparationFailed: "PreparationFailed";
    readonly InstallationFailed: "InstallationFailed";
    readonly Invalid: "Invalid";
    readonly Recalled: "Recalled";
    readonly Downloading: "Downloading";
    readonly DownloadFailed: "DownloadFailed";
    readonly HealthChecking: "HealthChecking";
    readonly HealthCheckFailed: "HealthCheckFailed";
    readonly ReadyToInstall: "ReadyToInstall";
    readonly ScanInProgress: "ScanInProgress";
    readonly ScanFailed: "ScanFailed";
};
/**
 * State of the update as it relates to this stamp.
 */
export type State = (typeof State)[keyof typeof State];
export declare const UpdateRunPropertiesState: {
    readonly Unknown: "Unknown";
    readonly Succeeded: "Succeeded";
    readonly InProgress: "InProgress";
    readonly Failed: "Failed";
};
/**
 * State of the update run.
 */
export type UpdateRunPropertiesState = (typeof UpdateRunPropertiesState)[keyof typeof UpdateRunPropertiesState];
export declare const UpdateSummariesPropertiesState: {
    readonly Unknown: "Unknown";
    readonly AppliedSuccessfully: "AppliedSuccessfully";
    readonly UpdateAvailable: "UpdateAvailable";
    readonly UpdateInProgress: "UpdateInProgress";
    readonly UpdateFailed: "UpdateFailed";
    readonly NeedsAttention: "NeedsAttention";
    readonly PreparationInProgress: "PreparationInProgress";
    readonly PreparationFailed: "PreparationFailed";
};
/**
 * Overall update state of the stamp.
 */
export type UpdateSummariesPropertiesState = (typeof UpdateSummariesPropertiesState)[keyof typeof UpdateSummariesPropertiesState];
export declare const VmSizeEnum: {
    readonly Default: "Default";
    readonly Standard_A2_v2: "Standard_A2_v2";
    readonly Standard_A4_v2: "Standard_A4_v2";
    readonly Standard_D2s_v3: "Standard_D2s_v3";
    readonly Standard_D4s_v3: "Standard_D4s_v3";
    readonly Standard_D8s_v3: "Standard_D8s_v3";
    readonly Standard_D16s_v3: "Standard_D16s_v3";
    readonly Standard_D32s_v3: "Standard_D32s_v3";
    readonly Standard_DS2_v2: "Standard_DS2_v2";
    readonly Standard_DS3_v2: "Standard_DS3_v2";
    readonly Standard_DS4_v2: "Standard_DS4_v2";
    readonly Standard_DS5_v2: "Standard_DS5_v2";
    readonly Standard_DS13_v2: "Standard_DS13_v2";
    readonly Standard_K8S_v1: "Standard_K8S_v1";
    readonly Standard_K8S2_v1: "Standard_K8S2_v1";
    readonly Standard_K8S3_v1: "Standard_K8S3_v1";
    readonly Standard_K8S4_v1: "Standard_K8S4_v1";
    readonly Standard_NK6: "Standard_NK6";
    readonly Standard_NK12: "Standard_NK12";
    readonly Standard_NV6: "Standard_NV6";
    readonly Standard_NV12: "Standard_NV12";
    readonly Standard_K8S5_v1: "Standard_K8S5_v1";
    readonly Custom: "Custom";
};
export type VmSizeEnum = (typeof VmSizeEnum)[keyof typeof VmSizeEnum];
export declare const WindowsServerSubscription: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Desired state of Windows Server Subscription.
 */
export type WindowsServerSubscription = (typeof WindowsServerSubscription)[keyof typeof WindowsServerSubscription];
