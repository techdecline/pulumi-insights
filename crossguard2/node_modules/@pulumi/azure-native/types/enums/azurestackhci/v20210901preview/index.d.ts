export declare const CloudInitDataSource: {
    readonly NoCloud: "NoCloud";
    readonly Azure: "Azure";
};
/**
 * Datasource for the gallery image when provisioning with cloud-init [Azure, NoCloud]
 */
export type CloudInitDataSource = (typeof CloudInitDataSource)[keyof typeof CloudInitDataSource];
export declare const CreatedByType: {
    readonly User: "User";
    readonly Application: "Application";
    readonly ManagedIdentity: "ManagedIdentity";
    readonly Key: "Key";
};
/**
 * The type of identity that last modified the resource.
 */
export type CreatedByType = (typeof CreatedByType)[keyof typeof CreatedByType];
export declare const DiskFileFormat: {
    readonly Vhdx: "vhdx";
    readonly Vhd: "vhd";
};
/**
 * The format of the actual VHD file [vhd, vhdx]
 */
export type DiskFileFormat = (typeof DiskFileFormat)[keyof typeof DiskFileFormat];
export declare const ExtendedLocationTypes: {
    readonly CustomLocation: "CustomLocation";
};
/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const HyperVGeneration: {
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The hypervisor generation of the Virtual Machine [V1, V2]
 */
export type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];
export declare const IPPoolTypeEnum: {
    readonly Vm: "vm";
    readonly Vippool: "vippool";
};
/**
 * ip pool type
 */
export type IPPoolTypeEnum = (typeof IPPoolTypeEnum)[keyof typeof IPPoolTypeEnum];
export declare const IpAllocationMethodEnum: {
    readonly Dynamic: "Dynamic";
    readonly Static: "Static";
};
/**
 * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type IpAllocationMethodEnum = (typeof IpAllocationMethodEnum)[keyof typeof IpAllocationMethodEnum];
export declare const NetworkTypeEnum: {
    readonly NAT: "NAT";
    readonly Transparent: "Transparent";
    readonly L2Bridge: "L2Bridge";
    readonly L2Tunnel: "L2Tunnel";
    readonly ICS: "ICS";
    readonly Private: "Private";
    readonly Overlay: "Overlay";
    readonly Internal: "Internal";
    readonly Mirrored: "Mirrored";
};
/**
 * Type of the network
 */
export type NetworkTypeEnum = (typeof NetworkTypeEnum)[keyof typeof NetworkTypeEnum];
export declare const OperatingSystemTypes: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * operating system type that the gallery image uses. Expected to be linux or windows
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const OsTypeEnum: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * OsType - string specifying whether the OS is Linux or Windows
 */
export type OsTypeEnum = (typeof OsTypeEnum)[keyof typeof OsTypeEnum];
export declare const PrivateIPAllocationMethodEnum: {
    readonly Dynamic: "Dynamic";
    readonly Static: "Static";
};
/**
 * PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
 */
export type PrivateIPAllocationMethodEnum = (typeof PrivateIPAllocationMethodEnum)[keyof typeof PrivateIPAllocationMethodEnum];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
