export declare const ApplicationScopedVolumeKind: {
    /**
     * Provides Service Fabric High Availability Volume Disk
     */
    readonly ServiceFabricVolumeDisk: "ServiceFabricVolumeDisk";
};
/**
 * Specifies the application-scoped volume kind.
 */
export type ApplicationScopedVolumeKind = (typeof ApplicationScopedVolumeKind)[keyof typeof ApplicationScopedVolumeKind];
export declare const AutoScalingMechanismKind: {
    /**
     * Indicates that scaling should be performed by adding or removing replicas.
     */
    readonly AddRemoveReplica: "AddRemoveReplica";
};
/**
 * The type of auto scaling mechanism.
 */
export type AutoScalingMechanismKind = (typeof AutoScalingMechanismKind)[keyof typeof AutoScalingMechanismKind];
export declare const AutoScalingMetricKind: {
    /**
     * Indicates that the metric is one of resources, like cpu or memory.
     */
    readonly Resource: "Resource";
};
/**
 * The type of auto scaling metric
 */
export type AutoScalingMetricKind = (typeof AutoScalingMetricKind)[keyof typeof AutoScalingMetricKind];
export declare const AutoScalingResourceMetricName: {
    /**
     * Indicates that the resource is CPU cores.
     */
    readonly Cpu: "cpu";
    /**
     * Indicates that the resource is memory in GB.
     */
    readonly MemoryInGB: "memoryInGB";
};
/**
 * Name of the resource.
 */
export type AutoScalingResourceMetricName = (typeof AutoScalingResourceMetricName)[keyof typeof AutoScalingResourceMetricName];
export declare const AutoScalingTriggerKind: {
    /**
     * Indicates that scaling should be performed based on average load of all replicas in the service.
     */
    readonly AverageLoad: "AverageLoad";
};
/**
 * The type of auto scaling trigger
 */
export type AutoScalingTriggerKind = (typeof AutoScalingTriggerKind)[keyof typeof AutoScalingTriggerKind];
export declare const DiagnosticsSinkKind: {
    /**
     * Indicates an invalid sink kind. All Service Fabric enumerations have the invalid type.
     */
    readonly Invalid: "Invalid";
    /**
     * Diagnostics settings for Geneva.
     */
    readonly AzureInternalMonitoringPipeline: "AzureInternalMonitoringPipeline";
};
/**
 * The kind of DiagnosticsSink.
 */
export type DiagnosticsSinkKind = (typeof DiagnosticsSinkKind)[keyof typeof DiagnosticsSinkKind];
export declare const HeaderMatchType: {
    readonly Exact: "exact";
};
/**
 * how to match header value
 */
export type HeaderMatchType = (typeof HeaderMatchType)[keyof typeof HeaderMatchType];
export declare const NetworkKind: {
    /**
     * Indicates a container network local to a single Service Fabric cluster. The value is 1.
     */
    readonly Local: "Local";
};
/**
 * The type of a Service Fabric container network.
 */
export type NetworkKind = (typeof NetworkKind)[keyof typeof NetworkKind];
export declare const OperatingSystemType: {
    /**
     * The required operating system is Linux.
     */
    readonly Linux: "Linux";
    /**
     * The required operating system is Windows.
     */
    readonly Windows: "Windows";
};
/**
 * The operation system required by the code in service.
 */
export type OperatingSystemType = (typeof OperatingSystemType)[keyof typeof OperatingSystemType];
export declare const PathMatchType: {
    readonly Prefix: "prefix";
};
/**
 * how to match value in the Uri
 */
export type PathMatchType = (typeof PathMatchType)[keyof typeof PathMatchType];
export declare const SecretKind: {
    /**
     * A simple secret resource whose plaintext value is provided by the user.
     */
    readonly InlinedValue: "inlinedValue";
};
/**
 * Describes the kind of secret.
 */
export type SecretKind = (typeof SecretKind)[keyof typeof SecretKind];
export declare const SizeTypes: {
    readonly Small: "Small";
    readonly Medium: "Medium";
    readonly Large: "Large";
};
/**
 * Volume size
 */
export type SizeTypes = (typeof SizeTypes)[keyof typeof SizeTypes];
export declare const VolumeProvider: {
    /**
     * Provides volumes that are backed by Azure Files.
     */
    readonly SFAzureFile: "SFAzureFile";
};
/**
 * Provider of the volume.
 */
export type VolumeProvider = (typeof VolumeProvider)[keyof typeof VolumeProvider];
