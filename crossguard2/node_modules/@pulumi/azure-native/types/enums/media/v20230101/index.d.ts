export declare const AccountEncryptionKeyType: {
    /**
     * The Account Key is encrypted with a System Key.
     */
    readonly SystemKey: "SystemKey";
    /**
     * The Account Key is encrypted with a Customer Key.
     */
    readonly CustomerKey: "CustomerKey";
};
/**
 * The type of key used to encrypt the Account Key.
 */
export type AccountEncryptionKeyType = (typeof AccountEncryptionKeyType)[keyof typeof AccountEncryptionKeyType];
export declare const AssetContainerPermission: {
    /**
     * The SAS URL will allow read access to the container.
     */
    readonly Read: "Read";
    /**
     * The SAS URL will allow read and write access to the container.
     */
    readonly ReadWrite: "ReadWrite";
    /**
     * The SAS URL will allow read, write and delete access to the container.
     */
    readonly ReadWriteDelete: "ReadWriteDelete";
};
/**
 * The permissions to set on the SAS URL.
 */
export type AssetContainerPermission = (typeof AssetContainerPermission)[keyof typeof AssetContainerPermission];
export declare const ContentKeyPolicyFairPlayRentalAndLeaseKeyType: {
    /**
     * Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Key duration is not specified.
     */
    readonly Undefined: "Undefined";
    /**
     * Dual expiry for offline rental.
     */
    readonly DualExpiry: "DualExpiry";
    /**
     * Content key can be persisted with an unlimited duration
     */
    readonly PersistentUnlimited: "PersistentUnlimited";
    /**
     * Content key can be persisted and the valid duration is limited by the Rental Duration value
     */
    readonly PersistentLimited: "PersistentLimited";
};
/**
 * The rental and lease key type.
 */
export type ContentKeyPolicyFairPlayRentalAndLeaseKeyType = (typeof ContentKeyPolicyFairPlayRentalAndLeaseKeyType)[keyof typeof ContentKeyPolicyFairPlayRentalAndLeaseKeyType];
export declare const ContentKeyPolicyPlayReadyContentType: {
    /**
     * Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Unspecified content type.
     */
    readonly Unspecified: "Unspecified";
    /**
     * Ultraviolet download content type.
     */
    readonly UltraVioletDownload: "UltraVioletDownload";
    /**
     * Ultraviolet streaming content type.
     */
    readonly UltraVioletStreaming: "UltraVioletStreaming";
};
/**
 * The PlayReady content type.
 */
export type ContentKeyPolicyPlayReadyContentType = (typeof ContentKeyPolicyPlayReadyContentType)[keyof typeof ContentKeyPolicyPlayReadyContentType];
export declare const ContentKeyPolicyPlayReadyLicenseType: {
    /**
     * Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Non persistent license.
     */
    readonly NonPersistent: "NonPersistent";
    /**
     * Persistent license. Allows offline playback.
     */
    readonly Persistent: "Persistent";
};
/**
 * The license type.
 */
export type ContentKeyPolicyPlayReadyLicenseType = (typeof ContentKeyPolicyPlayReadyLicenseType)[keyof typeof ContentKeyPolicyPlayReadyLicenseType];
export declare const ContentKeyPolicyPlayReadyUnknownOutputPassingOption: {
    /**
     * Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Passing the video portion of protected content to an Unknown Output is not allowed.
     */
    readonly NotAllowed: "NotAllowed";
    /**
     * Passing the video portion of protected content to an Unknown Output is allowed.
     */
    readonly Allowed: "Allowed";
    /**
     * Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution.
     */
    readonly AllowedWithVideoConstriction: "AllowedWithVideoConstriction";
};
/**
 * Configures Unknown output handling settings of the license.
 */
export type ContentKeyPolicyPlayReadyUnknownOutputPassingOption = (typeof ContentKeyPolicyPlayReadyUnknownOutputPassingOption)[keyof typeof ContentKeyPolicyPlayReadyUnknownOutputPassingOption];
export declare const ContentKeyPolicyRestrictionTokenType: {
    /**
     * Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Simple Web Token.
     */
    readonly Swt: "Swt";
    /**
     * JSON Web Token.
     */
    readonly Jwt: "Jwt";
};
/**
 * The type of token.
 */
export type ContentKeyPolicyRestrictionTokenType = (typeof ContentKeyPolicyRestrictionTokenType)[keyof typeof ContentKeyPolicyRestrictionTokenType];
export declare const DefaultAction: {
    /**
     * All public IP addresses are allowed.
     */
    readonly Allow: "Allow";
    /**
     * Public IP addresses are blocked.
     */
    readonly Deny: "Deny";
};
/**
 * The behavior for IP access control in Key Delivery.
 */
export type DefaultAction = (typeof DefaultAction)[keyof typeof DefaultAction];
export declare const FilterTrackPropertyCompareOperation: {
    /**
     * The equal operation.
     */
    readonly Equal: "Equal";
    /**
     * The not equal operation.
     */
    readonly NotEqual: "NotEqual";
};
/**
 * The track property condition operation.
 */
export type FilterTrackPropertyCompareOperation = (typeof FilterTrackPropertyCompareOperation)[keyof typeof FilterTrackPropertyCompareOperation];
export declare const FilterTrackPropertyType: {
    /**
     * The unknown track property type.
     */
    readonly Unknown: "Unknown";
    /**
     * The type.
     */
    readonly Type: "Type";
    /**
     * The name.
     */
    readonly Name: "Name";
    /**
     * The language.
     */
    readonly Language: "Language";
    /**
     * The fourCC.
     */
    readonly FourCC: "FourCC";
    /**
     * The bitrate.
     */
    readonly Bitrate: "Bitrate";
};
/**
 * The track property type.
 */
export type FilterTrackPropertyType = (typeof FilterTrackPropertyType)[keyof typeof FilterTrackPropertyType];
export declare const MinimumTlsVersion: {
    /**
     * Minimum TLS version is TLS 1.0.
     */
    readonly Tls10: "Tls10";
    /**
     * Minimum TLS version is TLS 1.1.
     */
    readonly Tls11: "Tls11";
    /**
     * Minimum TLS version is TLS 1.2.
     */
    readonly Tls12: "Tls12";
    /**
     * Minimum TLS version is TLS 1.3.
     */
    readonly Tls13: "Tls13";
};
/**
 * The minimum TLS version allowed for this account's requests. This is an optional property. If unspecified, a secure default value will be used.
 */
export type MinimumTlsVersion = (typeof MinimumTlsVersion)[keyof typeof MinimumTlsVersion];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    /**
     * Public network access is enabled.
     */
    readonly Enabled: "Enabled";
    /**
     * Public network access is disabled.
     */
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public network access is allowed for resources under the Media Services account.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const SecurityLevel: {
    /**
     * Represents a SecurityLevel that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * For clients under development or test. No protection against unauthorized use.
     */
    readonly SL150: "SL150";
    /**
     * For hardened devices and applications consuming commercial content. Software or hardware protection.
     */
    readonly SL2000: "SL2000";
    /**
     * For hardened devices only. Hardware protection.
     */
    readonly SL3000: "SL3000";
};
/**
 * The security level.
 */
export type SecurityLevel = (typeof SecurityLevel)[keyof typeof SecurityLevel];
export declare const StorageAccountType: {
    /**
     * The primary storage account for the Media Services account.
     */
    readonly Primary: "Primary";
    /**
     * A secondary storage account for the Media Services account.
     */
    readonly Secondary: "Secondary";
};
/**
 * The type of the storage account.
 */
export type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
export declare const StorageAuthentication: {
    /**
     * System authentication.
     */
    readonly System: "System";
    /**
     * Managed Identity authentication.
     */
    readonly ManagedIdentity: "ManagedIdentity";
};
export type StorageAuthentication = (typeof StorageAuthentication)[keyof typeof StorageAuthentication];
export declare const TrackPropertyCompareOperation: {
    /**
     * Unknown track property compare operation
     */
    readonly Unknown: "Unknown";
    /**
     * Equal operation
     */
    readonly Equal: "Equal";
};
/**
 * Track property condition operation
 */
export type TrackPropertyCompareOperation = (typeof TrackPropertyCompareOperation)[keyof typeof TrackPropertyCompareOperation];
export declare const TrackPropertyType: {
    /**
     * Unknown track property
     */
    readonly Unknown: "Unknown";
    /**
     * Track FourCC
     */
    readonly FourCC: "FourCC";
};
/**
 * Track property type
 */
export type TrackPropertyType = (typeof TrackPropertyType)[keyof typeof TrackPropertyType];
export declare const Visibility: {
    /**
     * The track is hidden to video player.
     */
    readonly Hidden: "Hidden";
    /**
     * The track is visible to video player.
     */
    readonly Visible: "Visible";
};
/**
 * When PlayerVisibility is set to "Visible", the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to "Hidden", the text will not be available to the client. The default value is "Visible".
 */
export type Visibility = (typeof Visibility)[keyof typeof Visibility];
