export declare const AutoUpgradeOptions: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
 */
export type AutoUpgradeOptions = (typeof AutoUpgradeOptions)[keyof typeof AutoUpgradeOptions];
export declare const LicenseType: {
    readonly Windows_Server: "Windows_Server";
    readonly None: "None";
};
/**
 * LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
 */
export type LicenseType = (typeof LicenseType)[keyof typeof LicenseType];
export declare const LoadBalancerSku: {
    readonly Unstacked_haproxy: "unstacked-haproxy";
    readonly Stacked_kube_vip: "stacked-kube-vip";
    readonly Stacked_metallb: "stacked-metallb";
    readonly Unmanaged: "unmanaged";
};
/**
 * LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
 */
export type LoadBalancerSku = (typeof LoadBalancerSku)[keyof typeof LoadBalancerSku];
export declare const Mode: {
    readonly System: "System";
    readonly LB: "LB";
    readonly User: "User";
};
/**
 * Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
 */
export type Mode = (typeof Mode)[keyof typeof Mode];
export declare const NetworkPolicy: {
    readonly Calico: "calico";
    readonly Flannel: "flannel";
};
/**
 * NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
 */
export type NetworkPolicy = (typeof NetworkPolicy)[keyof typeof NetworkPolicy];
export declare const OsType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
 */
export type OsType = (typeof OsType)[keyof typeof OsType];
export declare const ResourceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
