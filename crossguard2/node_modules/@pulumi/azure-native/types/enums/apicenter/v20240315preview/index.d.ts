export declare const ApiKind: {
    /**
     * A Representational State Transfer Api
     */
    readonly Rest: "rest";
    /**
     * A Graph query language Api
     */
    readonly Graphql: "graphql";
    /**
     * A gRPC Api
     */
    readonly Grpc: "grpc";
    /**
     * A SOAP Api
     */
    readonly Soap: "soap";
    /**
     * Web Hook
     */
    readonly Webhook: "webhook";
    /**
     * Web Socket
     */
    readonly Websocket: "websocket";
};
/**
 * Kind of API. For example, REST or GraphQL.
 */
export type ApiKind = (typeof ApiKind)[keyof typeof ApiKind];
export declare const DeploymentState: {
    /**
     * Active State
     */
    readonly Active: "active";
    /**
     * Inactive State
     */
    readonly Inactive: "inactive";
};
/**
 * State of API deployment.
 */
export type DeploymentState = (typeof DeploymentState)[keyof typeof DeploymentState];
export declare const EnvironmentKind: {
    /**
     * Development environment
     */
    readonly Development: "development";
    /**
     * Testing environment
     */
    readonly Testing: "testing";
    /**
     * Staging environment
     */
    readonly Staging: "staging";
    /**
     * Production environment
     */
    readonly Production: "production";
};
/**
 * Environment kind.
 */
export type EnvironmentKind = (typeof EnvironmentKind)[keyof typeof EnvironmentKind];
export declare const EnvironmentServerType: {
    /**
     * Api Management Server
     */
    readonly Azure_API_Management: "Azure API Management";
    /**
     * Compute server
     */
    readonly Azure_compute_service: "Azure compute service";
    /**
     * Apigee server
     */
    readonly Apigee_API_Management: "Apigee API Management";
    /**
     * AWS Api Gateway server
     */
    readonly AWS_API_Gateway: "AWS API Gateway";
    /**
     * Kong API Gateway server
     */
    readonly Kong_API_Gateway: "Kong API Gateway";
    /**
     * Kubernetes server
     */
    readonly Kubernetes: "Kubernetes";
    /**
     * Mulesoft Api Management server
     */
    readonly MuleSoft_API_Management: "MuleSoft API Management";
};
/**
 * Type of the server that represents the environment.
 */
export type EnvironmentServerType = (typeof EnvironmentServerType)[keyof typeof EnvironmentServerType];
export declare const LifecycleStage: {
    /**
     * design stage
     */
    readonly Design: "design";
    /**
     * development stage
     */
    readonly Development: "development";
    /**
     * testing stage
     */
    readonly Testing: "testing";
    /**
     * In preview
     */
    readonly Preview: "preview";
    /**
     * In production
     */
    readonly Production: "production";
    /**
     * deprecated stage
     */
    readonly Deprecated: "deprecated";
    /**
     * Retired stage
     */
    readonly Retired: "retired";
};
/**
 * Current lifecycle stage of the API.
 */
export type LifecycleStage = (typeof LifecycleStage)[keyof typeof LifecycleStage];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const MetadataAssignmentEntity: {
    /**
     * Assigned to API
     */
    readonly Api: "api";
    /**
     * Assigned to Environment
     */
    readonly Environment: "environment";
    /**
     * Assigned to Deployment
     */
    readonly Deployment: "deployment";
};
/**
 * The entities this metadata schema component gets applied to.
 */
export type MetadataAssignmentEntity = (typeof MetadataAssignmentEntity)[keyof typeof MetadataAssignmentEntity];
