export declare const AlertsState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
export type AlertsState = (typeof AlertsState)[keyof typeof AlertsState];
export declare const CrossRegionRestore: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Flag to show if Cross Region Restore is enabled on the Vault or not
 */
export type CrossRegionRestore = (typeof CrossRegionRestore)[keyof typeof CrossRegionRestore];
export declare const CrossSubscriptionRestoreState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly PermanentlyDisabled: "PermanentlyDisabled";
};
export type CrossSubscriptionRestoreState = (typeof CrossSubscriptionRestoreState)[keyof typeof CrossSubscriptionRestoreState];
export declare const EnhancedSecurityState: {
    readonly Invalid: "Invalid";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly AlwaysON: "AlwaysON";
};
export type EnhancedSecurityState = (typeof EnhancedSecurityState)[keyof typeof EnhancedSecurityState];
export declare const ImmutabilityState: {
    readonly Disabled: "Disabled";
    readonly Unlocked: "Unlocked";
    readonly Locked: "Locked";
};
export type ImmutabilityState = (typeof ImmutabilityState)[keyof typeof ImmutabilityState];
export declare const InfrastructureEncryptionState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enabling/Disabling the Double Encryption state
 */
export type InfrastructureEncryptionState = (typeof InfrastructureEncryptionState)[keyof typeof InfrastructureEncryptionState];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * property to enable or disable resource provider inbound network traffic from public clients
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SkuName: {
    readonly Standard: "Standard";
    readonly RS0: "RS0";
};
/**
 * Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const SoftDeleteState: {
    readonly Invalid: "Invalid";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly AlwaysON: "AlwaysON";
};
export type SoftDeleteState = (typeof SoftDeleteState)[keyof typeof SoftDeleteState];
export declare const StandardTierStorageRedundancy: {
    readonly Invalid: "Invalid";
    readonly LocallyRedundant: "LocallyRedundant";
    readonly GeoRedundant: "GeoRedundant";
    readonly ZoneRedundant: "ZoneRedundant";
};
/**
 * The storage redundancy setting of a vault
 */
export type StandardTierStorageRedundancy = (typeof StandardTierStorageRedundancy)[keyof typeof StandardTierStorageRedundancy];
