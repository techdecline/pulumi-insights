export declare const AcquireStorageAccountLock: {
    readonly Acquire: "Acquire";
    readonly NotAcquire: "NotAcquire";
};
/**
 * Whether storage account lock is to be acquired for this container or not.
 */
export type AcquireStorageAccountLock = (typeof AcquireStorageAccountLock)[keyof typeof AcquireStorageAccountLock];
export declare const AgentAutoUpdateStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * A value indicating whether the auto update is enabled.
 */
export type AgentAutoUpdateStatus = (typeof AgentAutoUpdateStatus)[keyof typeof AgentAutoUpdateStatus];
export declare const AlertsState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
export type AlertsState = (typeof AlertsState)[keyof typeof AlertsState];
export declare const AutoProtectionOfDataDisk: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * A value indicating whether the auto protection is enabled.
 */
export type AutoProtectionOfDataDisk = (typeof AutoProtectionOfDataDisk)[keyof typeof AutoProtectionOfDataDisk];
export declare const AutomationAccountAuthenticationType: {
    readonly RunAsAccount: "RunAsAccount";
    readonly SystemAssignedIdentity: "SystemAssignedIdentity";
};
/**
 * A value indicating the type authentication to use for automation Account.
 */
export type AutomationAccountAuthenticationType = (typeof AutomationAccountAuthenticationType)[keyof typeof AutomationAccountAuthenticationType];
export declare const BackupItemType: {
    readonly Invalid: "Invalid";
    readonly VM: "VM";
    readonly FileFolder: "FileFolder";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly SQLDB: "SQLDB";
    readonly Exchange: "Exchange";
    readonly Sharepoint: "Sharepoint";
    readonly VMwareVM: "VMwareVM";
    readonly SystemState: "SystemState";
    readonly Client: "Client";
    readonly GenericDataSource: "GenericDataSource";
    readonly SQLDataBase: "SQLDataBase";
    readonly AzureFileShare: "AzureFileShare";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseDatabase: "SAPAseDatabase";
    readonly SAPHanaDBInstance: "SAPHanaDBInstance";
};
/**
 * Type of backup items associated with this container.
 */
export type BackupItemType = (typeof BackupItemType)[keyof typeof BackupItemType];
export declare const BackupManagementType: {
    readonly Invalid: "Invalid";
    readonly AzureIaasVM: "AzureIaasVM";
    readonly MAB: "MAB";
    readonly DPM: "DPM";
    readonly AzureBackupServer: "AzureBackupServer";
    readonly AzureSql: "AzureSql";
    readonly AzureStorage: "AzureStorage";
    readonly AzureWorkload: "AzureWorkload";
    readonly DefaultBackup: "DefaultBackup";
};
/**
 * Type of backup management for the backed up item.
 */
export type BackupManagementType = (typeof BackupManagementType)[keyof typeof BackupManagementType];
export declare const CreateMode: {
    readonly Invalid: "Invalid";
    readonly Default: "Default";
    readonly Recover: "Recover";
};
/**
 * Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const CrossRegionRestore: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Flag to show if Cross Region Restore is enabled on the Vault or not
 */
export type CrossRegionRestore = (typeof CrossRegionRestore)[keyof typeof CrossRegionRestore];
export declare const CrossSubscriptionRestoreState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly PermanentlyDisabled: "PermanentlyDisabled";
};
export type CrossSubscriptionRestoreState = (typeof CrossSubscriptionRestoreState)[keyof typeof CrossSubscriptionRestoreState];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const DiskAccountType: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Premium_LRS: "Premium_LRS";
    readonly StandardSSD_LRS: "StandardSSD_LRS";
    readonly PremiumV2_LRS: "PremiumV2_LRS";
    readonly UltraSSD_LRS: "UltraSSD_LRS";
    readonly StandardSSD_ZRS: "StandardSSD_ZRS";
    readonly Premium_ZRS: "Premium_ZRS";
};
/**
 * The disk type.
 */
export type DiskAccountType = (typeof DiskAccountType)[keyof typeof DiskAccountType];
export declare const EnhancedSecurityState: {
    readonly Invalid: "Invalid";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly AlwaysON: "AlwaysON";
};
export type EnhancedSecurityState = (typeof EnhancedSecurityState)[keyof typeof EnhancedSecurityState];
export declare const ExtendedLocationType: {
    readonly EdgeZone: "EdgeZone";
};
/**
 * The extended location type.
 */
export type ExtendedLocationType = (typeof ExtendedLocationType)[keyof typeof ExtendedLocationType];
export declare const FailoverDeploymentModel: {
    readonly NotApplicable: "NotApplicable";
    readonly Classic: "Classic";
    readonly ResourceManager: "ResourceManager";
};
/**
 * The failover deployment model.
 */
export type FailoverDeploymentModel = (typeof FailoverDeploymentModel)[keyof typeof FailoverDeploymentModel];
export declare const IAASVMPolicyType: {
    readonly Invalid: "Invalid";
    readonly V1: "V1";
    readonly V2: "V2";
};
export type IAASVMPolicyType = (typeof IAASVMPolicyType)[keyof typeof IAASVMPolicyType];
export declare const IaasVMSnapshotConsistencyType: {
    readonly OnlyCrashConsistent: "OnlyCrashConsistent";
};
export type IaasVMSnapshotConsistencyType = (typeof IaasVMSnapshotConsistencyType)[keyof typeof IaasVMSnapshotConsistencyType];
export declare const ImmutabilityState: {
    readonly Disabled: "Disabled";
    readonly Unlocked: "Unlocked";
    readonly Locked: "Locked";
};
export type ImmutabilityState = (typeof ImmutabilityState)[keyof typeof ImmutabilityState];
export declare const InfrastructureEncryptionState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enabling/Disabling the Double Encryption state
 */
export type InfrastructureEncryptionState = (typeof InfrastructureEncryptionState)[keyof typeof InfrastructureEncryptionState];
export declare const LastBackupStatus: {
    readonly Invalid: "Invalid";
    readonly Healthy: "Healthy";
    readonly Unhealthy: "Unhealthy";
    readonly IRPending: "IRPending";
};
/**
 * Last backup operation status. Possible values: Healthy, Unhealthy.
 */
export type LastBackupStatus = (typeof LastBackupStatus)[keyof typeof LastBackupStatus];
export declare const LicenseType: {
    readonly NotSpecified: "NotSpecified";
    readonly NoLicenseType: "NoLicenseType";
    readonly WindowsServer: "WindowsServer";
};
/**
 * The license type.
 */
export type LicenseType = (typeof LicenseType)[keyof typeof LicenseType];
export declare const LinuxLicenseType: {
    readonly NotSpecified: "NotSpecified";
    readonly NoLicenseType: "NoLicenseType";
    readonly LinuxServer: "LinuxServer";
};
/**
 * The license type for Linux VM's.
 */
export type LinuxLicenseType = (typeof LinuxLicenseType)[keyof typeof LinuxLicenseType];
export declare const MonthOfYear: {
    readonly Invalid: "Invalid";
    readonly January: "January";
    readonly February: "February";
    readonly March: "March";
    readonly April: "April";
    readonly May: "May";
    readonly June: "June";
    readonly July: "July";
    readonly August: "August";
    readonly September: "September";
    readonly October: "October";
    readonly November: "November";
    readonly December: "December";
};
export type MonthOfYear = (typeof MonthOfYear)[keyof typeof MonthOfYear];
export declare const OperationType: {
    readonly Invalid: "Invalid";
    readonly Register: "Register";
    readonly Reregister: "Reregister";
};
/**
 * Re-Do Operation
 */
export type OperationType = (typeof OperationType)[keyof typeof OperationType];
export declare const PolicyType: {
    readonly Invalid: "Invalid";
    readonly Full: "Full";
    readonly Differential: "Differential";
    readonly Log: "Log";
    readonly CopyOnlyFull: "CopyOnlyFull";
    readonly Incremental: "Incremental";
    readonly SnapshotFull: "SnapshotFull";
    readonly SnapshotCopyOnlyFull: "SnapshotCopyOnlyFull";
};
/**
 * Type of backup policy type
 */
export type PolicyType = (typeof PolicyType)[keyof typeof PolicyType];
export declare const PossibleOperationsDirections: {
    readonly PrimaryToRecovery: "PrimaryToRecovery";
    readonly RecoveryToPrimary: "RecoveryToPrimary";
};
export type PossibleOperationsDirections = (typeof PossibleOperationsDirections)[keyof typeof PossibleOperationsDirections];
export declare const PrivateEndpointConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * Gets or sets the status
 */
export type PrivateEndpointConnectionStatus = (typeof PrivateEndpointConnectionStatus)[keyof typeof PrivateEndpointConnectionStatus];
export declare const ProtectableContainerType: {
    readonly Invalid: "Invalid";
    readonly Unknown: "Unknown";
    readonly IaasVMContainer: "IaasVMContainer";
    readonly IaasVMServiceContainer: "IaasVMServiceContainer";
    readonly DPMContainer: "DPMContainer";
    readonly AzureBackupServerContainer: "AzureBackupServerContainer";
    readonly MABContainer: "MABContainer";
    readonly Cluster: "Cluster";
    readonly AzureSqlContainer: "AzureSqlContainer";
    readonly Windows: "Windows";
    readonly VCenter: "VCenter";
    readonly VMAppContainer: "VMAppContainer";
    readonly SQLAGWorkLoadContainer: "SQLAGWorkLoadContainer";
    readonly StorageContainer: "StorageContainer";
    readonly GenericContainer: "GenericContainer";
    readonly Microsoft_ClassicCompute_virtualMachines: "Microsoft.ClassicCompute/virtualMachines";
    readonly Microsoft_Compute_virtualMachines: "Microsoft.Compute/virtualMachines";
    readonly AzureWorkloadContainer: "AzureWorkloadContainer";
};
/**
 * Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
 * Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
 * Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
 * Backup is VMAppContainer
 */
export type ProtectableContainerType = (typeof ProtectableContainerType)[keyof typeof ProtectableContainerType];
export declare const ProtectedItemHealthStatus: {
    readonly Invalid: "Invalid";
    readonly Healthy: "Healthy";
    readonly Unhealthy: "Unhealthy";
    readonly NotReachable: "NotReachable";
    readonly IRPending: "IRPending";
};
/**
 * Health status of the backup item, evaluated based on last heartbeat received
 */
export type ProtectedItemHealthStatus = (typeof ProtectedItemHealthStatus)[keyof typeof ProtectedItemHealthStatus];
export declare const ProtectedItemState: {
    readonly Invalid: "Invalid";
    readonly IRPending: "IRPending";
    readonly Protected: "Protected";
    readonly ProtectionError: "ProtectionError";
    readonly ProtectionStopped: "ProtectionStopped";
    readonly ProtectionPaused: "ProtectionPaused";
    readonly BackupsSuspended: "BackupsSuspended";
};
/**
 * Protection state of the backup engine
 */
export type ProtectedItemState = (typeof ProtectedItemState)[keyof typeof ProtectedItemState];
export declare const ProtectionIntentItemType: {
    readonly Invalid: "Invalid";
    readonly AzureResourceItem: "AzureResourceItem";
    readonly RecoveryServiceVaultItem: "RecoveryServiceVaultItem";
    readonly AzureWorkloadContainerAutoProtectionIntent: "AzureWorkloadContainerAutoProtectionIntent";
    readonly AzureWorkloadAutoProtectionIntent: "AzureWorkloadAutoProtectionIntent";
    readonly AzureWorkloadSQLAutoProtectionIntent: "AzureWorkloadSQLAutoProtectionIntent";
};
/**
 * backup protectionIntent type.
 */
export type ProtectionIntentItemType = (typeof ProtectionIntentItemType)[keyof typeof ProtectionIntentItemType];
export declare const ProtectionState: {
    readonly Invalid: "Invalid";
    readonly IRPending: "IRPending";
    readonly Protected: "Protected";
    readonly ProtectionError: "ProtectionError";
    readonly ProtectionStopped: "ProtectionStopped";
    readonly ProtectionPaused: "ProtectionPaused";
    readonly BackupsSuspended: "BackupsSuspended";
};
/**
 * Backup state of this backup item.
 */
export type ProtectionState = (typeof ProtectionState)[keyof typeof ProtectionState];
export declare const ProtectionStatus: {
    readonly Invalid: "Invalid";
    readonly NotProtected: "NotProtected";
    readonly Protecting: "Protecting";
    readonly Protected: "Protected";
    readonly ProtectionFailed: "ProtectionFailed";
};
/**
 * Backup state of this backup item.
 */
export type ProtectionStatus = (typeof ProtectionStatus)[keyof typeof ProtectionStatus];
export declare const ProvisioningState: {
    readonly Succeeded: "Succeeded";
    readonly Deleting: "Deleting";
    readonly Failed: "Failed";
    readonly Pending: "Pending";
};
/**
 * Gets or sets provisioning state of the private endpoint connection
 */
export type ProvisioningState = (typeof ProvisioningState)[keyof typeof ProvisioningState];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * property to enable or disable resource provider inbound network traffic from public clients
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const RecoveryPlanActionLocation: {
    readonly Primary: "Primary";
    readonly Recovery: "Recovery";
};
/**
 * The fabric location.
 */
export type RecoveryPlanActionLocation = (typeof RecoveryPlanActionLocation)[keyof typeof RecoveryPlanActionLocation];
export declare const RecoveryPlanGroupType: {
    readonly Shutdown: "Shutdown";
    readonly Boot: "Boot";
    readonly Failover: "Failover";
};
/**
 * The group type.
 */
export type RecoveryPlanGroupType = (typeof RecoveryPlanGroupType)[keyof typeof RecoveryPlanGroupType];
export declare const ReplicationProtectedItemOperation: {
    readonly ReverseReplicate: "ReverseReplicate";
    readonly Commit: "Commit";
    readonly PlannedFailover: "PlannedFailover";
    readonly UnplannedFailover: "UnplannedFailover";
    readonly DisableProtection: "DisableProtection";
    readonly TestFailover: "TestFailover";
    readonly TestFailoverCleanup: "TestFailoverCleanup";
    readonly Failback: "Failback";
    readonly FinalizeFailback: "FinalizeFailback";
    readonly CancelFailover: "CancelFailover";
    readonly ChangePit: "ChangePit";
    readonly RepairReplication: "RepairReplication";
    readonly SwitchProtection: "SwitchProtection";
    readonly CompleteMigration: "CompleteMigration";
};
export type ReplicationProtectedItemOperation = (typeof ReplicationProtectedItemOperation)[keyof typeof ReplicationProtectedItemOperation];
export declare const ResourceHealthStatus: {
    readonly Healthy: "Healthy";
    readonly TransientDegraded: "TransientDegraded";
    readonly PersistentDegraded: "PersistentDegraded";
    readonly TransientUnhealthy: "TransientUnhealthy";
    readonly PersistentUnhealthy: "PersistentUnhealthy";
    readonly Invalid: "Invalid";
};
/**
 * Resource Health Status
 */
export type ResourceHealthStatus = (typeof ResourceHealthStatus)[keyof typeof ResourceHealthStatus];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const RetentionDurationType: {
    readonly Invalid: "Invalid";
    readonly Days: "Days";
    readonly Weeks: "Weeks";
    readonly Months: "Months";
    readonly Years: "Years";
};
/**
 * Retention duration type: days/weeks/months/years
 * Used only if TieringMode is set to TierAfter
 */
export type RetentionDurationType = (typeof RetentionDurationType)[keyof typeof RetentionDurationType];
export declare const RetentionScheduleFormat: {
    readonly Invalid: "Invalid";
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
};
/**
 * Retention schedule format for yearly retention policy.
 */
export type RetentionScheduleFormat = (typeof RetentionScheduleFormat)[keyof typeof RetentionScheduleFormat];
export declare const ScheduleRunType: {
    readonly Invalid: "Invalid";
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
    readonly Hourly: "Hourly";
};
/**
 * Frequency of the schedule operation of this policy.
 */
export type ScheduleRunType = (typeof ScheduleRunType)[keyof typeof ScheduleRunType];
export declare const SecurityConfiguration: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * A value indicating whether trusted platform module to be enabled.
 */
export type SecurityConfiguration = (typeof SecurityConfiguration)[keyof typeof SecurityConfiguration];
export declare const SecurityType: {
    readonly None: "None";
    readonly TrustedLaunch: "TrustedLaunch";
    readonly ConfidentialVM: "ConfidentialVM";
};
/**
 * The target VM security type.
 */
export type SecurityType = (typeof SecurityType)[keyof typeof SecurityType];
export declare const SetMultiVmSyncStatus: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
 */
export type SetMultiVmSyncStatus = (typeof SetMultiVmSyncStatus)[keyof typeof SetMultiVmSyncStatus];
export declare const SkuName: {
    readonly Standard: "Standard";
    readonly RS0: "RS0";
};
/**
 * Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const SoftDeleteState: {
    readonly Invalid: "Invalid";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly AlwaysON: "AlwaysON";
};
export type SoftDeleteState = (typeof SoftDeleteState)[keyof typeof SoftDeleteState];
export declare const SqlServerLicenseType: {
    readonly NotSpecified: "NotSpecified";
    readonly NoLicenseType: "NoLicenseType";
    readonly PAYG: "PAYG";
    readonly AHUB: "AHUB";
};
/**
 * The SQL Server license type.
 */
export type SqlServerLicenseType = (typeof SqlServerLicenseType)[keyof typeof SqlServerLicenseType];
export declare const StandardTierStorageRedundancy: {
    readonly Invalid: "Invalid";
    readonly LocallyRedundant: "LocallyRedundant";
    readonly GeoRedundant: "GeoRedundant";
    readonly ZoneRedundant: "ZoneRedundant";
};
/**
 * The storage redundancy setting of a vault
 */
export type StandardTierStorageRedundancy = (typeof StandardTierStorageRedundancy)[keyof typeof StandardTierStorageRedundancy];
export declare const TieringMode: {
    readonly Invalid: "Invalid";
    readonly TierRecommended: "TierRecommended";
    readonly TierAfter: "TierAfter";
    readonly DoNotTier: "DoNotTier";
};
/**
 * Tiering Mode to control automatic tiering of recovery points. Supported values are:
 * 1. TierRecommended: Tier all recovery points recommended to be tiered
 * 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
 * 3. DoNotTier: Do not tier any recovery points
 */
export type TieringMode = (typeof TieringMode)[keyof typeof TieringMode];
export declare const VaultSubResourceType: {
    readonly AzureBackup: "AzureBackup";
    readonly AzureBackup_secondary: "AzureBackup_secondary";
    readonly AzureSiteRecovery: "AzureSiteRecovery";
};
/**
 * GroupId for the PrivateEndpointConnection - AzureBackup, AzureBackup_secondary or AzureSiteRecovery
 */
export type VaultSubResourceType = (typeof VaultSubResourceType)[keyof typeof VaultSubResourceType];
export declare const WeekOfMonth: {
    readonly First: "First";
    readonly Second: "Second";
    readonly Third: "Third";
    readonly Fourth: "Fourth";
    readonly Last: "Last";
    readonly Invalid: "Invalid";
};
export type WeekOfMonth = (typeof WeekOfMonth)[keyof typeof WeekOfMonth];
export declare const WorkloadItemType: {
    readonly Invalid: "Invalid";
    readonly SQLInstance: "SQLInstance";
    readonly SQLDataBase: "SQLDataBase";
    readonly SAPHanaSystem: "SAPHanaSystem";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseSystem: "SAPAseSystem";
    readonly SAPAseDatabase: "SAPAseDatabase";
    readonly SAPHanaDBInstance: "SAPHanaDBInstance";
};
/**
 * Workload item type of the item for which intent is to be set
 */
export type WorkloadItemType = (typeof WorkloadItemType)[keyof typeof WorkloadItemType];
export declare const WorkloadType: {
    readonly Invalid: "Invalid";
    readonly VM: "VM";
    readonly FileFolder: "FileFolder";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly SQLDB: "SQLDB";
    readonly Exchange: "Exchange";
    readonly Sharepoint: "Sharepoint";
    readonly VMwareVM: "VMwareVM";
    readonly SystemState: "SystemState";
    readonly Client: "Client";
    readonly GenericDataSource: "GenericDataSource";
    readonly SQLDataBase: "SQLDataBase";
    readonly AzureFileShare: "AzureFileShare";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseDatabase: "SAPAseDatabase";
    readonly SAPHanaDBInstance: "SAPHanaDBInstance";
};
/**
 * Type of workload for the backup management
 */
export type WorkloadType = (typeof WorkloadType)[keyof typeof WorkloadType];
