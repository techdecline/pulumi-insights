export declare const BillingType: {
    readonly Cluster: "Cluster";
    readonly Workspaces: "Workspaces";
};
/**
 * The cluster's billing type.
 */
export type BillingType = (typeof BillingType)[keyof typeof BillingType];
export declare const ClusterSkuNameEnum: {
    readonly CapacityReservation: "CapacityReservation";
};
/**
 * The SKU (tier) of a cluster.
 */
export type ClusterSkuNameEnum = (typeof ClusterSkuNameEnum)[keyof typeof ClusterSkuNameEnum];
export declare const ColumnDataTypeHintEnum: {
    /**
     * A string that matches the pattern of a URI, for example, scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment
     */
    readonly Uri: "uri";
    /**
     * A standard 128-bit GUID following the standard shape, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
     */
    readonly Guid: "guid";
    /**
     * An Azure Resource Model (ARM) path: /subscriptions/{...}/resourceGroups/{...}/providers/Microsoft.{...}/{...}/{...}/{...}...
     */
    readonly ArmPath: "armPath";
    /**
     * A standard V4/V6 ip address following the standard shape, x.x.x.x/y:y:y:y:y:y:y:y
     */
    readonly Ip: "ip";
};
/**
 * Column data type logical hint.
 */
export type ColumnDataTypeHintEnum = (typeof ColumnDataTypeHintEnum)[keyof typeof ColumnDataTypeHintEnum];
export declare const ColumnTypeEnum: {
    readonly String: "string";
    readonly Int: "int";
    readonly Long: "long";
    readonly Real: "real";
    readonly Boolean: "boolean";
    readonly DateTime: "dateTime";
    readonly Guid: "guid";
    readonly Dynamic: "dynamic";
};
/**
 * Column data type.
 */
export type ColumnTypeEnum = (typeof ColumnTypeEnum)[keyof typeof ColumnTypeEnum];
export declare const IdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly None: "None";
};
/**
 * Type of managed service identity.
 */
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const PublicNetworkAccessType: {
    /**
     * Enables connectivity to Log Analytics through public DNS.
     */
    readonly Enabled: "Enabled";
    /**
     * Disables public connectivity to Log Analytics through public DNS.
     */
    readonly Disabled: "Disabled";
};
/**
 * The network access type for accessing Log Analytics query.
 */
export type PublicNetworkAccessType = (typeof PublicNetworkAccessType)[keyof typeof PublicNetworkAccessType];
export declare const TablePlanEnum: {
    /**
     * Logs  that are adjusted to support high volume low value verbose logs.
     */
    readonly Basic: "Basic";
    /**
     * Logs  that allow monitoring and analytics.
     */
    readonly Analytics: "Analytics";
};
/**
 * Instruct the system how to handle and charge the logs ingested to this table.
 */
export type TablePlanEnum = (typeof TablePlanEnum)[keyof typeof TablePlanEnum];
export declare const WorkspaceSkuNameEnum: {
    readonly Free: "Free";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PerNode: "PerNode";
    readonly PerGB2018: "PerGB2018";
    readonly Standalone: "Standalone";
    readonly CapacityReservation: "CapacityReservation";
    readonly LACluster: "LACluster";
};
/**
 * The name of the SKU.
 */
export type WorkspaceSkuNameEnum = (typeof WorkspaceSkuNameEnum)[keyof typeof WorkspaceSkuNameEnum];
