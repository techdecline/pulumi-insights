export declare const ClusterSkuNameEnum: {
    readonly CapacityReservation: "CapacityReservation";
};
/**
 * The name of the SKU.
 */
export type ClusterSkuNameEnum = (typeof ClusterSkuNameEnum)[keyof typeof ClusterSkuNameEnum];
export declare const DataSourceKind: {
    readonly WindowsEvent: "WindowsEvent";
    readonly WindowsPerformanceCounter: "WindowsPerformanceCounter";
    readonly IISLogs: "IISLogs";
    readonly LinuxSyslog: "LinuxSyslog";
    readonly LinuxSyslogCollection: "LinuxSyslogCollection";
    readonly LinuxPerformanceObject: "LinuxPerformanceObject";
    readonly LinuxPerformanceCollection: "LinuxPerformanceCollection";
    readonly CustomLog: "CustomLog";
    readonly CustomLogCollection: "CustomLogCollection";
    readonly AzureAuditLog: "AzureAuditLog";
    readonly AzureActivityLog: "AzureActivityLog";
    readonly GenericDataSource: "GenericDataSource";
    readonly ChangeTrackingCustomPath: "ChangeTrackingCustomPath";
    readonly ChangeTrackingPath: "ChangeTrackingPath";
    readonly ChangeTrackingServices: "ChangeTrackingServices";
    readonly ChangeTrackingDataTypeConfiguration: "ChangeTrackingDataTypeConfiguration";
    readonly ChangeTrackingDefaultRegistry: "ChangeTrackingDefaultRegistry";
    readonly ChangeTrackingRegistry: "ChangeTrackingRegistry";
    readonly ChangeTrackingLinuxPath: "ChangeTrackingLinuxPath";
    readonly LinuxChangeTrackingPath: "LinuxChangeTrackingPath";
    readonly ChangeTrackingContentLocation: "ChangeTrackingContentLocation";
    readonly WindowsTelemetry: "WindowsTelemetry";
    readonly Office365: "Office365";
    readonly SecurityWindowsBaselineConfiguration: "SecurityWindowsBaselineConfiguration";
    readonly SecurityCenterSecurityWindowsBaselineConfiguration: "SecurityCenterSecurityWindowsBaselineConfiguration";
    readonly SecurityEventCollectionConfiguration: "SecurityEventCollectionConfiguration";
    readonly SecurityInsightsSecurityEventCollectionConfiguration: "SecurityInsightsSecurityEventCollectionConfiguration";
    readonly ImportComputerGroup: "ImportComputerGroup";
    readonly NetworkMonitoring: "NetworkMonitoring";
    readonly Itsm: "Itsm";
    readonly DnsAnalytics: "DnsAnalytics";
    readonly ApplicationInsights: "ApplicationInsights";
    readonly SqlDataClassification: "SqlDataClassification";
};
/**
 * The kind of the DataSource.
 */
export type DataSourceKind = (typeof DataSourceKind)[keyof typeof DataSourceKind];
export declare const IdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
};
/**
 * The identity type.
 */
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const LinkedServiceEntityStatus: {
    readonly Succeeded: "Succeeded";
    readonly Deleting: "Deleting";
    readonly ProvisioningAccount: "ProvisioningAccount";
    readonly Updating: "Updating";
};
/**
 * The provisioning state of the linked service.
 */
export type LinkedServiceEntityStatus = (typeof LinkedServiceEntityStatus)[keyof typeof LinkedServiceEntityStatus];
export declare const PublicNetworkAccessType: {
    /**
     * Enables connectivity to Log Analytics through public DNS.
     */
    readonly Enabled: "Enabled";
    /**
     * Disables public connectivity to Log Analytics through public DNS.
     */
    readonly Disabled: "Disabled";
};
/**
 * The network access type for accessing Log Analytics query.
 */
export type PublicNetworkAccessType = (typeof PublicNetworkAccessType)[keyof typeof PublicNetworkAccessType];
export declare const WorkspaceEntityStatus: {
    readonly Creating: "Creating";
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
    readonly Deleting: "Deleting";
    readonly ProvisioningAccount: "ProvisioningAccount";
    readonly Updating: "Updating";
};
/**
 * The provisioning state of the workspace.
 */
export type WorkspaceEntityStatus = (typeof WorkspaceEntityStatus)[keyof typeof WorkspaceEntityStatus];
export declare const WorkspaceSkuNameEnum: {
    readonly Free: "Free";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PerNode: "PerNode";
    readonly PerGB2018: "PerGB2018";
    readonly Standalone: "Standalone";
    readonly CapacityReservation: "CapacityReservation";
    readonly LACluster: "LACluster";
};
/**
 * The name of the SKU.
 */
export type WorkspaceSkuNameEnum = (typeof WorkspaceSkuNameEnum)[keyof typeof WorkspaceSkuNameEnum];
