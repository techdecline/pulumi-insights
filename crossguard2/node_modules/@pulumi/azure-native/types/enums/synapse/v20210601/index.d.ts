export declare const ConfigurationType: {
    readonly File: "File";
    readonly Artifact: "Artifact";
};
/**
 * The type of the spark config properties file.
 */
export type ConfigurationType = (typeof ConfigurationType)[keyof typeof ConfigurationType];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Recovery: "Recovery";
    readonly Restore: "Restore";
};
/**
 * Specifies the mode of sql pool creation.
 *
 * Default: regular sql pool creation.
 *
 * PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
 *
 * Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
 *
 * Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool's original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
 */
export type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DataFlowComputeType: {
    readonly General: "General";
    readonly MemoryOptimized: "MemoryOptimized";
    readonly ComputeOptimized: "ComputeOptimized";
};
/**
 * Compute type of the cluster which will execute data flow job.
 */
export type DataFlowComputeType = (typeof DataFlowComputeType)[keyof typeof DataFlowComputeType];
export declare const IntegrationRuntimeEdition: {
    readonly Standard: "Standard";
    readonly Enterprise: "Enterprise";
};
/**
 * The edition for the SSIS Integration Runtime
 */
export type IntegrationRuntimeEdition = (typeof IntegrationRuntimeEdition)[keyof typeof IntegrationRuntimeEdition];
export declare const IntegrationRuntimeEntityReferenceType: {
    readonly IntegrationRuntimeReference: "IntegrationRuntimeReference";
    readonly LinkedServiceReference: "LinkedServiceReference";
};
/**
 * The type of this referenced entity.
 */
export type IntegrationRuntimeEntityReferenceType = (typeof IntegrationRuntimeEntityReferenceType)[keyof typeof IntegrationRuntimeEntityReferenceType];
export declare const IntegrationRuntimeLicenseType: {
    readonly BasePrice: "BasePrice";
    readonly LicenseIncluded: "LicenseIncluded";
};
/**
 * License type for bringing your own license scenario.
 */
export type IntegrationRuntimeLicenseType = (typeof IntegrationRuntimeLicenseType)[keyof typeof IntegrationRuntimeLicenseType];
export declare const IntegrationRuntimeSsisCatalogPricingTier: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PremiumRS: "PremiumRS";
};
/**
 * The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
 */
export type IntegrationRuntimeSsisCatalogPricingTier = (typeof IntegrationRuntimeSsisCatalogPricingTier)[keyof typeof IntegrationRuntimeSsisCatalogPricingTier];
export declare const IntegrationRuntimeType: {
    readonly Managed: "Managed";
    readonly SelfHosted: "SelfHosted";
};
/**
 * Type of integration runtime.
 */
export type IntegrationRuntimeType = (typeof IntegrationRuntimeType)[keyof typeof IntegrationRuntimeType];
export declare const NodeSize: {
    readonly None: "None";
    readonly Small: "Small";
    readonly Medium: "Medium";
    readonly Large: "Large";
    readonly XLarge: "XLarge";
    readonly XXLarge: "XXLarge";
    readonly XXXLarge: "XXXLarge";
};
/**
 * The level of compute power that each node in the Big Data pool has.
 */
export type NodeSize = (typeof NodeSize)[keyof typeof NodeSize];
export declare const NodeSizeFamily: {
    readonly None: "None";
    readonly MemoryOptimized: "MemoryOptimized";
    readonly HardwareAcceleratedFPGA: "HardwareAcceleratedFPGA";
    readonly HardwareAcceleratedGPU: "HardwareAcceleratedGPU";
};
/**
 * The kind of nodes that the Big Data pool provides.
 */
export type NodeSizeFamily = (typeof NodeSizeFamily)[keyof typeof NodeSizeFamily];
export declare const ResourceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * The type of managed identity for the workspace
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SensitivityLabelRank: {
    readonly None: "None";
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
    readonly Critical: "Critical";
};
export type SensitivityLabelRank = (typeof SensitivityLabelRank)[keyof typeof SensitivityLabelRank];
export declare const StorageAccountType: {
    readonly GRS: "GRS";
    readonly LRS: "LRS";
};
/**
 * The storage account type used to store backups for this sql pool.
 */
export type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
export declare const TransparentDataEncryptionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the database transparent data encryption.
 */
export type TransparentDataEncryptionStatus = (typeof TransparentDataEncryptionStatus)[keyof typeof TransparentDataEncryptionStatus];
export declare const WorkspacePublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enable or Disable public network access to workspace
 */
export type WorkspacePublicNetworkAccess = (typeof WorkspacePublicNetworkAccess)[keyof typeof WorkspacePublicNetworkAccess];
