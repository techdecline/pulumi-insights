export declare const AcceptGrowCapacityPoolForShortTermCloneSplit: {
    /**
     * Auto grow capacity pool for short term clone split is accepted.
     */
    readonly Accepted: "Accepted";
    /**
     * Auto grow capacity pool for short term clone split is declined. Short term clone volume creation will not be allowed, to create short term clone volume accept auto grow capacity pool.
     */
    readonly Declined: "Declined";
};
/**
 * While auto splitting the short term clone volume, if the parent pool does not have enough space to accommodate the volume after split, it will be automatically resized, which will lead to increased billing. To accept capacity pool size auto grow and create a short term clone volume, set the property as accepted.
 */
export type AcceptGrowCapacityPoolForShortTermCloneSplit = (typeof AcceptGrowCapacityPoolForShortTermCloneSplit)[keyof typeof AcceptGrowCapacityPoolForShortTermCloneSplit];
export declare const ApplicationType: {
    readonly SAP_HANA: "SAP-HANA";
    readonly ORACLE: "ORACLE";
};
/**
 * Application Type
 */
export type ApplicationType = (typeof ApplicationType)[keyof typeof ApplicationType];
export declare const AvsDataStore: {
    /**
     * avsDataStore is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * avsDataStore is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
 */
export type AvsDataStore = (typeof AvsDataStore)[keyof typeof AvsDataStore];
export declare const ChownMode: {
    readonly Restricted: "Restricted";
    readonly Unrestricted: "Unrestricted";
};
/**
 * This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
 */
export type ChownMode = (typeof ChownMode)[keyof typeof ChownMode];
export declare const CoolAccessRetrievalPolicy: {
    readonly Default: "Default";
    readonly OnRead: "OnRead";
    readonly Never: "Never";
};
/**
 * coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
 *  Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
 *  OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
 *  Never - No client-driven data is pulled from cool tier to standard storage.
 */
export type CoolAccessRetrievalPolicy = (typeof CoolAccessRetrievalPolicy)[keyof typeof CoolAccessRetrievalPolicy];
export declare const EnableSubvolumes: {
    /**
     * subvolumes are enabled
     */
    readonly Enabled: "Enabled";
    /**
     * subvolumes are not enabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Flag indicating whether subvolume operations are enabled on the volume
 */
export type EnableSubvolumes = (typeof EnableSubvolumes)[keyof typeof EnableSubvolumes];
export declare const EncryptionKeySource: {
    /**
     * Microsoft-managed key encryption
     */
    readonly Microsoft_NetApp: "Microsoft.NetApp";
    /**
     * Customer-managed key encryption
     */
    readonly Microsoft_KeyVault: "Microsoft.KeyVault";
};
/**
 * Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
 */
export type EncryptionKeySource = (typeof EncryptionKeySource)[keyof typeof EncryptionKeySource];
export declare const EncryptionType: {
    /**
     * EncryptionType Single, volumes will use single encryption at rest
     */
    readonly Single: "Single";
    /**
     * EncryptionType Double, volumes will use double encryption at rest
     */
    readonly Double: "Double";
};
/**
 * Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
 */
export type EncryptionType = (typeof EncryptionType)[keyof typeof EncryptionType];
export declare const EndpointType: {
    readonly Src: "src";
    readonly Dst: "dst";
};
/**
 * Indicates whether the local volume is the source or destination for the Volume Replication
 */
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export declare const KeySource: {
    /**
     * Microsoft-managed key encryption
     */
    readonly Microsoft_NetApp: "Microsoft.NetApp";
    /**
     * Customer-managed key encryption
     */
    readonly Microsoft_KeyVault: "Microsoft.KeyVault";
};
/**
 * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
 */
export type KeySource = (typeof KeySource)[keyof typeof KeySource];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const NetworkFeatures: {
    /**
     * Basic network features.
     */
    readonly Basic: "Basic";
    /**
     * Standard network features.
     */
    readonly Standard: "Standard";
    /**
     * Updating from Basic to Standard network features.
     */
    readonly Basic_Standard: "Basic_Standard";
    /**
     * Updating from Standard to Basic network features.
     */
    readonly Standard_Basic: "Standard_Basic";
};
/**
 * The original value of the network features type available to the volume at the time it was created.
 */
export type NetworkFeatures = (typeof NetworkFeatures)[keyof typeof NetworkFeatures];
export declare const QosType: {
    /**
     * qos type Auto
     */
    readonly Auto: "Auto";
    /**
     * qos type Manual
     */
    readonly Manual: "Manual";
};
/**
 * The qos type of the pool
 */
export type QosType = (typeof QosType)[keyof typeof QosType];
export declare const ReplicationSchedule: {
    readonly ReplicationSchedule_10minutely: "_10minutely";
    readonly Hourly: "hourly";
    readonly Daily: "daily";
};
/**
 * Schedule
 */
export type ReplicationSchedule = (typeof ReplicationSchedule)[keyof typeof ReplicationSchedule];
export declare const SecurityStyle: {
    readonly Ntfs: "ntfs";
    readonly Unix: "unix";
};
/**
 * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
 */
export type SecurityStyle = (typeof SecurityStyle)[keyof typeof SecurityStyle];
export declare const ServiceLevel: {
    /**
     * Standard service level
     */
    readonly Standard: "Standard";
    /**
     * Premium service level
     */
    readonly Premium: "Premium";
    /**
     * Ultra service level
     */
    readonly Ultra: "Ultra";
    /**
     * Zone redundant storage service level
     */
    readonly StandardZRS: "StandardZRS";
    /**
     * Flexible service level
     */
    readonly Flexible: "Flexible";
};
/**
 * The service level of the file system
 */
export type ServiceLevel = (typeof ServiceLevel)[keyof typeof ServiceLevel];
export declare const SmbAccessBasedEnumeration: {
    /**
     * smbAccessBasedEnumeration share setting is disabled
     */
    readonly Disabled: "Disabled";
    /**
     * smbAccessBasedEnumeration share setting is enabled
     */
    readonly Enabled: "Enabled";
};
/**
 * Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
 */
export type SmbAccessBasedEnumeration = (typeof SmbAccessBasedEnumeration)[keyof typeof SmbAccessBasedEnumeration];
export declare const SmbNonBrowsable: {
    /**
     * smbNonBrowsable share setting is disabled
     */
    readonly Disabled: "Disabled";
    /**
     * smbNonBrowsable share setting is enabled
     */
    readonly Enabled: "Enabled";
};
/**
 * Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
 */
export type SmbNonBrowsable = (typeof SmbNonBrowsable)[keyof typeof SmbNonBrowsable];
export declare const Type: {
    /**
     * Default user quota
     */
    readonly DefaultUserQuota: "DefaultUserQuota";
    /**
     * Default group quota
     */
    readonly DefaultGroupQuota: "DefaultGroupQuota";
    /**
     * Individual user quota
     */
    readonly IndividualUserQuota: "IndividualUserQuota";
    /**
     * Individual group quota
     */
    readonly IndividualGroupQuota: "IndividualGroupQuota";
};
/**
 * Type of quota
 */
export type Type = (typeof Type)[keyof typeof Type];
export declare const VolumeLanguage: {
    /**
     * Posix with UTF-8
     */
    readonly C_utf_8: "c.utf-8";
    /**
     * UTF-8 with 4 byte character support
     */
    readonly Utf8mb4: "utf8mb4";
    /**
     * Arabic - Deprecated
     */
    readonly Ar: "ar";
    /**
     * Arabic with UTF-8
     */
    readonly Ar_utf_8: "ar.utf-8";
    /**
     * Croatian - Deprecated
     */
    readonly Hr: "hr";
    /**
     * Croatian with UTF-8
     */
    readonly Hr_utf_8: "hr.utf-8";
    /**
     * Czech - Deprecated
     */
    readonly Cs: "cs";
    /**
     * Czech with UTF-8
     */
    readonly Cs_utf_8: "cs.utf-8";
    /**
     * Danish - Deprecated
     */
    readonly Da: "da";
    /**
     * Danish with UTF-8
     */
    readonly Da_utf_8: "da.utf-8";
    /**
     * Dutch - Deprecated
     */
    readonly Nl: "nl";
    /**
     * Dutch with UTF-8
     */
    readonly Nl_utf_8: "nl.utf-8";
    /**
     * English - Deprecated
     */
    readonly En: "en";
    /**
     * English with UTF-8
     */
    readonly En_utf_8: "en.utf-8";
    /**
     * Finnish - Deprecated
     */
    readonly Fi: "fi";
    /**
     * Finnish with UTF-8
     */
    readonly Fi_utf_8: "fi.utf-8";
    /**
     * French - Deprecated
     */
    readonly Fr: "fr";
    /**
     * French with UTF-8
     */
    readonly Fr_utf_8: "fr.utf-8";
    /**
     * German - Deprecated
     */
    readonly De: "de";
    /**
     * German with UTF-8
     */
    readonly De_utf_8: "de.utf-8";
    /**
     * Hebrew - Deprecated
     */
    readonly He: "he";
    /**
     * Hebrew with UTF-8
     */
    readonly He_utf_8: "he.utf-8";
    /**
     * Hungarian - Deprecated
     */
    readonly Hu: "hu";
    /**
     * Hungarian with UTF-8
     */
    readonly Hu_utf_8: "hu.utf-8";
    /**
     * Italian - Deprecated
     */
    readonly It: "it";
    /**
     * Italian with UTF-8
     */
    readonly It_utf_8: "it.utf-8";
    /**
     * Japanese euc-j - Deprecated
     */
    readonly Ja: "ja";
    /**
     * Japanese euc-j with UTF-8
     */
    readonly Ja_utf_8: "ja.utf-8";
    /**
     * Japanese euc-j - Deprecated
     */
    readonly Ja_v1: "ja-v1";
    /**
     * Japanese euc-j with UTF-8
     */
    readonly Ja_v1_utf_8: "ja-v1.utf-8";
    /**
     * Japanese pck
     */
    readonly Ja_jp_pck: "ja-jp.pck";
    /**
     * Japanese pck with UTF-8 - Deprecated
     */
    readonly Ja_jp_pck_utf_8: "ja-jp.pck.utf-8";
    /**
     * Japanese cp932
     */
    readonly Ja_jp_932: "ja-jp.932";
    /**
     * Japanese cp932 with UTF-8 - Deprecated
     */
    readonly Ja_jp_932_utf_8: "ja-jp.932.utf-8";
    /**
     * Japanese pck - sjis
     */
    readonly Ja_jp_pck_v2: "ja-jp.pck-v2";
    /**
     * Japanese pck - sjis with UTF-8 - Deprecated
     */
    readonly Ja_jp_pck_v2_utf_8: "ja-jp.pck-v2.utf-8";
    /**
     * Korean - Deprecated
     */
    readonly Ko: "ko";
    /**
     * Korean with UTF-8
     */
    readonly Ko_utf_8: "ko.utf-8";
    /**
     * Norwegian - Deprecated
     */
    readonly No: "no";
    /**
     * Norwegian with UTF-8
     */
    readonly No_utf_8: "no.utf-8";
    /**
     * Polish - Deprecated
     */
    readonly Pl: "pl";
    /**
     * Polish with UTF-8
     */
    readonly Pl_utf_8: "pl.utf-8";
    /**
     * Portuguese - Deprecated
     */
    readonly Pt: "pt";
    /**
     * Portuguese with UTF-8
     */
    readonly Pt_utf_8: "pt.utf-8";
    /**
     * Posix - Deprecated
     */
    readonly C: "c";
    /**
     * Romanian - Deprecated
     */
    readonly Ro: "ro";
    /**
     * Romanian with UTF-8
     */
    readonly Ro_utf_8: "ro.utf-8";
    /**
     * Russian - Deprecated
     */
    readonly Ru: "ru";
    /**
     * Russian with UTF-8
     */
    readonly Ru_utf_8: "ru.utf-8";
    /**
     * Simplified Chinese - Deprecated
     */
    readonly Zh: "zh";
    /**
     * Simplified Chinese with UTF-8
     */
    readonly Zh_utf_8: "zh.utf-8";
    /**
     * Simplified gbk Chinese
     */
    readonly Zh_gbk: "zh.gbk";
    /**
     * Simplified gbk Chinese with UTF-8 - Deprecated
     */
    readonly Zh_gbk_utf_8: "zh.gbk.utf-8";
    /**
     * Traditional Chinese BIG 5
     */
    readonly Zh_tw_big5: "zh-tw.big5";
    /**
     * Traditional Chinese BIG 5 with UTF-8 - Deprecated
     */
    readonly Zh_tw_big5_utf_8: "zh-tw.big5.utf-8";
    /**
     * Traditional Chinese EUC-TW
     */
    readonly Zh_tw: "zh-tw";
    /**
     * Traditional Chinese EUC-TW with UTF-8 - Deprecated
     */
    readonly Zh_tw_utf_8: "zh-tw.utf-8";
    /**
     * Slovak - Deprecated
     */
    readonly Sk: "sk";
    /**
     * Slovak with UTF-8
     */
    readonly Sk_utf_8: "sk.utf-8";
    /**
     * Slovenian - Deprecated
     */
    readonly Sl: "sl";
    /**
     * Slovenian with UTF-8
     */
    readonly Sl_utf_8: "sl.utf-8";
    /**
     * Spanish - Deprecated
     */
    readonly Es: "es";
    /**
     * Spanish with UTF-8
     */
    readonly Es_utf_8: "es.utf-8";
    /**
     * Swedish - Deprecated
     */
    readonly Sv: "sv";
    /**
     * Swedish with UTF-8
     */
    readonly Sv_utf_8: "sv.utf-8";
    /**
     * Turkish - Deprecated
     */
    readonly Tr: "tr";
    /**
     * Turkish with UTF-8
     */
    readonly Tr_utf_8: "tr.utf-8";
    /**
     * US English - Deprecated
     */
    readonly En_us: "en-us";
    /**
     * US English with UTF-8
     */
    readonly En_us_utf_8: "en-us.utf-8";
};
/**
 * Language supported for volume.
 */
export type VolumeLanguage = (typeof VolumeLanguage)[keyof typeof VolumeLanguage];
