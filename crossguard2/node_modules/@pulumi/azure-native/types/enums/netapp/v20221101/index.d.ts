export declare const ApplicationType: {
    readonly SAP_HANA: "SAP-HANA";
};
/**
 * Application Type
 */
export type ApplicationType = (typeof ApplicationType)[keyof typeof ApplicationType];
export declare const AvsDataStore: {
    /**
     * avsDataStore is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * avsDataStore is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
 */
export type AvsDataStore = (typeof AvsDataStore)[keyof typeof AvsDataStore];
export declare const ChownMode: {
    readonly Restricted: "Restricted";
    readonly Unrestricted: "Unrestricted";
};
/**
 * This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
 */
export type ChownMode = (typeof ChownMode)[keyof typeof ChownMode];
export declare const EnableSubvolumes: {
    /**
     * subvolumes are enabled
     */
    readonly Enabled: "Enabled";
    /**
     * subvolumes are not enabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Flag indicating whether subvolume operations are enabled on the volume
 */
export type EnableSubvolumes = (typeof EnableSubvolumes)[keyof typeof EnableSubvolumes];
export declare const EncryptionKeySource: {
    /**
     * Microsoft-managed key encryption
     */
    readonly Microsoft_NetApp: "Microsoft.NetApp";
    /**
     * Customer-managed key encryption
     */
    readonly Microsoft_KeyVault: "Microsoft.KeyVault";
};
/**
 * Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
 */
export type EncryptionKeySource = (typeof EncryptionKeySource)[keyof typeof EncryptionKeySource];
export declare const EncryptionType: {
    /**
     * EncryptionType Single, volumes will use single encryption at rest
     */
    readonly Single: "Single";
    /**
     * EncryptionType Double, volumes will use double encryption at rest
     */
    readonly Double: "Double";
};
/**
 * Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
 */
export type EncryptionType = (typeof EncryptionType)[keyof typeof EncryptionType];
export declare const EndpointType: {
    readonly Src: "src";
    readonly Dst: "dst";
};
/**
 * Indicates whether the local volume is the source or destination for the Volume Replication
 */
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export declare const KeySource: {
    /**
     * Microsoft-managed key encryption
     */
    readonly Microsoft_NetApp: "Microsoft.NetApp";
    /**
     * Customer-managed key encryption
     */
    readonly Microsoft_KeyVault: "Microsoft.KeyVault";
};
/**
 * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
 */
export type KeySource = (typeof KeySource)[keyof typeof KeySource];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const NetworkFeatures: {
    /**
     * Basic network feature.
     */
    readonly Basic: "Basic";
    /**
     * Standard network feature.
     */
    readonly Standard: "Standard";
};
/**
 * Basic network, or Standard features available to the volume.
 */
export type NetworkFeatures = (typeof NetworkFeatures)[keyof typeof NetworkFeatures];
export declare const QosType: {
    /**
     * qos type Auto
     */
    readonly Auto: "Auto";
    /**
     * qos type Manual
     */
    readonly Manual: "Manual";
};
/**
 * The qos type of the pool
 */
export type QosType = (typeof QosType)[keyof typeof QosType];
export declare const ReplicationSchedule: {
    readonly ReplicationSchedule_10minutely: "_10minutely";
    readonly Hourly: "hourly";
    readonly Daily: "daily";
};
/**
 * Schedule
 */
export type ReplicationSchedule = (typeof ReplicationSchedule)[keyof typeof ReplicationSchedule];
export declare const SecurityStyle: {
    readonly Ntfs: "ntfs";
    readonly Unix: "unix";
};
/**
 * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
 */
export type SecurityStyle = (typeof SecurityStyle)[keyof typeof SecurityStyle];
export declare const ServiceLevel: {
    /**
     * Standard service level
     */
    readonly Standard: "Standard";
    /**
     * Premium service level
     */
    readonly Premium: "Premium";
    /**
     * Ultra service level
     */
    readonly Ultra: "Ultra";
    /**
     * Zone redundant storage service level
     */
    readonly StandardZRS: "StandardZRS";
};
/**
 * The service level of the file system
 */
export type ServiceLevel = (typeof ServiceLevel)[keyof typeof ServiceLevel];
export declare const SmbAccessBasedEnumeration: {
    /**
     * smbAccessBasedEnumeration share setting is disabled
     */
    readonly Disabled: "Disabled";
    /**
     * smbAccessBasedEnumeration share setting is enabled
     */
    readonly Enabled: "Enabled";
};
/**
 * Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
 */
export type SmbAccessBasedEnumeration = (typeof SmbAccessBasedEnumeration)[keyof typeof SmbAccessBasedEnumeration];
export declare const SmbNonBrowsable: {
    /**
     * smbNonBrowsable share setting is disabled
     */
    readonly Disabled: "Disabled";
    /**
     * smbNonBrowsable share setting is enabled
     */
    readonly Enabled: "Enabled";
};
/**
 * Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
 */
export type SmbNonBrowsable = (typeof SmbNonBrowsable)[keyof typeof SmbNonBrowsable];
export declare const Type: {
    /**
     * Default user quota
     */
    readonly DefaultUserQuota: "DefaultUserQuota";
    /**
     * Default group quota
     */
    readonly DefaultGroupQuota: "DefaultGroupQuota";
    /**
     * Individual user quota
     */
    readonly IndividualUserQuota: "IndividualUserQuota";
    /**
     * Individual group quota
     */
    readonly IndividualGroupQuota: "IndividualGroupQuota";
};
/**
 * Type of quota
 */
export type Type = (typeof Type)[keyof typeof Type];
