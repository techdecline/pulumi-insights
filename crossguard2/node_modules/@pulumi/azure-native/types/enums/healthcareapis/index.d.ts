import * as v20221001preview from "./v20221001preview";
import * as v20230228 from "./v20230228";
import * as v20230906 from "./v20230906";
import * as v20231101 from "./v20231101";
import * as v20231201 from "./v20231201";
import * as v20240301 from "./v20240301";
import * as v20240331 from "./v20240331";
export { v20221001preview, v20230228, v20230906, v20231101, v20231201, v20240301, v20240331, };
export declare const AnalyticsConnectorDataDestinationType: {
    readonly Datalake: "datalake";
};
/**
 * Type of data destination.
 */
export type AnalyticsConnectorDataDestinationType = (typeof AnalyticsConnectorDataDestinationType)[keyof typeof AnalyticsConnectorDataDestinationType];
export declare const AnalyticsConnectorDataSourceType: {
    readonly Fhirservice: "fhirservice";
};
/**
 * Type of data source.
 */
export type AnalyticsConnectorDataSourceType = (typeof AnalyticsConnectorDataSourceType)[keyof typeof AnalyticsConnectorDataSourceType];
export declare const AnalyticsConnectorMappingType: {
    readonly FhirToParquet: "fhirToParquet";
};
/**
 * Type of data mapping.
 */
export type AnalyticsConnectorMappingType = (typeof AnalyticsConnectorMappingType)[keyof typeof AnalyticsConnectorMappingType];
export declare const FhirResourceVersionPolicy: {
    readonly No_version: "no-version";
    readonly Versioned: "versioned";
    readonly Versioned_update: "versioned-update";
};
/**
 * Controls how resources are versioned on the FHIR service
 */
export type FhirResourceVersionPolicy = (typeof FhirResourceVersionPolicy)[keyof typeof FhirResourceVersionPolicy];
export declare const FhirServiceKind: {
    readonly Fhir_Stu3: "fhir-Stu3";
    readonly Fhir_R4: "fhir-R4";
};
/**
 * The kind of the service.
 */
export type FhirServiceKind = (typeof FhirServiceKind)[keyof typeof FhirServiceKind];
export declare const FhirServiceVersion: {
    readonly STU3: "STU3";
    readonly R4: "R4";
};
/**
 * The kind of FHIR Service.
 */
export type FhirServiceVersion = (typeof FhirServiceVersion)[keyof typeof FhirServiceVersion];
export declare const IotIdentityResolutionType: {
    readonly Create: "Create";
    readonly Lookup: "Lookup";
};
/**
 * Determines how resource identity is resolved on the destination.
 */
export type IotIdentityResolutionType = (typeof IotIdentityResolutionType)[keyof typeof IotIdentityResolutionType];
export declare const Kind: {
    readonly Fhir: "fhir";
    readonly Fhir_Stu3: "fhir-Stu3";
    readonly Fhir_R4: "fhir-R4";
};
/**
 * The kind of the service.
 */
export type Kind = (typeof Kind)[keyof typeof Kind];
export declare const ManagedServiceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
};
/**
 * Type of identity being specified, currently SystemAssigned and None are allowed.
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const ServiceManagedIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of identity being specified, currently SystemAssigned and None are allowed.
 */
export type ServiceManagedIdentityType = (typeof ServiceManagedIdentityType)[keyof typeof ServiceManagedIdentityType];
