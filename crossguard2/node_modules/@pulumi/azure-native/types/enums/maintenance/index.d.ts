import * as v20221101preview from "./v20221101preview";
import * as v20230401 from "./v20230401";
import * as v20230901preview from "./v20230901preview";
import * as v20231001preview from "./v20231001preview";
export { v20221101preview, v20230401, v20230901preview, v20231001preview, };
export declare const MaintenanceScope: {
    /**
     * This maintenance scope controls installation of azure platform updates i.e. services on physical nodes hosting customer VMs.
     */
    readonly Host: "Host";
    /**
     * This maintenance scope controls the default update maintenance of the Azure Resource
     */
    readonly Resource: "Resource";
    /**
     * This maintenance scope controls os image installation on VM/VMSS
     */
    readonly OSImage: "OSImage";
    /**
     * This maintenance scope controls extension installation on VM/VMSS
     */
    readonly Extension: "Extension";
    /**
     * This maintenance scope controls installation of windows and linux packages on VM/VMSS
     */
    readonly InGuestPatch: "InGuestPatch";
    /**
     * This maintenance scope controls installation of SQL server platform updates.
     */
    readonly SQLDB: "SQLDB";
    /**
     * This maintenance scope controls installation of SQL managed instance platform update.
     */
    readonly SQLManagedInstance: "SQLManagedInstance";
};
/**
 * Gets or sets maintenanceScope of the configuration
 */
export type MaintenanceScope = (typeof MaintenanceScope)[keyof typeof MaintenanceScope];
export declare const RebootOptions: {
    readonly IfRequired: "IfRequired";
    readonly Never: "Never";
    readonly Always: "Always";
};
/**
 * Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
 */
export type RebootOptions = (typeof RebootOptions)[keyof typeof RebootOptions];
export declare const TagOperators: {
    readonly All: "All";
    readonly Any: "Any";
};
/**
 * Filter VMs by Any or All specified tags.
 */
export type TagOperators = (typeof TagOperators)[keyof typeof TagOperators];
export declare const TaskScope: {
    readonly Global: "Global";
    readonly Resource: "Resource";
};
/**
 * Global Task execute once when schedule trigger. Resource task execute for each VM.
 */
export type TaskScope = (typeof TaskScope)[keyof typeof TaskScope];
export declare const Visibility: {
    /**
     * Only visible to users with permissions.
     */
    readonly Custom: "Custom";
    /**
     * Visible to all users.
     */
    readonly Public: "Public";
};
/**
 * Gets or sets the visibility of the configuration. The default value is 'Custom'
 */
export type Visibility = (typeof Visibility)[keyof typeof Visibility];
