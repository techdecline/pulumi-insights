"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformationSerializationFormat = exports.TlsCertMethodMode = exports.SubscriberMessageDropStrategy = exports.StateStoreResourceKeyTypes = exports.StateStoreResourceDefinitionMethods = exports.SourceSerializationFormat = exports.ServiceType = exports.PrivateKeyRotationPolicy = exports.PrivateKeyAlgorithm = exports.OperatorValues = exports.OperationalMode = exports.OperationType = exports.MqttRetainType = exports.MqttAuthMethod = exports.ManagedServiceIdentityType = exports.KafkaAuthMethod = exports.FilterType = exports.ExtendedLocationType = exports.EndpointType = exports.DataflowMappingType = exports.DataflowEndpointKafkaPartitionStrategy = exports.DataflowEndpointKafkaCompression = exports.DataflowEndpointKafkaAcks = exports.DataflowEndpointFabricPathType = exports.DataflowEndpointAuthenticationSaslType = exports.DataLakeStorageAuthMethod = exports.CloudEventAttributeType = exports.CertManagerIssuerKind = exports.BrokerResourceDefinitionMethods = exports.BrokerProtocolType = exports.BrokerMemoryProfile = exports.BrokerAuthenticationMethod = void 0;
exports.BrokerAuthenticationMethod = {
    /**
     * Custom authentication configuration.
     */
    Custom: "Custom",
    /**
     * ServiceAccountToken authentication configuration.
     */
    ServiceAccountToken: "ServiceAccountToken",
    /**
     * X.509 authentication configuration.
     */
    X509: "X509",
};
exports.BrokerMemoryProfile = {
    /**
     * Tiny memory profile.
     */
    Tiny: "Tiny",
    /**
     * Low memory profile.
     */
    Low: "Low",
    /**
     * Medium memory profile.
     */
    Medium: "Medium",
    /**
     * High memory profile.
     */
    High: "High",
};
exports.BrokerProtocolType = {
    /**
     * protocol broker
     */
    Mqtt: "Mqtt",
    /**
     * protocol websocket
     */
    WebSockets: "WebSockets",
};
exports.BrokerResourceDefinitionMethods = {
    /**
     * Allowed Connecting to Broker
     */
    Connect: "Connect",
    /**
     * Allowed Publishing to Broker
     */
    Publish: "Publish",
    /**
     * Allowed Subscribing to Broker
     */
    Subscribe: "Subscribe",
};
exports.CertManagerIssuerKind = {
    /**
     * Issuer kind.
     */
    Issuer: "Issuer",
    /**
     * ClusterIssuer kind.
     */
    ClusterIssuer: "ClusterIssuer",
};
exports.CloudEventAttributeType = {
    /**
     * Propagate type
     */
    Propagate: "Propagate",
    /**
     * CreateOrRemap type
     */
    CreateOrRemap: "CreateOrRemap",
};
exports.DataLakeStorageAuthMethod = {
    /**
     * SystemAssignedManagedIdentity type
     */
    SystemAssignedManagedIdentity: "SystemAssignedManagedIdentity",
    /**
     * UserAssignedManagedIdentity type
     */
    UserAssignedManagedIdentity: "UserAssignedManagedIdentity",
    /**
     * AccessToken Option
     */
    AccessToken: "AccessToken",
};
exports.DataflowEndpointAuthenticationSaslType = {
    /**
     * PLAIN Type
     */
    Plain: "Plain",
    /**
     * SCRAM_SHA_256 Type
     */
    ScramSha256: "ScramSha256",
    /**
     * SCRAM_SHA_512 Type
     */
    ScramSha512: "ScramSha512",
};
exports.DataflowEndpointFabricPathType = {
    /**
     * FILES Type
     */
    Files: "Files",
    /**
     * TABLES Type
     */
    Tables: "Tables",
};
exports.DataflowEndpointKafkaAcks = {
    /**
     * ZERO Option
     */
    Zero: "Zero",
    /**
     * ONE Option
     */
    One: "One",
    /**
     * ALL Option
     */
    All: "All",
};
exports.DataflowEndpointKafkaCompression = {
    /**
     * NONE Option
     */
    None: "None",
    /**
     * Gzip Option
     */
    Gzip: "Gzip",
    /**
     * SNAPPY Option
     */
    Snappy: "Snappy",
    /**
     * LZ4 Option
     */
    Lz4: "Lz4",
};
exports.DataflowEndpointKafkaPartitionStrategy = {
    /**
     * Default: Assigns messages to random partitions, using a round-robin algorithm.
     */
    Default: "Default",
    /**
     * Static: Assigns messages to a fixed partition number that's derived from the instance ID of the dataflow.
     */
    Static: "Static",
    /**
     * TOPIC Option
     */
    Topic: "Topic",
    /**
     * PROPERTY Option
     */
    Property: "Property",
};
exports.DataflowMappingType = {
    /**
     * New Properties type
     */
    NewProperties: "NewProperties",
    /**
     * Rename type
     */
    Rename: "Rename",
    /**
     * Compute type
     */
    Compute: "Compute",
    /**
     * Pass-through type
     */
    PassThrough: "PassThrough",
    /**
     * Built in function type
     */
    BuiltInFunction: "BuiltInFunction",
};
exports.EndpointType = {
    /**
     * Azure Data Explorer Type
     */
    DataExplorer: "DataExplorer",
    /**
     * Azure Data Lake Type
     */
    DataLakeStorage: "DataLakeStorage",
    /**
     * Microsoft Fabric Type
     */
    FabricOneLake: "FabricOneLake",
    /**
     * Kafka Type
     */
    Kafka: "Kafka",
    /**
     * Local Storage Type
     */
    LocalStorage: "LocalStorage",
    /**
     * Broker Type
     */
    Mqtt: "Mqtt",
};
exports.ExtendedLocationType = {
    /**
     * CustomLocation type
     */
    CustomLocation: "CustomLocation",
};
exports.FilterType = {
    /**
     * Filter type
     */
    Filter: "Filter",
};
exports.KafkaAuthMethod = {
    /**
     * SystemAssignedManagedIdentity type
     */
    SystemAssignedManagedIdentity: "SystemAssignedManagedIdentity",
    /**
     * UserAssignedManagedIdentity type
     */
    UserAssignedManagedIdentity: "UserAssignedManagedIdentity",
    /**
     * Sasl Option
     */
    Sasl: "Sasl",
    /**
     * x509Certificate Option
     */
    X509Certificate: "X509Certificate",
    /**
     * Anonymous Option
     */
    Anonymous: "Anonymous",
};
exports.ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
};
exports.MqttAuthMethod = {
    /**
     * SystemAssignedManagedIdentity type
     */
    SystemAssignedManagedIdentity: "SystemAssignedManagedIdentity",
    /**
     * UserAssignedManagedIdentity type
     */
    UserAssignedManagedIdentity: "UserAssignedManagedIdentity",
    /**
     * ServiceAccountToken Option
     */
    ServiceAccountToken: "ServiceAccountToken",
    /**
     * x509Certificate Option
     */
    X509Certificate: "X509Certificate",
    /**
     * Anonymous Option
     */
    Anonymous: "Anonymous",
};
exports.MqttRetainType = {
    /**
     * Retain the messages.
     */
    Keep: "Keep",
    /**
     * Never retain messages.
     */
    Never: "Never",
};
exports.OperationType = {
    /**
     * Dataflow Source Operation
     */
    Source: "Source",
    /**
     * Dataflow Destination Operation
     */
    Destination: "Destination",
    /**
     * Dataflow BuiltIn Transformation Operation
     */
    BuiltInTransformation: "BuiltInTransformation",
};
exports.OperationalMode = {
    /**
     * Enabled is equivalent to True
     */
    Enabled: "Enabled",
    /**
     * Disabled is equivalent to False.
     */
    Disabled: "Disabled",
};
exports.OperatorValues = {
    /**
     * In operator.
     */
    In: "In",
    /**
     * NotIn operator.
     */
    NotIn: "NotIn",
    /**
     * Exists operator.
     */
    Exists: "Exists",
    /**
     * DoesNotExist operator.
     */
    DoesNotExist: "DoesNotExist",
};
exports.PrivateKeyAlgorithm = {
    /**
     * Algorithm - ec256.
     */
    Ec256: "Ec256",
    /**
     * Algorithm - ec384.
     */
    Ec384: "Ec384",
    /**
     * Algorithm - ec521.
     */
    Ec521: "Ec521",
    /**
     * Algorithm - ed25519.
     */
    Ed25519: "Ed25519",
    /**
     * Algorithm - rsa2048.
     */
    Rsa2048: "Rsa2048",
    /**
     * Algorithm - rsa4096.
     */
    Rsa4096: "Rsa4096",
    /**
     * Algorithm - rsa8192.
     */
    Rsa8192: "Rsa8192",
};
exports.PrivateKeyRotationPolicy = {
    /**
     * Rotation Policy - Always.
     */
    Always: "Always",
    /**
     * Rotation Policy - Never.
     */
    Never: "Never",
};
exports.ServiceType = {
    /**
     * Cluster IP Service.
     */
    ClusterIp: "ClusterIp",
    /**
     * Load Balancer Service.
     */
    LoadBalancer: "LoadBalancer",
    /**
     * Node Port Service.
     */
    NodePort: "NodePort",
};
exports.SourceSerializationFormat = {
    /**
     * JSON Format
     */
    Json: "Json",
};
exports.StateStoreResourceDefinitionMethods = {
    /**
     * Get/KeyNotify from Store
     */
    Read: "Read",
    /**
     * Set/Delete in Store
     */
    Write: "Write",
    /**
     * Allowed all operations on Store - Get/KeyNotify/Set/Delete
     */
    ReadWrite: "ReadWrite",
};
exports.StateStoreResourceKeyTypes = {
    /**
     * Key type - pattern
     */
    Pattern: "Pattern",
    /**
     * Key type - string
     */
    String: "String",
    /**
     * Key type - binary
     */
    Binary: "Binary",
};
exports.SubscriberMessageDropStrategy = {
    /**
     * Messages are never dropped.
     */
    None: "None",
    /**
     * The oldest message is dropped.
     */
    DropOldest: "DropOldest",
};
exports.TlsCertMethodMode = {
    /**
     * Automatic TLS server certificate configuration.
     */
    Automatic: "Automatic",
    /**
     * Manual TLS server certificate configuration.
     */
    Manual: "Manual",
};
exports.TransformationSerializationFormat = {
    /**
     * Delta Format
     */
    Delta: "Delta",
    /**
     * JSON Format
     */
    Json: "Json",
    /**
     * Parquet Format
     */
    Parquet: "Parquet",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9pb3RvcGVyYXRpb25zL3YyMDI0MTEwMS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0VBQXNFO0FBQ3RFLGlGQUFpRjs7O0FBR3BFLFFBQUEsMEJBQTBCLEdBQUc7SUFDdEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILG1CQUFtQixFQUFFLHFCQUFxQjtJQUMxQzs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0NBQ04sQ0FBQztBQU9FLFFBQUEsbUJBQW1CLEdBQUc7SUFDL0I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07Q0FDTixDQUFDO0FBT0UsUUFBQSxrQkFBa0IsR0FBRztJQUM5Qjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtDQUNsQixDQUFDO0FBT0UsUUFBQSwrQkFBK0IsR0FBRztJQUMzQzs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztDQUNoQixDQUFDO0FBT0UsUUFBQSxxQkFBcUIsR0FBRztJQUNqQzs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLGVBQWU7Q0FDeEIsQ0FBQztBQU9FLFFBQUEsdUJBQXVCLEdBQUc7SUFDbkM7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILGFBQWEsRUFBRSxlQUFlO0NBQ3hCLENBQUM7QUFPRSxRQUFBLHlCQUF5QixH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