export declare const ContainerGroupIpAddressType: {
    readonly Public: "Public";
    readonly Private: "Private";
};
/**
 * Specifies if the IP is exposed to the public internet or private VNET.
 */
export type ContainerGroupIpAddressType = (typeof ContainerGroupIpAddressType)[keyof typeof ContainerGroupIpAddressType];
export declare const ContainerGroupNetworkProtocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
};
/**
 * The protocol associated with the port.
 */
export type ContainerGroupNetworkProtocol = (typeof ContainerGroupNetworkProtocol)[keyof typeof ContainerGroupNetworkProtocol];
export declare const ContainerGroupPriority: {
    readonly Regular: "Regular";
    readonly Spot: "Spot";
};
/**
 * The priority of the container group.
 */
export type ContainerGroupPriority = (typeof ContainerGroupPriority)[keyof typeof ContainerGroupPriority];
export declare const ContainerGroupRestartPolicy: {
    readonly Always: "Always";
    readonly OnFailure: "OnFailure";
    readonly Never: "Never";
};
/**
 * Restart policy for all containers within the container group.
 * - `Always` Always restart
 * - `OnFailure` Restart on failure
 * - `Never` Never restart
 */
export type ContainerGroupRestartPolicy = (typeof ContainerGroupRestartPolicy)[keyof typeof ContainerGroupRestartPolicy];
export declare const ContainerGroupSku: {
    readonly Standard: "Standard";
    readonly Dedicated: "Dedicated";
    readonly Confidential: "Confidential";
};
/**
 * The SKU for a container group.
 */
export type ContainerGroupSku = (typeof ContainerGroupSku)[keyof typeof ContainerGroupSku];
export declare const ContainerNetworkProtocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
};
/**
 * The protocol associated with the port.
 */
export type ContainerNetworkProtocol = (typeof ContainerNetworkProtocol)[keyof typeof ContainerNetworkProtocol];
export declare const DnsNameLabelReusePolicy: {
    readonly Unsecure: "Unsecure";
    readonly TenantReuse: "TenantReuse";
    readonly SubscriptionReuse: "SubscriptionReuse";
    readonly ResourceGroupReuse: "ResourceGroupReuse";
    readonly Noreuse: "Noreuse";
};
/**
 * The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
 */
export type DnsNameLabelReusePolicy = (typeof DnsNameLabelReusePolicy)[keyof typeof DnsNameLabelReusePolicy];
export declare const GpuSku: {
    readonly K80: "K80";
    readonly P100: "P100";
    readonly V100: "V100";
};
/**
 * The SKU of the GPU resource.
 */
export type GpuSku = (typeof GpuSku)[keyof typeof GpuSku];
export declare const LogAnalyticsLogType: {
    readonly ContainerInsights: "ContainerInsights";
    readonly ContainerInstanceLogs: "ContainerInstanceLogs";
};
/**
 * The log type to be used.
 */
export type LogAnalyticsLogType = (typeof LogAnalyticsLogType)[keyof typeof LogAnalyticsLogType];
export declare const OperatingSystemTypes: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * The operating system type required by the containers in the container group.
 */
export type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const Scheme: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * The scheme.
 */
export type Scheme = (typeof Scheme)[keyof typeof Scheme];
