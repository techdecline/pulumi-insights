export declare const AuthenticationType: {
    /**
     * Use AAD SSO to authenticate the user (this requires internet access).
     */
    readonly AAD: "AAD";
    /**
     * Use locally stored passwords to authenticate the user.
     */
    readonly Password: "Password";
};
/**
 * How to authenticate users who access local diagnostics APIs.
 */
export type AuthenticationType = (typeof AuthenticationType)[keyof typeof AuthenticationType];
export declare const BillingSku: {
    /**
     * 100 Mbps, 20 active SIMs plan, 2 RANs
     */
    readonly G0: "G0";
    /**
     * 1 Gbps, 100 active SIMs plan, 5 RANs
     */
    readonly G1: "G1";
    /**
     * 2 Gbps, 200 active SIMs plan, 10 RANs
     */
    readonly G2: "G2";
    /**
     * 5 Gbps, 500 active SIMs plan
     */
    readonly G5: "G5";
    /**
     * 10 Gbps, 1000 active SIMs plan
     */
    readonly G10: "G10";
};
/**
 * The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
 */
export type BillingSku = (typeof BillingSku)[keyof typeof BillingSku];
export declare const CoreNetworkType: {
    /**
     * 5G core
     */
    readonly CoreNetworkType_5GC: "5GC";
    /**
     * EPC / 4G core
     */
    readonly EPC: "EPC";
};
/**
 * The core network technology generation (5G core or EPC / 4G core).
 */
export type CoreNetworkType = (typeof CoreNetworkType)[keyof typeof CoreNetworkType];
export declare const ManagedServiceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const NaptEnabled: {
    /**
     * NAPT is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * NAPT is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Whether NAPT is enabled for connections to this attached data network.
 */
export type NaptEnabled = (typeof NaptEnabled)[keyof typeof NaptEnabled];
export declare const PduSessionType: {
    readonly IPv4: "IPv4";
    readonly IPv6: "IPv6";
};
/**
 * The default PDU session type, which is used if the UE does not request a specific session type.
 */
export type PduSessionType = (typeof PduSessionType)[keyof typeof PduSessionType];
export declare const PlatformType: {
    /**
     * If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other.
     */
    readonly AKS_HCI: "AKS-HCI";
    /**
     * If this option is chosen, you must set one of "azureStackHciCluster", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other.
     */
    readonly PlatformType_3P_AZURE_STACK_HCI: "3P-AZURE-STACK-HCI";
};
/**
 * The platform type where packet core is deployed.
 */
export type PlatformType = (typeof PlatformType)[keyof typeof PlatformType];
export declare const PreemptionCapability: {
    /**
     * Cannot preempt
     */
    readonly NotPreempt: "NotPreempt";
    /**
     * May preempt
     */
    readonly MayPreempt: "MayPreempt";
};
/**
 * Default QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
 */
export type PreemptionCapability = (typeof PreemptionCapability)[keyof typeof PreemptionCapability];
export declare const PreemptionVulnerability: {
    /**
     * Cannot be preempted
     */
    readonly NotPreemptable: "NotPreemptable";
    /**
     * May be preempted
     */
    readonly Preemptable: "Preemptable";
};
/**
 * Default QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
 */
export type PreemptionVulnerability = (typeof PreemptionVulnerability)[keyof typeof PreemptionVulnerability];
export declare const SdfDirection: {
    /**
     * Traffic flowing from the UE to the data network.
     */
    readonly Uplink: "Uplink";
    /**
     * Traffic flowing from the data network to the UE.
     */
    readonly Downlink: "Downlink";
    /**
     * Traffic flowing both to and from the UE.
     */
    readonly Bidirectional: "Bidirectional";
};
/**
 * The direction of this flow.
 */
export type SdfDirection = (typeof SdfDirection)[keyof typeof SdfDirection];
export declare const TrafficControlPermission: {
    /**
     * Traffic matching this rule is allowed to flow.
     */
    readonly Enabled: "Enabled";
    /**
     * Traffic matching this rule is not allowed to flow.
     */
    readonly Blocked: "Blocked";
};
/**
 * Determines whether flows that match this data flow policy rule are permitted.
 */
export type TrafficControlPermission = (typeof TrafficControlPermission)[keyof typeof TrafficControlPermission];
