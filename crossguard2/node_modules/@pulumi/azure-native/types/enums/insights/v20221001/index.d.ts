export declare const ComparisonOperationType: {
    readonly Equals: "Equals";
    readonly NotEquals: "NotEquals";
    readonly GreaterThan: "GreaterThan";
    readonly GreaterThanOrEqual: "GreaterThanOrEqual";
    readonly LessThan: "LessThan";
    readonly LessThanOrEqual: "LessThanOrEqual";
};
/**
 * the operator that is used to compare the metric data and the threshold.
 */
export type ComparisonOperationType = (typeof ComparisonOperationType)[keyof typeof ComparisonOperationType];
export declare const MetricStatisticType: {
    readonly Average: "Average";
    readonly Min: "Min";
    readonly Max: "Max";
    readonly Sum: "Sum";
    readonly Count: "Count";
};
/**
 * the metric statistic type. How the metrics from multiple instances are combined.
 */
export type MetricStatisticType = (typeof MetricStatisticType)[keyof typeof MetricStatisticType];
export declare const OperationType: {
    readonly Scale: "Scale";
};
/**
 * the operation associated with the notification and its value must be "scale"
 */
export type OperationType = (typeof OperationType)[keyof typeof OperationType];
export declare const PredictiveAutoscalePolicyScaleMode: {
    readonly Disabled: "Disabled";
    readonly ForecastOnly: "ForecastOnly";
    readonly Enabled: "Enabled";
};
/**
 * the predictive autoscale mode
 */
export type PredictiveAutoscalePolicyScaleMode = (typeof PredictiveAutoscalePolicyScaleMode)[keyof typeof PredictiveAutoscalePolicyScaleMode];
export declare const RecurrenceFrequency: {
    readonly None: "None";
    readonly Second: "Second";
    readonly Minute: "Minute";
    readonly Hour: "Hour";
    readonly Day: "Day";
    readonly Week: "Week";
    readonly Month: "Month";
    readonly Year: "Year";
};
/**
 * the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
 */
export type RecurrenceFrequency = (typeof RecurrenceFrequency)[keyof typeof RecurrenceFrequency];
export declare const ScaleDirection: {
    readonly None: "None";
    readonly Increase: "Increase";
    readonly Decrease: "Decrease";
};
/**
 * the scale direction. Whether the scaling action increases or decreases the number of instances.
 */
export type ScaleDirection = (typeof ScaleDirection)[keyof typeof ScaleDirection];
export declare const ScaleRuleMetricDimensionOperationType: {
    readonly Equals: "Equals";
    readonly NotEquals: "NotEquals";
};
/**
 * the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
 */
export type ScaleRuleMetricDimensionOperationType = (typeof ScaleRuleMetricDimensionOperationType)[keyof typeof ScaleRuleMetricDimensionOperationType];
export declare const ScaleType: {
    readonly ChangeCount: "ChangeCount";
    readonly PercentChangeCount: "PercentChangeCount";
    readonly ExactCount: "ExactCount";
    readonly ServiceAllowedNextValue: "ServiceAllowedNextValue";
};
/**
 * the type of action that should occur when the scale rule fires.
 */
export type ScaleType = (typeof ScaleType)[keyof typeof ScaleType];
export declare const TimeAggregationType: {
    readonly Average: "Average";
    readonly Minimum: "Minimum";
    readonly Maximum: "Maximum";
    readonly Total: "Total";
    readonly Count: "Count";
    readonly Last: "Last";
};
/**
 * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
 */
export type TimeAggregationType = (typeof TimeAggregationType)[keyof typeof TimeAggregationType];
