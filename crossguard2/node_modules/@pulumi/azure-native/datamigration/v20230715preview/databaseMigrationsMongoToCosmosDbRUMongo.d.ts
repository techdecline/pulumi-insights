import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Database Migration Resource for Mongo to CosmosDb.
 */
export declare class DatabaseMigrationsMongoToCosmosDbRUMongo extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseMigrationsMongoToCosmosDbRUMongo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabaseMigrationsMongoToCosmosDbRUMongo;
    /**
     * Returns true if the given object is an instance of DatabaseMigrationsMongoToCosmosDbRUMongo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DatabaseMigrationsMongoToCosmosDbRUMongo;
    /**
     * List of Mongo Collections to be migrated.
     */
    readonly collectionList: pulumi.Output<outputs.datamigration.v20230715preview.MongoMigrationCollectionResponse[] | undefined>;
    /**
     * Database migration end time.
     */
    readonly endedOn: pulumi.Output<string>;
    /**
     *
     * Expected value is 'MongoToCosmosDbMongo'.
     */
    readonly kind: pulumi.Output<"MongoToCosmosDbMongo">;
    /**
     * Error details in case of migration failure.
     */
    readonly migrationFailureError: pulumi.Output<outputs.datamigration.v20230715preview.ErrorInfoResponse>;
    /**
     * ID for current migration operation.
     */
    readonly migrationOperationId: pulumi.Output<string | undefined>;
    /**
     * Resource Id of the Migration Service.
     */
    readonly migrationService: pulumi.Output<string | undefined>;
    /**
     * Migration status.
     */
    readonly migrationStatus: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Error message for migration provisioning failure, if any.
     */
    readonly provisioningError: pulumi.Output<string | undefined>;
    /**
     * Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Resource Id of the target resource.
     */
    readonly scope: pulumi.Output<string | undefined>;
    /**
     * Source Mongo connection details.
     */
    readonly sourceMongoConnection: pulumi.Output<outputs.datamigration.v20230715preview.MongoConnectionInformationResponse | undefined>;
    /**
     * Database migration start time.
     */
    readonly startedOn: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.datamigration.v20230715preview.SystemDataResponse>;
    /**
     * Target Cosmos DB Mongo connection details.
     */
    readonly targetMongoConnection: pulumi.Output<outputs.datamigration.v20230715preview.MongoConnectionInformationResponse | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a DatabaseMigrationsMongoToCosmosDbRUMongo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseMigrationsMongoToCosmosDbRUMongoArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DatabaseMigrationsMongoToCosmosDbRUMongo resource.
 */
export interface DatabaseMigrationsMongoToCosmosDbRUMongoArgs {
    /**
     * List of Mongo Collections to be migrated.
     */
    collectionList?: pulumi.Input<pulumi.Input<inputs.datamigration.v20230715preview.MongoMigrationCollectionArgs>[]>;
    /**
     *
     * Expected value is 'MongoToCosmosDbMongo'.
     */
    kind: pulumi.Input<"MongoToCosmosDbMongo">;
    /**
     * Name of the migration.
     */
    migrationName?: pulumi.Input<string>;
    /**
     * ID for current migration operation.
     */
    migrationOperationId?: pulumi.Input<string>;
    /**
     * Resource Id of the Migration Service.
     */
    migrationService?: pulumi.Input<string>;
    /**
     * Error message for migration provisioning failure, if any.
     */
    provisioningError?: pulumi.Input<string>;
    /**
     * Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource Id of the target resource.
     */
    scope?: pulumi.Input<string>;
    /**
     * Source Mongo connection details.
     */
    sourceMongoConnection?: pulumi.Input<inputs.datamigration.v20230715preview.MongoConnectionInformationArgs>;
    /**
     * Target Cosmos DB Mongo connection details.
     */
    targetMongoConnection?: pulumi.Input<inputs.datamigration.v20230715preview.MongoConnectionInformationArgs>;
    /**
     * The name of the target resource/account.
     */
    targetResourceName: pulumi.Input<string>;
}
