import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * List the storage accounts which are in use by related reports
 */
export declare function listProviderActionInUseStorageAccounts(args?: ListProviderActionInUseStorageAccountsArgs, opts?: pulumi.InvokeOptions): Promise<ListProviderActionInUseStorageAccountsResult>;
export interface ListProviderActionInUseStorageAccountsArgs {
    /**
     * List of subscription ids to be query. If the list is null or empty, the API will query all the subscriptions of the user.
     */
    subscriptionIds?: string[];
}
/**
 * Parameters for listing in use storage accounts operation. If subscription list is null, it will check the user's all subscriptions.
 */
export interface ListProviderActionInUseStorageAccountsResult {
    /**
     * The storage account list which in use in related reports.
     */
    readonly storageAccountList?: outputs.appcomplianceautomation.v20240627.StorageInfoResponse[];
}
/**
 * List the storage accounts which are in use by related reports
 */
export declare function listProviderActionInUseStorageAccountsOutput(args?: ListProviderActionInUseStorageAccountsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<ListProviderActionInUseStorageAccountsResult>;
export interface ListProviderActionInUseStorageAccountsOutputArgs {
    /**
     * List of subscription ids to be query. If the list is null or empty, the API will query all the subscriptions of the user.
     */
    subscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
}
