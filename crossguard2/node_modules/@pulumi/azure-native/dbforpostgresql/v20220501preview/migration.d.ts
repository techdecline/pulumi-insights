import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Represents a migration resource.
 */
export declare class Migration extends pulumi.CustomResource {
    /**
     * Get an existing Migration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Migration;
    /**
     * Returns true if the given object is an instance of Migration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Migration;
    /**
     * To trigger cancel for entire migration we need to send this flag as true
     */
    readonly cancel: pulumi.Output<boolean | undefined>;
    /**
     * Migration status.
     */
    readonly currentStatus: pulumi.Output<outputs.dbforpostgresql.v20220501preview.MigrationStatusResponse>;
    /**
     * When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
     */
    readonly dBsToCancelMigrationOn: pulumi.Output<string[] | undefined>;
    readonly dBsToMigrate: pulumi.Output<string[] | undefined>;
    /**
     * When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
     */
    readonly dBsToTiggerCutoverOn: pulumi.Output<string[] | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * Migration details level.
     */
    readonly migrationDetailsLevel: pulumi.Output<string>;
    readonly migrationId: pulumi.Output<string>;
    /**
     * There are two types of migration modes Online and Offline
     */
    readonly migrationMode: pulumi.Output<string | undefined>;
    readonly migrationWindowStartTimeInUtc: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    readonly overwriteDBsInTarget: pulumi.Output<boolean | undefined>;
    readonly setupLogicalReplicationOnSourceDBIfNeeded: pulumi.Output<boolean | undefined>;
    readonly sourceDBServerFullyQualifiedDomainName: pulumi.Output<string | undefined>;
    /**
     * Database server metadata.
     */
    readonly sourceDBServerMetadata: pulumi.Output<outputs.dbforpostgresql.v20220501preview.DBServerMetadataResponse>;
    readonly sourceDBServerResourceId: pulumi.Output<string | undefined>;
    readonly startDataMigration: pulumi.Output<boolean | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.dbforpostgresql.v20220501preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly targetDBServerFullyQualifiedDomainName: pulumi.Output<string | undefined>;
    /**
     * Database server metadata.
     */
    readonly targetDBServerMetadata: pulumi.Output<outputs.dbforpostgresql.v20220501preview.DBServerMetadataResponse>;
    readonly targetDBServerResourceId: pulumi.Output<string>;
    /**
     * To trigger cutover for entire migration we need to send this flag as true
     */
    readonly triggerCutover: pulumi.Output<boolean | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Migration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigrationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Migration resource.
 */
export interface MigrationArgs {
    /**
     * To trigger cancel for entire migration we need to send this flag as true
     */
    cancel?: pulumi.Input<boolean>;
    /**
     * When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
     */
    dBsToCancelMigrationOn?: pulumi.Input<pulumi.Input<string>[]>;
    dBsToMigrate?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
     */
    dBsToTiggerCutoverOn?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * There are two types of migration modes Online and Offline
     */
    migrationMode?: pulumi.Input<string | enums.dbforpostgresql.v20220501preview.MigrationMode>;
    /**
     * The name of the migration.
     */
    migrationName?: pulumi.Input<string>;
    migrationWindowStartTimeInUtc?: pulumi.Input<string>;
    overwriteDBsInTarget?: pulumi.Input<boolean>;
    /**
     * The resource group name of the target database server.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Migration secret parameters.
     */
    secretParameters?: pulumi.Input<inputs.dbforpostgresql.v20220501preview.MigrationSecretParametersArgs>;
    setupLogicalReplicationOnSourceDBIfNeeded?: pulumi.Input<boolean>;
    sourceDBServerFullyQualifiedDomainName?: pulumi.Input<string>;
    sourceDBServerResourceId?: pulumi.Input<string>;
    startDataMigration?: pulumi.Input<boolean>;
    /**
     * The subscription ID of the target database server.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    targetDBServerFullyQualifiedDomainName?: pulumi.Input<string>;
    /**
     * The name of the target database server.
     */
    targetDBServerName: pulumi.Input<string>;
    /**
     * To trigger cutover for entire migration we need to send this flag as true
     */
    triggerCutover?: pulumi.Input<boolean>;
}
