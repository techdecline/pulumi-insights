import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Represents a migration resource.
 */
export declare class Migration extends pulumi.CustomResource {
    /**
     * Get an existing Migration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Migration;
    /**
     * Returns true if the given object is an instance of Migration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Migration;
    /**
     * To trigger cancel for entire migration we need to send this flag as True
     */
    readonly cancel: pulumi.Output<string | undefined>;
    /**
     * Current status of migration
     */
    readonly currentStatus: pulumi.Output<outputs.dbforpostgresql.v20231201preview.MigrationStatusResponse>;
    /**
     * When you want to trigger cancel for specific databases send cancel flag as True and database names in this array
     */
    readonly dbsToCancelMigrationOn: pulumi.Output<string[] | undefined>;
    /**
     * Number of databases to migrate
     */
    readonly dbsToMigrate: pulumi.Output<string[] | undefined>;
    /**
     * When you want to trigger cutover for specific databases send triggerCutover flag as True and database names in this array
     */
    readonly dbsToTriggerCutoverOn: pulumi.Output<string[] | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * To migrate roles and permissions we need to send this flag as True
     */
    readonly migrateRoles: pulumi.Output<string | undefined>;
    /**
     * ID for migration, a GUID.
     */
    readonly migrationId: pulumi.Output<string>;
    /**
     * ResourceId of the private endpoint migration instance
     */
    readonly migrationInstanceResourceId: pulumi.Output<string | undefined>;
    /**
     * There are two types of migration modes Online and Offline
     */
    readonly migrationMode: pulumi.Output<string | undefined>;
    /**
     * This indicates the supported Migration option for the migration
     */
    readonly migrationOption: pulumi.Output<string | undefined>;
    /**
     * End time in UTC for migration window
     */
    readonly migrationWindowEndTimeInUtc: pulumi.Output<string | undefined>;
    /**
     * Start time in UTC for migration window
     */
    readonly migrationWindowStartTimeInUtc: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
     */
    readonly overwriteDbsInTarget: pulumi.Output<string | undefined>;
    /**
     * Indicates whether to setup LogicalReplicationOnSourceDb, if needed
     */
    readonly setupLogicalReplicationOnSourceDbIfNeeded: pulumi.Output<string | undefined>;
    /**
     * Source server fully qualified domain name or ip. It is a optional value, if customer provide it, dms will always use it for connection
     */
    readonly sourceDbServerFullyQualifiedDomainName: pulumi.Output<string | undefined>;
    /**
     * Metadata of the source database server
     */
    readonly sourceDbServerMetadata: pulumi.Output<outputs.dbforpostgresql.v20231201preview.DbServerMetadataResponse>;
    /**
     * ResourceId of the source database server in case the sourceType is PostgreSQLSingleServer. For other source types this should be ipaddress:port@username or hostname:port@username
     */
    readonly sourceDbServerResourceId: pulumi.Output<string | undefined>;
    /**
     * migration source server type : OnPremises, AWS, GCP, AzureVM, PostgreSQLSingleServer, AWS_RDS, AWS_AURORA, AWS_EC2, GCP_CloudSQL, GCP_AlloyDB, GCP_Compute, or EDB
     */
    readonly sourceType: pulumi.Output<string | undefined>;
    /**
     * SSL modes for migration. Default SSL mode for PostgreSQLSingleServer is VerifyFull and Prefer for other source types
     */
    readonly sslMode: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the data migration should start right away
     */
    readonly startDataMigration: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.dbforpostgresql.v20231201preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Target server fully qualified domain name or ip. It is a optional value, if customer provide it, dms will always use it for connection
     */
    readonly targetDbServerFullyQualifiedDomainName: pulumi.Output<string | undefined>;
    /**
     * Metadata of the target database server
     */
    readonly targetDbServerMetadata: pulumi.Output<outputs.dbforpostgresql.v20231201preview.DbServerMetadataResponse>;
    /**
     * ResourceId of the source database server
     */
    readonly targetDbServerResourceId: pulumi.Output<string>;
    /**
     * To trigger cutover for entire migration we need to send this flag as True
     */
    readonly triggerCutover: pulumi.Output<string | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Migration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigrationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Migration resource.
 */
export interface MigrationArgs {
    /**
     * To trigger cancel for entire migration we need to send this flag as True
     */
    cancel?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.CancelEnum>;
    /**
     * When you want to trigger cancel for specific databases send cancel flag as True and database names in this array
     */
    dbsToCancelMigrationOn?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of databases to migrate
     */
    dbsToMigrate?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When you want to trigger cutover for specific databases send triggerCutover flag as True and database names in this array
     */
    dbsToTriggerCutoverOn?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * To migrate roles and permissions we need to send this flag as True
     */
    migrateRoles?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.MigrateRolesEnum>;
    /**
     * ResourceId of the private endpoint migration instance
     */
    migrationInstanceResourceId?: pulumi.Input<string>;
    /**
     * There are two types of migration modes Online and Offline
     */
    migrationMode?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.MigrationMode>;
    /**
     * The name of the migration.
     */
    migrationName?: pulumi.Input<string>;
    /**
     * This indicates the supported Migration option for the migration
     */
    migrationOption?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.MigrationOption>;
    /**
     * End time in UTC for migration window
     */
    migrationWindowEndTimeInUtc?: pulumi.Input<string>;
    /**
     * Start time in UTC for migration window
     */
    migrationWindowStartTimeInUtc?: pulumi.Input<string>;
    /**
     * Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
     */
    overwriteDbsInTarget?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.OverwriteDbsInTargetEnum>;
    /**
     * The resource group name of the target database server.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Migration secret parameters
     */
    secretParameters?: pulumi.Input<inputs.dbforpostgresql.v20231201preview.MigrationSecretParametersArgs>;
    /**
     * Indicates whether to setup LogicalReplicationOnSourceDb, if needed
     */
    setupLogicalReplicationOnSourceDbIfNeeded?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.LogicalReplicationOnSourceDbEnum>;
    /**
     * Source server fully qualified domain name or ip. It is a optional value, if customer provide it, dms will always use it for connection
     */
    sourceDbServerFullyQualifiedDomainName?: pulumi.Input<string>;
    /**
     * ResourceId of the source database server in case the sourceType is PostgreSQLSingleServer. For other source types this should be ipaddress:port@username or hostname:port@username
     */
    sourceDbServerResourceId?: pulumi.Input<string>;
    /**
     * migration source server type : OnPremises, AWS, GCP, AzureVM, PostgreSQLSingleServer, AWS_RDS, AWS_AURORA, AWS_EC2, GCP_CloudSQL, GCP_AlloyDB, GCP_Compute, or EDB
     */
    sourceType?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.SourceType>;
    /**
     * SSL modes for migration. Default SSL mode for PostgreSQLSingleServer is VerifyFull and Prefer for other source types
     */
    sslMode?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.SslMode>;
    /**
     * Indicates whether the data migration should start right away
     */
    startDataMigration?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.StartDataMigrationEnum>;
    /**
     * The subscription ID of the target database server.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Target server fully qualified domain name or ip. It is a optional value, if customer provide it, dms will always use it for connection
     */
    targetDbServerFullyQualifiedDomainName?: pulumi.Input<string>;
    /**
     * The name of the target database server.
     */
    targetDbServerName: pulumi.Input<string>;
    /**
     * To trigger cutover for entire migration we need to send this flag as True
     */
    triggerCutover?: pulumi.Input<string | enums.dbforpostgresql.v20231201preview.TriggerCutoverEnum>;
}
