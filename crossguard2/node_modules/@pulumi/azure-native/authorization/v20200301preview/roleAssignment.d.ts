import * as pulumi from "@pulumi/pulumi";
import * as enums from "../../types/enums";
/**
 * Role Assignments
 */
export declare class RoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoleAssignment;
    /**
     * Returns true if the given object is an instance of RoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RoleAssignment;
    /**
     * The delegation flag used for creating a role assignment
     */
    readonly canDelegate: pulumi.Output<boolean | undefined>;
    /**
     * The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
     */
    readonly condition: pulumi.Output<string | undefined>;
    /**
     * Version of the condition. Currently accepted value is '2.0'
     */
    readonly conditionVersion: pulumi.Output<string | undefined>;
    /**
     * Id of the user who created the assignment
     */
    readonly createdBy: pulumi.Output<string>;
    /**
     * Time it was created
     */
    readonly createdOn: pulumi.Output<string>;
    /**
     * Id of the delegated managed identity resource
     */
    readonly delegatedManagedIdentityResourceId: pulumi.Output<string | undefined>;
    /**
     * The role assignment name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The principal ID.
     */
    readonly principalId: pulumi.Output<string>;
    /**
     * The principal type of the assigned principal ID.
     */
    readonly principalType: pulumi.Output<string | undefined>;
    /**
     * The role definition ID.
     */
    readonly roleDefinitionId: pulumi.Output<string>;
    /**
     * The role assignment scope.
     */
    readonly scope: pulumi.Output<string | undefined>;
    /**
     * The role assignment type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Id of the user who updated the assignment
     */
    readonly updatedBy: pulumi.Output<string>;
    /**
     * Time it was updated
     */
    readonly updatedOn: pulumi.Output<string>;
    /**
     * Create a RoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAssignmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a RoleAssignment resource.
 */
export interface RoleAssignmentArgs {
    /**
     * The delegation flag used for creating a role assignment
     */
    canDelegate?: pulumi.Input<boolean>;
    /**
     * The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
     */
    condition?: pulumi.Input<string>;
    /**
     * Version of the condition. Currently accepted value is '2.0'
     */
    conditionVersion?: pulumi.Input<string>;
    /**
     * Id of the delegated managed identity resource
     */
    delegatedManagedIdentityResourceId?: pulumi.Input<string>;
    /**
     * The principal ID.
     */
    principalId: pulumi.Input<string>;
    /**
     * The principal type of the assigned principal ID.
     */
    principalType?: pulumi.Input<string | enums.authorization.v20200301preview.PrincipalType>;
    /**
     * The name of the role assignment. It can be any valid GUID.
     */
    roleAssignmentName?: pulumi.Input<string>;
    /**
     * The role definition ID.
     */
    roleDefinitionId: pulumi.Input<string>;
    /**
     * The role assignment scope.
     */
    scope: pulumi.Input<string>;
}
