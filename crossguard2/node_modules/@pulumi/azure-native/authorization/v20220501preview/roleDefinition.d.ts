import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Role definition.
 */
export declare class RoleDefinition extends pulumi.CustomResource {
    /**
     * Get an existing RoleDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoleDefinition;
    /**
     * Returns true if the given object is an instance of RoleDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RoleDefinition;
    /**
     * Role definition assignable scopes.
     */
    readonly assignableScopes: pulumi.Output<string[] | undefined>;
    /**
     * Id of the user who created the assignment
     */
    readonly createdBy: pulumi.Output<string>;
    /**
     * Time it was created
     */
    readonly createdOn: pulumi.Output<string>;
    /**
     * The role definition description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The role definition name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Role definition permissions.
     */
    readonly permissions: pulumi.Output<outputs.authorization.v20220501preview.PermissionResponse[] | undefined>;
    /**
     * The role name.
     */
    readonly roleName: pulumi.Output<string | undefined>;
    /**
     * The role type.
     */
    readonly roleType: pulumi.Output<string | undefined>;
    /**
     * The role definition type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Id of the user who updated the assignment
     */
    readonly updatedBy: pulumi.Output<string>;
    /**
     * Time it was updated
     */
    readonly updatedOn: pulumi.Output<string>;
    /**
     * Create a RoleDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a RoleDefinition resource.
 */
export interface RoleDefinitionArgs {
    /**
     * Role definition assignable scopes.
     */
    assignableScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The role definition description.
     */
    description?: pulumi.Input<string>;
    /**
     * Role definition permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.authorization.v20220501preview.PermissionArgs>[]>;
    /**
     * The ID of the role definition.
     */
    roleDefinitionId?: pulumi.Input<string>;
    /**
     * The role name.
     */
    roleName?: pulumi.Input<string>;
    /**
     * The role type.
     */
    roleType?: pulumi.Input<string>;
    /**
     * The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     */
    scope: pulumi.Input<string>;
}
