import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Role management policy
 */
export declare class RoleManagementPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RoleManagementPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoleManagementPolicy;
    /**
     * Returns true if the given object is an instance of RoleManagementPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RoleManagementPolicy;
    /**
     * The role management policy description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The role management policy display name.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The readonly computed rule applied to the policy.
     */
    readonly effectiveRules: pulumi.Output<(outputs.authorization.v20240201preview.RoleManagementPolicyApprovalRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyAuthenticationContextRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyEnablementRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyExpirationRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyNotificationRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyPimOnlyModeRuleResponse)[]>;
    /**
     * The role management policy is default policy.
     */
    readonly isOrganizationDefault: pulumi.Output<boolean | undefined>;
    /**
     * The name of the entity last modified it
     */
    readonly lastModifiedBy: pulumi.Output<outputs.authorization.v20240201preview.PrincipalResponse>;
    /**
     * The last modified date time.
     */
    readonly lastModifiedDateTime: pulumi.Output<string>;
    /**
     * The role management policy name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Additional properties of scope
     */
    readonly policyProperties: pulumi.Output<outputs.authorization.v20240201preview.PolicyPropertiesResponse>;
    /**
     * The rule applied to the policy.
     */
    readonly rules: pulumi.Output<(outputs.authorization.v20240201preview.RoleManagementPolicyApprovalRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyAuthenticationContextRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyEnablementRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyExpirationRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyNotificationRuleResponse | outputs.authorization.v20240201preview.RoleManagementPolicyPimOnlyModeRuleResponse)[] | undefined>;
    /**
     * The role management policy scope.
     */
    readonly scope: pulumi.Output<string | undefined>;
    /**
     * The role management policy type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a RoleManagementPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleManagementPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a RoleManagementPolicy resource.
 */
export interface RoleManagementPolicyArgs {
    /**
     * The role management policy description.
     */
    description?: pulumi.Input<string>;
    /**
     * The role management policy display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The role management policy is default policy.
     */
    isOrganizationDefault?: pulumi.Input<boolean>;
    /**
     * The name (guid) of the role management policy to upsert.
     */
    roleManagementPolicyName?: pulumi.Input<string>;
    /**
     * The rule applied to the policy.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.authorization.v20240201preview.RoleManagementPolicyApprovalRuleArgs | inputs.authorization.v20240201preview.RoleManagementPolicyAuthenticationContextRuleArgs | inputs.authorization.v20240201preview.RoleManagementPolicyEnablementRuleArgs | inputs.authorization.v20240201preview.RoleManagementPolicyExpirationRuleArgs | inputs.authorization.v20240201preview.RoleManagementPolicyNotificationRuleArgs | inputs.authorization.v20240201preview.RoleManagementPolicyPimOnlyModeRuleArgs>[]>;
    /**
     * The role management policy scope.
     */
    scope: pulumi.Input<string>;
}
