import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Role management policy
 */
export declare class RoleManagementPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RoleManagementPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoleManagementPolicyAssignment;
    /**
     * Returns true if the given object is an instance of RoleManagementPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RoleManagementPolicyAssignment;
    /**
     * The readonly computed rule applied to the policy.
     */
    readonly effectiveRules: pulumi.Output<(outputs.authorization.v20201001.RoleManagementPolicyApprovalRuleResponse | outputs.authorization.v20201001.RoleManagementPolicyAuthenticationContextRuleResponse | outputs.authorization.v20201001.RoleManagementPolicyEnablementRuleResponse | outputs.authorization.v20201001.RoleManagementPolicyExpirationRuleResponse | outputs.authorization.v20201001.RoleManagementPolicyNotificationRuleResponse)[]>;
    /**
     * The role management policy name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Additional properties of scope, role definition and policy
     */
    readonly policyAssignmentProperties: pulumi.Output<outputs.authorization.v20201001.PolicyAssignmentPropertiesResponse>;
    /**
     * The policy id role management policy assignment.
     */
    readonly policyId: pulumi.Output<string | undefined>;
    /**
     * The role definition of management policy assignment.
     */
    readonly roleDefinitionId: pulumi.Output<string | undefined>;
    /**
     * The role management policy scope.
     */
    readonly scope: pulumi.Output<string | undefined>;
    /**
     * The role management policy type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a RoleManagementPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleManagementPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a RoleManagementPolicyAssignment resource.
 */
export interface RoleManagementPolicyAssignmentArgs {
    /**
     * The policy id role management policy assignment.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The role definition of management policy assignment.
     */
    roleDefinitionId?: pulumi.Input<string>;
    /**
     * The name of format {guid_guid} the role management policy assignment to upsert.
     */
    roleManagementPolicyAssignmentName?: pulumi.Input<string>;
    /**
     * The role management policy scope.
     */
    scope: pulumi.Input<string>;
}
