import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * The ID of the policy definition version.
 */
export declare class PolicyDefinitionVersion extends pulumi.CustomResource {
    /**
     * Get an existing PolicyDefinitionVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PolicyDefinitionVersion;
    /**
     * Returns true if the given object is an instance of PolicyDefinitionVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PolicyDefinitionVersion;
    /**
     * The policy definition description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The display name of the policy definition.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
     */
    readonly metadata: pulumi.Output<any | undefined>;
    /**
     * The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
     */
    readonly mode: pulumi.Output<string | undefined>;
    /**
     * The name of the policy definition version.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
     */
    readonly parameters: pulumi.Output<{
        [key: string]: outputs.authorization.v20230401.ParameterDefinitionsValueResponse;
    } | undefined>;
    /**
     * The policy rule.
     */
    readonly policyRule: pulumi.Output<any | undefined>;
    /**
     * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
     */
    readonly policyType: pulumi.Output<string | undefined>;
    /**
     * The system metadata relating to this resource.
     */
    readonly systemData: pulumi.Output<outputs.authorization.v20230401.SystemDataResponse>;
    /**
     * The type of the resource (Microsoft.Authorization/policyDefinitions/versions).
     */
    readonly type: pulumi.Output<string>;
    /**
     * The policy definition version in #.#.# format.
     */
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a PolicyDefinitionVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyDefinitionVersionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PolicyDefinitionVersion resource.
 */
export interface PolicyDefinitionVersionArgs {
    /**
     * The policy definition description.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the policy definition.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
     */
    metadata?: any;
    /**
     * The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
     */
    mode?: pulumi.Input<string>;
    /**
     * The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
     */
    parameters?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.authorization.v20230401.ParameterDefinitionsValueArgs>;
    }>;
    /**
     * The name of the policy definition.
     */
    policyDefinitionName: pulumi.Input<string>;
    /**
     * The policy definition version.  The format is x.y.z where x is the major version number, y is the minor version number, and z is the patch number
     */
    policyDefinitionVersion?: pulumi.Input<string>;
    /**
     * The policy rule.
     */
    policyRule?: any;
    /**
     * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
     */
    policyType?: pulumi.Input<string | enums.authorization.v20230401.PolicyType>;
    /**
     * The policy definition version in #.#.# format.
     */
    version?: pulumi.Input<string>;
}
