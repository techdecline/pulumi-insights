import * as pulumi from "@pulumi/pulumi";
import * as enums from "../../types/enums";
/**
 * The policy definition.
 */
export declare class PolicyDefinition extends pulumi.CustomResource {
    /**
     * Get an existing PolicyDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PolicyDefinition;
    /**
     * Returns true if the given object is an instance of PolicyDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PolicyDefinition;
    /**
     * The policy definition description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The display name of the policy definition.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The policy definition metadata.
     */
    readonly metadata: pulumi.Output<any | undefined>;
    /**
     * The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
     */
    readonly mode: pulumi.Output<string | undefined>;
    /**
     * The name of the policy definition.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Required if a parameter is used in policy rule.
     */
    readonly parameters: pulumi.Output<any | undefined>;
    /**
     * The policy rule.
     */
    readonly policyRule: pulumi.Output<any | undefined>;
    /**
     * The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
     */
    readonly policyType: pulumi.Output<string | undefined>;
    /**
     * The type of the resource (Microsoft.Authorization/policyDefinitions).
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a PolicyDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PolicyDefinition resource.
 */
export interface PolicyDefinitionArgs {
    /**
     * The policy definition description.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the policy definition.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The policy definition metadata.
     */
    metadata?: any;
    /**
     * The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
     */
    mode?: pulumi.Input<string>;
    /**
     * Required if a parameter is used in policy rule.
     */
    parameters?: any;
    /**
     * The name of the policy definition to create.
     */
    policyDefinitionName?: pulumi.Input<string>;
    /**
     * The policy rule.
     */
    policyRule?: any;
    /**
     * The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
     */
    policyType?: pulumi.Input<string | enums.authorization.v20190601.PolicyType>;
}
