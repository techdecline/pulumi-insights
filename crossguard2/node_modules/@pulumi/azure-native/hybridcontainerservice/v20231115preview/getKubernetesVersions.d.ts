import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Gets the supported kubernetes versions from the underlying custom location
 */
export declare function getKubernetesVersions(args: GetKubernetesVersionsArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesVersionsResult>;
export interface GetKubernetesVersionsArgs {
    /**
     * The fully qualified Azure Resource manager identifier of the custom location resource.
     */
    customLocationResourceUri: string;
}
/**
 * The supported kubernetes versions.
 */
export interface GetKubernetesVersionsResult {
    /**
     * Extended Location definition
     */
    readonly extendedLocation?: outputs.hybridcontainerservice.v20231115preview.ExtendedLocationResponse;
    /**
     * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
     */
    readonly id: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    readonly properties: outputs.hybridcontainerservice.v20231115preview.KubernetesVersionProfileResponseProperties;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.hybridcontainerservice.v20231115preview.SystemDataResponse;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
/**
 * Gets the supported kubernetes versions from the underlying custom location
 */
export declare function getKubernetesVersionsOutput(args: GetKubernetesVersionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetKubernetesVersionsResult>;
export interface GetKubernetesVersionsOutputArgs {
    /**
     * The fully qualified Azure Resource manager identifier of the custom location resource.
     */
    customLocationResourceUri: pulumi.Input<string>;
}
