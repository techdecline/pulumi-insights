import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Response for Disk Pool request.
 * Azure REST API version: 2021-08-01. Prior API version in Azure Native 1.x: 2020-03-15-preview.
 *
 * Other available API versions: 2020-03-15-preview.
 */
export declare class DiskPool extends pulumi.CustomResource {
    /**
     * Get an existing DiskPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DiskPool;
    /**
     * Returns true if the given object is an instance of DiskPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DiskPool;
    /**
     * List of additional capabilities for Disk Pool.
     */
    readonly additionalCapabilities: pulumi.Output<string[] | undefined>;
    /**
     * Logical zone for Disk Pool resource; example: ["1"].
     */
    readonly availabilityZones: pulumi.Output<string[]>;
    /**
     * List of Azure Managed Disks to attach to a Disk Pool.
     */
    readonly disks: pulumi.Output<outputs.storagepool.DiskResponse[] | undefined>;
    /**
     * The geo-location where the resource lives.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Azure resource id. Indicates if this resource is managed by another Azure resource.
     */
    readonly managedBy: pulumi.Output<string>;
    /**
     * List of Azure resource ids that manage this resource.
     */
    readonly managedByExtended: pulumi.Output<string[]>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * State of the operation on the resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Operational status of the Disk Pool.
     */
    readonly status: pulumi.Output<string>;
    /**
     * Azure Resource ID of a Subnet for the Disk Pool.
     */
    readonly subnetId: pulumi.Output<string>;
    /**
     * Resource metadata required by ARM RPC
     */
    readonly systemData: pulumi.Output<outputs.storagepool.SystemMetadataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Sku tier
     */
    readonly tier: pulumi.Output<string | undefined>;
    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a DiskPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskPoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DiskPool resource.
 */
export interface DiskPoolArgs {
    /**
     * List of additional capabilities for a Disk Pool.
     */
    additionalCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logical zone for Disk Pool resource; example: ["1"].
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Disk Pool.
     */
    diskPoolName?: pulumi.Input<string>;
    /**
     * List of Azure Managed Disks to attach to a Disk Pool.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.storagepool.DiskArgs>[]>;
    /**
     * The geo-location where the resource lives.
     */
    location?: pulumi.Input<string>;
    /**
     * Azure resource id. Indicates if this resource is managed by another Azure resource.
     */
    managedBy?: pulumi.Input<string>;
    /**
     * List of Azure resource ids that manage this resource.
     */
    managedByExtended?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Determines the SKU of the Disk Pool
     */
    sku: pulumi.Input<inputs.storagepool.SkuArgs>;
    /**
     * Azure Resource ID of a Subnet for the Disk Pool.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
