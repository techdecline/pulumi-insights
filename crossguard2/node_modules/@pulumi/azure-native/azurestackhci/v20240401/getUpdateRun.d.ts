import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Get the Update run for a specified update
 */
export declare function getUpdateRun(args: GetUpdateRunArgs, opts?: pulumi.InvokeOptions): Promise<GetUpdateRunResult>;
export interface GetUpdateRunArgs {
    /**
     * The name of the cluster.
     */
    clusterName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
    /**
     * The name of the Update
     */
    updateName: string;
    /**
     * The name of the Update Run
     */
    updateRunName: string;
}
/**
 * Details of an Update run
 */
export interface GetUpdateRunResult {
    /**
     * More detailed description of the step.
     */
    readonly description?: string;
    /**
     * Duration of the update run.
     */
    readonly duration?: string;
    /**
     * When the step reached a terminal state.
     */
    readonly endTimeUtc?: string;
    /**
     * Error message, specified if the step is in a failed state.
     */
    readonly errorMessage?: string;
    /**
     * Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
     */
    readonly expectedExecutionTime?: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * Timestamp of the most recently completed step in the update run.
     */
    readonly lastUpdatedTime?: string;
    /**
     * Completion time of this step or the last completed sub-step.
     */
    readonly lastUpdatedTimeUtc?: string;
    /**
     * The geo-location where the resource lives
     */
    readonly location?: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * Provisioning state of the UpdateRuns proxy resource.
     */
    readonly provisioningState: string;
    /**
     * When the step started, or empty if it has not started executing.
     */
    readonly startTimeUtc?: string;
    /**
     * State of the update run.
     */
    readonly state?: string;
    /**
     * Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     */
    readonly status?: string;
    /**
     * Recursive model for child steps of this step.
     */
    readonly steps?: outputs.azurestackhci.v20240401.StepResponse[];
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.azurestackhci.v20240401.SystemDataResponse;
    /**
     * Timestamp of the update run was started.
     */
    readonly timeStarted?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
/**
 * Get the Update run for a specified update
 */
export declare function getUpdateRunOutput(args: GetUpdateRunOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUpdateRunResult>;
export interface GetUpdateRunOutputArgs {
    /**
     * The name of the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the Update
     */
    updateName: pulumi.Input<string>;
    /**
     * The name of the Update Run
     */
    updateRunName: pulumi.Input<string>;
}
