import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Details of an Update run
 */
export declare class UpdateRun extends pulumi.CustomResource {
    /**
     * Get an existing UpdateRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): UpdateRun;
    /**
     * Returns true if the given object is an instance of UpdateRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is UpdateRun;
    /**
     * More detailed description of the step.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Duration of the update run.
     */
    readonly duration: pulumi.Output<string | undefined>;
    /**
     * When the step reached a terminal state.
     */
    readonly endTimeUtc: pulumi.Output<string | undefined>;
    /**
     * Error message, specified if the step is in a failed state.
     */
    readonly errorMessage: pulumi.Output<string | undefined>;
    /**
     * Timestamp of the most recently completed step in the update run.
     */
    readonly lastUpdatedTime: pulumi.Output<string | undefined>;
    /**
     * Completion time of this step or the last completed sub-step.
     */
    readonly lastUpdatedTimeUtc: pulumi.Output<string | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Provisioning state of the UpdateRuns proxy resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * When the step started, or empty if it has not started executing.
     */
    readonly startTimeUtc: pulumi.Output<string | undefined>;
    /**
     * State of the update run.
     */
    readonly state: pulumi.Output<string | undefined>;
    /**
     * Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     */
    readonly status: pulumi.Output<string | undefined>;
    /**
     * Recursive model for child steps of this step.
     */
    readonly steps: pulumi.Output<outputs.azurestackhci.v20230801preview.StepResponse[] | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.azurestackhci.v20230801preview.SystemDataResponse>;
    /**
     * Timestamp of the update run was started.
     */
    readonly timeStarted: pulumi.Output<string | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a UpdateRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UpdateRunArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a UpdateRun resource.
 */
export interface UpdateRunArgs {
    /**
     * The name of the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * More detailed description of the step.
     */
    description?: pulumi.Input<string>;
    /**
     * Duration of the update run.
     */
    duration?: pulumi.Input<string>;
    /**
     * When the step reached a terminal state.
     */
    endTimeUtc?: pulumi.Input<string>;
    /**
     * Error message, specified if the step is in a failed state.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Timestamp of the most recently completed step in the update run.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * Completion time of this step or the last completed sub-step.
     */
    lastUpdatedTimeUtc?: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the step.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * When the step started, or empty if it has not started executing.
     */
    startTimeUtc?: pulumi.Input<string>;
    /**
     * State of the update run.
     */
    state?: pulumi.Input<string | enums.azurestackhci.v20230801preview.UpdateRunPropertiesState>;
    /**
     * Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     */
    status?: pulumi.Input<string>;
    /**
     * Recursive model for child steps of this step.
     */
    steps?: pulumi.Input<pulumi.Input<inputs.azurestackhci.v20230801preview.StepArgs>[]>;
    /**
     * Timestamp of the update run was started.
     */
    timeStarted?: pulumi.Input<string>;
    /**
     * The name of the Update
     */
    updateName: pulumi.Input<string>;
    /**
     * The name of the Update Run
     */
    updateRunName?: pulumi.Input<string>;
}
