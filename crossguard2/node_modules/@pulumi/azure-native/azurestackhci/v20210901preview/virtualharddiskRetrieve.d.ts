import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * The virtual hard disk resource definition.
 */
export declare class VirtualharddiskRetrieve extends pulumi.CustomResource {
    /**
     * Get an existing VirtualharddiskRetrieve resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualharddiskRetrieve;
    /**
     * Returns true if the given object is an instance of VirtualharddiskRetrieve.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VirtualharddiskRetrieve;
    readonly blockSizeBytes: pulumi.Output<number | undefined>;
    /**
     * Storage ContainerID of the storage container to be used for VHD
     */
    readonly containerId: pulumi.Output<string | undefined>;
    /**
     * The format of the actual VHD file [vhd, vhdx]
     */
    readonly diskFileFormat: pulumi.Output<string | undefined>;
    /**
     * diskSizeBytes - size of the disk in GB
     */
    readonly diskSizeBytes: pulumi.Output<number | undefined>;
    /**
     * Boolean for enabling dynamic sizing on the virtual hard disk
     */
    readonly dynamic: pulumi.Output<boolean | undefined>;
    /**
     * The extendedLocation of the resource.
     */
    readonly extendedLocation: pulumi.Output<outputs.azurestackhci.v20210901preview.ExtendedLocationResponse | undefined>;
    /**
     * The hypervisor generation of the Virtual Machine [V1, V2]
     */
    readonly hyperVGeneration: pulumi.Output<string | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    readonly logicalSectorBytes: pulumi.Output<number | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    readonly physicalSectorBytes: pulumi.Output<number | undefined>;
    readonly provisioningState: pulumi.Output<string>;
    /**
     * name of the object to be used in moc
     */
    readonly resourceName: pulumi.Output<string | undefined>;
    /**
     * VirtualHardDiskStatus defines the observed state of virtualharddisks
     */
    readonly status: pulumi.Output<outputs.azurestackhci.v20210901preview.VirtualHardDiskStatusResponse>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.azurestackhci.v20210901preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a VirtualharddiskRetrieve resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualharddiskRetrieveArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a VirtualharddiskRetrieve resource.
 */
export interface VirtualharddiskRetrieveArgs {
    blockSizeBytes?: pulumi.Input<number>;
    /**
     * Storage ContainerID of the storage container to be used for VHD
     */
    containerId?: pulumi.Input<string>;
    /**
     * The format of the actual VHD file [vhd, vhdx]
     */
    diskFileFormat?: pulumi.Input<string | enums.azurestackhci.v20210901preview.DiskFileFormat>;
    /**
     * diskSizeBytes - size of the disk in GB
     */
    diskSizeBytes?: pulumi.Input<number>;
    /**
     * Boolean for enabling dynamic sizing on the virtual hard disk
     */
    dynamic?: pulumi.Input<boolean>;
    /**
     * The extendedLocation of the resource.
     */
    extendedLocation?: pulumi.Input<inputs.azurestackhci.v20210901preview.ExtendedLocationArgs>;
    /**
     * The hypervisor generation of the Virtual Machine [V1, V2]
     */
    hyperVGeneration?: pulumi.Input<string | enums.azurestackhci.v20210901preview.HyperVGeneration>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    logicalSectorBytes?: pulumi.Input<number>;
    physicalSectorBytes?: pulumi.Input<number>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * name of the object to be used in moc
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    virtualharddisksName?: pulumi.Input<string>;
}
