import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Tunnel Policy maps domains to target endpoints to process traffic over the tunnelling protocol.
 */
export declare class TunnelPolicy extends pulumi.CustomResource {
    /**
     * Get an existing TunnelPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TunnelPolicy;
    /**
     * Returns true if the given object is an instance of TunnelPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TunnelPolicy;
    readonly deploymentStatus: pulumi.Output<string>;
    /**
     * Domains referenced by this tunnel policy.
     */
    readonly domains: pulumi.Output<outputs.cdn.v20240601preview.ActivatedResourceReferenceResponse[]>;
    /**
     * Resource name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Provisioning status
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Read only system data
     */
    readonly systemData: pulumi.Output<outputs.cdn.v20240601preview.SystemDataResponse>;
    /**
     * Target Groups referenced by this tunnel policy.
     */
    readonly targetGroups: pulumi.Output<outputs.cdn.v20240601preview.ResourceReferenceResponse[] | undefined>;
    /**
     * Protocol this tunnel will use for allowing traffic to backends.
     */
    readonly tunnelType: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a TunnelPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TunnelPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a TunnelPolicy resource.
 */
export interface TunnelPolicyArgs {
    /**
     * Domains referenced by this tunnel policy.
     */
    domains: pulumi.Input<pulumi.Input<inputs.cdn.v20240601preview.ActivatedResourceReferenceArgs>[]>;
    /**
     * Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
     */
    profileName: pulumi.Input<string>;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Target Groups referenced by this tunnel policy.
     */
    targetGroups?: pulumi.Input<pulumi.Input<inputs.cdn.v20240601preview.ResourceReferenceArgs>[]>;
    /**
     * Name of the Tunnel Policy under the profile.
     */
    tunnelPolicyName?: pulumi.Input<string>;
    /**
     * Protocol this tunnel will use for allowing traffic to backends.
     */
    tunnelType?: pulumi.Input<string | enums.cdn.v20240601preview.TunnelType>;
}
