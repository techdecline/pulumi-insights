import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * container group profile object
 * Azure REST API version: 2024-11-01-preview.
 */
export declare class CGProfile extends pulumi.CustomResource {
    /**
     * Get an existing CGProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CGProfile;
    /**
     * Returns true if the given object is an instance of CGProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CGProfile;
    /**
     * The properties for confidential container group
     */
    readonly confidentialComputeProperties: pulumi.Output<outputs.containerinstance.ConfidentialComputePropertiesResponse | undefined>;
    /**
     * The containers within the container group.
     */
    readonly containers: pulumi.Output<outputs.containerinstance.ContainerResponse[] | undefined>;
    /**
     * The diagnostic information for a container group.
     */
    readonly diagnostics: pulumi.Output<outputs.containerinstance.ContainerGroupDiagnosticsResponse | undefined>;
    /**
     * The encryption properties for a container group.
     */
    readonly encryptionProperties: pulumi.Output<outputs.containerinstance.EncryptionPropertiesResponse | undefined>;
    /**
     * extensions used by virtual kubelet
     */
    readonly extensions: pulumi.Output<outputs.containerinstance.DeploymentExtensionSpecResponse[] | undefined>;
    /**
     * The image registry credentials by which the container group is created from.
     */
    readonly imageRegistryCredentials: pulumi.Output<outputs.containerinstance.ImageRegistryCredentialResponse[] | undefined>;
    /**
     * The init containers for a container group.
     */
    readonly initContainers: pulumi.Output<outputs.containerinstance.InitContainerDefinitionResponse[] | undefined>;
    /**
     * The IP address type of the container group.
     */
    readonly ipAddress: pulumi.Output<outputs.containerinstance.IpAddressResponse | undefined>;
    /**
     * The resource location.
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The resource name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The operating system type required by the containers in the container group.
     */
    readonly osType: pulumi.Output<string | undefined>;
    /**
     * The priority of the container group.
     */
    readonly priority: pulumi.Output<string | undefined>;
    /**
     * Registered revisions are calculated at request time based off the records in the table logs.
     */
    readonly registeredRevisions: pulumi.Output<number[] | undefined>;
    /**
     * Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart
     */
    readonly restartPolicy: pulumi.Output<string | undefined>;
    /**
     * Container group profile current revision number
     */
    readonly revision: pulumi.Output<number | undefined>;
    /**
     * The container security properties.
     */
    readonly securityContext: pulumi.Output<outputs.containerinstance.SecurityContextDefinitionResponse | undefined>;
    /**
     * Shutdown grace period for containers in a container group.
     */
    readonly shutdownGracePeriod: pulumi.Output<string | undefined>;
    /**
     * The SKU for a container group.
     */
    readonly sku: pulumi.Output<string | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.containerinstance.SystemDataResponse>;
    /**
     * The resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Post completion time to live for containers of a CG
     */
    readonly timeToLive: pulumi.Output<string | undefined>;
    /**
     * The resource type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Gets or sets Krypton use property.
     */
    readonly useKrypton: pulumi.Output<boolean | undefined>;
    /**
     * The list of volumes that can be mounted by containers in this container group.
     */
    readonly volumes: pulumi.Output<outputs.containerinstance.VolumeResponse[] | undefined>;
    /**
     * The zones for the container group.
     */
    readonly zones: pulumi.Output<string[] | undefined>;
    /**
     * Create a CGProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CGProfileArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a CGProfile resource.
 */
export interface CGProfileArgs {
    /**
     * The properties for confidential container group
     */
    confidentialComputeProperties?: pulumi.Input<inputs.containerinstance.ConfidentialComputePropertiesArgs>;
    /**
     * ContainerGroupProfile name.
     */
    containerGroupProfileName?: pulumi.Input<string>;
    /**
     * The containers within the container group.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.containerinstance.ContainerArgs>[]>;
    /**
     * The diagnostic information for a container group.
     */
    diagnostics?: pulumi.Input<inputs.containerinstance.ContainerGroupDiagnosticsArgs>;
    /**
     * The encryption properties for a container group.
     */
    encryptionProperties?: pulumi.Input<inputs.containerinstance.EncryptionPropertiesArgs>;
    /**
     * extensions used by virtual kubelet
     */
    extensions?: pulumi.Input<pulumi.Input<inputs.containerinstance.DeploymentExtensionSpecArgs>[]>;
    /**
     * The image registry credentials by which the container group is created from.
     */
    imageRegistryCredentials?: pulumi.Input<pulumi.Input<inputs.containerinstance.ImageRegistryCredentialArgs>[]>;
    /**
     * The init containers for a container group.
     */
    initContainers?: pulumi.Input<pulumi.Input<inputs.containerinstance.InitContainerDefinitionArgs>[]>;
    /**
     * The IP address type of the container group.
     */
    ipAddress?: pulumi.Input<inputs.containerinstance.IpAddressArgs>;
    /**
     * The resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The operating system type required by the containers in the container group.
     */
    osType?: pulumi.Input<string | enums.containerinstance.OperatingSystemTypes>;
    /**
     * The priority of the container group.
     */
    priority?: pulumi.Input<string | enums.containerinstance.ContainerGroupPriority>;
    /**
     * Registered revisions are calculated at request time based off the records in the table logs.
     */
    registeredRevisions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart
     */
    restartPolicy?: pulumi.Input<string | enums.containerinstance.ContainerGroupRestartPolicy>;
    /**
     * Container group profile current revision number
     */
    revision?: pulumi.Input<number>;
    /**
     * The container security properties.
     */
    securityContext?: pulumi.Input<inputs.containerinstance.SecurityContextDefinitionArgs>;
    /**
     * Shutdown grace period for containers in a container group.
     */
    shutdownGracePeriod?: pulumi.Input<string>;
    /**
     * The SKU for a container group.
     */
    sku?: pulumi.Input<string | enums.containerinstance.ContainerGroupSku>;
    /**
     * The resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Post completion time to live for containers of a CG
     */
    timeToLive?: pulumi.Input<string>;
    /**
     * Gets or sets Krypton use property.
     */
    useKrypton?: pulumi.Input<boolean>;
    /**
     * The list of volumes that can be mounted by containers in this container group.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.containerinstance.VolumeArgs>[]>;
    /**
     * The zones for the container group.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
