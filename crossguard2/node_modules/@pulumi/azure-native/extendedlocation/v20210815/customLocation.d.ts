import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Custom Locations definition.
 */
export declare class CustomLocation extends pulumi.CustomResource {
    /**
     * Get an existing CustomLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CustomLocation;
    /**
     * Returns true if the given object is an instance of CustomLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CustomLocation;
    /**
     * This is optional input that contains the authentication that should be used to generate the namespace.
     */
    readonly authentication: pulumi.Output<outputs.extendedlocation.v20210815.CustomLocationPropertiesResponseAuthentication | undefined>;
    /**
     * Contains the reference to the add-on that contains charts to deploy CRDs and operators.
     */
    readonly clusterExtensionIds: pulumi.Output<string[] | undefined>;
    /**
     * Display name for the Custom Locations location.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
     */
    readonly hostResourceId: pulumi.Output<string | undefined>;
    /**
     * Type of host the Custom Locations is referencing (Kubernetes, etc...).
     */
    readonly hostType: pulumi.Output<string | undefined>;
    /**
     * Identity for the resource.
     */
    readonly identity: pulumi.Output<outputs.extendedlocation.v20210815.IdentityResponse | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Kubernetes namespace that will be created on the specified cluster.
     */
    readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Provisioning State for the Custom Location.
     */
    readonly provisioningState: pulumi.Output<string | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource
     */
    readonly systemData: pulumi.Output<outputs.extendedlocation.v20210815.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a CustomLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomLocationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a CustomLocation resource.
 */
export interface CustomLocationArgs {
    /**
     * This is optional input that contains the authentication that should be used to generate the namespace.
     */
    authentication?: pulumi.Input<inputs.extendedlocation.v20210815.CustomLocationPropertiesAuthenticationArgs>;
    /**
     * Contains the reference to the add-on that contains charts to deploy CRDs and operators.
     */
    clusterExtensionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name for the Custom Locations location.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
     */
    hostResourceId?: pulumi.Input<string>;
    /**
     * Type of host the Custom Locations is referencing (Kubernetes, etc...).
     */
    hostType?: pulumi.Input<string | enums.extendedlocation.v20210815.HostType>;
    /**
     * Identity for the resource.
     */
    identity?: pulumi.Input<inputs.extendedlocation.v20210815.IdentityArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Kubernetes namespace that will be created on the specified cluster.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Provisioning State for the Custom Location.
     */
    provisioningState?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Custom Locations name.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
