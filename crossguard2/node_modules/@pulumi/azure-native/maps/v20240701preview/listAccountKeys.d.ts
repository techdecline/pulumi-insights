import * as pulumi from "@pulumi/pulumi";
/**
 * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the Maps REST APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
 */
export declare function listAccountKeys(args: ListAccountKeysArgs, opts?: pulumi.InvokeOptions): Promise<ListAccountKeysResult>;
export interface ListAccountKeysArgs {
    /**
     * The name of the Maps Account.
     */
    accountName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}
/**
 * The set of keys which can be used to access the Maps REST APIs. Two keys are provided for key rotation without interruption.
 */
export interface ListAccountKeysResult {
    /**
     * The primary key for accessing the Maps REST APIs.
     */
    readonly primaryKey: string;
    /**
     * The last updated date and time of the primary key.
     */
    readonly primaryKeyLastUpdated: string;
    /**
     * The secondary key for accessing the Maps REST APIs.
     */
    readonly secondaryKey: string;
    /**
     * The last updated date and time of the secondary key.
     */
    readonly secondaryKeyLastUpdated: string;
}
/**
 * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the Maps REST APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
 */
export declare function listAccountKeysOutput(args: ListAccountKeysOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<ListAccountKeysResult>;
export interface ListAccountKeysOutputArgs {
    /**
     * The name of the Maps Account.
     */
    accountName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
