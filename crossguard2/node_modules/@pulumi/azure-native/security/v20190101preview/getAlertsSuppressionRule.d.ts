import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
 */
export declare function getAlertsSuppressionRule(args: GetAlertsSuppressionRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetAlertsSuppressionRuleResult>;
export interface GetAlertsSuppressionRuleArgs {
    /**
     * The unique name of the suppression alert rule
     */
    alertsSuppressionRuleName: string;
}
/**
 * Describes the suppression rule
 */
export interface GetAlertsSuppressionRuleResult {
    /**
     * Type of the alert to automatically suppress. For all alert types, use '*'
     */
    readonly alertType: string;
    /**
     * Any comment regarding the rule
     */
    readonly comment?: string;
    /**
     * Expiration date of the rule, if value is not provided or provided as null there will no expiration at all
     */
    readonly expirationDateUtc?: string;
    /**
     * Resource Id
     */
    readonly id: string;
    /**
     * The last time this rule was modified
     */
    readonly lastModifiedUtc: string;
    /**
     * Resource name
     */
    readonly name: string;
    /**
     * The reason for dismissing the alert
     */
    readonly reason: string;
    /**
     * Possible states of the rule
     */
    readonly state: string;
    /**
     * The suppression conditions
     */
    readonly suppressionAlertsScope?: outputs.security.v20190101preview.SuppressionAlertsScopeResponse;
    /**
     * Resource type
     */
    readonly type: string;
}
/**
 * Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
 */
export declare function getAlertsSuppressionRuleOutput(args: GetAlertsSuppressionRuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAlertsSuppressionRuleResult>;
export interface GetAlertsSuppressionRuleOutputArgs {
    /**
     * The unique name of the suppression alert rule
     */
    alertsSuppressionRuleName: pulumi.Input<string>;
}
