import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Governance rule over a given scope
 */
export declare class GovernanceRule extends pulumi.CustomResource {
    /**
     * Get an existing GovernanceRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GovernanceRule;
    /**
     * Returns true if the given object is an instance of GovernanceRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GovernanceRule;
    /**
     * Description of the governance rule
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Display name of the governance rule
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * Excluded scopes, filter out the descendants of the scope (on management scopes)
     */
    readonly excludedScopes: pulumi.Output<string[] | undefined>;
    /**
     * The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
     */
    readonly governanceEmailNotification: pulumi.Output<outputs.security.v20220101preview.GovernanceRuleEmailNotificationResponse | undefined>;
    /**
     * Defines whether the rule is management scope rule (master connector as a single scope or management scope)
     */
    readonly includeMemberScopes: pulumi.Output<boolean | undefined>;
    /**
     * Defines whether the rule is active/inactive
     */
    readonly isDisabled: pulumi.Output<boolean | undefined>;
    /**
     * Defines whether there is a grace period on the governance rule
     */
    readonly isGracePeriod: pulumi.Output<boolean | undefined>;
    /**
     * The governance rule metadata
     */
    readonly metadata: pulumi.Output<outputs.security.v20220101preview.GovernanceRuleMetadataResponse | undefined>;
    /**
     * Resource name
     */
    readonly name: pulumi.Output<string>;
    /**
     * The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
     */
    readonly ownerSource: pulumi.Output<outputs.security.v20220101preview.GovernanceRuleOwnerSourceResponse>;
    /**
     * Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
     */
    readonly remediationTimeframe: pulumi.Output<string | undefined>;
    /**
     * The governance rule priority, priority to the lower number. Rules with the same priority on the same scope will not be allowed
     */
    readonly rulePriority: pulumi.Output<number>;
    /**
     * The rule type of the governance rule, defines the source of the rule e.g. Integrated
     */
    readonly ruleType: pulumi.Output<string>;
    /**
     * The governance rule source, what the rule affects, e.g. Assessments
     */
    readonly sourceResourceType: pulumi.Output<string>;
    /**
     * The tenantId (GUID)
     */
    readonly tenantId: pulumi.Output<string>;
    /**
     * Resource type
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a GovernanceRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GovernanceRuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a GovernanceRule resource.
 */
export interface GovernanceRuleArgs {
    /**
     * Description of the governance rule
     */
    description?: pulumi.Input<string>;
    /**
     * Display name of the governance rule
     */
    displayName: pulumi.Input<string>;
    /**
     * Excluded scopes, filter out the descendants of the scope (on management scopes)
     */
    excludedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
     */
    governanceEmailNotification?: pulumi.Input<inputs.security.v20220101preview.GovernanceRuleEmailNotificationArgs>;
    /**
     * Defines whether the rule is management scope rule (master connector as a single scope or management scope)
     */
    includeMemberScopes?: pulumi.Input<boolean>;
    /**
     * Defines whether the rule is active/inactive
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Defines whether there is a grace period on the governance rule
     */
    isGracePeriod?: pulumi.Input<boolean>;
    /**
     * The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
     */
    ownerSource: pulumi.Input<inputs.security.v20220101preview.GovernanceRuleOwnerSourceArgs>;
    /**
     * Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
     */
    remediationTimeframe?: pulumi.Input<string>;
    /**
     * The governance rule key - unique key for the standard governance rule (GUID)
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The governance rule priority, priority to the lower number. Rules with the same priority on the same scope will not be allowed
     */
    rulePriority: pulumi.Input<number>;
    /**
     * The rule type of the governance rule, defines the source of the rule e.g. Integrated
     */
    ruleType: pulumi.Input<string | enums.security.v20220101preview.GovernanceRuleType>;
    /**
     * The scope of the Governance rules. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
     */
    scope: pulumi.Input<string>;
    /**
     * The governance rule source, what the rule affects, e.g. Assessments
     */
    sourceResourceType: pulumi.Input<string | enums.security.v20220101preview.GovernanceRuleSourceResourceType>;
}
