import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Gets the details of an extension associated with a Visual Studio Team Services account resource.
 */
export declare function getExtension(args: GetExtensionArgs, opts?: pulumi.InvokeOptions): Promise<GetExtensionResult>;
export interface GetExtensionArgs {
    /**
     * The name of the Visual Studio Team Services account resource.
     */
    accountResourceName: string;
    /**
     * The name of the extension.
     */
    extensionResourceName: string;
    /**
     * Name of the resource group within the Azure subscription.
     */
    resourceGroupName: string;
}
/**
 * The response to an extension resource GET request.
 */
export interface GetExtensionResult {
    /**
     * Unique identifier of the resource.
     */
    readonly id: string;
    /**
     * Resource location.
     */
    readonly location?: string;
    /**
     * Resource name.
     */
    readonly name: string;
    /**
     * The extension plan that was purchased.
     */
    readonly plan?: outputs.visualstudio.v20171101preview.ExtensionResourcePlanResponse;
    /**
     * Resource properties.
     */
    readonly properties: {
        [key: string]: string;
    };
    /**
     * Resource tags.
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Resource type.
     */
    readonly type: string;
}
/**
 * Gets the details of an extension associated with a Visual Studio Team Services account resource.
 */
export declare function getExtensionOutput(args: GetExtensionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetExtensionResult>;
export interface GetExtensionOutputArgs {
    /**
     * The name of the Visual Studio Team Services account resource.
     */
    accountResourceName: pulumi.Input<string>;
    /**
     * The name of the extension.
     */
    extensionResourceName: pulumi.Input<string>;
    /**
     * Name of the resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
}
