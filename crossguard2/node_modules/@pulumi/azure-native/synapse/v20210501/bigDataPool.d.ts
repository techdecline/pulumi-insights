import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * A Big Data pool
 */
export declare class BigDataPool extends pulumi.CustomResource {
    /**
     * Get an existing BigDataPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BigDataPool;
    /**
     * Returns true if the given object is an instance of BigDataPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is BigDataPool;
    /**
     * Auto-pausing properties
     */
    readonly autoPause: pulumi.Output<outputs.synapse.v20210501.AutoPausePropertiesResponse | undefined>;
    /**
     * Auto-scaling properties
     */
    readonly autoScale: pulumi.Output<outputs.synapse.v20210501.AutoScalePropertiesResponse | undefined>;
    /**
     * The cache size
     */
    readonly cacheSize: pulumi.Output<number | undefined>;
    /**
     * The time when the Big Data pool was created.
     */
    readonly creationDate: pulumi.Output<string | undefined>;
    /**
     * List of custom libraries/packages associated with the spark pool.
     */
    readonly customLibraries: pulumi.Output<outputs.synapse.v20210501.LibraryInfoResponse[] | undefined>;
    /**
     * The default folder where Spark logs will be written.
     */
    readonly defaultSparkLogFolder: pulumi.Output<string | undefined>;
    /**
     * Dynamic Executor Allocation
     */
    readonly dynamicExecutorAllocation: pulumi.Output<outputs.synapse.v20210501.DynamicExecutorAllocationResponse | undefined>;
    /**
     * Whether compute isolation is required or not.
     */
    readonly isComputeIsolationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The time when the Big Data pool was updated successfully.
     */
    readonly lastSucceededTimestamp: pulumi.Output<string>;
    /**
     * Library version requirements
     */
    readonly libraryRequirements: pulumi.Output<outputs.synapse.v20210501.LibraryRequirementsResponse | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The number of nodes in the Big Data pool.
     */
    readonly nodeCount: pulumi.Output<number | undefined>;
    /**
     * The level of compute power that each node in the Big Data pool has.
     */
    readonly nodeSize: pulumi.Output<string | undefined>;
    /**
     * The kind of nodes that the Big Data pool provides.
     */
    readonly nodeSizeFamily: pulumi.Output<string | undefined>;
    /**
     * The state of the Big Data pool.
     */
    readonly provisioningState: pulumi.Output<string | undefined>;
    /**
     * Whether session level packages enabled.
     */
    readonly sessionLevelPackagesEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Spark configuration file to specify additional properties
     */
    readonly sparkConfigProperties: pulumi.Output<outputs.synapse.v20210501.LibraryRequirementsResponse | undefined>;
    /**
     * The Spark events folder
     */
    readonly sparkEventsFolder: pulumi.Output<string | undefined>;
    /**
     * The Apache Spark version.
     */
    readonly sparkVersion: pulumi.Output<string | undefined>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a BigDataPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BigDataPoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a BigDataPool resource.
 */
export interface BigDataPoolArgs {
    /**
     * Auto-pausing properties
     */
    autoPause?: pulumi.Input<inputs.synapse.v20210501.AutoPausePropertiesArgs>;
    /**
     * Auto-scaling properties
     */
    autoScale?: pulumi.Input<inputs.synapse.v20210501.AutoScalePropertiesArgs>;
    /**
     * Big Data pool name
     */
    bigDataPoolName?: pulumi.Input<string>;
    /**
     * The cache size
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * The time when the Big Data pool was created.
     */
    creationDate?: pulumi.Input<string>;
    /**
     * List of custom libraries/packages associated with the spark pool.
     */
    customLibraries?: pulumi.Input<pulumi.Input<inputs.synapse.v20210501.LibraryInfoArgs>[]>;
    /**
     * The default folder where Spark logs will be written.
     */
    defaultSparkLogFolder?: pulumi.Input<string>;
    /**
     * Dynamic Executor Allocation
     */
    dynamicExecutorAllocation?: pulumi.Input<inputs.synapse.v20210501.DynamicExecutorAllocationArgs>;
    /**
     * Whether to stop any running jobs in the Big Data pool
     */
    force?: pulumi.Input<boolean>;
    /**
     * Whether compute isolation is required or not.
     */
    isComputeIsolationEnabled?: pulumi.Input<boolean>;
    /**
     * Library version requirements
     */
    libraryRequirements?: pulumi.Input<inputs.synapse.v20210501.LibraryRequirementsArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The number of nodes in the Big Data pool.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * The level of compute power that each node in the Big Data pool has.
     */
    nodeSize?: pulumi.Input<string | enums.synapse.v20210501.NodeSize>;
    /**
     * The kind of nodes that the Big Data pool provides.
     */
    nodeSizeFamily?: pulumi.Input<string | enums.synapse.v20210501.NodeSizeFamily>;
    /**
     * The state of the Big Data pool.
     */
    provisioningState?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Whether session level packages enabled.
     */
    sessionLevelPackagesEnabled?: pulumi.Input<boolean>;
    /**
     * Spark configuration file to specify additional properties
     */
    sparkConfigProperties?: pulumi.Input<inputs.synapse.v20210501.LibraryRequirementsArgs>;
    /**
     * The Spark events folder
     */
    sparkEventsFolder?: pulumi.Input<string>;
    /**
     * The Apache Spark version.
     */
    sparkVersion?: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the workspace
     */
    workspaceName: pulumi.Input<string>;
}
