import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Represents an environment type.
 */
export declare class ProjectEnvironmentType extends pulumi.CustomResource {
    /**
     * Get an existing ProjectEnvironmentType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProjectEnvironmentType;
    /**
     * Returns true if the given object is an instance of ProjectEnvironmentType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ProjectEnvironmentType;
    /**
     * The role definition assigned to the environment creator on backing resources.
     */
    readonly creatorRoleAssignment: pulumi.Output<outputs.devcenter.v20240501preview.ProjectEnvironmentTypeUpdatePropertiesResponseCreatorRoleAssignment | undefined>;
    /**
     * Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription.
     */
    readonly deploymentTargetId: pulumi.Output<string | undefined>;
    /**
     * The display name of the project environment type.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The number of environments of this type.
     */
    readonly environmentCount: pulumi.Output<number>;
    /**
     * Managed identity properties
     */
    readonly identity: pulumi.Output<outputs.devcenter.v20240501preview.ManagedServiceIdentityResponse | undefined>;
    /**
     * The geo-location for the environment type
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Defines whether this Environment Type can be used in this Project.
     */
    readonly status: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.devcenter.v20240501preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs.
     */
    readonly userRoleAssignments: pulumi.Output<{
        [key: string]: outputs.devcenter.v20240501preview.UserRoleAssignmentResponse;
    } | undefined>;
    /**
     * Create a ProjectEnvironmentType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectEnvironmentTypeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ProjectEnvironmentType resource.
 */
export interface ProjectEnvironmentTypeArgs {
    /**
     * The role definition assigned to the environment creator on backing resources.
     */
    creatorRoleAssignment?: pulumi.Input<inputs.devcenter.v20240501preview.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignmentArgs>;
    /**
     * Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription.
     */
    deploymentTargetId?: pulumi.Input<string>;
    /**
     * The display name of the project environment type.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The name of the environment type.
     */
    environmentTypeName?: pulumi.Input<string>;
    /**
     * Managed identity properties
     */
    identity?: pulumi.Input<inputs.devcenter.v20240501preview.ManagedServiceIdentityArgs>;
    /**
     * The geo-location for the environment type
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the project.
     */
    projectName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Defines whether this Environment Type can be used in this Project.
     */
    status?: pulumi.Input<string | enums.devcenter.v20240501preview.EnvironmentTypeEnableStatus>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs.
     */
    userRoleAssignments?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.devcenter.v20240501preview.UserRoleAssignmentArgs>;
    }>;
}
