import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Gets a project environment type.
 */
export declare function getProjectEnvironmentType(args: GetProjectEnvironmentTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectEnvironmentTypeResult>;
export interface GetProjectEnvironmentTypeArgs {
    /**
     * The name of the environment type.
     */
    environmentTypeName: string;
    /**
     * The name of the project.
     */
    projectName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}
/**
 * Represents an environment type.
 */
export interface GetProjectEnvironmentTypeResult {
    /**
     * The role definition assigned to the environment creator on backing resources.
     */
    readonly creatorRoleAssignment?: outputs.devcenter.v20231001preview.ProjectEnvironmentTypeUpdatePropertiesResponseCreatorRoleAssignment;
    /**
     * Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription.
     */
    readonly deploymentTargetId?: string;
    /**
     * The display name of the project environment type.
     */
    readonly displayName?: string;
    /**
     * The number of environments of this type.
     */
    readonly environmentCount: number;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * Managed identity properties
     */
    readonly identity?: outputs.devcenter.v20231001preview.ManagedServiceIdentityResponse;
    /**
     * The geo-location for the environment type
     */
    readonly location?: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * The provisioning state of the resource.
     */
    readonly provisioningState: string;
    /**
     * Defines whether this Environment Type can be used in this Project.
     */
    readonly status?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.devcenter.v20231001preview.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
    /**
     * Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs.
     */
    readonly userRoleAssignments?: {
        [key: string]: outputs.devcenter.v20231001preview.UserRoleAssignmentResponse;
    };
}
/**
 * Gets a project environment type.
 */
export declare function getProjectEnvironmentTypeOutput(args: GetProjectEnvironmentTypeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectEnvironmentTypeResult>;
export interface GetProjectEnvironmentTypeOutputArgs {
    /**
     * The name of the environment type.
     */
    environmentTypeName: pulumi.Input<string>;
    /**
     * The name of the project.
     */
    projectName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
