import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Information pertaining to an individual build.
 */
export declare class Build extends pulumi.CustomResource {
    /**
     * Get an existing Build resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Build;
    /**
     * Returns true if the given object is an instance of Build.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Build;
    /**
     * Status of the build once it has been provisioned.
     */
    readonly buildStatus: pulumi.Output<string>;
    /**
     * Configuration of the build.
     */
    readonly configuration: pulumi.Output<outputs.app.v20230801preview.BuildConfigurationResponse | undefined>;
    /**
     * Container registry that the final image will be uploaded to.
     */
    readonly destinationContainerRegistry: pulumi.Output<outputs.app.v20230801preview.ContainerRegistryWithCustomImageResponse | undefined>;
    /**
     * Endpoint from which the build logs can be streamed.
     */
    readonly logStreamEndpoint: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Build provisioning state.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: pulumi.Output<outputs.app.v20230801preview.SystemDataResponse>;
    /**
     * Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
     */
    readonly tokenEndpoint: pulumi.Output<string>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Endpoint to which the source code should be uploaded.
     */
    readonly uploadEndpoint: pulumi.Output<string>;
    /**
     * Create a Build resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BuildArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Build resource.
 */
export interface BuildArgs {
    /**
     * The name of a build.
     */
    buildName?: pulumi.Input<string>;
    /**
     * The name of the builder.
     */
    builderName: pulumi.Input<string>;
    /**
     * Configuration of the build.
     */
    configuration?: pulumi.Input<inputs.app.v20230801preview.BuildConfigurationArgs>;
    /**
     * Container registry that the final image will be uploaded to.
     */
    destinationContainerRegistry?: pulumi.Input<inputs.app.v20230801preview.ContainerRegistryWithCustomImageArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
