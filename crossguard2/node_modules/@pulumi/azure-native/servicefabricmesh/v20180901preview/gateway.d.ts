import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * This type describes a gateway resource.
 */
export declare class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Gateway;
    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Gateway;
    /**
     * User readable description of the gateway.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Network that the Application is using.
     */
    readonly destinationNetwork: pulumi.Output<outputs.servicefabricmesh.v20180901preview.NetworkRefResponse>;
    /**
     * Configuration for http connectivity for this gateway.
     */
    readonly http: pulumi.Output<outputs.servicefabricmesh.v20180901preview.HttpConfigResponse[] | undefined>;
    /**
     * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
     */
    readonly ipAddress: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * State of the resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Network the gateway should listen on for requests.
     */
    readonly sourceNetwork: pulumi.Output<outputs.servicefabricmesh.v20180901preview.NetworkRefResponse>;
    /**
     * Status of the resource.
     */
    readonly status: pulumi.Output<string>;
    /**
     * Gives additional information about the current status of the gateway.
     */
    readonly statusDetails: pulumi.Output<string>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Configuration for tcp connectivity for this gateway.
     */
    readonly tcp: pulumi.Output<outputs.servicefabricmesh.v20180901preview.TcpConfigResponse[] | undefined>;
    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * User readable description of the gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * Network that the Application is using.
     */
    destinationNetwork: pulumi.Input<inputs.servicefabricmesh.v20180901preview.NetworkRefArgs>;
    /**
     * The identity of the gateway.
     */
    gatewayResourceName?: pulumi.Input<string>;
    /**
     * Configuration for http connectivity for this gateway.
     */
    http?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180901preview.HttpConfigArgs>[]>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Azure resource group name
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Network the gateway should listen on for requests.
     */
    sourceNetwork: pulumi.Input<inputs.servicefabricmesh.v20180901preview.NetworkRefArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Configuration for tcp connectivity for this gateway.
     */
    tcp?: pulumi.Input<pulumi.Input<inputs.servicefabricmesh.v20180901preview.TcpConfigArgs>[]>;
}
