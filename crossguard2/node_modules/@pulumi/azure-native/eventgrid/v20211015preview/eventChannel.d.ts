import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Event Channel.
 */
export declare class EventChannel extends pulumi.CustomResource {
    /**
     * Get an existing EventChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventChannel;
    /**
     * Returns true if the given object is an instance of EventChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EventChannel;
    /**
     * Represents the destination of an event channel.
     */
    readonly destination: pulumi.Output<outputs.eventgrid.v20211015preview.EventChannelDestinationResponse | undefined>;
    /**
     * Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     * the event channel and corresponding partner topic are deleted.
     */
    readonly expirationTimeIfNotActivatedUtc: pulumi.Output<string | undefined>;
    /**
     * Information about the filter for the event channel.
     */
    readonly filter: pulumi.Output<outputs.eventgrid.v20211015preview.EventChannelFilterResponse | undefined>;
    /**
     * Name of the resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    readonly partnerTopicFriendlyDescription: pulumi.Output<string | undefined>;
    /**
     * The readiness state of the corresponding partner topic.
     */
    readonly partnerTopicReadinessState: pulumi.Output<string>;
    /**
     * Provisioning state of the event channel.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Source of the event channel. This represents a unique resource in the partner's resource model.
     */
    readonly source: pulumi.Output<outputs.eventgrid.v20211015preview.EventChannelSourceResponse | undefined>;
    /**
     * The system metadata relating to Event Channel resource.
     */
    readonly systemData: pulumi.Output<outputs.eventgrid.v20211015preview.SystemDataResponse>;
    /**
     * Type of the resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a EventChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventChannelArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a EventChannel resource.
 */
export interface EventChannelArgs {
    /**
     * Represents the destination of an event channel.
     */
    destination?: pulumi.Input<inputs.eventgrid.v20211015preview.EventChannelDestinationArgs>;
    /**
     * Name of the event channel.
     */
    eventChannelName?: pulumi.Input<string>;
    /**
     * Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     * the event channel and corresponding partner topic are deleted.
     */
    expirationTimeIfNotActivatedUtc?: pulumi.Input<string>;
    /**
     * Information about the filter for the event channel.
     */
    filter?: pulumi.Input<inputs.eventgrid.v20211015preview.EventChannelFilterArgs>;
    /**
     * Name of the partner namespace.
     */
    partnerNamespaceName: pulumi.Input<string>;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    partnerTopicFriendlyDescription?: pulumi.Input<string>;
    /**
     * The name of the resource group within the user's subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Source of the event channel. This represents a unique resource in the partner's resource model.
     */
    source?: pulumi.Input<inputs.eventgrid.v20211015preview.EventChannelSourceArgs>;
}
