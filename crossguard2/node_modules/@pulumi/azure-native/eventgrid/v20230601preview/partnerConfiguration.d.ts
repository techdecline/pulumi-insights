import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Partner configuration information
 */
export declare class PartnerConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing PartnerConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PartnerConfiguration;
    /**
     * Returns true if the given object is an instance of PartnerConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PartnerConfiguration;
    /**
     * Location of the resource.
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * Name of the resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The details of authorized partners.
     */
    readonly partnerAuthorization: pulumi.Output<outputs.eventgrid.v20230601preview.PartnerAuthorizationResponse | undefined>;
    /**
     * Provisioning state of the partner configuration.
     */
    readonly provisioningState: pulumi.Output<string | undefined>;
    /**
     * The system metadata relating to partner configuration resource.
     */
    readonly systemData: pulumi.Output<outputs.eventgrid.v20230601preview.SystemDataResponse>;
    /**
     * Tags of the resource.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Type of the resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a PartnerConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnerConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PartnerConfiguration resource.
 */
export interface PartnerConfigurationArgs {
    /**
     * Location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The details of authorized partners.
     */
    partnerAuthorization?: pulumi.Input<inputs.eventgrid.v20230601preview.PartnerAuthorizationArgs>;
    /**
     * Provisioning state of the partner configuration.
     */
    provisioningState?: pulumi.Input<string | enums.eventgrid.v20230601preview.PartnerConfigurationProvisioningState>;
    /**
     * The name of the resource group within the user's subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Tags of the resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
