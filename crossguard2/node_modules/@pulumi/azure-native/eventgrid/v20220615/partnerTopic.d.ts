import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Event Grid Partner Topic.
 */
export declare class PartnerTopic extends pulumi.CustomResource {
    /**
     * Get an existing PartnerTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PartnerTopic;
    /**
     * Returns true if the given object is an instance of PartnerTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PartnerTopic;
    /**
     * Activation state of the partner topic.
     */
    readonly activationState: pulumi.Output<string | undefined>;
    /**
     * Event Type information from the corresponding event channel.
     */
    readonly eventTypeInfo: pulumi.Output<outputs.eventgrid.v20220615.EventTypeInfoResponse | undefined>;
    /**
     * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     */
    readonly expirationTimeIfNotActivatedUtc: pulumi.Output<string | undefined>;
    /**
     * Identity information for the Partner Topic resource.
     */
    readonly identity: pulumi.Output<outputs.eventgrid.v20220615.IdentityInfoResponse | undefined>;
    /**
     * Location of the resource.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Context or helpful message that can be used during the approval process by the subscriber.
     */
    readonly messageForActivation: pulumi.Output<string | undefined>;
    /**
     * Name of the resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The immutableId of the corresponding partner registration.
     */
    readonly partnerRegistrationImmutableId: pulumi.Output<string | undefined>;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    readonly partnerTopicFriendlyDescription: pulumi.Output<string | undefined>;
    /**
     * Provisioning state of the partner topic.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Source associated with this partner topic. This represents a unique partner resource.
     */
    readonly source: pulumi.Output<string | undefined>;
    /**
     * The system metadata relating to Partner Topic resource.
     */
    readonly systemData: pulumi.Output<outputs.eventgrid.v20220615.SystemDataResponse>;
    /**
     * Tags of the resource.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Type of the resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a PartnerTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnerTopicArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PartnerTopic resource.
 */
export interface PartnerTopicArgs {
    /**
     * Activation state of the partner topic.
     */
    activationState?: pulumi.Input<string | enums.eventgrid.v20220615.PartnerTopicActivationState>;
    /**
     * Event Type information from the corresponding event channel.
     */
    eventTypeInfo?: pulumi.Input<inputs.eventgrid.v20220615.EventTypeInfoArgs>;
    /**
     * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     */
    expirationTimeIfNotActivatedUtc?: pulumi.Input<string>;
    /**
     * Identity information for the Partner Topic resource.
     */
    identity?: pulumi.Input<inputs.eventgrid.v20220615.IdentityInfoArgs>;
    /**
     * Location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * Context or helpful message that can be used during the approval process by the subscriber.
     */
    messageForActivation?: pulumi.Input<string>;
    /**
     * The immutableId of the corresponding partner registration.
     */
    partnerRegistrationImmutableId?: pulumi.Input<string>;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    partnerTopicFriendlyDescription?: pulumi.Input<string>;
    /**
     * Name of the partner topic.
     */
    partnerTopicName?: pulumi.Input<string>;
    /**
     * The name of the resource group within the user's subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Source associated with this partner topic. This represents a unique partner resource.
     */
    source?: pulumi.Input<string>;
    /**
     * Tags of the resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
