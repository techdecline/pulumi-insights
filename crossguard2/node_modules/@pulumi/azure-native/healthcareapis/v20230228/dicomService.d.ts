import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * The description of Dicom Service
 */
export declare class DicomService extends pulumi.CustomResource {
    /**
     * Get an existing DicomService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DicomService;
    /**
     * Returns true if the given object is an instance of DicomService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DicomService;
    /**
     * Dicom Service authentication configuration.
     */
    readonly authenticationConfiguration: pulumi.Output<outputs.healthcareapis.v20230228.DicomServiceAuthenticationConfigurationResponse | undefined>;
    /**
     * Dicom Service Cors configuration.
     */
    readonly corsConfiguration: pulumi.Output<outputs.healthcareapis.v20230228.CorsConfigurationResponse | undefined>;
    /**
     * An etag associated with the resource, used for optimistic concurrency when editing it.
     */
    readonly etag: pulumi.Output<string | undefined>;
    /**
     * DICOM Service event support status.
     */
    readonly eventState: pulumi.Output<string>;
    /**
     * Setting indicating whether the service has a managed identity associated with it.
     */
    readonly identity: pulumi.Output<outputs.healthcareapis.v20230228.ServiceManagedIdentityResponseIdentity | undefined>;
    /**
     * The resource location.
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The resource name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The list of private endpoint connections that are set up for this resource.
     */
    readonly privateEndpointConnections: pulumi.Output<outputs.healthcareapis.v20230228.PrivateEndpointConnectionResponse[]>;
    /**
     * The provisioning state.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     */
    readonly publicNetworkAccess: pulumi.Output<string>;
    /**
     * The url of the Dicom Services.
     */
    readonly serviceUrl: pulumi.Output<string>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.healthcareapis.v20230228.SystemDataResponse>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The resource type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a DicomService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DicomServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DicomService resource.
 */
export interface DicomServiceArgs {
    /**
     * Dicom Service Cors configuration.
     */
    corsConfiguration?: pulumi.Input<inputs.healthcareapis.v20230228.CorsConfigurationArgs>;
    /**
     * The name of DICOM Service resource.
     */
    dicomServiceName?: pulumi.Input<string>;
    /**
     * Setting indicating whether the service has a managed identity associated with it.
     */
    identity?: pulumi.Input<inputs.healthcareapis.v20230228.ServiceManagedIdentityIdentityArgs>;
    /**
     * The resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group that contains the service instance.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of workspace resource.
     */
    workspaceName: pulumi.Input<string>;
}
