import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
/**
 * Class representing a database script.
 */
export declare class Script extends pulumi.CustomResource {
    /**
     * Get an existing Script resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Script;
    /**
     * Returns true if the given object is an instance of Script.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Script;
    /**
     * Flag that indicates whether to continue if one of the command fails.
     */
    readonly continueOnErrors: pulumi.Output<boolean | undefined>;
    /**
     * A unique string. If changed the script will be applied again.
     */
    readonly forceUpdateTag: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * The provisioned state of the resource.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * The url to the KQL script blob file. Must not be used together with scriptContent property
     */
    readonly scriptUrl: pulumi.Output<string | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.kusto.v20230502.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Script resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScriptArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Script resource.
 */
export interface ScriptArgs {
    /**
     * The name of the Kusto cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Flag that indicates whether to continue if one of the command fails.
     */
    continueOnErrors?: pulumi.Input<boolean>;
    /**
     * The name of the database in the Kusto cluster.
     */
    databaseName: pulumi.Input<string>;
    /**
     * A unique string. If changed the script will be applied again.
     */
    forceUpdateTag?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The script content. This property should be used when the script is provide inline and not through file in a SA. Must not be used together with scriptUrl and scriptUrlSasToken properties.
     */
    scriptContent?: pulumi.Input<string>;
    /**
     * The name of the Kusto database script.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * The url to the KQL script blob file. Must not be used together with scriptContent property
     */
    scriptUrl?: pulumi.Input<string>;
    /**
     * The SaS token that provide read access to the file which contain the script. Must be provided when using scriptUrl property.
     */
    scriptUrlSasToken?: pulumi.Input<string>;
}
