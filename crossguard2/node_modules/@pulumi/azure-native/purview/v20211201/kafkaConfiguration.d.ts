import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * The configuration of the event streaming service resource attached to the Purview account for kafka notifications.
 */
export declare class KafkaConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing KafkaConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KafkaConfiguration;
    /**
     * Returns true if the given object is an instance of KafkaConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is KafkaConfiguration;
    /**
     * Consumer group for hook event hub.
     */
    readonly consumerGroup: pulumi.Output<string | undefined>;
    /**
     * Credentials to access event hub.
     */
    readonly credentials: pulumi.Output<outputs.purview.v20211201.CredentialsResponse | undefined>;
    /**
     * Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
     */
    readonly eventHubPartitionId: pulumi.Output<string | undefined>;
    readonly eventHubResourceId: pulumi.Output<string | undefined>;
    /**
     * The event hub type.
     */
    readonly eventHubType: pulumi.Output<string | undefined>;
    /**
     * The state of the event streaming service
     */
    readonly eventStreamingState: pulumi.Output<string | undefined>;
    /**
     * The event streaming service type
     */
    readonly eventStreamingType: pulumi.Output<string | undefined>;
    /**
     * Gets or sets the name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: pulumi.Output<outputs.purview.v20211201.ProxyResourceResponseSystemData>;
    /**
     * Gets or sets the type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a KafkaConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a KafkaConfiguration resource.
 */
export interface KafkaConfigurationArgs {
    /**
     * The name of the account.
     */
    accountName: pulumi.Input<string>;
    /**
     * Consumer group for hook event hub.
     */
    consumerGroup?: pulumi.Input<string>;
    /**
     * Credentials to access event hub.
     */
    credentials?: pulumi.Input<inputs.purview.v20211201.CredentialsArgs>;
    /**
     * Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
     */
    eventHubPartitionId?: pulumi.Input<string>;
    eventHubResourceId?: pulumi.Input<string>;
    /**
     * The event hub type.
     */
    eventHubType?: pulumi.Input<string | enums.purview.v20211201.EventHubType>;
    /**
     * The state of the event streaming service
     */
    eventStreamingState?: pulumi.Input<string | enums.purview.v20211201.EventStreamingState>;
    /**
     * The event streaming service type
     */
    eventStreamingType?: pulumi.Input<string | enums.purview.v20211201.EventStreamingType>;
    /**
     * The kafka configuration name.
     */
    kafkaConfigurationName?: pulumi.Input<string>;
    /**
     * The resource group name.
     */
    resourceGroupName: pulumi.Input<string>;
}
