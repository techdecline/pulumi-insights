import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
/**
 * Single item in List or Get Schema Group operation
 */
export declare class SchemaRegistry extends pulumi.CustomResource {
    /**
     * Get an existing SchemaRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SchemaRegistry;
    /**
     * Returns true if the given object is an instance of SchemaRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SchemaRegistry;
    /**
     * Exact time the Schema Group was created.
     */
    readonly createdAtUtc: pulumi.Output<string>;
    /**
     * The ETag value.
     */
    readonly eTag: pulumi.Output<string>;
    /**
     * dictionary object for SchemaGroup group properties
     */
    readonly groupProperties: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    readonly schemaCompatibility: pulumi.Output<string | undefined>;
    readonly schemaType: pulumi.Output<string | undefined>;
    /**
     * The system meta data relating to this resource.
     */
    readonly systemData: pulumi.Output<outputs.eventhub.v20240101.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Exact time the Schema Group was updated
     */
    readonly updatedAtUtc: pulumi.Output<string>;
    /**
     * Create a SchemaRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaRegistryArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a SchemaRegistry resource.
 */
export interface SchemaRegistryArgs {
    /**
     * dictionary object for SchemaGroup group properties
     */
    groupProperties?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The Namespace name
     */
    namespaceName: pulumi.Input<string>;
    /**
     * Name of the resource group within the azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    schemaCompatibility?: pulumi.Input<string | enums.eventhub.v20240101.SchemaCompatibility>;
    /**
     * The Schema Group name
     */
    schemaGroupName?: pulumi.Input<string>;
    schemaType?: pulumi.Input<string | enums.eventhub.v20240101.SchemaType>;
}
