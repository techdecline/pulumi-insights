"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Script = exports.IotHubDataConnection = exports.getDatabaseOutput = exports.getDatabase = exports.getClusterOutput = exports.getCluster = exports.EventhubDataConnection = exports.EventGridDataConnection = exports.DatabasePrincipalAssignment = exports.Database = exports.CosmosdbDataConnection = exports.ClusterPrincipalAssignment = exports.ClusterManagedPrivateEndpoint = exports.ClusterCustomerManagedKey = exports.Cluster = exports.AttachedDatabaseConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AttachedDatabaseConfiguration = null;
utilities.lazyLoad(exports, ["AttachedDatabaseConfiguration"], () => require("./attachedDatabaseConfiguration"));
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.ClusterCustomerManagedKey = null;
utilities.lazyLoad(exports, ["ClusterCustomerManagedKey"], () => require("./clusterCustomerManagedKey"));
exports.ClusterManagedPrivateEndpoint = null;
utilities.lazyLoad(exports, ["ClusterManagedPrivateEndpoint"], () => require("./clusterManagedPrivateEndpoint"));
exports.ClusterPrincipalAssignment = null;
utilities.lazyLoad(exports, ["ClusterPrincipalAssignment"], () => require("./clusterPrincipalAssignment"));
exports.CosmosdbDataConnection = null;
utilities.lazyLoad(exports, ["CosmosdbDataConnection"], () => require("./cosmosdbDataConnection"));
exports.Database = null;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
exports.DatabasePrincipalAssignment = null;
utilities.lazyLoad(exports, ["DatabasePrincipalAssignment"], () => require("./databasePrincipalAssignment"));
exports.EventGridDataConnection = null;
utilities.lazyLoad(exports, ["EventGridDataConnection"], () => require("./eventGridDataConnection"));
exports.EventhubDataConnection = null;
utilities.lazyLoad(exports, ["EventhubDataConnection"], () => require("./eventhubDataConnection"));
exports.getCluster = null;
exports.getClusterOutput = null;
utilities.lazyLoad(exports, ["getCluster", "getClusterOutput"], () => require("./getCluster"));
exports.getDatabase = null;
exports.getDatabaseOutput = null;
utilities.lazyLoad(exports, ["getDatabase", "getDatabaseOutput"], () => require("./getDatabase"));
exports.IotHubDataConnection = null;
utilities.lazyLoad(exports, ["IotHubDataConnection"], () => require("./iotHubDataConnection"));
exports.Script = null;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:kusto/attachedDatabaseConfiguration:AttachedDatabaseConfiguration":
                return new exports.AttachedDatabaseConfiguration(name, undefined, { urn });
            case "azure:kusto/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey":
                return new exports.ClusterCustomerManagedKey(name, undefined, { urn });
            case "azure:kusto/clusterManagedPrivateEndpoint:ClusterManagedPrivateEndpoint":
                return new exports.ClusterManagedPrivateEndpoint(name, undefined, { urn });
            case "azure:kusto/clusterPrincipalAssignment:ClusterPrincipalAssignment":
                return new exports.ClusterPrincipalAssignment(name, undefined, { urn });
            case "azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection":
                return new exports.CosmosdbDataConnection(name, undefined, { urn });
            case "azure:kusto/database:Database":
                return new exports.Database(name, undefined, { urn });
            case "azure:kusto/databasePrincipalAssignment:DatabasePrincipalAssignment":
                return new exports.DatabasePrincipalAssignment(name, undefined, { urn });
            case "azure:kusto/eventGridDataConnection:EventGridDataConnection":
                return new exports.EventGridDataConnection(name, undefined, { urn });
            case "azure:kusto/eventhubDataConnection:EventhubDataConnection":
                return new exports.EventhubDataConnection(name, undefined, { urn });
            case "azure:kusto/iotHubDataConnection:IotHubDataConnection":
                return new exports.IotHubDataConnection(name, undefined, { urn });
            case "azure:kusto/script:Script":
                return new exports.Script(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "kusto/attachedDatabaseConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/cluster", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/clusterCustomerManagedKey", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/clusterManagedPrivateEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/clusterPrincipalAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/cosmosdbDataConnection", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/database", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/databasePrincipalAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/eventGridDataConnection", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/eventhubDataConnection", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/iotHubDataConnection", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/script", _module);
//# sourceMappingURL=index.js.map