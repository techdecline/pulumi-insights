"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventGridDataConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Kusto (also known as Azure Data Explorer) Event Grid Data Connection
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleCluster = new azure.kusto.Cluster("example", {
 *     name: "examplekustocluster",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: {
 *         name: "Standard_D13_v2",
 *         capacity: 2,
 *     },
 * });
 * const exampleDatabase = new azure.kusto.Database("example", {
 *     name: "example-kusto-database",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     clusterName: exampleCluster.name,
 *     hotCachePeriod: "P7D",
 *     softDeletePeriod: "P31D",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "storageaccountname",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
 *     name: "eventhubnamespace-example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 * });
 * const exampleEventHub = new azure.eventhub.EventHub("example", {
 *     name: "eventhub-example",
 *     namespaceName: exampleEventHubNamespace.name,
 *     resourceGroupName: example.name,
 *     partitionCount: 1,
 *     messageRetention: 1,
 * });
 * const exampleConsumerGroup = new azure.eventhub.ConsumerGroup("example", {
 *     name: "consumergroup-example",
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: example.name,
 * });
 * const exampleEventSubscription = new azure.eventgrid.EventSubscription("example", {
 *     name: "eventgrid-example",
 *     scope: exampleAccount.id,
 *     eventhubEndpointId: exampleEventHub.id,
 *     eventDeliverySchema: "EventGridSchema",
 *     includedEventTypes: [
 *         "Microsoft.Storage.BlobCreated",
 *         "Microsoft.Storage.BlobRenamed",
 *     ],
 *     retryPolicy: {
 *         eventTimeToLive: 144,
 *         maxDeliveryAttempts: 10,
 *     },
 * });
 * const exampleEventGridDataConnection = new azure.kusto.EventGridDataConnection("example", {
 *     name: "my-kusto-eventgrid-data-connection",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     clusterName: exampleCluster.name,
 *     databaseName: exampleDatabase.name,
 *     storageAccountId: exampleAccount.id,
 *     eventhubId: exampleEventHub.id,
 *     eventhubConsumerGroupName: exampleConsumerGroup.name,
 *     tableName: "my-table",
 *     mappingRuleName: "my-table-mapping",
 *     dataFormat: "JSON",
 * }, {
 *     dependsOn: [exampleEventSubscription],
 * });
 * ```
 *
 * ## Import
 *
 * Kusto Event Grid Data Connections can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:kusto/eventGridDataConnection:EventGridDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/dataConnection1
 * ```
 */
class EventGridDataConnection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["blobStorageEventType"] = state ? state.blobStorageEventType : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["dataFormat"] = state ? state.dataFormat : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseRoutingType"] = state ? state.databaseRoutingType : undefined;
            resourceInputs["eventgridResourceId"] = state ? state.eventgridResourceId : undefined;
            resourceInputs["eventhubConsumerGroupName"] = state ? state.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubId"] = state ? state.eventhubId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedIdentityResourceId"] = state ? state.managedIdentityResourceId : undefined;
            resourceInputs["mappingRuleName"] = state ? state.mappingRuleName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skipFirstRecord"] = state ? state.skipFirstRecord : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.eventhubConsumerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubConsumerGroupName'");
            }
            if ((!args || args.eventhubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["blobStorageEventType"] = args ? args.blobStorageEventType : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["dataFormat"] = args ? args.dataFormat : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["databaseRoutingType"] = args ? args.databaseRoutingType : undefined;
            resourceInputs["eventgridResourceId"] = args ? args.eventgridResourceId : undefined;
            resourceInputs["eventhubConsumerGroupName"] = args ? args.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubId"] = args ? args.eventhubId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedIdentityResourceId"] = args ? args.managedIdentityResourceId : undefined;
            resourceInputs["mappingRuleName"] = args ? args.mappingRuleName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skipFirstRecord"] = args ? args.skipFirstRecord : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventGridDataConnection.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EventGridDataConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventGridDataConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventGridDataConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventGridDataConnection.__pulumiType;
    }
}
exports.EventGridDataConnection = EventGridDataConnection;
/** @internal */
EventGridDataConnection.__pulumiType = 'azure:kusto/eventGridDataConnection:EventGridDataConnection';
//# sourceMappingURL=eventGridDataConnection.js.map