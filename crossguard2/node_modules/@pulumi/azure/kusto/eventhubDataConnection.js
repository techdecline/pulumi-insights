"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventhubDataConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Kusto (also known as Azure Data Explorer) EventHub Data Connection
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "my-kusto-rg",
 *     location: "West Europe",
 * });
 * const cluster = new azure.kusto.Cluster("cluster", {
 *     name: "kustocluster",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: {
 *         name: "Standard_D13_v2",
 *         capacity: 2,
 *     },
 * });
 * const database = new azure.kusto.Database("database", {
 *     name: "my-kusto-database",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     clusterName: cluster.name,
 *     hotCachePeriod: "P7D",
 *     softDeletePeriod: "P31D",
 * });
 * const eventhubNs = new azure.eventhub.EventHubNamespace("eventhub_ns", {
 *     name: "my-eventhub-ns",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 * });
 * const eventhub = new azure.eventhub.EventHub("eventhub", {
 *     name: "my-eventhub",
 *     namespaceName: eventhubNs.name,
 *     resourceGroupName: example.name,
 *     partitionCount: 1,
 *     messageRetention: 1,
 * });
 * const consumerGroup = new azure.eventhub.ConsumerGroup("consumer_group", {
 *     name: "my-eventhub-consumergroup",
 *     namespaceName: eventhubNs.name,
 *     eventhubName: eventhub.name,
 *     resourceGroupName: example.name,
 * });
 * const eventhubConnection = new azure.kusto.EventhubDataConnection("eventhub_connection", {
 *     name: "my-kusto-eventhub-data-connection",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     clusterName: cluster.name,
 *     databaseName: database.name,
 *     eventhubId: eventhub.id,
 *     consumerGroup: consumerGroup.name,
 *     tableName: "my-table",
 *     mappingRuleName: "my-table-mapping",
 *     dataFormat: "JSON",
 * });
 * ```
 *
 * ## Import
 *
 * Kusto EventHub Data Connections can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:kusto/eventhubDataConnection:EventhubDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/eventHubConnection1
 * ```
 */
class EventhubDataConnection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["compression"] = state ? state.compression : undefined;
            resourceInputs["consumerGroup"] = state ? state.consumerGroup : undefined;
            resourceInputs["dataFormat"] = state ? state.dataFormat : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseRoutingType"] = state ? state.databaseRoutingType : undefined;
            resourceInputs["eventSystemProperties"] = state ? state.eventSystemProperties : undefined;
            resourceInputs["eventhubId"] = state ? state.eventhubId : undefined;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mappingRuleName"] = state ? state.mappingRuleName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.consumerGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroup'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.eventhubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["compression"] = args ? args.compression : undefined;
            resourceInputs["consumerGroup"] = args ? args.consumerGroup : undefined;
            resourceInputs["dataFormat"] = args ? args.dataFormat : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["databaseRoutingType"] = args ? args.databaseRoutingType : undefined;
            resourceInputs["eventSystemProperties"] = args ? args.eventSystemProperties : undefined;
            resourceInputs["eventhubId"] = args ? args.eventhubId : undefined;
            resourceInputs["identityId"] = args ? args.identityId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mappingRuleName"] = args ? args.mappingRuleName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventhubDataConnection.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EventhubDataConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventhubDataConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventhubDataConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventhubDataConnection.__pulumiType;
    }
}
exports.EventhubDataConnection = EventhubDataConnection;
/** @internal */
EventhubDataConnection.__pulumiType = 'azure:kusto/eventhubDataConnection:EventhubDataConnection';
//# sourceMappingURL=eventhubDataConnection.js.map