export { AttachedDatabaseConfigurationArgs, AttachedDatabaseConfigurationState } from "./attachedDatabaseConfiguration";
export declare type AttachedDatabaseConfiguration = import("./attachedDatabaseConfiguration").AttachedDatabaseConfiguration;
export declare const AttachedDatabaseConfiguration: typeof import("./attachedDatabaseConfiguration").AttachedDatabaseConfiguration;
export { ClusterArgs, ClusterState } from "./cluster";
export declare type Cluster = import("./cluster").Cluster;
export declare const Cluster: typeof import("./cluster").Cluster;
export { ClusterCustomerManagedKeyArgs, ClusterCustomerManagedKeyState } from "./clusterCustomerManagedKey";
export declare type ClusterCustomerManagedKey = import("./clusterCustomerManagedKey").ClusterCustomerManagedKey;
export declare const ClusterCustomerManagedKey: typeof import("./clusterCustomerManagedKey").ClusterCustomerManagedKey;
export { ClusterManagedPrivateEndpointArgs, ClusterManagedPrivateEndpointState } from "./clusterManagedPrivateEndpoint";
export declare type ClusterManagedPrivateEndpoint = import("./clusterManagedPrivateEndpoint").ClusterManagedPrivateEndpoint;
export declare const ClusterManagedPrivateEndpoint: typeof import("./clusterManagedPrivateEndpoint").ClusterManagedPrivateEndpoint;
export { ClusterPrincipalAssignmentArgs, ClusterPrincipalAssignmentState } from "./clusterPrincipalAssignment";
export declare type ClusterPrincipalAssignment = import("./clusterPrincipalAssignment").ClusterPrincipalAssignment;
export declare const ClusterPrincipalAssignment: typeof import("./clusterPrincipalAssignment").ClusterPrincipalAssignment;
export { CosmosdbDataConnectionArgs, CosmosdbDataConnectionState } from "./cosmosdbDataConnection";
export declare type CosmosdbDataConnection = import("./cosmosdbDataConnection").CosmosdbDataConnection;
export declare const CosmosdbDataConnection: typeof import("./cosmosdbDataConnection").CosmosdbDataConnection;
export { DatabaseArgs, DatabaseState } from "./database";
export declare type Database = import("./database").Database;
export declare const Database: typeof import("./database").Database;
export { DatabasePrincipalAssignmentArgs, DatabasePrincipalAssignmentState } from "./databasePrincipalAssignment";
export declare type DatabasePrincipalAssignment = import("./databasePrincipalAssignment").DatabasePrincipalAssignment;
export declare const DatabasePrincipalAssignment: typeof import("./databasePrincipalAssignment").DatabasePrincipalAssignment;
export { EventGridDataConnectionArgs, EventGridDataConnectionState } from "./eventGridDataConnection";
export declare type EventGridDataConnection = import("./eventGridDataConnection").EventGridDataConnection;
export declare const EventGridDataConnection: typeof import("./eventGridDataConnection").EventGridDataConnection;
export { EventhubDataConnectionArgs, EventhubDataConnectionState } from "./eventhubDataConnection";
export declare type EventhubDataConnection = import("./eventhubDataConnection").EventhubDataConnection;
export declare const EventhubDataConnection: typeof import("./eventhubDataConnection").EventhubDataConnection;
export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export declare const getCluster: typeof import("./getCluster").getCluster;
export declare const getClusterOutput: typeof import("./getCluster").getClusterOutput;
export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export declare const getDatabase: typeof import("./getDatabase").getDatabase;
export declare const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput;
export { IotHubDataConnectionArgs, IotHubDataConnectionState } from "./iotHubDataConnection";
export declare type IotHubDataConnection = import("./iotHubDataConnection").IotHubDataConnection;
export declare const IotHubDataConnection: typeof import("./iotHubDataConnection").IotHubDataConnection;
export { ScriptArgs, ScriptState } from "./script";
export declare type Script = import("./script").Script;
export declare const Script: typeof import("./script").Script;
