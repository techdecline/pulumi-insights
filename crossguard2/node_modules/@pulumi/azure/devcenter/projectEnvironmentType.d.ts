import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a Dev Center Project Environment Type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDevCenter = new azure.devcenter.DevCenter("example", {
 *     name: "example-dc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleEnvironmentType = new azure.devcenter.EnvironmentType("example", {
 *     name: "example-et",
 *     devCenterId: exampleDevCenter.id,
 * });
 * const exampleProject = new azure.devcenter.Project("example", {
 *     name: "example-dcp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     devCenterId: exampleDevCenter.id,
 * }, {
 *     dependsOn: [exampleEnvironmentType],
 * });
 * const exampleProjectEnvironmentType = new azure.devcenter.ProjectEnvironmentType("example", {
 *     name: "example-et",
 *     location: example.location,
 *     devCenterProjectId: exampleProject.id,
 *     deploymentTargetId: current.then(current => `/subscriptions/${current.subscriptionId}`),
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * An existing Dev Center Project Environment Type can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:devcenter/projectEnvironmentType:ProjectEnvironmentType example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/environmentTypes/et1
 * ```
 */
export declare class ProjectEnvironmentType extends pulumi.CustomResource {
    /**
     * Get an existing ProjectEnvironmentType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectEnvironmentTypeState, opts?: pulumi.CustomResourceOptions): ProjectEnvironmentType;
    /**
     * Returns true if the given object is an instance of ProjectEnvironmentType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ProjectEnvironmentType;
    /**
     * A list of roles to assign to the environment creator.
     */
    readonly creatorRoleAssignmentRoles: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
     */
    readonly deploymentTargetId: pulumi.Output<string>;
    /**
     * The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
     */
    readonly devCenterProjectId: pulumi.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    readonly identity: pulumi.Output<outputs.devcenter.ProjectEnvironmentTypeIdentity>;
    /**
     * The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project Environment Type.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A `userRoleAssignment` block as defined below.
     */
    readonly userRoleAssignments: pulumi.Output<outputs.devcenter.ProjectEnvironmentTypeUserRoleAssignment[] | undefined>;
    /**
     * Create a ProjectEnvironmentType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectEnvironmentTypeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ProjectEnvironmentType resources.
 */
export interface ProjectEnvironmentTypeState {
    /**
     * A list of roles to assign to the environment creator.
     */
    creatorRoleAssignmentRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
     */
    deploymentTargetId?: pulumi.Input<string>;
    /**
     * The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
     */
    devCenterProjectId?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.devcenter.ProjectEnvironmentTypeIdentity>;
    /**
     * The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project Environment Type.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `userRoleAssignment` block as defined below.
     */
    userRoleAssignments?: pulumi.Input<pulumi.Input<inputs.devcenter.ProjectEnvironmentTypeUserRoleAssignment>[]>;
}
/**
 * The set of arguments for constructing a ProjectEnvironmentType resource.
 */
export interface ProjectEnvironmentTypeArgs {
    /**
     * A list of roles to assign to the environment creator.
     */
    creatorRoleAssignmentRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
     */
    deploymentTargetId: pulumi.Input<string>;
    /**
     * The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
     */
    devCenterProjectId: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity: pulumi.Input<inputs.devcenter.ProjectEnvironmentTypeIdentity>;
    /**
     * The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the Dev Center Project Environment Type.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `userRoleAssignment` block as defined below.
     */
    userRoleAssignments?: pulumi.Input<pulumi.Input<inputs.devcenter.ProjectEnvironmentTypeUserRoleAssignment>[]>;
}
