"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectEnvironmentType = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Dev Center Project Environment Type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDevCenter = new azure.devcenter.DevCenter("example", {
 *     name: "example-dc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleEnvironmentType = new azure.devcenter.EnvironmentType("example", {
 *     name: "example-et",
 *     devCenterId: exampleDevCenter.id,
 * });
 * const exampleProject = new azure.devcenter.Project("example", {
 *     name: "example-dcp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     devCenterId: exampleDevCenter.id,
 * }, {
 *     dependsOn: [exampleEnvironmentType],
 * });
 * const exampleProjectEnvironmentType = new azure.devcenter.ProjectEnvironmentType("example", {
 *     name: "example-et",
 *     location: example.location,
 *     devCenterProjectId: exampleProject.id,
 *     deploymentTargetId: current.then(current => `/subscriptions/${current.subscriptionId}`),
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * An existing Dev Center Project Environment Type can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:devcenter/projectEnvironmentType:ProjectEnvironmentType example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/environmentTypes/et1
 * ```
 */
class ProjectEnvironmentType extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["creatorRoleAssignmentRoles"] = state ? state.creatorRoleAssignmentRoles : undefined;
            resourceInputs["deploymentTargetId"] = state ? state.deploymentTargetId : undefined;
            resourceInputs["devCenterProjectId"] = state ? state.devCenterProjectId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userRoleAssignments"] = state ? state.userRoleAssignments : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.deploymentTargetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentTargetId'");
            }
            if ((!args || args.devCenterProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devCenterProjectId'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            resourceInputs["creatorRoleAssignmentRoles"] = args ? args.creatorRoleAssignmentRoles : undefined;
            resourceInputs["deploymentTargetId"] = args ? args.deploymentTargetId : undefined;
            resourceInputs["devCenterProjectId"] = args ? args.devCenterProjectId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userRoleAssignments"] = args ? args.userRoleAssignments : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectEnvironmentType.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ProjectEnvironmentType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectEnvironmentType(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectEnvironmentType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectEnvironmentType.__pulumiType;
    }
}
exports.ProjectEnvironmentType = ProjectEnvironmentType;
/** @internal */
ProjectEnvironmentType.__pulumiType = 'azure:devcenter/projectEnvironmentType:ProjectEnvironmentType';
//# sourceMappingURL=projectEnvironmentType.js.map