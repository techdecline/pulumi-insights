"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectPool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Dev Center Project Pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDevCenter = new azure.devcenter.DevCenter("example", {
 *     name: "example-dc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkConnection = new azure.devcenter.NetworkConnection("example", {
 *     name: "example-dcnc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     subnetId: exampleSubnet.id,
 *     domainJoinType: "AzureADJoin",
 * });
 * const exampleAttachedNetwork = new azure.devcenter.AttachedNetwork("example", {
 *     name: "example-dcet",
 *     devCenterId: exampleDevCenter.id,
 *     networkConnectionId: exampleNetworkConnection.id,
 * });
 * const exampleProject = new azure.devcenter.Project("example", {
 *     name: "example-dcp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     devCenterId: exampleDevCenter.id,
 * });
 * const exampleDevBoxDefinition = new azure.devcenter.DevBoxDefinition("example", {
 *     name: "example-dcet",
 *     location: example.location,
 *     devCenterId: exampleDevCenter.id,
 *     imageReferenceId: pulumi.interpolate`${exampleDevCenter.id}/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win10-m365-gen2`,
 *     skuName: "general_i_8c32gb256ssd_v2",
 * });
 * const exampleProjectPool = new azure.devcenter.ProjectPool("example", {
 *     name: "example-dcpl",
 *     location: example.location,
 *     devCenterProjectId: exampleProject.id,
 *     devBoxDefinitionName: exampleDevBoxDefinition.name,
 *     localAdministratorEnabled: true,
 *     devCenterAttachedNetworkName: exampleAttachedNetwork.name,
 *     stopOnDisconnectGracePeriodMinutes: 60,
 * });
 * ```
 *
 * ## Import
 *
 * An existing Dev Center Project Pool can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:devcenter/projectPool:ProjectPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/pools/pool1
 * ```
 */
class ProjectPool extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["devBoxDefinitionName"] = state ? state.devBoxDefinitionName : undefined;
            resourceInputs["devCenterAttachedNetworkName"] = state ? state.devCenterAttachedNetworkName : undefined;
            resourceInputs["devCenterProjectId"] = state ? state.devCenterProjectId : undefined;
            resourceInputs["localAdministratorEnabled"] = state ? state.localAdministratorEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["stopOnDisconnectGracePeriodMinutes"] = state ? state.stopOnDisconnectGracePeriodMinutes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.devBoxDefinitionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devBoxDefinitionName'");
            }
            if ((!args || args.devCenterAttachedNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devCenterAttachedNetworkName'");
            }
            if ((!args || args.devCenterProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devCenterProjectId'");
            }
            if ((!args || args.localAdministratorEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localAdministratorEnabled'");
            }
            resourceInputs["devBoxDefinitionName"] = args ? args.devBoxDefinitionName : undefined;
            resourceInputs["devCenterAttachedNetworkName"] = args ? args.devCenterAttachedNetworkName : undefined;
            resourceInputs["devCenterProjectId"] = args ? args.devCenterProjectId : undefined;
            resourceInputs["localAdministratorEnabled"] = args ? args.localAdministratorEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["stopOnDisconnectGracePeriodMinutes"] = args ? args.stopOnDisconnectGracePeriodMinutes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectPool.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ProjectPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectPool(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectPool.__pulumiType;
    }
}
exports.ProjectPool = ProjectPool;
/** @internal */
ProjectPool.__pulumiType = 'azure:devcenter/projectPool:ProjectPool';
//# sourceMappingURL=projectPool.js.map