"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnServerConfigurationPolicyGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a VPN Server Configuration Policy Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVpnServerConfiguration = new azure.network.VpnServerConfiguration("example", {
 *     name: "example-VPNSC",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     vpnAuthenticationTypes: ["Radius"],
 *     radius: {
 *         servers: [{
 *             address: "10.105.1.1",
 *             secret: "vindicators-the-return-of-worldender",
 *             score: 15,
 *         }],
 *     },
 * });
 * const exampleVpnServerConfigurationPolicyGroup = new azure.network.VpnServerConfigurationPolicyGroup("example", {
 *     name: "example-VPNSCPG",
 *     vpnServerConfigurationId: exampleVpnServerConfiguration.id,
 *     policies: [{
 *         name: "policy1",
 *         type: "RadiusAzureGroupId",
 *         value: "6ad1bd08",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * VPN Server Configuration Policy Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:network/vpnServerConfigurationPolicyGroup:VpnServerConfigurationPolicyGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Network/vpnServerConfigurations/serverConfiguration1/configurationPolicyGroups/configurationPolicyGroup1
 * ```
 */
class VpnServerConfigurationPolicyGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["vpnServerConfigurationId"] = state ? state.vpnServerConfigurationId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            if ((!args || args.vpnServerConfigurationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnServerConfigurationId'");
            }
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["vpnServerConfigurationId"] = args ? args.vpnServerConfigurationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnServerConfigurationPolicyGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VpnServerConfigurationPolicyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VpnServerConfigurationPolicyGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpnServerConfigurationPolicyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnServerConfigurationPolicyGroup.__pulumiType;
    }
}
exports.VpnServerConfigurationPolicyGroup = VpnServerConfigurationPolicyGroup;
/** @internal */
VpnServerConfigurationPolicyGroup.__pulumiType = 'azure:network/vpnServerConfigurationPolicyGroup:VpnServerConfigurationPolicyGroup';
//# sourceMappingURL=vpnServerConfigurationPolicyGroup.js.map