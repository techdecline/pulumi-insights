import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Uses this data source to access information about an existing Virtual Hub Connection.
 *
 * ## Virtual Hub Connection Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.network.getVirtualHubConnection({
 *     name: "example-connection",
 *     resourceGroupName: "example-resources",
 *     virtualHubName: "example-hub-name",
 * });
 * export const virtualHubConnectionId = example.then(example => example.id);
 * ```
 */
export declare function getVirtualHubConnection(args: GetVirtualHubConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualHubConnectionResult>;
/**
 * A collection of arguments for invoking getVirtualHubConnection.
 */
export interface GetVirtualHubConnectionArgs {
    /**
     * The name of the Connection which should be retrieved.
     */
    name: string;
    /**
     * The Name of the Resource Group where the Virtual Hub Connection exists.
     */
    resourceGroupName: string;
    /**
     * The name of the Virtual Hub where this Connection exists.
     */
    virtualHubName: string;
}
/**
 * A collection of values returned by getVirtualHubConnection.
 */
export interface GetVirtualHubConnectionResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Whether Internet Security is enabled to secure internet traffic on this connection
     */
    readonly internetSecurityEnabled: boolean;
    /**
     * The name which is used for this Static Route.
     */
    readonly name: string;
    /**
     * The ID of the Virtual Network which the Virtual Hub is connected
     */
    readonly remoteVirtualNetworkId: string;
    readonly resourceGroupName: string;
    /**
     * A `routing` block as defined below.
     */
    readonly routings: outputs.network.GetVirtualHubConnectionRouting[];
    /**
     * The ID of the Virtual Hub within which this connection is created
     */
    readonly virtualHubId: string;
    readonly virtualHubName: string;
}
/**
 * Uses this data source to access information about an existing Virtual Hub Connection.
 *
 * ## Virtual Hub Connection Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.network.getVirtualHubConnection({
 *     name: "example-connection",
 *     resourceGroupName: "example-resources",
 *     virtualHubName: "example-hub-name",
 * });
 * export const virtualHubConnectionId = example.then(example => example.id);
 * ```
 */
export declare function getVirtualHubConnectionOutput(args: GetVirtualHubConnectionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVirtualHubConnectionResult>;
/**
 * A collection of arguments for invoking getVirtualHubConnection.
 */
export interface GetVirtualHubConnectionOutputArgs {
    /**
     * The name of the Connection which should be retrieved.
     */
    name: pulumi.Input<string>;
    /**
     * The Name of the Resource Group where the Virtual Hub Connection exists.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the Virtual Hub where this Connection exists.
     */
    virtualHubName: pulumi.Input<string>;
}
