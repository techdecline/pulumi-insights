"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkSecurityGroupOutput = exports.getNetworkSecurityGroup = exports.getNetworkManagerNetworkGroupOutput = exports.getNetworkManagerNetworkGroup = exports.getNetworkManagerConnectivityConfigurationOutput = exports.getNetworkManagerConnectivityConfiguration = exports.getNetworkManagerOutput = exports.getNetworkManager = exports.getNetworkInterfaceOutput = exports.getNetworkInterface = exports.getNetworkDdosProtectionPlanOutput = exports.getNetworkDdosProtectionPlan = exports.getNatGatewayOutput = exports.getNatGateway = exports.getLocalNetworkGatewayOutput = exports.getLocalNetworkGateway = exports.getIpGroupsOutput = exports.getIpGroups = exports.getIpGroupOutput = exports.getIpGroup = exports.getGatewayConnectionOutput = exports.getGatewayConnection = exports.getFirewallPolicyOutput = exports.getFirewallPolicy = exports.getFirewallOutput = exports.getFirewall = exports.getExpressRouteCircuitOutput = exports.getExpressRouteCircuit = exports.getApplicationSecurityGroupOutput = exports.getApplicationSecurityGroup = exports.getApplicationGatewayOutput = exports.getApplicationGateway = exports.FirewallPolicyRuleCollectionGroup = exports.FirewallPolicy = exports.FirewallNetworkRuleCollection = exports.FirewallNatRuleCollection = exports.FirewallApplicationRuleCollection = exports.Firewall = exports.ExpressRoutePortAuthorization = exports.ExpressRoutePort = exports.ExpressRouteGateway = exports.ExpressRouteConnection = exports.ExpressRouteCircuitPeering = exports.ExpressRouteCircuitConnection = exports.ExpressRouteCircuitAuthorization = exports.ExpressRouteCircuit = exports.DdosProtectionPlan = exports.BgpConnection = exports.ApplicationSecurityGroup = exports.ApplicationGateway = void 0;
exports.NetworkInterfaceNatRuleAssociation = exports.NetworkInterfaceBackendAddressPoolAssociation = exports.NetworkInterfaceApplicationSecurityGroupAssociation = exports.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = exports.NetworkInterface = exports.NetworkConnectionMonitor = exports.NatGatewayPublicIpPrefixAssociation = exports.NatGatewayPublicIpAssociation = exports.NatGateway = exports.LocalNetworkGateway = exports.IPGroupCIDR = exports.IPGroup = exports.getVpnServerConfigurationOutput = exports.getVpnServerConfiguration = exports.getVpnGatewayOutput = exports.getVpnGateway = exports.getVirtualWanOutput = exports.getVirtualWan = exports.getVirtualNetworkPeeringOutput = exports.getVirtualNetworkPeering = exports.getVirtualNetworkGatewayOutput = exports.getVirtualNetworkGateway = exports.getVirtualNetworkOutput = exports.getVirtualNetwork = exports.getVirtualHubRouteTableOutput = exports.getVirtualHubRouteTable = exports.getVirtualHubConnectionOutput = exports.getVirtualHubConnection = exports.getVirtualHubOutput = exports.getVirtualHub = exports.getTrafficManagerProfileOutput = exports.getTrafficManagerProfile = exports.getTrafficManagerOutput = exports.getTrafficManager = exports.getSubnetOutput = exports.getSubnet = exports.getServiceTagsOutput = exports.getServiceTags = exports.getRouteTableOutput = exports.getRouteTable = exports.getRouteFilterOutput = exports.getRouteFilter = exports.getPublicIpPrefixOutput = exports.getPublicIpPrefix = exports.getPublicIPsOutput = exports.getPublicIPs = exports.getPublicIPOutput = exports.getPublicIP = exports.getNetworkWatcherOutput = exports.getNetworkWatcher = void 0;
exports.VnpGatewayNatRule = exports.VirtualWan = exports.VirtualNetworkPeering = exports.VirtualNetworkGatewayNatRule = exports.VirtualNetworkGatewayConnection = exports.VirtualNetworkGateway = exports.VirtualNetworkDnsServers = exports.VirtualNetwork = exports.VirtualHubRouteTableRoute = exports.VirtualHubRouteTable = exports.VirtualHubIp = exports.VirtualHubConnection = exports.VirtualHub = exports.TrafficManagerProfile = exports.TrafficManagerNestedEndpoint = exports.TrafficManagerExternalEndpoint = exports.TrafficManagerAzureEndpoint = exports.SubnetServiceEndpointStoragePolicy = exports.SubnetRouteTableAssociation = exports.SubnetNetworkSecurityGroupAssociation = exports.SubnetNatGatewayAssociation = exports.Subnet = exports.SecurityPartnerProvider = exports.RoutingIntent = exports.RouteTable = exports.RouteServerBgpConnection = exports.RouteServer = exports.RouteMap = exports.RouteFilter = exports.Route = exports.PublicIpPrefix = exports.PublicIp = exports.Profile = exports.PointToPointVpnGateway = exports.NetworkWatcherFlowLog = exports.NetworkWatcher = exports.NetworkSecurityRule = exports.NetworkSecurityGroup = exports.NetworkManagerSubscriptionConnection = exports.NetworkManagerStaticMember = exports.NetworkManagerSecurityAdminConfiguration = exports.NetworkManagerScopeConnection = exports.NetworkManagerNetworkGroup = exports.NetworkManagerManagementGroupConnection = exports.NetworkManagerDeployment = exports.NetworkManagerConnectivityConfiguration = exports.NetworkManagerAdminRuleCollection = exports.NetworkManagerAdminRule = exports.NetworkManager = exports.NetworkInterfaceSecurityGroupAssociation = void 0;
exports.VpnSite = exports.VpnServerConfigurationPolicyGroup = exports.VpnServerConfiguration = exports.VpnGatewayConnection = exports.VpnGateway = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.ApplicationGateway = null;
utilities.lazyLoad(exports, ["ApplicationGateway"], () => require("./applicationGateway"));
exports.ApplicationSecurityGroup = null;
utilities.lazyLoad(exports, ["ApplicationSecurityGroup"], () => require("./applicationSecurityGroup"));
exports.BgpConnection = null;
utilities.lazyLoad(exports, ["BgpConnection"], () => require("./bgpConnection"));
exports.DdosProtectionPlan = null;
utilities.lazyLoad(exports, ["DdosProtectionPlan"], () => require("./ddosProtectionPlan"));
exports.ExpressRouteCircuit = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuit"], () => require("./expressRouteCircuit"));
exports.ExpressRouteCircuitAuthorization = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuitAuthorization"], () => require("./expressRouteCircuitAuthorization"));
exports.ExpressRouteCircuitConnection = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuitConnection"], () => require("./expressRouteCircuitConnection"));
exports.ExpressRouteCircuitPeering = null;
utilities.lazyLoad(exports, ["ExpressRouteCircuitPeering"], () => require("./expressRouteCircuitPeering"));
exports.ExpressRouteConnection = null;
utilities.lazyLoad(exports, ["ExpressRouteConnection"], () => require("./expressRouteConnection"));
exports.ExpressRouteGateway = null;
utilities.lazyLoad(exports, ["ExpressRouteGateway"], () => require("./expressRouteGateway"));
exports.ExpressRoutePort = null;
utilities.lazyLoad(exports, ["ExpressRoutePort"], () => require("./expressRoutePort"));
exports.ExpressRoutePortAuthorization = null;
utilities.lazyLoad(exports, ["ExpressRoutePortAuthorization"], () => require("./expressRoutePortAuthorization"));
exports.Firewall = null;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));
exports.FirewallApplicationRuleCollection = null;
utilities.lazyLoad(exports, ["FirewallApplicationRuleCollection"], () => require("./firewallApplicationRuleCollection"));
exports.FirewallNatRuleCollection = null;
utilities.lazyLoad(exports, ["FirewallNatRuleCollection"], () => require("./firewallNatRuleCollection"));
exports.FirewallNetworkRuleCollection = null;
utilities.lazyLoad(exports, ["FirewallNetworkRuleCollection"], () => require("./firewallNetworkRuleCollection"));
exports.FirewallPolicy = null;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));
exports.FirewallPolicyRuleCollectionGroup = null;
utilities.lazyLoad(exports, ["FirewallPolicyRuleCollectionGroup"], () => require("./firewallPolicyRuleCollectionGroup"));
exports.getApplicationGateway = null;
exports.getApplicationGatewayOutput = null;
utilities.lazyLoad(exports, ["getApplicationGateway", "getApplicationGatewayOutput"], () => require("./getApplicationGateway"));
exports.getApplicationSecurityGroup = null;
exports.getApplicationSecurityGroupOutput = null;
utilities.lazyLoad(exports, ["getApplicationSecurityGroup", "getApplicationSecurityGroupOutput"], () => require("./getApplicationSecurityGroup"));
exports.getExpressRouteCircuit = null;
exports.getExpressRouteCircuitOutput = null;
utilities.lazyLoad(exports, ["getExpressRouteCircuit", "getExpressRouteCircuitOutput"], () => require("./getExpressRouteCircuit"));
exports.getFirewall = null;
exports.getFirewallOutput = null;
utilities.lazyLoad(exports, ["getFirewall", "getFirewallOutput"], () => require("./getFirewall"));
exports.getFirewallPolicy = null;
exports.getFirewallPolicyOutput = null;
utilities.lazyLoad(exports, ["getFirewallPolicy", "getFirewallPolicyOutput"], () => require("./getFirewallPolicy"));
exports.getGatewayConnection = null;
exports.getGatewayConnectionOutput = null;
utilities.lazyLoad(exports, ["getGatewayConnection", "getGatewayConnectionOutput"], () => require("./getGatewayConnection"));
exports.getIpGroup = null;
exports.getIpGroupOutput = null;
utilities.lazyLoad(exports, ["getIpGroup", "getIpGroupOutput"], () => require("./getIpGroup"));
exports.getIpGroups = null;
exports.getIpGroupsOutput = null;
utilities.lazyLoad(exports, ["getIpGroups", "getIpGroupsOutput"], () => require("./getIpGroups"));
exports.getLocalNetworkGateway = null;
exports.getLocalNetworkGatewayOutput = null;
utilities.lazyLoad(exports, ["getLocalNetworkGateway", "getLocalNetworkGatewayOutput"], () => require("./getLocalNetworkGateway"));
exports.getNatGateway = null;
exports.getNatGatewayOutput = null;
utilities.lazyLoad(exports, ["getNatGateway", "getNatGatewayOutput"], () => require("./getNatGateway"));
exports.getNetworkDdosProtectionPlan = null;
exports.getNetworkDdosProtectionPlanOutput = null;
utilities.lazyLoad(exports, ["getNetworkDdosProtectionPlan", "getNetworkDdosProtectionPlanOutput"], () => require("./getNetworkDdosProtectionPlan"));
exports.getNetworkInterface = null;
exports.getNetworkInterfaceOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterface", "getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));
exports.getNetworkManager = null;
exports.getNetworkManagerOutput = null;
utilities.lazyLoad(exports, ["getNetworkManager", "getNetworkManagerOutput"], () => require("./getNetworkManager"));
exports.getNetworkManagerConnectivityConfiguration = null;
exports.getNetworkManagerConnectivityConfigurationOutput = null;
utilities.lazyLoad(exports, ["getNetworkManagerConnectivityConfiguration", "getNetworkManagerConnectivityConfigurationOutput"], () => require("./getNetworkManagerConnectivityConfiguration"));
exports.getNetworkManagerNetworkGroup = null;
exports.getNetworkManagerNetworkGroupOutput = null;
utilities.lazyLoad(exports, ["getNetworkManagerNetworkGroup", "getNetworkManagerNetworkGroupOutput"], () => require("./getNetworkManagerNetworkGroup"));
exports.getNetworkSecurityGroup = null;
exports.getNetworkSecurityGroupOutput = null;
utilities.lazyLoad(exports, ["getNetworkSecurityGroup", "getNetworkSecurityGroupOutput"], () => require("./getNetworkSecurityGroup"));
exports.getNetworkWatcher = null;
exports.getNetworkWatcherOutput = null;
utilities.lazyLoad(exports, ["getNetworkWatcher", "getNetworkWatcherOutput"], () => require("./getNetworkWatcher"));
exports.getPublicIP = null;
exports.getPublicIPOutput = null;
utilities.lazyLoad(exports, ["getPublicIP", "getPublicIPOutput"], () => require("./getPublicIP"));
exports.getPublicIPs = null;
exports.getPublicIPsOutput = null;
utilities.lazyLoad(exports, ["getPublicIPs", "getPublicIPsOutput"], () => require("./getPublicIPs"));
exports.getPublicIpPrefix = null;
exports.getPublicIpPrefixOutput = null;
utilities.lazyLoad(exports, ["getPublicIpPrefix", "getPublicIpPrefixOutput"], () => require("./getPublicIpPrefix"));
exports.getRouteFilter = null;
exports.getRouteFilterOutput = null;
utilities.lazyLoad(exports, ["getRouteFilter", "getRouteFilterOutput"], () => require("./getRouteFilter"));
exports.getRouteTable = null;
exports.getRouteTableOutput = null;
utilities.lazyLoad(exports, ["getRouteTable", "getRouteTableOutput"], () => require("./getRouteTable"));
exports.getServiceTags = null;
exports.getServiceTagsOutput = null;
utilities.lazyLoad(exports, ["getServiceTags", "getServiceTagsOutput"], () => require("./getServiceTags"));
exports.getSubnet = null;
exports.getSubnetOutput = null;
utilities.lazyLoad(exports, ["getSubnet", "getSubnetOutput"], () => require("./getSubnet"));
exports.getTrafficManager = null;
exports.getTrafficManagerOutput = null;
utilities.lazyLoad(exports, ["getTrafficManager", "getTrafficManagerOutput"], () => require("./getTrafficManager"));
exports.getTrafficManagerProfile = null;
exports.getTrafficManagerProfileOutput = null;
utilities.lazyLoad(exports, ["getTrafficManagerProfile", "getTrafficManagerProfileOutput"], () => require("./getTrafficManagerProfile"));
exports.getVirtualHub = null;
exports.getVirtualHubOutput = null;
utilities.lazyLoad(exports, ["getVirtualHub", "getVirtualHubOutput"], () => require("./getVirtualHub"));
exports.getVirtualHubConnection = null;
exports.getVirtualHubConnectionOutput = null;
utilities.lazyLoad(exports, ["getVirtualHubConnection", "getVirtualHubConnectionOutput"], () => require("./getVirtualHubConnection"));
exports.getVirtualHubRouteTable = null;
exports.getVirtualHubRouteTableOutput = null;
utilities.lazyLoad(exports, ["getVirtualHubRouteTable", "getVirtualHubRouteTableOutput"], () => require("./getVirtualHubRouteTable"));
exports.getVirtualNetwork = null;
exports.getVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetwork", "getVirtualNetworkOutput"], () => require("./getVirtualNetwork"));
exports.getVirtualNetworkGateway = null;
exports.getVirtualNetworkGatewayOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkGateway", "getVirtualNetworkGatewayOutput"], () => require("./getVirtualNetworkGateway"));
exports.getVirtualNetworkPeering = null;
exports.getVirtualNetworkPeeringOutput = null;
utilities.lazyLoad(exports, ["getVirtualNetworkPeering", "getVirtualNetworkPeeringOutput"], () => require("./getVirtualNetworkPeering"));
exports.getVirtualWan = null;
exports.getVirtualWanOutput = null;
utilities.lazyLoad(exports, ["getVirtualWan", "getVirtualWanOutput"], () => require("./getVirtualWan"));
exports.getVpnGateway = null;
exports.getVpnGatewayOutput = null;
utilities.lazyLoad(exports, ["getVpnGateway", "getVpnGatewayOutput"], () => require("./getVpnGateway"));
exports.getVpnServerConfiguration = null;
exports.getVpnServerConfigurationOutput = null;
utilities.lazyLoad(exports, ["getVpnServerConfiguration", "getVpnServerConfigurationOutput"], () => require("./getVpnServerConfiguration"));
exports.IPGroup = null;
utilities.lazyLoad(exports, ["IPGroup"], () => require("./ipgroup"));
exports.IPGroupCIDR = null;
utilities.lazyLoad(exports, ["IPGroupCIDR"], () => require("./ipgroupCIDR"));
exports.LocalNetworkGateway = null;
utilities.lazyLoad(exports, ["LocalNetworkGateway"], () => require("./localNetworkGateway"));
exports.NatGateway = null;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));
exports.NatGatewayPublicIpAssociation = null;
utilities.lazyLoad(exports, ["NatGatewayPublicIpAssociation"], () => require("./natGatewayPublicIpAssociation"));
exports.NatGatewayPublicIpPrefixAssociation = null;
utilities.lazyLoad(exports, ["NatGatewayPublicIpPrefixAssociation"], () => require("./natGatewayPublicIpPrefixAssociation"));
exports.NetworkConnectionMonitor = null;
utilities.lazyLoad(exports, ["NetworkConnectionMonitor"], () => require("./networkConnectionMonitor"));
exports.NetworkInterface = null;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));
exports.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = null;
utilities.lazyLoad(exports, ["NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation"], () => require("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation"));
exports.NetworkInterfaceApplicationSecurityGroupAssociation = null;
utilities.lazyLoad(exports, ["NetworkInterfaceApplicationSecurityGroupAssociation"], () => require("./networkInterfaceApplicationSecurityGroupAssociation"));
exports.NetworkInterfaceBackendAddressPoolAssociation = null;
utilities.lazyLoad(exports, ["NetworkInterfaceBackendAddressPoolAssociation"], () => require("./networkInterfaceBackendAddressPoolAssociation"));
exports.NetworkInterfaceNatRuleAssociation = null;
utilities.lazyLoad(exports, ["NetworkInterfaceNatRuleAssociation"], () => require("./networkInterfaceNatRuleAssociation"));
exports.NetworkInterfaceSecurityGroupAssociation = null;
utilities.lazyLoad(exports, ["NetworkInterfaceSecurityGroupAssociation"], () => require("./networkInterfaceSecurityGroupAssociation"));
exports.NetworkManager = null;
utilities.lazyLoad(exports, ["NetworkManager"], () => require("./networkManager"));
exports.NetworkManagerAdminRule = null;
utilities.lazyLoad(exports, ["NetworkManagerAdminRule"], () => require("./networkManagerAdminRule"));
exports.NetworkManagerAdminRuleCollection = null;
utilities.lazyLoad(exports, ["NetworkManagerAdminRuleCollection"], () => require("./networkManagerAdminRuleCollection"));
exports.NetworkManagerConnectivityConfiguration = null;
utilities.lazyLoad(exports, ["NetworkManagerConnectivityConfiguration"], () => require("./networkManagerConnectivityConfiguration"));
exports.NetworkManagerDeployment = null;
utilities.lazyLoad(exports, ["NetworkManagerDeployment"], () => require("./networkManagerDeployment"));
exports.NetworkManagerManagementGroupConnection = null;
utilities.lazyLoad(exports, ["NetworkManagerManagementGroupConnection"], () => require("./networkManagerManagementGroupConnection"));
exports.NetworkManagerNetworkGroup = null;
utilities.lazyLoad(exports, ["NetworkManagerNetworkGroup"], () => require("./networkManagerNetworkGroup"));
exports.NetworkManagerScopeConnection = null;
utilities.lazyLoad(exports, ["NetworkManagerScopeConnection"], () => require("./networkManagerScopeConnection"));
exports.NetworkManagerSecurityAdminConfiguration = null;
utilities.lazyLoad(exports, ["NetworkManagerSecurityAdminConfiguration"], () => require("./networkManagerSecurityAdminConfiguration"));
exports.NetworkManagerStaticMember = null;
utilities.lazyLoad(exports, ["NetworkManagerStaticMember"], () => require("./networkManagerStaticMember"));
exports.NetworkManagerSubscriptionConnection = null;
utilities.lazyLoad(exports, ["NetworkManagerSubscriptionConnection"], () => require("./networkManagerSubscriptionConnection"));
exports.NetworkSecurityGroup = null;
utilities.lazyLoad(exports, ["NetworkSecurityGroup"], () => require("./networkSecurityGroup"));
exports.NetworkSecurityRule = null;
utilities.lazyLoad(exports, ["NetworkSecurityRule"], () => require("./networkSecurityRule"));
exports.NetworkWatcher = null;
utilities.lazyLoad(exports, ["NetworkWatcher"], () => require("./networkWatcher"));
exports.NetworkWatcherFlowLog = null;
utilities.lazyLoad(exports, ["NetworkWatcherFlowLog"], () => require("./networkWatcherFlowLog"));
exports.PointToPointVpnGateway = null;
utilities.lazyLoad(exports, ["PointToPointVpnGateway"], () => require("./pointToPointVpnGateway"));
exports.Profile = null;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));
exports.PublicIp = null;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));
exports.PublicIpPrefix = null;
utilities.lazyLoad(exports, ["PublicIpPrefix"], () => require("./publicIpPrefix"));
exports.Route = null;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
exports.RouteFilter = null;
utilities.lazyLoad(exports, ["RouteFilter"], () => require("./routeFilter"));
exports.RouteMap = null;
utilities.lazyLoad(exports, ["RouteMap"], () => require("./routeMap"));
exports.RouteServer = null;
utilities.lazyLoad(exports, ["RouteServer"], () => require("./routeServer"));
exports.RouteServerBgpConnection = null;
utilities.lazyLoad(exports, ["RouteServerBgpConnection"], () => require("./routeServerBgpConnection"));
exports.RouteTable = null;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));
exports.RoutingIntent = null;
utilities.lazyLoad(exports, ["RoutingIntent"], () => require("./routingIntent"));
exports.SecurityPartnerProvider = null;
utilities.lazyLoad(exports, ["SecurityPartnerProvider"], () => require("./securityPartnerProvider"));
exports.Subnet = null;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));
exports.SubnetNatGatewayAssociation = null;
utilities.lazyLoad(exports, ["SubnetNatGatewayAssociation"], () => require("./subnetNatGatewayAssociation"));
exports.SubnetNetworkSecurityGroupAssociation = null;
utilities.lazyLoad(exports, ["SubnetNetworkSecurityGroupAssociation"], () => require("./subnetNetworkSecurityGroupAssociation"));
exports.SubnetRouteTableAssociation = null;
utilities.lazyLoad(exports, ["SubnetRouteTableAssociation"], () => require("./subnetRouteTableAssociation"));
exports.SubnetServiceEndpointStoragePolicy = null;
utilities.lazyLoad(exports, ["SubnetServiceEndpointStoragePolicy"], () => require("./subnetServiceEndpointStoragePolicy"));
exports.TrafficManagerAzureEndpoint = null;
utilities.lazyLoad(exports, ["TrafficManagerAzureEndpoint"], () => require("./trafficManagerAzureEndpoint"));
exports.TrafficManagerExternalEndpoint = null;
utilities.lazyLoad(exports, ["TrafficManagerExternalEndpoint"], () => require("./trafficManagerExternalEndpoint"));
exports.TrafficManagerNestedEndpoint = null;
utilities.lazyLoad(exports, ["TrafficManagerNestedEndpoint"], () => require("./trafficManagerNestedEndpoint"));
exports.TrafficManagerProfile = null;
utilities.lazyLoad(exports, ["TrafficManagerProfile"], () => require("./trafficManagerProfile"));
exports.VirtualHub = null;
utilities.lazyLoad(exports, ["VirtualHub"], () => require("./virtualHub"));
exports.VirtualHubConnection = null;
utilities.lazyLoad(exports, ["VirtualHubConnection"], () => require("./virtualHubConnection"));
exports.VirtualHubIp = null;
utilities.lazyLoad(exports, ["VirtualHubIp"], () => require("./virtualHubIp"));
exports.VirtualHubRouteTable = null;
utilities.lazyLoad(exports, ["VirtualHubRouteTable"], () => require("./virtualHubRouteTable"));
exports.VirtualHubRouteTableRoute = null;
utilities.lazyLoad(exports, ["VirtualHubRouteTableRoute"], () => require("./virtualHubRouteTableRoute"));
exports.VirtualNetwork = null;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));
exports.VirtualNetworkDnsServers = null;
utilities.lazyLoad(exports, ["VirtualNetworkDnsServers"], () => require("./virtualNetworkDnsServers"));
exports.VirtualNetworkGateway = null;
utilities.lazyLoad(exports, ["VirtualNetworkGateway"], () => require("./virtualNetworkGateway"));
exports.VirtualNetworkGatewayConnection = null;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayConnection"], () => require("./virtualNetworkGatewayConnection"));
exports.VirtualNetworkGatewayNatRule = null;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayNatRule"], () => require("./virtualNetworkGatewayNatRule"));
exports.VirtualNetworkPeering = null;
utilities.lazyLoad(exports, ["VirtualNetworkPeering"], () => require("./virtualNetworkPeering"));
exports.VirtualWan = null;
utilities.lazyLoad(exports, ["VirtualWan"], () => require("./virtualWan"));
exports.VnpGatewayNatRule = null;
utilities.lazyLoad(exports, ["VnpGatewayNatRule"], () => require("./vnpGatewayNatRule"));
exports.VpnGateway = null;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));
exports.VpnGatewayConnection = null;
utilities.lazyLoad(exports, ["VpnGatewayConnection"], () => require("./vpnGatewayConnection"));
exports.VpnServerConfiguration = null;
utilities.lazyLoad(exports, ["VpnServerConfiguration"], () => require("./vpnServerConfiguration"));
exports.VpnServerConfigurationPolicyGroup = null;
utilities.lazyLoad(exports, ["VpnServerConfigurationPolicyGroup"], () => require("./vpnServerConfigurationPolicyGroup"));
exports.VpnSite = null;
utilities.lazyLoad(exports, ["VpnSite"], () => require("./vpnSite"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:network/applicationGateway:ApplicationGateway":
                return new exports.ApplicationGateway(name, undefined, { urn });
            case "azure:network/applicationSecurityGroup:ApplicationSecurityGroup":
                return new exports.ApplicationSecurityGroup(name, undefined, { urn });
            case "azure:network/bgpConnection:BgpConnection":
                return new exports.BgpConnection(name, undefined, { urn });
            case "azure:network/ddosProtectionPlan:DdosProtectionPlan":
                return new exports.DdosProtectionPlan(name, undefined, { urn });
            case "azure:network/expressRouteCircuit:ExpressRouteCircuit":
                return new exports.ExpressRouteCircuit(name, undefined, { urn });
            case "azure:network/expressRouteCircuitAuthorization:ExpressRouteCircuitAuthorization":
                return new exports.ExpressRouteCircuitAuthorization(name, undefined, { urn });
            case "azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection":
                return new exports.ExpressRouteCircuitConnection(name, undefined, { urn });
            case "azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering":
                return new exports.ExpressRouteCircuitPeering(name, undefined, { urn });
            case "azure:network/expressRouteConnection:ExpressRouteConnection":
                return new exports.ExpressRouteConnection(name, undefined, { urn });
            case "azure:network/expressRouteGateway:ExpressRouteGateway":
                return new exports.ExpressRouteGateway(name, undefined, { urn });
            case "azure:network/expressRoutePort:ExpressRoutePort":
                return new exports.ExpressRoutePort(name, undefined, { urn });
            case "azure:network/expressRoutePortAuthorization:ExpressRoutePortAuthorization":
                return new exports.ExpressRoutePortAuthorization(name, undefined, { urn });
            case "azure:network/firewall:Firewall":
                return new exports.Firewall(name, undefined, { urn });
            case "azure:network/firewallApplicationRuleCollection:FirewallApplicationRuleCollection":
                return new exports.FirewallApplicationRuleCollection(name, undefined, { urn });
            case "azure:network/firewallNatRuleCollection:FirewallNatRuleCollection":
                return new exports.FirewallNatRuleCollection(name, undefined, { urn });
            case "azure:network/firewallNetworkRuleCollection:FirewallNetworkRuleCollection":
                return new exports.FirewallNetworkRuleCollection(name, undefined, { urn });
            case "azure:network/firewallPolicy:FirewallPolicy":
                return new exports.FirewallPolicy(name, undefined, { urn });
            case "azure:network/firewallPolicyRuleCollectionGroup:FirewallPolicyRuleCollectionGroup":
                return new exports.FirewallPolicyRuleCollectionGroup(name, undefined, { urn });
            case "azure:network/iPGroup:IPGroup":
                return new exports.IPGroup(name, undefined, { urn });
            case "azure:network/iPGroupCIDR:IPGroupCIDR":
                return new exports.IPGroupCIDR(name, undefined, { urn });
            case "azure:network/localNetworkGateway:LocalNetworkGateway":
                return new exports.LocalNetworkGateway(name, undefined, { urn });
            case "azure:network/natGateway:NatGateway":
                return new exports.NatGateway(name, undefined, { urn });
            case "azure:network/natGatewayPublicIpAssociation:NatGatewayPublicIpAssociation":
                return new exports.NatGatewayPublicIpAssociation(name, undefined, { urn });
            case "azure:network/natGatewayPublicIpPrefixAssociation:NatGatewayPublicIpPrefixAssociation":
                return new exports.NatGatewayPublicIpPrefixAssociation(name, undefined, { urn });
            case "azure:network/networkConnectionMonitor:NetworkConnectionMonitor":
                return new exports.NetworkConnectionMonitor(name, undefined, { urn });
            case "azure:network/networkInterface:NetworkInterface":
                return new exports.NetworkInterface(name, undefined, { urn });
            case "azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation":
                return new exports.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceApplicationSecurityGroupAssociation:NetworkInterfaceApplicationSecurityGroupAssociation":
                return new exports.NetworkInterfaceApplicationSecurityGroupAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceBackendAddressPoolAssociation:NetworkInterfaceBackendAddressPoolAssociation":
                return new exports.NetworkInterfaceBackendAddressPoolAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceNatRuleAssociation:NetworkInterfaceNatRuleAssociation":
                return new exports.NetworkInterfaceNatRuleAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceSecurityGroupAssociation:NetworkInterfaceSecurityGroupAssociation":
                return new exports.NetworkInterfaceSecurityGroupAssociation(name, undefined, { urn });
            case "azure:network/networkManager:NetworkManager":
                return new exports.NetworkManager(name, undefined, { urn });
            case "azure:network/networkManagerAdminRule:NetworkManagerAdminRule":
                return new exports.NetworkManagerAdminRule(name, undefined, { urn });
            case "azure:network/networkManagerAdminRuleCollection:NetworkManagerAdminRuleCollection":
                return new exports.NetworkManagerAdminRuleCollection(name, undefined, { urn });
            case "azure:network/networkManagerConnectivityConfiguration:NetworkManagerConnectivityConfiguration":
                return new exports.NetworkManagerConnectivityConfiguration(name, undefined, { urn });
            case "azure:network/networkManagerDeployment:NetworkManagerDeployment":
                return new exports.NetworkManagerDeployment(name, undefined, { urn });
            case "azure:network/networkManagerManagementGroupConnection:NetworkManagerManagementGroupConnection":
                return new exports.NetworkManagerManagementGroupConnection(name, undefined, { urn });
            case "azure:network/networkManagerNetworkGroup:NetworkManagerNetworkGroup":
                return new exports.NetworkManagerNetworkGroup(name, undefined, { urn });
            case "azure:network/networkManagerScopeConnection:NetworkManagerScopeConnection":
                return new exports.NetworkManagerScopeConnection(name, undefined, { urn });
            case "azure:network/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration":
                return new exports.NetworkManagerSecurityAdminConfiguration(name, undefined, { urn });
            case "azure:network/networkManagerStaticMember:NetworkManagerStaticMember":
                return new exports.NetworkManagerStaticMember(name, undefined, { urn });
            case "azure:network/networkManagerSubscriptionConnection:NetworkManagerSubscriptionConnection":
                return new exports.NetworkManagerSubscriptionConnection(name, undefined, { urn });
            case "azure:network/networkSecurityGroup:NetworkSecurityGroup":
                return new exports.NetworkSecurityGroup(name, undefined, { urn });
            case "azure:network/networkSecurityRule:NetworkSecurityRule":
                return new exports.NetworkSecurityRule(name, undefined, { urn });
            case "azure:network/networkWatcher:NetworkWatcher":
                return new exports.NetworkWatcher(name, undefined, { urn });
            case "azure:network/networkWatcherFlowLog:NetworkWatcherFlowLog":
                return new exports.NetworkWatcherFlowLog(name, undefined, { urn });
            case "azure:network/pointToPointVpnGateway:PointToPointVpnGateway":
                return new exports.PointToPointVpnGateway(name, undefined, { urn });
            case "azure:network/profile:Profile":
                return new exports.Profile(name, undefined, { urn });
            case "azure:network/publicIp:PublicIp":
                return new exports.PublicIp(name, undefined, { urn });
            case "azure:network/publicIpPrefix:PublicIpPrefix":
                return new exports.PublicIpPrefix(name, undefined, { urn });
            case "azure:network/route:Route":
                return new exports.Route(name, undefined, { urn });
            case "azure:network/routeFilter:RouteFilter":
                return new exports.RouteFilter(name, undefined, { urn });
            case "azure:network/routeMap:RouteMap":
                return new exports.RouteMap(name, undefined, { urn });
            case "azure:network/routeServer:RouteServer":
                return new exports.RouteServer(name, undefined, { urn });
            case "azure:network/routeServerBgpConnection:RouteServerBgpConnection":
                return new exports.RouteServerBgpConnection(name, undefined, { urn });
            case "azure:network/routeTable:RouteTable":
                return new exports.RouteTable(name, undefined, { urn });
            case "azure:network/routingIntent:RoutingIntent":
                return new exports.RoutingIntent(name, undefined, { urn });
            case "azure:network/securityPartnerProvider:SecurityPartnerProvider":
                return new exports.SecurityPartnerProvider(name, undefined, { urn });
            case "azure:network/subnet:Subnet":
                return new exports.Subnet(name, undefined, { urn });
            case "azure:network/subnetNatGatewayAssociation:SubnetNatGatewayAssociation":
                return new exports.SubnetNatGatewayAssociation(name, undefined, { urn });
            case "azure:network/subnetNetworkSecurityGroupAssociation:SubnetNetworkSecurityGroupAssociation":
                return new exports.SubnetNetworkSecurityGroupAssociation(name, undefined, { urn });
            case "azure:network/subnetRouteTableAssociation:SubnetRouteTableAssociation":
                return new exports.SubnetRouteTableAssociation(name, undefined, { urn });
            case "azure:network/subnetServiceEndpointStoragePolicy:SubnetServiceEndpointStoragePolicy":
                return new exports.SubnetServiceEndpointStoragePolicy(name, undefined, { urn });
            case "azure:network/trafficManagerAzureEndpoint:TrafficManagerAzureEndpoint":
                return new exports.TrafficManagerAzureEndpoint(name, undefined, { urn });
            case "azure:network/trafficManagerExternalEndpoint:TrafficManagerExternalEndpoint":
                return new exports.TrafficManagerExternalEndpoint(name, undefined, { urn });
            case "azure:network/trafficManagerNestedEndpoint:TrafficManagerNestedEndpoint":
                return new exports.TrafficManagerNestedEndpoint(name, undefined, { urn });
            case "azure:network/trafficManagerProfile:TrafficManagerProfile":
                return new exports.TrafficManagerProfile(name, undefined, { urn });
            case "azure:network/virtualHub:VirtualHub":
                return new exports.VirtualHub(name, undefined, { urn });
            case "azure:network/virtualHubConnection:VirtualHubConnection":
                return new exports.VirtualHubConnection(name, undefined, { urn });
            case "azure:network/virtualHubIp:VirtualHubIp":
                return new exports.VirtualHubIp(name, undefined, { urn });
            case "azure:network/virtualHubRouteTable:VirtualHubRouteTable":
                return new exports.VirtualHubRouteTable(name, undefined, { urn });
            case "azure:network/virtualHubRouteTableRoute:VirtualHubRouteTableRoute":
                return new exports.VirtualHubRouteTableRoute(name, undefined, { urn });
            case "azure:network/virtualNetwork:VirtualNetwork":
                return new exports.VirtualNetwork(name, undefined, { urn });
            case "azure:network/virtualNetworkDnsServers:VirtualNetworkDnsServers":
                return new exports.VirtualNetworkDnsServers(name, undefined, { urn });
            case "azure:network/virtualNetworkGateway:VirtualNetworkGateway":
                return new exports.VirtualNetworkGateway(name, undefined, { urn });
            case "azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection":
                return new exports.VirtualNetworkGatewayConnection(name, undefined, { urn });
            case "azure:network/virtualNetworkGatewayNatRule:VirtualNetworkGatewayNatRule":
                return new exports.VirtualNetworkGatewayNatRule(name, undefined, { urn });
            case "azure:network/virtualNetworkPeering:VirtualNetworkPeering":
                return new exports.VirtualNetworkPeering(name, undefined, { urn });
            case "azure:network/virtualWan:VirtualWan":
                return new exports.VirtualWan(name, undefined, { urn });
            case "azure:network/vnpGatewayNatRule:VnpGatewayNatRule":
                return new exports.VnpGatewayNatRule(name, undefined, { urn });
            case "azure:network/vpnGateway:VpnGateway":
                return new exports.VpnGateway(name, undefined, { urn });
            case "azure:network/vpnGatewayConnection:VpnGatewayConnection":
                return new exports.VpnGatewayConnection(name, undefined, { urn });
            case "azure:network/vpnServerConfiguration:VpnServerConfiguration":
                return new exports.VpnServerConfiguration(name, undefined, { urn });
            case "azure:network/vpnServerConfigurationPolicyGroup:VpnServerConfigurationPolicyGroup":
                return new exports.VpnServerConfigurationPolicyGroup(name, undefined, { urn });
            case "azure:network/vpnSite:VpnSite":
                return new exports.VpnSite(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "network/applicationGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/applicationSecurityGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/bgpConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/ddosProtectionPlan", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuit", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitAuthorization", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitPeering", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRoutePort", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRoutePortAuthorization", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewall", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallApplicationRuleCollection", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallNatRuleCollection", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallNetworkRuleCollection", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallPolicyRuleCollectionGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/iPGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/iPGroupCIDR", _module);
pulumi.runtime.registerResourceModule("azure", "network/localNetworkGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/natGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/natGatewayPublicIpAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/natGatewayPublicIpPrefixAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkConnectionMonitor", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterface", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceApplicationSecurityGroupAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceBackendAddressPoolAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceNatRuleAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceSecurityGroupAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManager", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerAdminRule", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerAdminRuleCollection", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerConnectivityConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerDeployment", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerManagementGroupConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerNetworkGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerScopeConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerSecurityAdminConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerStaticMember", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkManagerSubscriptionConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkSecurityGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkSecurityRule", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkWatcher", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkWatcherFlowLog", _module);
pulumi.runtime.registerResourceModule("azure", "network/pointToPointVpnGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/profile", _module);
pulumi.runtime.registerResourceModule("azure", "network/publicIp", _module);
pulumi.runtime.registerResourceModule("azure", "network/publicIpPrefix", _module);
pulumi.runtime.registerResourceModule("azure", "network/route", _module);
pulumi.runtime.registerResourceModule("azure", "network/routeFilter", _module);
pulumi.runtime.registerResourceModule("azure", "network/routeMap", _module);
pulumi.runtime.registerResourceModule("azure", "network/routeServer", _module);
pulumi.runtime.registerResourceModule("azure", "network/routeServerBgpConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/routeTable", _module);
pulumi.runtime.registerResourceModule("azure", "network/routingIntent", _module);
pulumi.runtime.registerResourceModule("azure", "network/securityPartnerProvider", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnet", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetNatGatewayAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetNetworkSecurityGroupAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetRouteTableAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetServiceEndpointStoragePolicy", _module);
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerAzureEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerExternalEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerNestedEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerProfile", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHub", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHubConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHubIp", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHubRouteTable", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHubRouteTableRoute", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetwork", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkDnsServers", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGatewayConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGatewayNatRule", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkPeering", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualWan", _module);
pulumi.runtime.registerResourceModule("azure", "network/vnpGatewayNatRule", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnGatewayConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnServerConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnServerConfigurationPolicyGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnSite", _module);
//# sourceMappingURL=index.js.map