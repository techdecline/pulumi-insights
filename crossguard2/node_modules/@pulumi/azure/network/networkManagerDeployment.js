"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkManagerDeployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Network Manager Deployment.
 *
 * > **NOTE on Virtual Network Peering:** Using Network Manager Deployment to deploy Connectivity Configuration may modify or delete existing Virtual Network Peering. At this time you should not use Network Peering resource in conjunction with Network Manager Deployment. Doing so may cause a conflict of Peering configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const current = azure.core.getSubscription({});
 * const exampleNetworkManager = new azure.network.NetworkManager("example", {
 *     name: "example-network-manager",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     scope: {
 *         subscriptionIds: [current.then(current => current.id)],
 *     },
 *     scopeAccesses: [
 *         "Connectivity",
 *         "SecurityAdmin",
 *     ],
 *     description: "example network manager",
 * });
 * const exampleNetworkManagerNetworkGroup = new azure.network.NetworkManagerNetworkGroup("example", {
 *     name: "example-group",
 *     networkManagerId: exampleNetworkManager.id,
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-net",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.0.0/16"],
 *     flowTimeoutInMinutes: 10,
 * });
 * const exampleNetworkManagerConnectivityConfiguration = new azure.network.NetworkManagerConnectivityConfiguration("example", {
 *     name: "example-connectivity-conf",
 *     networkManagerId: exampleNetworkManager.id,
 *     connectivityTopology: "HubAndSpoke",
 *     appliesToGroups: [{
 *         groupConnectivity: "None",
 *         networkGroupId: exampleNetworkManagerNetworkGroup.id,
 *     }],
 *     hub: {
 *         resourceId: exampleVirtualNetwork.id,
 *         resourceType: "Microsoft.Network/virtualNetworks",
 *     },
 * });
 * const exampleNetworkManagerDeployment = new azure.network.NetworkManagerDeployment("example", {
 *     networkManagerId: exampleNetworkManager.id,
 *     location: "eastus",
 *     scopeAccess: "Connectivity",
 *     configurationIds: [exampleNetworkManagerConnectivityConfiguration.id],
 * });
 * ```
 *
 * ### Triggers)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const current = azure.core.getSubscription({});
 * const exampleNetworkManager = new azure.network.NetworkManager("example", {
 *     name: "example-network-manager",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     scope: {
 *         subscriptionIds: [current.then(current => current.id)],
 *     },
 *     scopeAccesses: [
 *         "Connectivity",
 *         "SecurityAdmin",
 *     ],
 *     description: "example network manager",
 * });
 * const exampleNetworkManagerNetworkGroup = new azure.network.NetworkManagerNetworkGroup("example", {
 *     name: "example-group",
 *     networkManagerId: exampleNetworkManager.id,
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-net",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.0.0/16"],
 *     flowTimeoutInMinutes: 10,
 * });
 * const exampleNetworkManagerSecurityAdminConfiguration = new azure.network.NetworkManagerSecurityAdminConfiguration("example", {
 *     name: "example-nmsac",
 *     networkManagerId: exampleNetworkManager.id,
 * });
 * const exampleNetworkManagerAdminRuleCollection = new azure.network.NetworkManagerAdminRuleCollection("example", {
 *     name: "example-nmarc",
 *     securityAdminConfigurationId: exampleNetworkManagerSecurityAdminConfiguration.id,
 *     networkGroupIds: [exampleNetworkManagerNetworkGroup.id],
 * });
 * const exampleNetworkManagerAdminRule = new azure.network.NetworkManagerAdminRule("example", {
 *     name: "example-nmar",
 *     adminRuleCollectionId: exampleNetworkManagerAdminRuleCollection.id,
 *     action: "Deny",
 *     description: "example",
 *     direction: "Inbound",
 *     priority: 1,
 *     protocol: "Tcp",
 *     sourcePortRanges: ["80"],
 *     destinationPortRanges: ["80"],
 *     sources: [{
 *         addressPrefixType: "ServiceTag",
 *         addressPrefix: "Internet",
 *     }],
 *     destinations: [{
 *         addressPrefixType: "IPPrefix",
 *         addressPrefix: "*",
 *     }],
 * });
 * const exampleNetworkManagerDeployment = new azure.network.NetworkManagerDeployment("example", {
 *     networkManagerId: exampleNetworkManager.id,
 *     location: "eastus",
 *     scopeAccess: "SecurityAdmin",
 *     configurationIds: [exampleNetworkManagerSecurityAdminConfiguration.id],
 *     triggers: {
 *         source_port_ranges: exampleNetworkManagerAdminRule.sourcePortRanges.apply(sourcePortRanges => std.joinOutput({
 *             separator: ",",
 *             input: sourcePortRanges,
 *         })).apply(invoke => invoke.result),
 *     },
 * }, {
 *     dependsOn: [exampleNetworkManagerAdminRule],
 * });
 * ```
 *
 * ## Import
 *
 * Network Manager Deployment can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:network/networkManagerDeployment:NetworkManagerDeployment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/commit|eastus|Connectivity
 * ```
 */
class NetworkManagerDeployment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configurationIds"] = state ? state.configurationIds : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["networkManagerId"] = state ? state.networkManagerId : undefined;
            resourceInputs["scopeAccess"] = state ? state.scopeAccess : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configurationIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationIds'");
            }
            if ((!args || args.networkManagerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkManagerId'");
            }
            if ((!args || args.scopeAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeAccess'");
            }
            resourceInputs["configurationIds"] = args ? args.configurationIds : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["networkManagerId"] = args ? args.networkManagerId : undefined;
            resourceInputs["scopeAccess"] = args ? args.scopeAccess : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkManagerDeployment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkManagerDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkManagerDeployment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkManagerDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkManagerDeployment.__pulumiType;
    }
}
exports.NetworkManagerDeployment = NetworkManagerDeployment;
/** @internal */
NetworkManagerDeployment.__pulumiType = 'azure:network/networkManagerDeployment:NetworkManagerDeployment';
//# sourceMappingURL=networkManagerDeployment.js.map