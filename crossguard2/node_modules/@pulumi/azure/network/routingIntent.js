"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutingIntent = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Virtual Hub Routing Intent.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualWan = new azure.network.VirtualWan("example", {
 *     name: "example-vwan",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleVirtualHub = new azure.network.VirtualHub("example", {
 *     name: "example-vhub",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     virtualWanId: exampleVirtualWan.id,
 *     addressPrefix: "10.0.1.0/24",
 * });
 * const exampleFirewall = new azure.network.Firewall("example", {
 *     name: "example-fw",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     skuName: "AZFW_Hub",
 *     skuTier: "Standard",
 *     virtualHub: {
 *         virtualHubId: exampleVirtualHub.id,
 *         publicIpCount: 1,
 *     },
 * });
 * const exampleRoutingIntent = new azure.network.RoutingIntent("example", {
 *     name: "example-routingintent",
 *     virtualHubId: exampleVirtualHub.id,
 *     routingPolicies: [{
 *         name: "InternetTrafficPolicy",
 *         destinations: ["Internet"],
 *         nextHop: exampleFirewall.id,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Hub Routing Intents can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:network/routingIntent:RoutingIntent example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/virtualHubs/virtualHub1/routingIntent/routingIntent1
 * ```
 */
class RoutingIntent extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routingPolicies"] = state ? state.routingPolicies : undefined;
            resourceInputs["virtualHubId"] = state ? state.virtualHubId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.routingPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingPolicies'");
            }
            if ((!args || args.virtualHubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualHubId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routingPolicies"] = args ? args.routingPolicies : undefined;
            resourceInputs["virtualHubId"] = args ? args.virtualHubId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutingIntent.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RoutingIntent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RoutingIntent(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RoutingIntent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingIntent.__pulumiType;
    }
}
exports.RoutingIntent = RoutingIntent;
/** @internal */
RoutingIntent.__pulumiType = 'azure:network/routingIntent:RoutingIntent';
//# sourceMappingURL=routingIntent.js.map