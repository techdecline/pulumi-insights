import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Use this data source to access information about an existing ExpressRoute circuit.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.network.getExpressRouteCircuit({
 *     resourceGroupName: exampleAzurermResourceGroup.name,
 *     name: exampleAzurermExpressRouteCircuit.name,
 * });
 * export const expressRouteCircuitId = example.then(example => example.id);
 * export const serviceKey = example.then(example => example.serviceKey);
 * ```
 */
export declare function getExpressRouteCircuit(args: GetExpressRouteCircuitArgs, opts?: pulumi.InvokeOptions): Promise<GetExpressRouteCircuitResult>;
/**
 * A collection of arguments for invoking getExpressRouteCircuit.
 */
export interface GetExpressRouteCircuitArgs {
    /**
     * The name of the ExpressRoute circuit.
     */
    name: string;
    /**
     * The Name of the Resource Group where the ExpressRoute circuit exists.
     */
    resourceGroupName: string;
}
/**
 * A collection of values returned by getExpressRouteCircuit.
 */
export interface GetExpressRouteCircuitResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Azure location where the ExpressRoute circuit exists
     */
    readonly location: string;
    readonly name: string;
    /**
     * A `peerings` block for the ExpressRoute circuit as documented below
     */
    readonly peerings: outputs.network.GetExpressRouteCircuitPeering[];
    readonly resourceGroupName: string;
    /**
     * The string needed by the service provider to provision the ExpressRoute circuit.
     */
    readonly serviceKey: string;
    /**
     * A `serviceProviderProperties` block for the ExpressRoute circuit as documented below
     */
    readonly serviceProviderProperties: outputs.network.GetExpressRouteCircuitServiceProviderProperty[];
    /**
     * The ExpressRoute circuit provisioning state from your chosen service provider. Possible values are `NotProvisioned`, `Provisioning`, `Provisioned`, and `Deprovisioning`.
     */
    readonly serviceProviderProvisioningState: string;
    /**
     * A `sku` block for the ExpressRoute circuit as documented below.
     */
    readonly sku: outputs.network.GetExpressRouteCircuitSku;
}
/**
 * Use this data source to access information about an existing ExpressRoute circuit.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.network.getExpressRouteCircuit({
 *     resourceGroupName: exampleAzurermResourceGroup.name,
 *     name: exampleAzurermExpressRouteCircuit.name,
 * });
 * export const expressRouteCircuitId = example.then(example => example.id);
 * export const serviceKey = example.then(example => example.serviceKey);
 * ```
 */
export declare function getExpressRouteCircuitOutput(args: GetExpressRouteCircuitOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetExpressRouteCircuitResult>;
/**
 * A collection of arguments for invoking getExpressRouteCircuit.
 */
export interface GetExpressRouteCircuitOutputArgs {
    /**
     * The name of the ExpressRoute circuit.
     */
    name: pulumi.Input<string>;
    /**
     * The Name of the Resource Group where the ExpressRoute circuit exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
