"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkManagerAdminRuleCollection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Network Manager Admin Rule Collection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const current = azure.core.getSubscription({});
 * const exampleNetworkManager = new azure.network.NetworkManager("example", {
 *     name: "example-network-manager",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     scope: {
 *         subscriptionIds: [current.then(current => current.id)],
 *     },
 *     scopeAccesses: [
 *         "Connectivity",
 *         "SecurityAdmin",
 *     ],
 *     description: "example network manager",
 * });
 * const exampleNetworkManagerNetworkGroup = new azure.network.NetworkManagerNetworkGroup("example", {
 *     name: "example-network-group",
 *     networkManagerId: exampleNetworkManager.id,
 * });
 * const exampleNetworkManagerSecurityAdminConfiguration = new azure.network.NetworkManagerSecurityAdminConfiguration("example", {
 *     name: "example-admin-conf",
 *     networkManagerId: exampleNetworkManager.id,
 * });
 * const exampleNetworkManagerAdminRuleCollection = new azure.network.NetworkManagerAdminRuleCollection("example", {
 *     name: "example-admin-rule-collection",
 *     securityAdminConfigurationId: exampleNetworkManagerSecurityAdminConfiguration.id,
 *     networkGroupIds: [exampleNetworkManagerNetworkGroup.id],
 * });
 * ```
 *
 * ## Import
 *
 * Network Manager Admin Rule Collection can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:network/networkManagerAdminRuleCollection:NetworkManagerAdminRuleCollection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/securityAdminConfigurations/configuration1/ruleCollections/ruleCollection1
 * ```
 */
class NetworkManagerAdminRuleCollection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkGroupIds"] = state ? state.networkGroupIds : undefined;
            resourceInputs["securityAdminConfigurationId"] = state ? state.securityAdminConfigurationId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.networkGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkGroupIds'");
            }
            if ((!args || args.securityAdminConfigurationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityAdminConfigurationId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkGroupIds"] = args ? args.networkGroupIds : undefined;
            resourceInputs["securityAdminConfigurationId"] = args ? args.securityAdminConfigurationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkManagerAdminRuleCollection.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkManagerAdminRuleCollection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkManagerAdminRuleCollection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkManagerAdminRuleCollection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkManagerAdminRuleCollection.__pulumiType;
    }
}
exports.NetworkManagerAdminRuleCollection = NetworkManagerAdminRuleCollection;
/** @internal */
NetworkManagerAdminRuleCollection.__pulumiType = 'azure:network/networkManagerAdminRuleCollection:NetworkManagerAdminRuleCollection';
//# sourceMappingURL=networkManagerAdminRuleCollection.js.map