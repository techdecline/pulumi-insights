"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowsVirtualMachine = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Windows Virtual Machine.
 *
 * ## Disclaimers
 *
 * > **Note** This provider will automatically remove the OS Disk by default - this behaviour can be configured using the `features` setting within the Provider block.
 *
 * > **Note** All arguments including the administrator login and password will be stored in the raw state as plain-text.
 *
 * > **Note** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `azure.compute.VirtualMachine` resource instead.
 *
 * > **Note** This resource does not support attaching existing OS Disks. You can instead capture an image of the OS Disk or continue to use the `azure.compute.VirtualMachine` resource instead.
 *
 * > In this release there's a known issue where the `publicIpAddress` and `publicIpAddresses` fields may not be fully populated for Dynamic Public IP's.
 *
 * ## Example Usage
 *
 * This example provisions a basic Windows Virtual Machine on an internal network.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-network",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "example-nic",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleWindowsVirtualMachine = new azure.compute.WindowsVirtualMachine("example", {
 *     name: "example-machine",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     size: "Standard_F2",
 *     adminUsername: "adminuser",
 *     adminPassword: "P@$$w0rd1234!",
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     sourceImageReference: {
 *         publisher: "MicrosoftWindowsServer",
 *         offer: "WindowsServer",
 *         sku: "2016-Datacenter",
 *         version: "latest",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Windows Virtual Machines can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/windowsVirtualMachine:WindowsVirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1
 * ```
 */
class WindowsVirtualMachine extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalCapabilities"] = state ? state.additionalCapabilities : undefined;
            resourceInputs["additionalUnattendContents"] = state ? state.additionalUnattendContents : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["allowExtensionOperations"] = state ? state.allowExtensionOperations : undefined;
            resourceInputs["availabilitySetId"] = state ? state.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["bypassPlatformSafetyChecksOnUserScheduleEnabled"] = state ? state.bypassPlatformSafetyChecksOnUserScheduleEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = state ? state.capacityReservationGroupId : undefined;
            resourceInputs["computerName"] = state ? state.computerName : undefined;
            resourceInputs["customData"] = state ? state.customData : undefined;
            resourceInputs["dedicatedHostGroupId"] = state ? state.dedicatedHostGroupId : undefined;
            resourceInputs["dedicatedHostId"] = state ? state.dedicatedHostId : undefined;
            resourceInputs["diskControllerType"] = state ? state.diskControllerType : undefined;
            resourceInputs["edgeZone"] = state ? state.edgeZone : undefined;
            resourceInputs["enableAutomaticUpdates"] = state ? state.enableAutomaticUpdates : undefined;
            resourceInputs["encryptionAtHostEnabled"] = state ? state.encryptionAtHostEnabled : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["extensionsTimeBudget"] = state ? state.extensionsTimeBudget : undefined;
            resourceInputs["galleryApplications"] = state ? state.galleryApplications : undefined;
            resourceInputs["hotpatchingEnabled"] = state ? state.hotpatchingEnabled : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxBidPrice"] = state ? state.maxBidPrice : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            resourceInputs["osDisk"] = state ? state.osDisk : undefined;
            resourceInputs["osImageNotification"] = state ? state.osImageNotification : undefined;
            resourceInputs["patchAssessmentMode"] = state ? state.patchAssessmentMode : undefined;
            resourceInputs["patchMode"] = state ? state.patchMode : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["platformFaultDomain"] = state ? state.platformFaultDomain : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            resourceInputs["provisionVmAgent"] = state ? state.provisionVmAgent : undefined;
            resourceInputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["publicIpAddresses"] = state ? state.publicIpAddresses : undefined;
            resourceInputs["rebootSetting"] = state ? state.rebootSetting : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["secureBootEnabled"] = state ? state.secureBootEnabled : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = state ? state.sourceImageReference : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationNotification"] = state ? state.terminationNotification : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
            resourceInputs["virtualMachineScaleSetId"] = state ? state.virtualMachineScaleSetId : undefined;
            resourceInputs["vmAgentPlatformUpdatesEnabled"] = state ? state.vmAgentPlatformUpdatesEnabled : undefined;
            resourceInputs["vtpmEnabled"] = state ? state.vtpmEnabled : undefined;
            resourceInputs["winrmListeners"] = state ? state.winrmListeners : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.adminUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if ((!args || args.networkInterfaceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceIds'");
            }
            if ((!args || args.osDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osDisk'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["additionalCapabilities"] = args ? args.additionalCapabilities : undefined;
            resourceInputs["additionalUnattendContents"] = args ? args.additionalUnattendContents : undefined;
            resourceInputs["adminPassword"] = (args === null || args === void 0 ? void 0 : args.adminPassword) ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["adminUsername"] = args ? args.adminUsername : undefined;
            resourceInputs["allowExtensionOperations"] = args ? args.allowExtensionOperations : undefined;
            resourceInputs["availabilitySetId"] = args ? args.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["bypassPlatformSafetyChecksOnUserScheduleEnabled"] = args ? args.bypassPlatformSafetyChecksOnUserScheduleEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = args ? args.capacityReservationGroupId : undefined;
            resourceInputs["computerName"] = args ? args.computerName : undefined;
            resourceInputs["customData"] = (args === null || args === void 0 ? void 0 : args.customData) ? pulumi.secret(args.customData) : undefined;
            resourceInputs["dedicatedHostGroupId"] = args ? args.dedicatedHostGroupId : undefined;
            resourceInputs["dedicatedHostId"] = args ? args.dedicatedHostId : undefined;
            resourceInputs["diskControllerType"] = args ? args.diskControllerType : undefined;
            resourceInputs["edgeZone"] = args ? args.edgeZone : undefined;
            resourceInputs["enableAutomaticUpdates"] = args ? args.enableAutomaticUpdates : undefined;
            resourceInputs["encryptionAtHostEnabled"] = args ? args.encryptionAtHostEnabled : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["extensionsTimeBudget"] = args ? args.extensionsTimeBudget : undefined;
            resourceInputs["galleryApplications"] = args ? args.galleryApplications : undefined;
            resourceInputs["hotpatchingEnabled"] = args ? args.hotpatchingEnabled : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxBidPrice"] = args ? args.maxBidPrice : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaceIds"] = args ? args.networkInterfaceIds : undefined;
            resourceInputs["osDisk"] = args ? args.osDisk : undefined;
            resourceInputs["osImageNotification"] = args ? args.osImageNotification : undefined;
            resourceInputs["patchAssessmentMode"] = args ? args.patchAssessmentMode : undefined;
            resourceInputs["patchMode"] = args ? args.patchMode : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["platformFaultDomain"] = args ? args.platformFaultDomain : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["provisionVmAgent"] = args ? args.provisionVmAgent : undefined;
            resourceInputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            resourceInputs["rebootSetting"] = args ? args.rebootSetting : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["secureBootEnabled"] = args ? args.secureBootEnabled : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = args ? args.sourceImageReference : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationNotification"] = args ? args.terminationNotification : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["virtualMachineScaleSetId"] = args ? args.virtualMachineScaleSetId : undefined;
            resourceInputs["vmAgentPlatformUpdatesEnabled"] = args ? args.vmAgentPlatformUpdatesEnabled : undefined;
            resourceInputs["vtpmEnabled"] = args ? args.vtpmEnabled : undefined;
            resourceInputs["winrmListeners"] = args ? args.winrmListeners : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["privateIpAddresses"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddresses"] = undefined /*out*/;
            resourceInputs["virtualMachineId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword", "customData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WindowsVirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing WindowsVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WindowsVirtualMachine(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WindowsVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsVirtualMachine.__pulumiType;
    }
}
exports.WindowsVirtualMachine = WindowsVirtualMachine;
/** @internal */
WindowsVirtualMachine.__pulumiType = 'azure:compute/windowsVirtualMachine:WindowsVirtualMachine';
//# sourceMappingURL=windowsVirtualMachine.js.map