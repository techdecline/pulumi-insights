"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedDiskSasToken = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Disk SAS Token.
 *
 * Use this resource to obtain a Shared Access Signature (SAS Token) for an existing Managed Disk.
 *
 * Shared access signatures allow fine-grained, ephemeral access control to various aspects of Managed Disk similar to blob/storage account container.
 *
 * With the help of this resource, data from the disk can be copied from managed disk to a storage blob or to some other system without the need of azcopy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const test = new azure.core.ResourceGroup("test", {
 *     name: "testrg",
 *     location: "West Europe",
 * });
 * const testManagedDisk = new azure.compute.ManagedDisk("test", {
 *     name: "tst-disk-export",
 *     location: test.location,
 *     resourceGroupName: test.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: 1,
 * });
 * const testManagedDiskSasToken = new azure.compute.ManagedDiskSasToken("test", {
 *     managedDiskId: testManagedDisk.id,
 *     durationInSeconds: 300,
 *     accessLevel: "Read",
 * });
 * ```
 *
 * ## Import
 *
 * Disk SAS Token can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/managedDiskSasToken:ManagedDiskSasToken example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/disks/manageddisk1
 * ```
 */
class ManagedDiskSasToken extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["durationInSeconds"] = state ? state.durationInSeconds : undefined;
            resourceInputs["managedDiskId"] = state ? state.managedDiskId : undefined;
            resourceInputs["sasUrl"] = state ? state.sasUrl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLevel'");
            }
            if ((!args || args.durationInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'durationInSeconds'");
            }
            if ((!args || args.managedDiskId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedDiskId'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["durationInSeconds"] = args ? args.durationInSeconds : undefined;
            resourceInputs["managedDiskId"] = args ? args.managedDiskId : undefined;
            resourceInputs["sasUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sasUrl"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagedDiskSasToken.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ManagedDiskSasToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ManagedDiskSasToken(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedDiskSasToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedDiskSasToken.__pulumiType;
    }
}
exports.ManagedDiskSasToken = ManagedDiskSasToken;
/** @internal */
ManagedDiskSasToken.__pulumiType = 'azure:compute/managedDiskSasToken:ManagedDiskSasToken';
//# sourceMappingURL=managedDiskSasToken.js.map