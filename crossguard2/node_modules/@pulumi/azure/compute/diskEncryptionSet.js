"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskEncryptionSet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Disk Encryption Set.
 *
 * > **NOTE:** At this time the Key Vault used to store the Active Key for this Disk Encryption Set must have both Soft Delete & Purge Protection enabled - which are not yet supported by this provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "des-example-keyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     enabledForDiskEncryption: true,
 *     purgeProtectionEnabled: true,
 * });
 * const example_user = new azure.keyvault.AccessPolicy("example-user", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "List",
 *         "Decrypt",
 *         "Sign",
 *         "GetRotationPolicy",
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "des-example-key",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [example_user],
 * });
 * const exampleDiskEncryptionSet = new azure.compute.DiskEncryptionSet("example", {
 *     name: "des",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     keyVaultKeyId: exampleKey.id,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const example_disk = new azure.keyvault.AccessPolicy("example-disk", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: exampleDiskEncryptionSet.identity.apply(identity => identity.tenantId),
 *     objectId: exampleDiskEncryptionSet.identity.apply(identity => identity.principalId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "List",
 *         "Decrypt",
 *         "Sign",
 *     ],
 * });
 * const example_diskAssignment = new azure.authorization.Assignment("example-disk", {
 *     scope: exampleKeyVault.id,
 *     roleDefinitionName: "Key Vault Crypto Service Encryption User",
 *     principalId: exampleDiskEncryptionSet.identity.apply(identity => identity.principalId),
 * });
 * ```
 *
 * ### With Automatic Key Rotation Enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "des-example-keyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     enabledForDiskEncryption: true,
 *     purgeProtectionEnabled: true,
 * });
 * const example_user = new azure.keyvault.AccessPolicy("example-user", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "List",
 *         "Decrypt",
 *         "Sign",
 *         "GetRotationPolicy",
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "des-example-key",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [example_user],
 * });
 * const exampleDiskEncryptionSet = new azure.compute.DiskEncryptionSet("example", {
 *     name: "des",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     keyVaultKeyId: exampleKey.versionlessId,
 *     autoKeyRotationEnabled: true,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const example_disk = new azure.keyvault.AccessPolicy("example-disk", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: exampleDiskEncryptionSet.identity.apply(identity => identity.tenantId),
 *     objectId: exampleDiskEncryptionSet.identity.apply(identity => identity.principalId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "List",
 *         "Decrypt",
 *         "Sign",
 *     ],
 * });
 * const example_diskAssignment = new azure.authorization.Assignment("example-disk", {
 *     scope: exampleKeyVault.id,
 *     roleDefinitionName: "Key Vault Crypto Service Encryption User",
 *     principalId: exampleDiskEncryptionSet.identity.apply(identity => identity.principalId),
 * });
 * ```
 *
 * ## Import
 *
 * Disk Encryption Sets can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/diskEncryptionSet:DiskEncryptionSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/diskEncryptionSets/encryptionSet1
 * ```
 */
class DiskEncryptionSet extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoKeyRotationEnabled"] = state ? state.autoKeyRotationEnabled : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["federatedClientId"] = state ? state.federatedClientId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["keyVaultKeyUrl"] = state ? state.keyVaultKeyUrl : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedHsmKeyId"] = state ? state.managedHsmKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["autoKeyRotationEnabled"] = args ? args.autoKeyRotationEnabled : undefined;
            resourceInputs["encryptionType"] = args ? args.encryptionType : undefined;
            resourceInputs["federatedClientId"] = args ? args.federatedClientId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedHsmKeyId"] = args ? args.managedHsmKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["keyVaultKeyUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskEncryptionSet.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DiskEncryptionSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DiskEncryptionSet(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DiskEncryptionSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskEncryptionSet.__pulumiType;
    }
}
exports.DiskEncryptionSet = DiskEncryptionSet;
/** @internal */
DiskEncryptionSet.__pulumiType = 'azure:compute/diskEncryptionSet:DiskEncryptionSet';
//# sourceMappingURL=diskEncryptionSet.js.map