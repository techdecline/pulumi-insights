"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GalleryApplicationAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Virtual Machine Gallery Application Assignment.
 *
 * > **Note:** Gallery Application Assignments can be defined either directly on `azure.compute.LinuxVirtualMachine` and `azure.compute.WindowsVirtualMachine` resources, or using the `azure.compute.GalleryApplicationAssignment` resource - but the two approaches cannot be used together. If both are used with the same Virtual Machine, spurious changes will occur. It's recommended to use `ignoreChanges` for the `galleryApplication` block on the associated virtual machine resources, to avoid a persistent diff when using this resource.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.compute.getVirtualMachine({
 *     name: "example-vm",
 *     resourceGroupName: "example-resources-vm",
 * });
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleSharedImageGallery = new azure.compute.SharedImageGallery("example", {
 *     name: "examplegallery",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const exampleGalleryApplication = new azure.compute.GalleryApplication("example", {
 *     name: "example-app",
 *     galleryId: exampleSharedImageGallery.id,
 *     location: exampleResourceGroup.location,
 *     supportedOsType: "Linux",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestorage",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "example-container",
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "blob",
 * });
 * const exampleBlob = new azure.storage.Blob("example", {
 *     name: "scripts",
 *     storageAccountName: exampleAccount.name,
 *     storageContainerName: exampleContainer.name,
 *     type: "Block",
 *     sourceContent: "[scripts file content]",
 * });
 * const exampleGalleryApplicationVersion = new azure.compute.GalleryApplicationVersion("example", {
 *     name: "0.0.1",
 *     galleryApplicationId: exampleGalleryApplication.id,
 *     location: exampleGalleryApplication.location,
 *     manageAction: {
 *         install: "[install command]",
 *         remove: "[remove command]",
 *     },
 *     source: {
 *         mediaLink: exampleBlob.id,
 *     },
 *     targetRegions: [{
 *         name: exampleGalleryApplication.location,
 *         regionalReplicaCount: 1,
 *     }],
 * });
 * const exampleGalleryApplicationAssignment = new azure.compute.GalleryApplicationAssignment("example", {
 *     galleryApplicationVersionId: exampleGalleryApplicationVersion.id,
 *     virtualMachineId: example.then(example => example.id),
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Machine Gallery Application Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/galleryApplicationAssignment:GalleryApplicationAssignment example subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/galleries/gallery1/applications/galleryApplication1/versions/galleryApplicationVersion1
 * ```
 */
class GalleryApplicationAssignment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configurationBlobUri"] = state ? state.configurationBlobUri : undefined;
            resourceInputs["galleryApplicationVersionId"] = state ? state.galleryApplicationVersionId : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.galleryApplicationVersionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'galleryApplicationVersionId'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["configurationBlobUri"] = args ? args.configurationBlobUri : undefined;
            resourceInputs["galleryApplicationVersionId"] = args ? args.galleryApplicationVersionId : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GalleryApplicationAssignment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GalleryApplicationAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GalleryApplicationAssignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GalleryApplicationAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GalleryApplicationAssignment.__pulumiType;
    }
}
exports.GalleryApplicationAssignment = GalleryApplicationAssignment;
/** @internal */
GalleryApplicationAssignment.__pulumiType = 'azure:compute/galleryApplicationAssignment:GalleryApplicationAssignment';
//# sourceMappingURL=galleryApplicationAssignment.js.map