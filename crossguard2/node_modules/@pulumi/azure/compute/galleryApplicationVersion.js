"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GalleryApplicationVersion = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Gallery Application Version.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleSharedImageGallery = new azure.compute.SharedImageGallery("example", {
 *     name: "examplegallery",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleGalleryApplication = new azure.compute.GalleryApplication("example", {
 *     name: "example-app",
 *     galleryId: exampleSharedImageGallery.id,
 *     location: example.location,
 *     supportedOsType: "Linux",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestorage",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "example-container",
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "blob",
 * });
 * const exampleBlob = new azure.storage.Blob("example", {
 *     name: "scripts",
 *     storageAccountName: exampleAccount.name,
 *     storageContainerName: exampleContainer.name,
 *     type: "Block",
 *     sourceContent: "[scripts file content]",
 * });
 * const exampleGalleryApplicationVersion = new azure.compute.GalleryApplicationVersion("example", {
 *     name: "0.0.1",
 *     galleryApplicationId: exampleGalleryApplication.id,
 *     location: exampleGalleryApplication.location,
 *     manageAction: {
 *         install: "[install command]",
 *         remove: "[remove command]",
 *     },
 *     source: {
 *         mediaLink: exampleBlob.id,
 *     },
 *     targetRegions: [{
 *         name: exampleGalleryApplication.location,
 *         regionalReplicaCount: 1,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Gallery Application Versions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/galleryApplicationVersion:GalleryApplicationVersion example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/galleries/gallery1/applications/galleryApplication1/versions/galleryApplicationVersion1
 * ```
 */
class GalleryApplicationVersion extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configFile"] = state ? state.configFile : undefined;
            resourceInputs["enableHealthCheck"] = state ? state.enableHealthCheck : undefined;
            resourceInputs["endOfLifeDate"] = state ? state.endOfLifeDate : undefined;
            resourceInputs["excludeFromLatest"] = state ? state.excludeFromLatest : undefined;
            resourceInputs["galleryApplicationId"] = state ? state.galleryApplicationId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["manageAction"] = state ? state.manageAction : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packageFile"] = state ? state.packageFile : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetRegions"] = state ? state.targetRegions : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.galleryApplicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'galleryApplicationId'");
            }
            if ((!args || args.manageAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'manageAction'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.targetRegions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRegions'");
            }
            resourceInputs["configFile"] = args ? args.configFile : undefined;
            resourceInputs["enableHealthCheck"] = args ? args.enableHealthCheck : undefined;
            resourceInputs["endOfLifeDate"] = args ? args.endOfLifeDate : undefined;
            resourceInputs["excludeFromLatest"] = args ? args.excludeFromLatest : undefined;
            resourceInputs["galleryApplicationId"] = args ? args.galleryApplicationId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["manageAction"] = args ? args.manageAction : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packageFile"] = args ? args.packageFile : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetRegions"] = args ? args.targetRegions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GalleryApplicationVersion.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GalleryApplicationVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GalleryApplicationVersion(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GalleryApplicationVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GalleryApplicationVersion.__pulumiType;
    }
}
exports.GalleryApplicationVersion = GalleryApplicationVersion;
/** @internal */
GalleryApplicationVersion.__pulumiType = 'azure:compute/galleryApplicationVersion:GalleryApplicationVersion';
//# sourceMappingURL=galleryApplicationVersion.js.map