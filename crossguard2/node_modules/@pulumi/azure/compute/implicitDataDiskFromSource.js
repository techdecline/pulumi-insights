"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImplicitDataDiskFromSource = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an implicit Data Disk of a Virtual Machine.
 *
 * > **Note:** The Implicit Data Disk will be deleted instantly after this resource is destroyed. If you want to detach this disk only, you may set `detachImplicitDataDiskOnDeletion` field to `true` within the `virtualMachine` block in the provider `features` block.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const config = new pulumi.Config();
 * const prefix = config.get("prefix") || "example";
 * const vmName = `${prefix}-vm`;
 * const example = new azure.core.ResourceGroup("example", {
 *     name: `${prefix}-resources`,
 *     location: "West Europe",
 * });
 * const main = new azure.network.VirtualNetwork("main", {
 *     name: `${prefix}-network`,
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const internal = new azure.network.Subnet("internal", {
 *     name: "internal",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: main.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const mainNetworkInterface = new azure.network.NetworkInterface("main", {
 *     name: `${prefix}-nic`,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: internal.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleVirtualMachine = new azure.compute.VirtualMachine("example", {
 *     name: vmName,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     networkInterfaceIds: [mainNetworkInterface.id],
 *     vmSize: "Standard_F2",
 *     storageImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         name: "myosdisk1",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Standard_LRS",
 *     },
 *     osProfile: {
 *         computerName: vmName,
 *         adminUsername: "testadmin",
 *         adminPassword: "Password1234!",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 * });
 * const exampleManagedDisk = new azure.compute.ManagedDisk("example", {
 *     name: `${vmName}-disk1`,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: 10,
 * });
 * const exampleSnapshot = new azure.compute.Snapshot("example", {
 *     name: `${vmName}-snapshot1`,
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     createOption: "Copy",
 *     sourceUri: exampleManagedDisk.id,
 * });
 * const exampleImplicitDataDiskFromSource = new azure.compute.ImplicitDataDiskFromSource("example", {
 *     name: `${vmName}-implicitdisk1`,
 *     virtualMachineId: testAzurermVirtualMachine.id,
 *     lun: 0,
 *     caching: "None",
 *     createOption: "Copy",
 *     diskSizeGb: 20,
 *     sourceResourceId: test.id,
 * });
 * ```
 *
 * ## Import
 *
 * The implicit Data Disk of the Virtual Machine can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:compute/implicitDataDiskFromSource:ImplicitDataDiskFromSource example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1/dataDisks/disk1
 * ```
 */
class ImplicitDataDiskFromSource extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["caching"] = state ? state.caching : undefined;
            resourceInputs["createOption"] = state ? state.createOption : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["lun"] = state ? state.lun : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
            resourceInputs["writeAcceleratorEnabled"] = state ? state.writeAcceleratorEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.createOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createOption'");
            }
            if ((!args || args.diskSizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSizeGb'");
            }
            if ((!args || args.lun === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lun'");
            }
            if ((!args || args.sourceResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceResourceId'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["caching"] = args ? args.caching : undefined;
            resourceInputs["createOption"] = args ? args.createOption : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["lun"] = args ? args.lun : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
            resourceInputs["writeAcceleratorEnabled"] = args ? args.writeAcceleratorEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImplicitDataDiskFromSource.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ImplicitDataDiskFromSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ImplicitDataDiskFromSource(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ImplicitDataDiskFromSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImplicitDataDiskFromSource.__pulumiType;
    }
}
exports.ImplicitDataDiskFromSource = ImplicitDataDiskFromSource;
/** @internal */
ImplicitDataDiskFromSource.__pulumiType = 'azure:compute/implicitDataDiskFromSource:ImplicitDataDiskFromSource';
//# sourceMappingURL=implicitDataDiskFromSource.js.map