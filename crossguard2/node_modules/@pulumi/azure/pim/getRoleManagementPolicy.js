"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoleManagementPolicyOutput = exports.getRoleManagementPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Use this data source to get information on a role policy for an Azure Management Group, Subscription, Resource Group or resource.
 *
 * ## Example Usage
 *
 * ### Resource Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.core.getResourceGroup({
 *     name: "example-rg",
 * });
 * const rgContributor = example.then(example => azure.authorization.getRoleDefinition({
 *     name: "Contributor",
 *     scope: example.id,
 * }));
 * const exampleGetRoleManagementPolicy = azure.pim.getRoleManagementPolicy({
 *     scope: test.id,
 *     roleDefinitionId: contributor.id,
 * });
 * ```
 *
 * ### Management Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.management.getGroup({
 *     name: "example-group",
 * });
 * const mgContributor = azure.authorization.getRoleDefinition({
 *     name: "Contributor",
 *     scope: exampleAzurermManagementGroup.id,
 * });
 * const exampleGetRoleManagementPolicy = Promise.all([example, mgContributor]).then(([example, mgContributor]) => azure.pim.getRoleManagementPolicy({
 *     scope: example.id,
 *     roleDefinitionId: mgContributor.id,
 * }));
 * ```
 */
function getRoleManagementPolicy(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:pim/getRoleManagementPolicy:getRoleManagementPolicy", {
        "roleDefinitionId": args.roleDefinitionId,
        "scope": args.scope,
    }, opts);
}
exports.getRoleManagementPolicy = getRoleManagementPolicy;
/**
 * Use this data source to get information on a role policy for an Azure Management Group, Subscription, Resource Group or resource.
 *
 * ## Example Usage
 *
 * ### Resource Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.core.getResourceGroup({
 *     name: "example-rg",
 * });
 * const rgContributor = example.then(example => azure.authorization.getRoleDefinition({
 *     name: "Contributor",
 *     scope: example.id,
 * }));
 * const exampleGetRoleManagementPolicy = azure.pim.getRoleManagementPolicy({
 *     scope: test.id,
 *     roleDefinitionId: contributor.id,
 * });
 * ```
 *
 * ### Management Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.management.getGroup({
 *     name: "example-group",
 * });
 * const mgContributor = azure.authorization.getRoleDefinition({
 *     name: "Contributor",
 *     scope: exampleAzurermManagementGroup.id,
 * });
 * const exampleGetRoleManagementPolicy = Promise.all([example, mgContributor]).then(([example, mgContributor]) => azure.pim.getRoleManagementPolicy({
 *     scope: example.id,
 *     roleDefinitionId: mgContributor.id,
 * }));
 * ```
 */
function getRoleManagementPolicyOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:pim/getRoleManagementPolicy:getRoleManagementPolicy", {
        "roleDefinitionId": args.roleDefinitionId,
        "scope": args.scope,
    }, opts);
}
exports.getRoleManagementPolicyOutput = getRoleManagementPolicyOutput;
//# sourceMappingURL=getRoleManagementPolicy.js.map