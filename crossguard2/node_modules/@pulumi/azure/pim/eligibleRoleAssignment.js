"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EligibleRoleAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a PIM Eligible Role Assignment.
 *
 * ## Example Usage
 *
 * ### Subscription)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as time from "@pulumiverse/time";
 *
 * const primary = azure.core.getSubscription({});
 * const example = azure.core.getClientConfig({});
 * const exampleGetRoleDefinition = azure.authorization.getRoleDefinition({
 *     name: "Reader",
 * });
 * const exampleStatic = new time.Static("example", {});
 * const exampleEligibleRoleAssignment = new azure.pim.EligibleRoleAssignment("example", {
 *     scope: primary.then(primary => primary.id),
 *     roleDefinitionId: Promise.all([primary, exampleGetRoleDefinition]).then(([primary, exampleGetRoleDefinition]) => `${primary.id}${exampleGetRoleDefinition.id}`),
 *     principalId: example.then(example => example.objectId),
 *     schedule: {
 *         startDateTime: exampleStatic.rfc3339,
 *         expiration: {
 *             durationHours: 8,
 *         },
 *     },
 *     justification: "Expiration Duration Set",
 *     ticket: {
 *         number: "1",
 *         system: "example ticket system",
 *     },
 * });
 * ```
 *
 * ### Management Group)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as time from "@pulumiverse/time";
 *
 * const example = azure.core.getClientConfig({});
 * const exampleGetRoleDefinition = azure.authorization.getRoleDefinition({
 *     name: "Reader",
 * });
 * const exampleGroup = new azure.management.Group("example", {name: "Example-Management-Group"});
 * const exampleStatic = new time.Static("example", {});
 * const exampleEligibleRoleAssignment = new azure.pim.EligibleRoleAssignment("example", {
 *     scope: exampleGroup.id,
 *     roleDefinitionId: exampleGetRoleDefinition.then(exampleGetRoleDefinition => exampleGetRoleDefinition.id),
 *     principalId: example.then(example => example.objectId),
 *     schedule: {
 *         startDateTime: exampleStatic.rfc3339,
 *         expiration: {
 *             durationHours: 8,
 *         },
 *     },
 *     justification: "Expiration Duration Set",
 *     ticket: {
 *         number: "1",
 *         system: "example ticket system",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * PIM Eligible Role Assignments can be imported using the following composite resource ID, e.g.
 *
 * ```sh
 * $ pulumi import azure:pim/eligibleRoleAssignment:EligibleRoleAssignment example /subscriptions/00000000-0000-0000-0000-000000000000|/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000
 * ```
 */
class EligibleRoleAssignment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["justification"] = state ? state.justification : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["ticket"] = state ? state.ticket : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.roleDefinitionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleDefinitionId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["justification"] = args ? args.justification : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["ticket"] = args ? args.ticket : undefined;
            resourceInputs["principalType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EligibleRoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EligibleRoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EligibleRoleAssignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EligibleRoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EligibleRoleAssignment.__pulumiType;
    }
}
exports.EligibleRoleAssignment = EligibleRoleAssignment;
/** @internal */
EligibleRoleAssignment.__pulumiType = 'azure:pim/eligibleRoleAssignment:EligibleRoleAssignment';
//# sourceMappingURL=eligibleRoleAssignment.js.map