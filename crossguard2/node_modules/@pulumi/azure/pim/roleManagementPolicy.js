"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleManagementPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manage a role policy for an Azure Management Group, Subscription, Resource Group or resource.
 *
 * ## Example Usage
 *
 * ### Resource Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "East US",
 * });
 * const rgContributor = azure.authorization.getRoleDefinitionOutput({
 *     name: "Contributor",
 *     scope: example.id,
 * });
 * const approvers = azuread.getGroup({
 *     displayName: "Example Approver Group",
 * });
 * const exampleRoleManagementPolicy = new azure.pim.RoleManagementPolicy("example", {
 *     scope: test.id,
 *     roleDefinitionId: contributor.id,
 *     activeAssignmentRules: {
 *         expireAfter: "P365D",
 *     },
 *     eligibleAssignmentRules: {
 *         expirationRequired: false,
 *     },
 *     activationRules: {
 *         maximumDuration: "PT1H",
 *         requireApproval: true,
 *         approvalStage: {
 *             primaryApprovers: [{
 *                 objectId: approvers.then(approvers => approvers.objectId),
 *                 type: "Group",
 *             }],
 *         },
 *     },
 *     notificationRules: {
 *         eligibleAssignments: {
 *             approverNotifications: {
 *                 notificationLevel: "Critical",
 *                 defaultRecipients: false,
 *                 additionalRecipients: ["someone@example.com"],
 *             },
 *         },
 *         eligibleActivations: {
 *             assigneeNotifications: {
 *                 notificationLevel: "All",
 *                 defaultRecipients: true,
 *                 additionalRecipients: ["someone.else@example.com"],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### Management Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.management.Group("example", {name: "example-group"});
 * const mgContributor = azure.authorization.getRoleDefinitionOutput({
 *     name: "Contributor",
 *     scope: example.id,
 * });
 * const exampleRoleManagementPolicy = new azure.pim.RoleManagementPolicy("example", {
 *     scope: example.id,
 *     roleDefinitionId: mgContributor.apply(mgContributor => mgContributor.id),
 *     eligibleAssignmentRules: {
 *         expirationRequired: false,
 *     },
 *     activeAssignmentRules: {
 *         expireAfter: "P90D",
 *     },
 *     activationRules: {
 *         maximumDuration: "PT1H",
 *         requireApproval: true,
 *     },
 *     notificationRules: {
 *         activeAssignments: {
 *             adminNotifications: {
 *                 notificationLevel: "Critical",
 *                 defaultRecipients: false,
 *                 additionalRecipients: ["someone@example.com"],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Because these policies are created automatically by Azure, they will auto-import on first use. They can be imported using the `resource id` of the role definition, combined with the scope id, e.g.
 *
 * ```sh
 * $ pulumi import azure:pim/roleManagementPolicy:RoleManagementPolicy example "/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|<scope>"
 * ```
 */
class RoleManagementPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["activationRules"] = state ? state.activationRules : undefined;
            resourceInputs["activeAssignmentRules"] = state ? state.activeAssignmentRules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eligibleAssignmentRules"] = state ? state.eligibleAssignmentRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationRules"] = state ? state.notificationRules : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.roleDefinitionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleDefinitionId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["activationRules"] = args ? args.activationRules : undefined;
            resourceInputs["activeAssignmentRules"] = args ? args.activeAssignmentRules : undefined;
            resourceInputs["eligibleAssignmentRules"] = args ? args.eligibleAssignmentRules : undefined;
            resourceInputs["notificationRules"] = args ? args.notificationRules : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleManagementPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RoleManagementPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RoleManagementPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RoleManagementPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleManagementPolicy.__pulumiType;
    }
}
exports.RoleManagementPolicy = RoleManagementPolicy;
/** @internal */
RoleManagementPolicy.__pulumiType = 'azure:pim/roleManagementPolicy:RoleManagementPolicy';
//# sourceMappingURL=roleManagementPolicy.js.map