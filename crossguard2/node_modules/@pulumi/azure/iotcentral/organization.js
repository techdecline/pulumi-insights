"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organization = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an IoT Central Organization
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resource",
 *     location: "West Europe",
 * });
 * const exampleApplication = new azure.iotcentral.Application("example", {
 *     name: "example-iotcentral-app",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     subDomain: "example-iotcentral-app-subdomain",
 *     displayName: "example-iotcentral-app-display-name",
 *     sku: "ST1",
 *     template: "iotc-default@1.0.0",
 *     tags: {
 *         Foo: "Bar",
 *     },
 * });
 * const exampleParent = new azure.iotcentral.Organization("example_parent", {
 *     iotcentralApplicationId: exampleApplication.id,
 *     organizationId: "example-parent-organization-id",
 *     displayName: "Org example parent",
 * });
 * const exampleOrganization = new azure.iotcentral.Organization("example", {
 *     iotcentralApplicationId: exampleApplication.id,
 *     organizationId: "example-child-organization-id",
 *     displayName: "Org example",
 *     parentOrganizationId: exampleParent.organizationId,
 * });
 * ```
 *
 * ## Import
 *
 * The IoT Central Organization can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:iotcentral/organization:Organization example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.IoTCentral/iotApps/example/organizations/example
 * ```
 */
class Organization extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["iotcentralApplicationId"] = state ? state.iotcentralApplicationId : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["parentOrganizationId"] = state ? state.parentOrganizationId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.iotcentralApplicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iotcentralApplicationId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["iotcentralApplicationId"] = args ? args.iotcentralApplicationId : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["parentOrganizationId"] = args ? args.parentOrganizationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Organization.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Organization(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Organization.__pulumiType;
    }
}
exports.Organization = Organization;
/** @internal */
Organization.__pulumiType = 'azure:iotcentral/organization:Organization';
//# sourceMappingURL=organization.js.map