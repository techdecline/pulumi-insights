import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "exampleRG-ehn-schemaGroup",
 *     location: "East US",
 * });
 * const test = new azure.eventhub.EventHubNamespace("test", {
 *     name: "example-ehn-schemaGroup",
 *     location: testAzurermResourceGroup.location,
 *     resourceGroupName: testAzurermResourceGroup.name,
 *     sku: "Standard",
 * });
 * const testNamespaceSchemaGroup = new azure.eventhub.NamespaceSchemaGroup("test", {
 *     name: "example-schemaGroup",
 *     namespaceId: test.id,
 *     schemaCompatibility: "Forward",
 *     schemaType: "Avro",
 * });
 * ```
 *
 * ## Import
 *
 * Schema Group for a EventHub Namespace can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:eventhub/namespaceSchemaGroup:NamespaceSchemaGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1/schemaGroups/group1
 * ```
 */
export declare class NamespaceSchemaGroup extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceSchemaGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceSchemaGroupState, opts?: pulumi.CustomResourceOptions): NamespaceSchemaGroup;
    /**
     * Returns true if the given object is an instance of NamespaceSchemaGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is NamespaceSchemaGroup;
    /**
     * Specifies the name of this schema group. Changing this forces a new resource to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    readonly namespaceId: pulumi.Output<string>;
    /**
     * Specifies the compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     */
    readonly schemaCompatibility: pulumi.Output<string>;
    /**
     * Specifies the Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     */
    readonly schemaType: pulumi.Output<string>;
    /**
     * Create a NamespaceSchemaGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceSchemaGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering NamespaceSchemaGroup resources.
 */
export interface NamespaceSchemaGroupState {
    /**
     * Specifies the name of this schema group. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * Specifies the compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     */
    schemaCompatibility?: pulumi.Input<string>;
    /**
     * Specifies the Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     */
    schemaType?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a NamespaceSchemaGroup resource.
 */
export interface NamespaceSchemaGroupArgs {
    /**
     * Specifies the name of this schema group. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    namespaceId: pulumi.Input<string>;
    /**
     * Specifies the compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     */
    schemaCompatibility: pulumi.Input<string>;
    /**
     * Specifies the Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     */
    schemaType: pulumi.Input<string>;
}
