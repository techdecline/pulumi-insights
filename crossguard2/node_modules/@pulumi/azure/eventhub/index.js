"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicAuthorizationRule = exports.Topic = exports.SubscriptionRule = exports.Subscription = exports.QueueAuthorizationRule = exports.Queue = exports.NamespaceSchemaGroup = exports.NamespaceCustomerManagedKey = exports.NamespaceAuthorizationRule = exports.Namespace = exports.getServiceBusNamespaceOutput = exports.getServiceBusNamespace = exports.getSasOutput = exports.getSas = exports.getNamespaceAuthorizationRuleOutput = exports.getNamespaceAuthorizationRule = exports.getNamespaceOutput = exports.getNamespace = exports.getEventhubNamespaceOutput = exports.getEventhubNamespace = exports.getEventHubOutput = exports.getEventHub = exports.getConsumeGroupOutput = exports.getConsumeGroup = exports.getClusterOutput = exports.getCluster = exports.getAuthorizationRuleOutput = exports.getAuthorizationRule = exports.EventhubNamespaceDisasterRecoveryConfig = exports.EventSubscription = exports.EventHubNamespaceAuthorizationRule = exports.EventHubNamespace = exports.EventHubConsumerGroup = exports.EventHubAuthorizationRule = exports.EventHub = exports.EventGridTopic = exports.Domain = exports.ConsumerGroup = exports.Cluster = exports.AuthorizationRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AuthorizationRule = null;
utilities.lazyLoad(exports, ["AuthorizationRule"], () => require("./authorizationRule"));
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.ConsumerGroup = null;
utilities.lazyLoad(exports, ["ConsumerGroup"], () => require("./consumerGroup"));
exports.Domain = null;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));
exports.EventGridTopic = null;
utilities.lazyLoad(exports, ["EventGridTopic"], () => require("./eventGridTopic"));
exports.EventHub = null;
utilities.lazyLoad(exports, ["EventHub"], () => require("./eventHub"));
exports.EventHubAuthorizationRule = null;
utilities.lazyLoad(exports, ["EventHubAuthorizationRule"], () => require("./eventHubAuthorizationRule"));
exports.EventHubConsumerGroup = null;
utilities.lazyLoad(exports, ["EventHubConsumerGroup"], () => require("./eventHubConsumerGroup"));
exports.EventHubNamespace = null;
utilities.lazyLoad(exports, ["EventHubNamespace"], () => require("./eventHubNamespace"));
exports.EventHubNamespaceAuthorizationRule = null;
utilities.lazyLoad(exports, ["EventHubNamespaceAuthorizationRule"], () => require("./eventHubNamespaceAuthorizationRule"));
exports.EventSubscription = null;
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));
exports.EventhubNamespaceDisasterRecoveryConfig = null;
utilities.lazyLoad(exports, ["EventhubNamespaceDisasterRecoveryConfig"], () => require("./eventhubNamespaceDisasterRecoveryConfig"));
exports.getAuthorizationRule = null;
exports.getAuthorizationRuleOutput = null;
utilities.lazyLoad(exports, ["getAuthorizationRule", "getAuthorizationRuleOutput"], () => require("./getAuthorizationRule"));
exports.getCluster = null;
exports.getClusterOutput = null;
utilities.lazyLoad(exports, ["getCluster", "getClusterOutput"], () => require("./getCluster"));
exports.getConsumeGroup = null;
exports.getConsumeGroupOutput = null;
utilities.lazyLoad(exports, ["getConsumeGroup", "getConsumeGroupOutput"], () => require("./getConsumeGroup"));
exports.getEventHub = null;
exports.getEventHubOutput = null;
utilities.lazyLoad(exports, ["getEventHub", "getEventHubOutput"], () => require("./getEventHub"));
exports.getEventhubNamespace = null;
exports.getEventhubNamespaceOutput = null;
utilities.lazyLoad(exports, ["getEventhubNamespace", "getEventhubNamespaceOutput"], () => require("./getEventhubNamespace"));
exports.getNamespace = null;
exports.getNamespaceOutput = null;
utilities.lazyLoad(exports, ["getNamespace", "getNamespaceOutput"], () => require("./getNamespace"));
exports.getNamespaceAuthorizationRule = null;
exports.getNamespaceAuthorizationRuleOutput = null;
utilities.lazyLoad(exports, ["getNamespaceAuthorizationRule", "getNamespaceAuthorizationRuleOutput"], () => require("./getNamespaceAuthorizationRule"));
exports.getSas = null;
exports.getSasOutput = null;
utilities.lazyLoad(exports, ["getSas", "getSasOutput"], () => require("./getSas"));
exports.getServiceBusNamespace = null;
exports.getServiceBusNamespaceOutput = null;
utilities.lazyLoad(exports, ["getServiceBusNamespace", "getServiceBusNamespaceOutput"], () => require("./getServiceBusNamespace"));
exports.Namespace = null;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));
exports.NamespaceAuthorizationRule = null;
utilities.lazyLoad(exports, ["NamespaceAuthorizationRule"], () => require("./namespaceAuthorizationRule"));
exports.NamespaceCustomerManagedKey = null;
utilities.lazyLoad(exports, ["NamespaceCustomerManagedKey"], () => require("./namespaceCustomerManagedKey"));
exports.NamespaceSchemaGroup = null;
utilities.lazyLoad(exports, ["NamespaceSchemaGroup"], () => require("./namespaceSchemaGroup"));
exports.Queue = null;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));
exports.QueueAuthorizationRule = null;
utilities.lazyLoad(exports, ["QueueAuthorizationRule"], () => require("./queueAuthorizationRule"));
exports.Subscription = null;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));
exports.SubscriptionRule = null;
utilities.lazyLoad(exports, ["SubscriptionRule"], () => require("./subscriptionRule"));
exports.Topic = null;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));
exports.TopicAuthorizationRule = null;
utilities.lazyLoad(exports, ["TopicAuthorizationRule"], () => require("./topicAuthorizationRule"));
__exportStar(require("./zMixins"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:eventhub/authorizationRule:AuthorizationRule":
                return new exports.AuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "azure:eventhub/consumerGroup:ConsumerGroup":
                return new exports.ConsumerGroup(name, undefined, { urn });
            case "azure:eventhub/domain:Domain":
                return new exports.Domain(name, undefined, { urn });
            case "azure:eventhub/eventGridTopic:EventGridTopic":
                return new exports.EventGridTopic(name, undefined, { urn });
            case "azure:eventhub/eventHub:EventHub":
                return new exports.EventHub(name, undefined, { urn });
            case "azure:eventhub/eventHubAuthorizationRule:EventHubAuthorizationRule":
                return new exports.EventHubAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/eventHubConsumerGroup:EventHubConsumerGroup":
                return new exports.EventHubConsumerGroup(name, undefined, { urn });
            case "azure:eventhub/eventHubNamespace:EventHubNamespace":
                return new exports.EventHubNamespace(name, undefined, { urn });
            case "azure:eventhub/eventHubNamespaceAuthorizationRule:EventHubNamespaceAuthorizationRule":
                return new exports.EventHubNamespaceAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/eventSubscription:EventSubscription":
                return new exports.EventSubscription(name, undefined, { urn });
            case "azure:eventhub/eventhubNamespaceDisasterRecoveryConfig:EventhubNamespaceDisasterRecoveryConfig":
                return new exports.EventhubNamespaceDisasterRecoveryConfig(name, undefined, { urn });
            case "azure:eventhub/namespace:Namespace":
                return new exports.Namespace(name, undefined, { urn });
            case "azure:eventhub/namespaceAuthorizationRule:NamespaceAuthorizationRule":
                return new exports.NamespaceAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey":
                return new exports.NamespaceCustomerManagedKey(name, undefined, { urn });
            case "azure:eventhub/namespaceSchemaGroup:NamespaceSchemaGroup":
                return new exports.NamespaceSchemaGroup(name, undefined, { urn });
            case "azure:eventhub/queue:Queue":
                return new exports.Queue(name, undefined, { urn });
            case "azure:eventhub/queueAuthorizationRule:QueueAuthorizationRule":
                return new exports.QueueAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/subscription:Subscription":
                return new exports.Subscription(name, undefined, { urn });
            case "azure:eventhub/subscriptionRule:SubscriptionRule":
                return new exports.SubscriptionRule(name, undefined, { urn });
            case "azure:eventhub/topic:Topic":
                return new exports.Topic(name, undefined, { urn });
            case "azure:eventhub/topicAuthorizationRule:TopicAuthorizationRule":
                return new exports.TopicAuthorizationRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "eventhub/authorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/cluster", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/consumerGroup", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/domain", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventGridTopic", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHub", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubConsumerGroup", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubNamespace", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubNamespaceAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventSubscription", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventhubNamespaceDisasterRecoveryConfig", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/namespace", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/namespaceAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/namespaceCustomerManagedKey", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/namespaceSchemaGroup", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/queue", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/queueAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/subscription", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/subscriptionRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/topic", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/topicAuthorizationRule", _module);
//# sourceMappingURL=index.js.map