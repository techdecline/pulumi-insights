"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a ServiceBus Topic.
 *
 * **Note** Topics can only be created in Namespaces with an SKU of `standard` or higher.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "tfex-servicebus-topic",
 *     location: "West Europe",
 * });
 * const exampleNamespace = new azure.servicebus.Namespace("example", {
 *     name: "tfex-servicebus-namespace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 *     tags: {
 *         source: "example",
 *     },
 * });
 * const exampleTopic = new azure.servicebus.Topic("example", {
 *     name: "tfex_servicebus_topic",
 *     namespaceId: exampleNamespace.id,
 *     partitioningEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Service Bus Topics can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:eventhub/topic:Topic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceBus/namespaces/sbns1/topics/sntopic1
 * ```
 *
 * @deprecated azure.eventhub.Topic has been deprecated in favor of azure.servicebus.Topic
 */
class Topic extends pulumi.CustomResource {
    /** @deprecated azure.eventhub.Topic has been deprecated in favor of azure.servicebus.Topic */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("Topic is deprecated: azure.eventhub.Topic has been deprecated in favor of azure.servicebus.Topic");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoDeleteOnIdle"] = state ? state.autoDeleteOnIdle : undefined;
            resourceInputs["batchedOperationsEnabled"] = state ? state.batchedOperationsEnabled : undefined;
            resourceInputs["defaultMessageTtl"] = state ? state.defaultMessageTtl : undefined;
            resourceInputs["duplicateDetectionHistoryTimeWindow"] = state ? state.duplicateDetectionHistoryTimeWindow : undefined;
            resourceInputs["expressEnabled"] = state ? state.expressEnabled : undefined;
            resourceInputs["maxMessageSizeInKilobytes"] = state ? state.maxMessageSizeInKilobytes : undefined;
            resourceInputs["maxSizeInMegabytes"] = state ? state.maxSizeInMegabytes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["partitioningEnabled"] = state ? state.partitioningEnabled : undefined;
            resourceInputs["requiresDuplicateDetection"] = state ? state.requiresDuplicateDetection : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["supportOrdering"] = state ? state.supportOrdering : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            resourceInputs["autoDeleteOnIdle"] = args ? args.autoDeleteOnIdle : undefined;
            resourceInputs["batchedOperationsEnabled"] = args ? args.batchedOperationsEnabled : undefined;
            resourceInputs["defaultMessageTtl"] = args ? args.defaultMessageTtl : undefined;
            resourceInputs["duplicateDetectionHistoryTimeWindow"] = args ? args.duplicateDetectionHistoryTimeWindow : undefined;
            resourceInputs["expressEnabled"] = args ? args.expressEnabled : undefined;
            resourceInputs["maxMessageSizeInKilobytes"] = args ? args.maxMessageSizeInKilobytes : undefined;
            resourceInputs["maxSizeInMegabytes"] = args ? args.maxSizeInMegabytes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["partitioningEnabled"] = args ? args.partitioningEnabled : undefined;
            resourceInputs["requiresDuplicateDetection"] = args ? args.requiresDuplicateDetection : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["supportOrdering"] = args ? args.supportOrdering : undefined;
            resourceInputs["namespaceName"] = undefined /*out*/;
            resourceInputs["resourceGroupName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("Topic is deprecated: azure.eventhub.Topic has been deprecated in favor of azure.servicebus.Topic");
        return new Topic(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }
}
exports.Topic = Topic;
/** @internal */
Topic.__pulumiType = 'azure:eventhub/topic:Topic';
//# sourceMappingURL=topic.js.map