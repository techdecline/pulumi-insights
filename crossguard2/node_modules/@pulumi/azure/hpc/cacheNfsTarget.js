"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheNfsTarget = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a NFS Target within a HPC Cache.
 *
 * > **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "examplevn",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleHpc = new azure.network.Subnet("example_hpc", {
 *     name: "examplesubnethpc",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const exampleCache = new azure.hpc.Cache("example", {
 *     name: "examplehpccache",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     cacheSizeInGb: 3072,
 *     subnetId: exampleHpc.id,
 *     skuName: "Standard_2G",
 * });
 * const exampleVm = new azure.network.Subnet("example_vm", {
 *     name: "examplesubnetvm",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "examplenic",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: exampleVm.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const customData = `#!/bin/bash
 * sudo -i
 * apt-get install -y nfs-kernel-server
 * mkdir -p /export/a/1
 * mkdir -p /export/a/2
 * mkdir -p /export/b
 * cat << EOF > /etc/exports
 * /export/a *(rw,fsid=0,insecure,no_subtree_check,async)
 * /export/b *(rw,fsid=0,insecure,no_subtree_check,async)
 * EOF
 * systemctl start nfs-server
 * exportfs -arv
 * `;
 * const exampleLinuxVirtualMachine = new azure.compute.LinuxVirtualMachine("example", {
 *     name: "examplevm",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     size: "Standard_F2",
 *     adminUsername: "adminuser",
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     adminSshKeys: [{
 *         username: "adminuser",
 *         publicKey: std.file({
 *             input: "~/.ssh/id_rsa.pub",
 *         }).then(invoke => invoke.result),
 *     }],
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     sourceImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     customData: std.base64encode({
 *         input: customData,
 *     }).then(invoke => invoke.result),
 * });
 * const exampleCacheNfsTarget = new azure.hpc.CacheNfsTarget("example", {
 *     name: "examplehpcnfstarget",
 *     resourceGroupName: example.name,
 *     cacheName: exampleCache.name,
 *     targetHostName: exampleLinuxVirtualMachine.privateIpAddress,
 *     usageModel: "READ_HEAVY_INFREQ",
 *     namespaceJunctions: [
 *         {
 *             namespacePath: "/nfs/a1",
 *             nfsExport: "/export/a",
 *             targetPath: "1",
 *         },
 *         {
 *             namespacePath: "/nfs/b",
 *             nfsExport: "/export/b",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * NFS Target within a HPC Cache can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:hpc/cacheNfsTarget:CacheNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
 * ```
 */
class CacheNfsTarget extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cacheName"] = state ? state.cacheName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceJunctions"] = state ? state.namespaceJunctions : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["targetHostName"] = state ? state.targetHostName : undefined;
            resourceInputs["usageModel"] = state ? state.usageModel : undefined;
            resourceInputs["verificationTimerInSeconds"] = state ? state.verificationTimerInSeconds : undefined;
            resourceInputs["writeBackTimerInSeconds"] = state ? state.writeBackTimerInSeconds : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cacheName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheName'");
            }
            if ((!args || args.namespaceJunctions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceJunctions'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.targetHostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetHostName'");
            }
            if ((!args || args.usageModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usageModel'");
            }
            resourceInputs["cacheName"] = args ? args.cacheName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceJunctions"] = args ? args.namespaceJunctions : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["targetHostName"] = args ? args.targetHostName : undefined;
            resourceInputs["usageModel"] = args ? args.usageModel : undefined;
            resourceInputs["verificationTimerInSeconds"] = args ? args.verificationTimerInSeconds : undefined;
            resourceInputs["writeBackTimerInSeconds"] = args ? args.writeBackTimerInSeconds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheNfsTarget.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CacheNfsTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CacheNfsTarget(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CacheNfsTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheNfsTarget.__pulumiType;
    }
}
exports.CacheNfsTarget = CacheNfsTarget;
/** @internal */
CacheNfsTarget.__pulumiType = 'azure:hpc/cacheNfsTarget:CacheNfsTarget';
//# sourceMappingURL=cacheNfsTarget.js.map