"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupInstanceMysqlFlexibleServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Backup Instance to back up MySQL Flexible Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleFlexibleServer = new azure.mysql.FlexibleServer("example", {
 *     name: "example-mysqlfs",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorLogin: "adminTerraform",
 *     administratorPassword: "QAZwsx123",
 *     version: "8.0.21",
 *     skuName: "B_Standard_B1s",
 *     zone: "1",
 * });
 * const exampleBackupVault = new azure.dataprotection.BackupVault("example", {
 *     name: "example-backupvault",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     datastoreType: "VaultStore",
 *     redundancy: "LocallyRedundant",
 *     softDelete: "Off",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: example.id,
 *     roleDefinitionName: "Reader",
 *     principalId: exampleBackupVault.identity.apply(identity => identity?.principalId),
 * });
 * const example2 = new azure.authorization.Assignment("example2", {
 *     scope: exampleFlexibleServer.id,
 *     roleDefinitionName: "MySQL Backup And Export Operator",
 *     principalId: exampleBackupVault.identity.apply(identity => identity?.principalId),
 * });
 * const exampleBackupPolicyMysqlFlexibleServer = new azure.dataprotection.BackupPolicyMysqlFlexibleServer("example", {
 *     name: "example-dp",
 *     vaultId: exampleBackupVault.id,
 *     backupRepeatingTimeIntervals: ["R/2021-05-23T02:30:00+00:00/P1W"],
 *     defaultRetentionRule: {
 *         lifeCycles: [{
 *             duration: "P4M",
 *             dataStoreType: "VaultStore",
 *         }],
 *     },
 * }, {
 *     dependsOn: [
 *         exampleAssignment,
 *         example2,
 *     ],
 * });
 * const exampleBackupInstanceMysqlFlexibleServer = new azure.dataprotection.BackupInstanceMysqlFlexibleServer("example", {
 *     name: "example-dbi",
 *     location: example.location,
 *     vaultId: exampleBackupVault.id,
 *     serverId: exampleFlexibleServer.id,
 *     backupPolicyId: exampleBackupPolicyMysqlFlexibleServer.id,
 * });
 * ```
 *
 * ## Import
 *
 * Backup Instance MySQL Flexible Servers can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dataprotection/backupInstanceMysqlFlexibleServer:BackupInstanceMysqlFlexibleServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
 * ```
 */
class BackupInstanceMysqlFlexibleServer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["backupPolicyId"] = state ? state.backupPolicyId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.backupPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupPolicyId'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["backupPolicyId"] = args ? args.backupPolicyId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupInstanceMysqlFlexibleServer.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing BackupInstanceMysqlFlexibleServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BackupInstanceMysqlFlexibleServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BackupInstanceMysqlFlexibleServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupInstanceMysqlFlexibleServer.__pulumiType;
    }
}
exports.BackupInstanceMysqlFlexibleServer = BackupInstanceMysqlFlexibleServer;
/** @internal */
BackupInstanceMysqlFlexibleServer.__pulumiType = 'azure:dataprotection/backupInstanceMysqlFlexibleServer:BackupInstanceMysqlFlexibleServer';
//# sourceMappingURL=backupInstanceMysqlFlexibleServer.js.map