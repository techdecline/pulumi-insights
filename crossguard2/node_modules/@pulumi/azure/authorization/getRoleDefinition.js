"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoleDefinitionOutput = exports.getRoleDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Use this data source to access information about an existing Role Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = azure.core.getSubscription({});
 * const customRoleDefinition = new azure.authorization.RoleDefinition("custom", {
 *     roleDefinitionId: "00000000-0000-0000-0000-000000000000",
 *     name: "CustomRoleDef",
 *     scope: primary.then(primary => primary.id),
 * });
 * const custom = pulumi.all([customRoleDefinition.roleDefinitionId, primary]).apply(([roleDefinitionId, primary]) => azure.authorization.getRoleDefinitionOutput({
 *     roleDefinitionId: roleDefinitionId,
 *     scope: primary.id,
 * }));
 * const custom-byname = pulumi.all([customRoleDefinition.name, primary]).apply(([name, primary]) => azure.authorization.getRoleDefinitionOutput({
 *     name: name,
 *     scope: primary.id,
 * }));
 * const builtin = azure.authorization.getRoleDefinition({
 *     name: "Contributor",
 * });
 * export const customRoleDefinitionId = custom.apply(custom => custom.id);
 * export const contributorRoleDefinitionId = builtin.then(builtin => builtin.id);
 * ```
 */
function getRoleDefinition(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure:authorization/getRoleDefinition:getRoleDefinition", {
        "name": args.name,
        "roleDefinitionId": args.roleDefinitionId,
        "scope": args.scope,
    }, opts);
}
exports.getRoleDefinition = getRoleDefinition;
/**
 * Use this data source to access information about an existing Role Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = azure.core.getSubscription({});
 * const customRoleDefinition = new azure.authorization.RoleDefinition("custom", {
 *     roleDefinitionId: "00000000-0000-0000-0000-000000000000",
 *     name: "CustomRoleDef",
 *     scope: primary.then(primary => primary.id),
 * });
 * const custom = pulumi.all([customRoleDefinition.roleDefinitionId, primary]).apply(([roleDefinitionId, primary]) => azure.authorization.getRoleDefinitionOutput({
 *     roleDefinitionId: roleDefinitionId,
 *     scope: primary.id,
 * }));
 * const custom-byname = pulumi.all([customRoleDefinition.name, primary]).apply(([name, primary]) => azure.authorization.getRoleDefinitionOutput({
 *     name: name,
 *     scope: primary.id,
 * }));
 * const builtin = azure.authorization.getRoleDefinition({
 *     name: "Contributor",
 * });
 * export const customRoleDefinitionId = custom.apply(custom => custom.id);
 * export const contributorRoleDefinitionId = builtin.then(builtin => builtin.id);
 * ```
 */
function getRoleDefinitionOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure:authorization/getRoleDefinition:getRoleDefinition", {
        "name": args.name,
        "roleDefinitionId": args.roleDefinitionId,
        "scope": args.scope,
    }, opts);
}
exports.getRoleDefinitionOutput = getRoleDefinitionOutput;
//# sourceMappingURL=getRoleDefinition.js.map