import * as pulumi from "@pulumi/pulumi";
/**
 * <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
 *
 * Manages a User Assigned Identity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     location: example.location,
 *     name: "example",
 *     resourceGroupName: example.name,
 * });
 * ```
 *
 * ## Import
 *
 * An existing User Assigned Identity can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:authorization/userAssignedIdentity:UserAssignedIdentity example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{userAssignedIdentityName}
 * ```
 *
 * * Where `{subscriptionId}` is the ID of the Azure Subscription where the User Assigned Identity exists. For example `12345678-1234-9876-4563-123456789012`.
 *
 * * Where `{resourceGroupName}` is the name of Resource Group where this User Assigned Identity exists. For example `example-resource-group`.
 *
 * * Where `{userAssignedIdentityName}` is the name of the User Assigned Identity. For example `userAssignedIdentityValue`.
 */
export declare class UserAssignedIdentity extends pulumi.CustomResource {
    /**
     * Get an existing UserAssignedIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserAssignedIdentityState, opts?: pulumi.CustomResourceOptions): UserAssignedIdentity;
    /**
     * Returns true if the given object is an instance of UserAssignedIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is UserAssignedIdentity;
    /**
     * The ID of the app associated with the Identity.
     */
    readonly clientId: pulumi.Output<string>;
    /**
     * The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the Service Principal object associated with the created Identity.
     */
    readonly principalId: pulumi.Output<string>;
    /**
     * Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the User Assigned Identity.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The ID of the Tenant which the Identity belongs to.
     */
    readonly tenantId: pulumi.Output<string>;
    /**
     * Create a UserAssignedIdentity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserAssignedIdentityArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering UserAssignedIdentity resources.
 */
export interface UserAssignedIdentityState {
    /**
     * The ID of the app associated with the Identity.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Service Principal object associated with the created Identity.
     */
    principalId?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the User Assigned Identity.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The ID of the Tenant which the Identity belongs to.
     */
    tenantId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a UserAssignedIdentity resource.
 */
export interface UserAssignedIdentityArgs {
    /**
     * The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the User Assigned Identity.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
