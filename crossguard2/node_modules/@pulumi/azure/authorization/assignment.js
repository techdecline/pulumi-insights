"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Assigns a given Principal (User or Group) to a given Role.
 *
 * ## Example Usage
 *
 * ### Using A Built-In Role)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = azure.core.getSubscription({});
 * const example = azure.core.getClientConfig({});
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: primary.then(primary => primary.id),
 *     roleDefinitionName: "Reader",
 *     principalId: example.then(example => example.objectId),
 * });
 * ```
 *
 * ### Custom Role & Service Principal)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = azure.core.getSubscription({});
 * const example = azure.core.getClientConfig({});
 * const exampleRoleDefinition = new azure.authorization.RoleDefinition("example", {
 *     roleDefinitionId: "00000000-0000-0000-0000-000000000000",
 *     name: "my-custom-role-definition",
 *     scope: primary.then(primary => primary.id),
 *     permissions: [{
 *         actions: ["Microsoft.Resources/subscriptions/resourceGroups/read"],
 *         notActions: [],
 *     }],
 *     assignableScopes: [primary.then(primary => primary.id)],
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     name: "00000000-0000-0000-0000-000000000000",
 *     scope: primary.then(primary => primary.id),
 *     roleDefinitionId: exampleRoleDefinition.roleDefinitionResourceId,
 *     principalId: example.then(example => example.objectId),
 * });
 * ```
 *
 * ### Custom Role & User)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = azure.core.getSubscription({});
 * const example = azure.core.getClientConfig({});
 * const exampleRoleDefinition = new azure.authorization.RoleDefinition("example", {
 *     roleDefinitionId: "00000000-0000-0000-0000-000000000000",
 *     name: "my-custom-role-definition",
 *     scope: primary.then(primary => primary.id),
 *     permissions: [{
 *         actions: ["Microsoft.Resources/subscriptions/resourceGroups/read"],
 *         notActions: [],
 *     }],
 *     assignableScopes: [primary.then(primary => primary.id)],
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     name: "00000000-0000-0000-0000-000000000000",
 *     scope: primary.then(primary => primary.id),
 *     roleDefinitionId: exampleRoleDefinition.roleDefinitionResourceId,
 *     principalId: example.then(example => example.objectId),
 * });
 * ```
 *
 * ### Custom Role & Management Group)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = azure.core.getSubscription({});
 * const example = azure.core.getClientConfig({});
 * const exampleGetGroup = azure.management.getGroup({
 *     name: "00000000-0000-0000-0000-000000000000",
 * });
 * const exampleRoleDefinition = new azure.authorization.RoleDefinition("example", {
 *     roleDefinitionId: "00000000-0000-0000-0000-000000000000",
 *     name: "my-custom-role-definition",
 *     scope: primary.then(primary => primary.id),
 *     permissions: [{
 *         actions: ["Microsoft.Resources/subscriptions/resourceGroups/read"],
 *         notActions: [],
 *     }],
 *     assignableScopes: [primary.then(primary => primary.id)],
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     name: "00000000-0000-0000-0000-000000000000",
 *     scope: primaryAzurermManagementGroup.id,
 *     roleDefinitionId: exampleRoleDefinition.roleDefinitionResourceId,
 *     principalId: example.then(example => example.objectId),
 * });
 * ```
 *
 * ### ABAC Condition)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const primary = azure.core.getSubscription({});
 * const example = azure.core.getClientConfig({});
 * const builtin = azure.authorization.getRoleDefinition({
 *     name: "Reader",
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     roleDefinitionName: "Role Based Access Control Administrator",
 *     scope: primary.then(primary => primary.id),
 *     principalId: example.then(example => example.objectId),
 *     principalType: "ServicePrincipal",
 *     description: "Role Based Access Control Administrator role assignment with ABAC Condition.",
 *     conditionVersion: "2.0",
 *     condition: Promise.all([builtin.then(builtin => std.basename({
 *         input: builtin.roleDefinitionId,
 *     })), builtin.then(builtin => std.basename({
 *         input: builtin.roleDefinitionId,
 *     }))]).then(([invoke, invoke1]) => `(
 *  (
 *   !(ActionMatches{'Microsoft.Authorization/roleAssignments/write'})
 *  )
 *  OR
 *  (
 *   @Request[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {${invoke.result}}
 *  )
 * )
 * AND
 * (
 *  (
 *   !(ActionMatches{'Microsoft.Authorization/roleAssignments/delete'})
 *  )
 *  OR
 *  (
 *   @Resource[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {${invoke1.result}}
 *  )
 * )
 * `),
 * });
 * ```
 *
 * ## Import
 *
 * Role Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:authorization/assignment:Assignment example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000
 * ```
 *
 * * for scope `Subscription`, the id format is `/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000`
 *
 * * for scope `Resource Group`, the id format is `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000`
 *
 * * for scope referencing a Key Vault, the id format is `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.KeyVault/vaults/vaultname/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000`
 *
 * text
 *
 * /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000
 */
class Assignment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["conditionVersion"] = state ? state.conditionVersion : undefined;
            resourceInputs["delegatedManagedIdentityResourceId"] = state ? state.delegatedManagedIdentityResourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["roleDefinitionName"] = state ? state.roleDefinitionName : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["skipServicePrincipalAadCheck"] = state ? state.skipServicePrincipalAadCheck : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["conditionVersion"] = args ? args.conditionVersion : undefined;
            resourceInputs["delegatedManagedIdentityResourceId"] = args ? args.delegatedManagedIdentityResourceId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["principalType"] = args ? args.principalType : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["roleDefinitionName"] = args ? args.roleDefinitionName : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["skipServicePrincipalAadCheck"] = args ? args.skipServicePrincipalAadCheck : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:role/assignment:Assignment" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Assignment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Assignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Assignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Assignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Assignment.__pulumiType;
    }
}
exports.Assignment = Assignment;
/** @internal */
Assignment.__pulumiType = 'azure:authorization/assignment:Assignment';
//# sourceMappingURL=assignment.js.map