"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomLocation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Custom Location within an Extended Location.
 *
 * > **Note:** Installing and configuring the Azure Arc Agent on your Kubernetes Cluster to establish connectivity is outside the scope of this document. For more details refer to [Deploy agents to your cluster](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/conceptual-agent-overview#deploy-agents-to-your-cluster) and [Connect an existing Kubernetes Cluster](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/quickstart-connect-cluster?tabs=azure-cli#connect-an-existing-kubernetes-cluster). If you encounter issues connecting your Kubernetes Cluster to Azure Arc, we'd recommend opening a ticket with Microsoft Support.
 *
 * ## Import
 *
 * Custom Locations can be imported using the resource id, e.g.
 *
 * ```sh
 * $ pulumi import azure:extendedlocation/customLocation:CustomLocation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-resources/providers/Microsoft.ExtendedLocation/customLocations/example-custom-location
 * ```
 */
class CustomLocation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["clusterExtensionIds"] = state ? state.clusterExtensionIds : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["hostResourceId"] = state ? state.hostResourceId : undefined;
            resourceInputs["hostType"] = state ? state.hostType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterExtensionIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterExtensionIds'");
            }
            if ((!args || args.hostResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostResourceId'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["clusterExtensionIds"] = args ? args.clusterExtensionIds : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["hostResourceId"] = args ? args.hostResourceId : undefined;
            resourceInputs["hostType"] = args ? args.hostType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomLocation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CustomLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CustomLocation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CustomLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomLocation.__pulumiType;
    }
}
exports.CustomLocation = CustomLocation;
/** @internal */
CustomLocation.__pulumiType = 'azure:extendedlocation/customLocation:CustomLocation';
//# sourceMappingURL=customLocation.js.map