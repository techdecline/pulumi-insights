"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoneVirtualNetworkLink = exports.Zone = exports.TxtRecord = exports.SRVRecord = exports.ResolverVirtualNetworkLink = exports.ResolverOutboundEndpoint = exports.ResolverInboundEndpoint = exports.ResolverForwardingRule = exports.ResolverDnsForwardingRuleset = exports.Resolver = exports.PTRRecord = exports.MxRecord = exports.LinkService = exports.getZoneVirtualNetworkLinkOutput = exports.getZoneVirtualNetworkLink = exports.getTxtRecordOutput = exports.getTxtRecord = exports.getSrvRecordOutput = exports.getSrvRecord = exports.getSoaRecordOutput = exports.getSoaRecord = exports.getResolverVirtualNetworkLinkOutput = exports.getResolverVirtualNetworkLink = exports.getResolverOutboundEndpointOutput = exports.getResolverOutboundEndpoint = exports.getResolverInboundEndpointOutput = exports.getResolverInboundEndpoint = exports.getResolverForwardingRuleOutput = exports.getResolverForwardingRule = exports.getResolverDnsForwardingRulesetOutput = exports.getResolverDnsForwardingRuleset = exports.getResolverOutput = exports.getResolver = exports.getPtrRecordOutput = exports.getPtrRecord = exports.getMxRecordOutput = exports.getMxRecord = exports.getDnsZoneOutput = exports.getDnsZone = exports.getCnameRecordOutput = exports.getCnameRecord = exports.getARecordOutput = exports.getARecord = exports.getAAAARecordOutput = exports.getAAAARecord = exports.CnameRecord = exports.ARecord = exports.AAAARecord = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AAAARecord = null;
utilities.lazyLoad(exports, ["AAAARecord"], () => require("./aaaarecord"));
exports.ARecord = null;
utilities.lazyLoad(exports, ["ARecord"], () => require("./arecord"));
exports.CnameRecord = null;
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));
exports.getAAAARecord = null;
exports.getAAAARecordOutput = null;
utilities.lazyLoad(exports, ["getAAAARecord", "getAAAARecordOutput"], () => require("./getAAAARecord"));
exports.getARecord = null;
exports.getARecordOutput = null;
utilities.lazyLoad(exports, ["getARecord", "getARecordOutput"], () => require("./getARecord"));
exports.getCnameRecord = null;
exports.getCnameRecordOutput = null;
utilities.lazyLoad(exports, ["getCnameRecord", "getCnameRecordOutput"], () => require("./getCnameRecord"));
exports.getDnsZone = null;
exports.getDnsZoneOutput = null;
utilities.lazyLoad(exports, ["getDnsZone", "getDnsZoneOutput"], () => require("./getDnsZone"));
exports.getMxRecord = null;
exports.getMxRecordOutput = null;
utilities.lazyLoad(exports, ["getMxRecord", "getMxRecordOutput"], () => require("./getMxRecord"));
exports.getPtrRecord = null;
exports.getPtrRecordOutput = null;
utilities.lazyLoad(exports, ["getPtrRecord", "getPtrRecordOutput"], () => require("./getPtrRecord"));
exports.getResolver = null;
exports.getResolverOutput = null;
utilities.lazyLoad(exports, ["getResolver", "getResolverOutput"], () => require("./getResolver"));
exports.getResolverDnsForwardingRuleset = null;
exports.getResolverDnsForwardingRulesetOutput = null;
utilities.lazyLoad(exports, ["getResolverDnsForwardingRuleset", "getResolverDnsForwardingRulesetOutput"], () => require("./getResolverDnsForwardingRuleset"));
exports.getResolverForwardingRule = null;
exports.getResolverForwardingRuleOutput = null;
utilities.lazyLoad(exports, ["getResolverForwardingRule", "getResolverForwardingRuleOutput"], () => require("./getResolverForwardingRule"));
exports.getResolverInboundEndpoint = null;
exports.getResolverInboundEndpointOutput = null;
utilities.lazyLoad(exports, ["getResolverInboundEndpoint", "getResolverInboundEndpointOutput"], () => require("./getResolverInboundEndpoint"));
exports.getResolverOutboundEndpoint = null;
exports.getResolverOutboundEndpointOutput = null;
utilities.lazyLoad(exports, ["getResolverOutboundEndpoint", "getResolverOutboundEndpointOutput"], () => require("./getResolverOutboundEndpoint"));
exports.getResolverVirtualNetworkLink = null;
exports.getResolverVirtualNetworkLinkOutput = null;
utilities.lazyLoad(exports, ["getResolverVirtualNetworkLink", "getResolverVirtualNetworkLinkOutput"], () => require("./getResolverVirtualNetworkLink"));
exports.getSoaRecord = null;
exports.getSoaRecordOutput = null;
utilities.lazyLoad(exports, ["getSoaRecord", "getSoaRecordOutput"], () => require("./getSoaRecord"));
exports.getSrvRecord = null;
exports.getSrvRecordOutput = null;
utilities.lazyLoad(exports, ["getSrvRecord", "getSrvRecordOutput"], () => require("./getSrvRecord"));
exports.getTxtRecord = null;
exports.getTxtRecordOutput = null;
utilities.lazyLoad(exports, ["getTxtRecord", "getTxtRecordOutput"], () => require("./getTxtRecord"));
exports.getZoneVirtualNetworkLink = null;
exports.getZoneVirtualNetworkLinkOutput = null;
utilities.lazyLoad(exports, ["getZoneVirtualNetworkLink", "getZoneVirtualNetworkLinkOutput"], () => require("./getZoneVirtualNetworkLink"));
exports.LinkService = null;
utilities.lazyLoad(exports, ["LinkService"], () => require("./linkService"));
exports.MxRecord = null;
utilities.lazyLoad(exports, ["MxRecord"], () => require("./mxRecord"));
exports.PTRRecord = null;
utilities.lazyLoad(exports, ["PTRRecord"], () => require("./ptrrecord"));
exports.Resolver = null;
utilities.lazyLoad(exports, ["Resolver"], () => require("./resolver"));
exports.ResolverDnsForwardingRuleset = null;
utilities.lazyLoad(exports, ["ResolverDnsForwardingRuleset"], () => require("./resolverDnsForwardingRuleset"));
exports.ResolverForwardingRule = null;
utilities.lazyLoad(exports, ["ResolverForwardingRule"], () => require("./resolverForwardingRule"));
exports.ResolverInboundEndpoint = null;
utilities.lazyLoad(exports, ["ResolverInboundEndpoint"], () => require("./resolverInboundEndpoint"));
exports.ResolverOutboundEndpoint = null;
utilities.lazyLoad(exports, ["ResolverOutboundEndpoint"], () => require("./resolverOutboundEndpoint"));
exports.ResolverVirtualNetworkLink = null;
utilities.lazyLoad(exports, ["ResolverVirtualNetworkLink"], () => require("./resolverVirtualNetworkLink"));
exports.SRVRecord = null;
utilities.lazyLoad(exports, ["SRVRecord"], () => require("./srvrecord"));
exports.TxtRecord = null;
utilities.lazyLoad(exports, ["TxtRecord"], () => require("./txtRecord"));
exports.Zone = null;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));
exports.ZoneVirtualNetworkLink = null;
utilities.lazyLoad(exports, ["ZoneVirtualNetworkLink"], () => require("./zoneVirtualNetworkLink"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:privatedns/aAAARecord:AAAARecord":
                return new exports.AAAARecord(name, undefined, { urn });
            case "azure:privatedns/aRecord:ARecord":
                return new exports.ARecord(name, undefined, { urn });
            case "azure:privatedns/cnameRecord:CnameRecord":
                return new exports.CnameRecord(name, undefined, { urn });
            case "azure:privatedns/linkService:LinkService":
                return new exports.LinkService(name, undefined, { urn });
            case "azure:privatedns/mxRecord:MxRecord":
                return new exports.MxRecord(name, undefined, { urn });
            case "azure:privatedns/pTRRecord:PTRRecord":
                return new exports.PTRRecord(name, undefined, { urn });
            case "azure:privatedns/resolver:Resolver":
                return new exports.Resolver(name, undefined, { urn });
            case "azure:privatedns/resolverDnsForwardingRuleset:ResolverDnsForwardingRuleset":
                return new exports.ResolverDnsForwardingRuleset(name, undefined, { urn });
            case "azure:privatedns/resolverForwardingRule:ResolverForwardingRule":
                return new exports.ResolverForwardingRule(name, undefined, { urn });
            case "azure:privatedns/resolverInboundEndpoint:ResolverInboundEndpoint":
                return new exports.ResolverInboundEndpoint(name, undefined, { urn });
            case "azure:privatedns/resolverOutboundEndpoint:ResolverOutboundEndpoint":
                return new exports.ResolverOutboundEndpoint(name, undefined, { urn });
            case "azure:privatedns/resolverVirtualNetworkLink:ResolverVirtualNetworkLink":
                return new exports.ResolverVirtualNetworkLink(name, undefined, { urn });
            case "azure:privatedns/sRVRecord:SRVRecord":
                return new exports.SRVRecord(name, undefined, { urn });
            case "azure:privatedns/txtRecord:TxtRecord":
                return new exports.TxtRecord(name, undefined, { urn });
            case "azure:privatedns/zone:Zone":
                return new exports.Zone(name, undefined, { urn });
            case "azure:privatedns/zoneVirtualNetworkLink:ZoneVirtualNetworkLink":
                return new exports.ZoneVirtualNetworkLink(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "privatedns/aAAARecord", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/aRecord", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/cnameRecord", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/linkService", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/mxRecord", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/pTRRecord", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/resolver", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/resolverDnsForwardingRuleset", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/resolverForwardingRule", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/resolverInboundEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/resolverOutboundEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/resolverVirtualNetworkLink", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/sRVRecord", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/txtRecord", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/zone", _module);
pulumi.runtime.registerResourceModule("azure", "privatedns/zoneVirtualNetworkLink", _module);
//# sourceMappingURL=index.js.map