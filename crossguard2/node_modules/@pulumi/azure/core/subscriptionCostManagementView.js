"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionCostManagementView = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Cost Management View for a Subscription.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.SubscriptionCostManagementView("example", {
 *     name: "example",
 *     displayName: "Cost View per Month",
 *     chartType: "StackedColumn",
 *     accumulated: false,
 *     subscriptionId: "/subscription/00000000-0000-0000-0000-000000000000",
 *     reportType: "Usage",
 *     timeframe: "MonthToDate",
 *     dataset: {
 *         granularity: "Monthly",
 *         aggregations: [{
 *             name: "totalCost",
 *             columnName: "Cost",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cost Management View for a Subscriptions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:core/subscriptionCostManagementView:SubscriptionCostManagementView example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/views/costmanagementview
 * ```
 */
class SubscriptionCostManagementView extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accumulated"] = state ? state.accumulated : undefined;
            resourceInputs["chartType"] = state ? state.chartType : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["kpis"] = state ? state.kpis : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pivots"] = state ? state.pivots : undefined;
            resourceInputs["reportType"] = state ? state.reportType : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["timeframe"] = state ? state.timeframe : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accumulated === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accumulated'");
            }
            if ((!args || args.chartType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chartType'");
            }
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.reportType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reportType'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.timeframe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeframe'");
            }
            resourceInputs["accumulated"] = args ? args.accumulated : undefined;
            resourceInputs["chartType"] = args ? args.chartType : undefined;
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["kpis"] = args ? args.kpis : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pivots"] = args ? args.pivots : undefined;
            resourceInputs["reportType"] = args ? args.reportType : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["timeframe"] = args ? args.timeframe : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubscriptionCostManagementView.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SubscriptionCostManagementView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SubscriptionCostManagementView(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SubscriptionCostManagementView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionCostManagementView.__pulumiType;
    }
}
exports.SubscriptionCostManagementView = SubscriptionCostManagementView;
/** @internal */
SubscriptionCostManagementView.__pulumiType = 'azure:core/subscriptionCostManagementView:SubscriptionCostManagementView';
//# sourceMappingURL=subscriptionCostManagementView.js.map