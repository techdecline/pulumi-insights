"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceGroupPolicyRemediation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Resource Group Policy Remediation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleDefinition = new azure.policy.Definition("example", {
 *     name: "my-policy-definition",
 *     policyType: "Custom",
 *     mode: "All",
 *     displayName: "my-policy-definition",
 *     policyRule: `    {
 *     "if": {
 *       "not": {
 *         "field": "location",
 *         "in": "[parameters('allowedLocations')]"
 *       }
 *     },
 *     "then": {
 *       "effect": "audit"
 *     }
 *   }
 * `,
 *     parameters: `    {
 *     "allowedLocations": {
 *       "type": "Array",
 *       "metadata": {
 *         "description": "The list of allowed locations for resources.",
 *         "displayName": "Allowed locations",
 *         "strongType": "location"
 *       }
 *     }
 *   }
 * `,
 * });
 * const exampleResourceGroupPolicyAssignment = new azure.core.ResourceGroupPolicyAssignment("example", {
 *     name: "example",
 *     resourceGroupId: example.id,
 *     policyDefinitionId: exampleDefinition.id,
 * });
 * const exampleResourceGroupPolicyRemediation = new azure.core.ResourceGroupPolicyRemediation("example", {
 *     name: "example-policy-remediation",
 *     resourceGroupId: example.id,
 *     policyAssignmentId: exampleResourceGroupPolicyAssignment.id,
 *     locationFilters: ["West Europe"],
 * });
 * ```
 *
 * ## Import
 *
 * Policy Remediations can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:core/resourceGroupPolicyRemediation:ResourceGroupPolicyRemediation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.PolicyInsights/remediations/remediation1
 * ```
 */
class ResourceGroupPolicyRemediation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["failurePercentage"] = state ? state.failurePercentage : undefined;
            resourceInputs["locationFilters"] = state ? state.locationFilters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parallelDeployments"] = state ? state.parallelDeployments : undefined;
            resourceInputs["policyAssignmentId"] = state ? state.policyAssignmentId : undefined;
            resourceInputs["policyDefinitionReferenceId"] = state ? state.policyDefinitionReferenceId : undefined;
            resourceInputs["resourceCount"] = state ? state.resourceCount : undefined;
            resourceInputs["resourceDiscoveryMode"] = state ? state.resourceDiscoveryMode : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policyAssignmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyAssignmentId'");
            }
            if ((!args || args.resourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupId'");
            }
            resourceInputs["failurePercentage"] = args ? args.failurePercentage : undefined;
            resourceInputs["locationFilters"] = args ? args.locationFilters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parallelDeployments"] = args ? args.parallelDeployments : undefined;
            resourceInputs["policyAssignmentId"] = args ? args.policyAssignmentId : undefined;
            resourceInputs["policyDefinitionReferenceId"] = args ? args.policyDefinitionReferenceId : undefined;
            resourceInputs["resourceCount"] = args ? args.resourceCount : undefined;
            resourceInputs["resourceDiscoveryMode"] = args ? args.resourceDiscoveryMode : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceGroupPolicyRemediation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ResourceGroupPolicyRemediation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ResourceGroupPolicyRemediation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ResourceGroupPolicyRemediation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceGroupPolicyRemediation.__pulumiType;
    }
}
exports.ResourceGroupPolicyRemediation = ResourceGroupPolicyRemediation;
/** @internal */
ResourceGroupPolicyRemediation.__pulumiType = 'azure:core/resourceGroupPolicyRemediation:ResourceGroupPolicyRemediation';
//# sourceMappingURL=resourceGroupPolicyRemediation.js.map