"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpringCloudContainerDeployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Spring Cloud Container Deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example",
 *     location: "West Europe",
 * });
 * const exampleSpringCloudService = new azure.appplatform.SpringCloudService("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     skuName: "E0",
 * });
 * const exampleSpringCloudApp = new azure.appplatform.SpringCloudApp("example", {
 *     name: "example",
 *     resourceGroupName: exampleSpringCloudService.resourceGroupName,
 *     serviceName: exampleSpringCloudService.name,
 * });
 * const exampleSpringCloudContainerDeployment = new azure.appplatform.SpringCloudContainerDeployment("example", {
 *     name: "example",
 *     springCloudAppId: exampleSpringCloudApp.id,
 *     instanceCount: 2,
 *     arguments: [
 *         "-cp",
 *         "/app/resources:/app/classes:/app/libs/*",
 *         "hello.Application",
 *     ],
 *     commands: ["java"],
 *     environmentVariables: {
 *         Foo: "Bar",
 *         Env: "Staging",
 *     },
 *     server: "docker.io",
 *     image: "springio/gs-spring-boot-docker",
 *     languageFramework: "springboot",
 * });
 * ```
 *
 * ## Import
 *
 * Spring Cloud Container Deployments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AppPlatform/spring/spring1/apps/app1/deployments/deploy1
 * ```
 */
class SpringCloudContainerDeployment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["addonJson"] = state ? state.addonJson : undefined;
            resourceInputs["applicationPerformanceMonitoringIds"] = state ? state.applicationPerformanceMonitoringIds : undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["languageFramework"] = state ? state.languageFramework : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["springCloudAppId"] = state ? state.springCloudAppId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.springCloudAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudAppId'");
            }
            resourceInputs["addonJson"] = args ? args.addonJson : undefined;
            resourceInputs["applicationPerformanceMonitoringIds"] = args ? args.applicationPerformanceMonitoringIds : undefined;
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["commands"] = args ? args.commands : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["languageFramework"] = args ? args.languageFramework : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["springCloudAppId"] = args ? args.springCloudAppId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudContainerDeployment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SpringCloudContainerDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SpringCloudContainerDeployment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SpringCloudContainerDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudContainerDeployment.__pulumiType;
    }
}
exports.SpringCloudContainerDeployment = SpringCloudContainerDeployment;
/** @internal */
SpringCloudContainerDeployment.__pulumiType = 'azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment';
//# sourceMappingURL=springCloudContainerDeployment.js.map