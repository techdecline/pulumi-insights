"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoUserDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Cosmos DB Mongo User Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.cosmosdb.Account("example", {
 *     name: "example-ca",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     offerType: "Standard",
 *     kind: "MongoDB",
 *     capabilities: [
 *         {
 *             name: "EnableMongo",
 *         },
 *         {
 *             name: "EnableMongoRoleBasedAccessControl",
 *         },
 *     ],
 *     consistencyPolicy: {
 *         consistencyLevel: "Strong",
 *     },
 *     geoLocations: [{
 *         location: example.location,
 *         failoverPriority: 0,
 *     }],
 * });
 * const exampleMongoDatabase = new azure.cosmosdb.MongoDatabase("example", {
 *     name: "example-mongodb",
 *     resourceGroupName: exampleAccount.resourceGroupName,
 *     accountName: exampleAccount.name,
 * });
 * const exampleMongoUserDefinition = new azure.cosmosdb.MongoUserDefinition("example", {
 *     cosmosMongoDatabaseId: exampleMongoDatabase.id,
 *     username: "myUserName",
 *     password: "myPassword",
 * });
 * ```
 *
 * ## Import
 *
 * Cosmos DB Mongo User Definitions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/mongoUserDefinition:MongoUserDefinition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbUserDefinitions/dbname1.username1
 * ```
 */
class MongoUserDefinition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cosmosMongoDatabaseId"] = state ? state.cosmosMongoDatabaseId : undefined;
            resourceInputs["inheritedRoleNames"] = state ? state.inheritedRoleNames : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cosmosMongoDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosMongoDatabaseId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["cosmosMongoDatabaseId"] = args ? args.cosmosMongoDatabaseId : undefined;
            resourceInputs["inheritedRoleNames"] = args ? args.inheritedRoleNames : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MongoUserDefinition.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MongoUserDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MongoUserDefinition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MongoUserDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoUserDefinition.__pulumiType;
    }
}
exports.MongoUserDefinition = MongoUserDefinition;
/** @internal */
MongoUserDefinition.__pulumiType = 'azure:cosmosdb/mongoUserDefinition:MongoUserDefinition';
//# sourceMappingURL=mongoUserDefinition.js.map