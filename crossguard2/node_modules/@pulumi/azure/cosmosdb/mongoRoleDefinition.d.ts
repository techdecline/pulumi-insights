import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a Cosmos DB Mongo Role Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.cosmosdb.Account("example", {
 *     name: "example-ca",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     offerType: "Standard",
 *     kind: "MongoDB",
 *     capabilities: [
 *         {
 *             name: "EnableMongo",
 *         },
 *         {
 *             name: "EnableMongoRoleBasedAccessControl",
 *         },
 *     ],
 *     consistencyPolicy: {
 *         consistencyLevel: "Strong",
 *     },
 *     geoLocations: [{
 *         location: example.location,
 *         failoverPriority: 0,
 *     }],
 * });
 * const exampleMongoDatabase = new azure.cosmosdb.MongoDatabase("example", {
 *     name: "example-mongodb",
 *     resourceGroupName: exampleAccount.resourceGroupName,
 *     accountName: exampleAccount.name,
 * });
 * const exampleMongoRoleDefinition = new azure.cosmosdb.MongoRoleDefinition("example", {
 *     cosmosMongoDatabaseId: exampleMongoDatabase.id,
 *     roleName: "example-roledefinition",
 * });
 * ```
 *
 * ## Import
 *
 * Cosmos DB Mongo Role Definitions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbRoleDefinitions/dbname1.rolename1
 * ```
 */
export declare class MongoRoleDefinition extends pulumi.CustomResource {
    /**
     * Get an existing MongoRoleDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoRoleDefinitionState, opts?: pulumi.CustomResourceOptions): MongoRoleDefinition;
    /**
     * Returns true if the given object is an instance of MongoRoleDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MongoRoleDefinition;
    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     */
    readonly cosmosMongoDatabaseId: pulumi.Output<string>;
    /**
     * A list of Mongo Roles which are inherited to the Mongo Role Definition.
     *
     * > **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmosMongoDatabaseId`.
     */
    readonly inheritedRoleNames: pulumi.Output<string[] | undefined>;
    /**
     * A `privilege` block as defined below.
     */
    readonly privileges: pulumi.Output<outputs.cosmosdb.MongoRoleDefinitionPrivilege[] | undefined>;
    /**
     * The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     */
    readonly roleName: pulumi.Output<string>;
    /**
     * Create a MongoRoleDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongoRoleDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering MongoRoleDefinition resources.
 */
export interface MongoRoleDefinitionState {
    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     */
    cosmosMongoDatabaseId?: pulumi.Input<string>;
    /**
     * A list of Mongo Roles which are inherited to the Mongo Role Definition.
     *
     * > **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmosMongoDatabaseId`.
     */
    inheritedRoleNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `privilege` block as defined below.
     */
    privileges?: pulumi.Input<pulumi.Input<inputs.cosmosdb.MongoRoleDefinitionPrivilege>[]>;
    /**
     * The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     */
    roleName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a MongoRoleDefinition resource.
 */
export interface MongoRoleDefinitionArgs {
    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     */
    cosmosMongoDatabaseId: pulumi.Input<string>;
    /**
     * A list of Mongo Roles which are inherited to the Mongo Role Definition.
     *
     * > **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmosMongoDatabaseId`.
     */
    inheritedRoleNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `privilege` block as defined below.
     */
    privileges?: pulumi.Input<pulumi.Input<inputs.cosmosdb.MongoRoleDefinitionPrivilege>[]>;
    /**
     * The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     */
    roleName: pulumi.Input<string>;
}
