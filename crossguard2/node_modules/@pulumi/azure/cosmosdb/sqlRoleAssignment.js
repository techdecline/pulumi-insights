"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlRoleAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Cosmos DB SQL Role Assignment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.cosmosdb.Account("example", {
 *     name: "example-cosmosdb",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     offerType: "Standard",
 *     kind: "GlobalDocumentDB",
 *     consistencyPolicy: {
 *         consistencyLevel: "Strong",
 *     },
 *     geoLocations: [{
 *         location: example.location,
 *         failoverPriority: 0,
 *     }],
 * });
 * const exampleSqlRoleDefinition = new azure.cosmosdb.SqlRoleDefinition("example", {
 *     name: "examplesqlroledef",
 *     resourceGroupName: example.name,
 *     accountName: exampleAccount.name,
 *     type: "CustomRole",
 *     assignableScopes: [exampleAccount.id],
 *     permissions: [{
 *         dataActions: ["Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read"],
 *     }],
 * });
 * const exampleSqlRoleAssignment = new azure.cosmosdb.SqlRoleAssignment("example", {
 *     name: "736180af-7fbc-4c7f-9004-22735173c1c3",
 *     resourceGroupName: example.name,
 *     accountName: exampleAccount.name,
 *     roleDefinitionId: exampleSqlRoleDefinition.id,
 *     principalId: current.then(current => current.objectId),
 *     scope: exampleAccount.id,
 * });
 * ```
 *
 * ## Import
 *
 * Cosmos DB SQL Role Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlRoleAssignments/9e007587-dbcd-4190-84cb-fcab5a09ca39
 * ```
 */
class SqlRoleAssignment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.roleDefinitionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleDefinitionId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlRoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SqlRoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SqlRoleAssignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SqlRoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlRoleAssignment.__pulumiType;
    }
}
exports.SqlRoleAssignment = SqlRoleAssignment;
/** @internal */
SqlRoleAssignment.__pulumiType = 'azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment';
//# sourceMappingURL=sqlRoleAssignment.js.map