"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = exports.SqlTrigger = exports.SqlStoredProcedure = exports.SqlRoleDefinition = exports.SqlRoleAssignment = exports.SqlFunction = exports.SqlDedicatedGateway = exports.SqlDatabase = exports.SqlContainer = exports.PostgresqlRole = exports.PostgresqlNodeConfiguration = exports.PostgresqlFirewallRule = exports.PostgresqlCoordinatorConfiguration = exports.PostgresqlCluster = exports.MongoUserDefinition = exports.MongoRoleDefinition = exports.MongoDatabase = exports.MongoCollection = exports.MongoCluster = exports.GremlinGraph = exports.GremlinDatabase = exports.getSqlRoleDefinitionOutput = exports.getSqlRoleDefinition = exports.getSqlDatabaseOutput = exports.getSqlDatabase = exports.getRestorableDatabaseAccountsOutput = exports.getRestorableDatabaseAccounts = exports.getMongoDatabaseOutput = exports.getMongoDatabase = exports.getAccountOutput = exports.getAccount = exports.CassandraTable = exports.CassandraKeyspace = exports.CassandraDatacenter = exports.CassandraCluster = exports.Account = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Account = null;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));
exports.CassandraCluster = null;
utilities.lazyLoad(exports, ["CassandraCluster"], () => require("./cassandraCluster"));
exports.CassandraDatacenter = null;
utilities.lazyLoad(exports, ["CassandraDatacenter"], () => require("./cassandraDatacenter"));
exports.CassandraKeyspace = null;
utilities.lazyLoad(exports, ["CassandraKeyspace"], () => require("./cassandraKeyspace"));
exports.CassandraTable = null;
utilities.lazyLoad(exports, ["CassandraTable"], () => require("./cassandraTable"));
exports.getAccount = null;
exports.getAccountOutput = null;
utilities.lazyLoad(exports, ["getAccount", "getAccountOutput"], () => require("./getAccount"));
exports.getMongoDatabase = null;
exports.getMongoDatabaseOutput = null;
utilities.lazyLoad(exports, ["getMongoDatabase", "getMongoDatabaseOutput"], () => require("./getMongoDatabase"));
exports.getRestorableDatabaseAccounts = null;
exports.getRestorableDatabaseAccountsOutput = null;
utilities.lazyLoad(exports, ["getRestorableDatabaseAccounts", "getRestorableDatabaseAccountsOutput"], () => require("./getRestorableDatabaseAccounts"));
exports.getSqlDatabase = null;
exports.getSqlDatabaseOutput = null;
utilities.lazyLoad(exports, ["getSqlDatabase", "getSqlDatabaseOutput"], () => require("./getSqlDatabase"));
exports.getSqlRoleDefinition = null;
exports.getSqlRoleDefinitionOutput = null;
utilities.lazyLoad(exports, ["getSqlRoleDefinition", "getSqlRoleDefinitionOutput"], () => require("./getSqlRoleDefinition"));
exports.GremlinDatabase = null;
utilities.lazyLoad(exports, ["GremlinDatabase"], () => require("./gremlinDatabase"));
exports.GremlinGraph = null;
utilities.lazyLoad(exports, ["GremlinGraph"], () => require("./gremlinGraph"));
exports.MongoCluster = null;
utilities.lazyLoad(exports, ["MongoCluster"], () => require("./mongoCluster"));
exports.MongoCollection = null;
utilities.lazyLoad(exports, ["MongoCollection"], () => require("./mongoCollection"));
exports.MongoDatabase = null;
utilities.lazyLoad(exports, ["MongoDatabase"], () => require("./mongoDatabase"));
exports.MongoRoleDefinition = null;
utilities.lazyLoad(exports, ["MongoRoleDefinition"], () => require("./mongoRoleDefinition"));
exports.MongoUserDefinition = null;
utilities.lazyLoad(exports, ["MongoUserDefinition"], () => require("./mongoUserDefinition"));
exports.PostgresqlCluster = null;
utilities.lazyLoad(exports, ["PostgresqlCluster"], () => require("./postgresqlCluster"));
exports.PostgresqlCoordinatorConfiguration = null;
utilities.lazyLoad(exports, ["PostgresqlCoordinatorConfiguration"], () => require("./postgresqlCoordinatorConfiguration"));
exports.PostgresqlFirewallRule = null;
utilities.lazyLoad(exports, ["PostgresqlFirewallRule"], () => require("./postgresqlFirewallRule"));
exports.PostgresqlNodeConfiguration = null;
utilities.lazyLoad(exports, ["PostgresqlNodeConfiguration"], () => require("./postgresqlNodeConfiguration"));
exports.PostgresqlRole = null;
utilities.lazyLoad(exports, ["PostgresqlRole"], () => require("./postgresqlRole"));
exports.SqlContainer = null;
utilities.lazyLoad(exports, ["SqlContainer"], () => require("./sqlContainer"));
exports.SqlDatabase = null;
utilities.lazyLoad(exports, ["SqlDatabase"], () => require("./sqlDatabase"));
exports.SqlDedicatedGateway = null;
utilities.lazyLoad(exports, ["SqlDedicatedGateway"], () => require("./sqlDedicatedGateway"));
exports.SqlFunction = null;
utilities.lazyLoad(exports, ["SqlFunction"], () => require("./sqlFunction"));
exports.SqlRoleAssignment = null;
utilities.lazyLoad(exports, ["SqlRoleAssignment"], () => require("./sqlRoleAssignment"));
exports.SqlRoleDefinition = null;
utilities.lazyLoad(exports, ["SqlRoleDefinition"], () => require("./sqlRoleDefinition"));
exports.SqlStoredProcedure = null;
utilities.lazyLoad(exports, ["SqlStoredProcedure"], () => require("./sqlStoredProcedure"));
exports.SqlTrigger = null;
utilities.lazyLoad(exports, ["SqlTrigger"], () => require("./sqlTrigger"));
exports.Table = null;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));
__exportStar(require("./zMixins"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:cosmosdb/account:Account":
                return new exports.Account(name, undefined, { urn });
            case "azure:cosmosdb/cassandraCluster:CassandraCluster":
                return new exports.CassandraCluster(name, undefined, { urn });
            case "azure:cosmosdb/cassandraDatacenter:CassandraDatacenter":
                return new exports.CassandraDatacenter(name, undefined, { urn });
            case "azure:cosmosdb/cassandraKeyspace:CassandraKeyspace":
                return new exports.CassandraKeyspace(name, undefined, { urn });
            case "azure:cosmosdb/cassandraTable:CassandraTable":
                return new exports.CassandraTable(name, undefined, { urn });
            case "azure:cosmosdb/gremlinDatabase:GremlinDatabase":
                return new exports.GremlinDatabase(name, undefined, { urn });
            case "azure:cosmosdb/gremlinGraph:GremlinGraph":
                return new exports.GremlinGraph(name, undefined, { urn });
            case "azure:cosmosdb/mongoCluster:MongoCluster":
                return new exports.MongoCluster(name, undefined, { urn });
            case "azure:cosmosdb/mongoCollection:MongoCollection":
                return new exports.MongoCollection(name, undefined, { urn });
            case "azure:cosmosdb/mongoDatabase:MongoDatabase":
                return new exports.MongoDatabase(name, undefined, { urn });
            case "azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition":
                return new exports.MongoRoleDefinition(name, undefined, { urn });
            case "azure:cosmosdb/mongoUserDefinition:MongoUserDefinition":
                return new exports.MongoUserDefinition(name, undefined, { urn });
            case "azure:cosmosdb/postgresqlCluster:PostgresqlCluster":
                return new exports.PostgresqlCluster(name, undefined, { urn });
            case "azure:cosmosdb/postgresqlCoordinatorConfiguration:PostgresqlCoordinatorConfiguration":
                return new exports.PostgresqlCoordinatorConfiguration(name, undefined, { urn });
            case "azure:cosmosdb/postgresqlFirewallRule:PostgresqlFirewallRule":
                return new exports.PostgresqlFirewallRule(name, undefined, { urn });
            case "azure:cosmosdb/postgresqlNodeConfiguration:PostgresqlNodeConfiguration":
                return new exports.PostgresqlNodeConfiguration(name, undefined, { urn });
            case "azure:cosmosdb/postgresqlRole:PostgresqlRole":
                return new exports.PostgresqlRole(name, undefined, { urn });
            case "azure:cosmosdb/sqlContainer:SqlContainer":
                return new exports.SqlContainer(name, undefined, { urn });
            case "azure:cosmosdb/sqlDatabase:SqlDatabase":
                return new exports.SqlDatabase(name, undefined, { urn });
            case "azure:cosmosdb/sqlDedicatedGateway:SqlDedicatedGateway":
                return new exports.SqlDedicatedGateway(name, undefined, { urn });
            case "azure:cosmosdb/sqlFunction:SqlFunction":
                return new exports.SqlFunction(name, undefined, { urn });
            case "azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment":
                return new exports.SqlRoleAssignment(name, undefined, { urn });
            case "azure:cosmosdb/sqlRoleDefinition:SqlRoleDefinition":
                return new exports.SqlRoleDefinition(name, undefined, { urn });
            case "azure:cosmosdb/sqlStoredProcedure:SqlStoredProcedure":
                return new exports.SqlStoredProcedure(name, undefined, { urn });
            case "azure:cosmosdb/sqlTrigger:SqlTrigger":
                return new exports.SqlTrigger(name, undefined, { urn });
            case "azure:cosmosdb/table:Table":
                return new exports.Table(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "cosmosdb/account", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraCluster", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraDatacenter", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraKeyspace", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraTable", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinGraph", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoCluster", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoCollection", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoRoleDefinition", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoUserDefinition", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlCluster", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlCoordinatorConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlFirewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlNodeConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/postgresqlRole", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlContainer", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlDedicatedGateway", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlFunction", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlRoleAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlRoleDefinition", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlStoredProcedure", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlTrigger", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/table", _module);
//# sourceMappingURL=index.js.map