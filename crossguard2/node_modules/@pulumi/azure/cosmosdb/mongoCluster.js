"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a MongoDB Cluster using vCore Architecture.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "East US",
 * });
 * const exampleMongoCluster = new azure.cosmosdb.MongoCluster("example", {
 *     name: "example-mc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorUsername: "adminTerraform",
 *     administratorPassword: "QAZwsx123",
 *     shardCount: 1,
 *     computeTier: "Free",
 *     highAvailabilityMode: "Disabled",
 *     storageSizeInGb: 32,
 * });
 * ```
 *
 * ### Preview Feature GeoReplicas)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "East US",
 * });
 * const exampleMongoCluster = new azure.cosmosdb.MongoCluster("example", {
 *     name: "example-mc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorUsername: "adminTerraform",
 *     administratorPassword: "QAZwsx123",
 *     shardCount: 1,
 *     computeTier: "M30",
 *     highAvailabilityMode: "ZoneRedundantPreferred",
 *     storageSizeInGb: 64,
 *     previewFeatures: ["GeoReplicas"],
 * });
 * const exampleGeoReplica = new azure.cosmosdb.MongoCluster("example_geo_replica", {
 *     name: "example-mc-geo",
 *     resourceGroupName: example.name,
 *     location: "Central US",
 *     sourceServerId: exampleMongoCluster.id,
 *     sourceLocation: exampleMongoCluster.location,
 *     createMode: "GeoReplica",
 * });
 * ```
 *
 * ## Import
 *
 * MongoDB Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/mongoCluster:MongoCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/mongoClusters/myMongoCluster
 * ```
 */
class MongoCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["administratorPassword"] = state ? state.administratorPassword : undefined;
            resourceInputs["administratorUsername"] = state ? state.administratorUsername : undefined;
            resourceInputs["computeTier"] = state ? state.computeTier : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["highAvailabilityMode"] = state ? state.highAvailabilityMode : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["previewFeatures"] = state ? state.previewFeatures : undefined;
            resourceInputs["publicNetworkAccess"] = state ? state.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["sourceLocation"] = state ? state.sourceLocation : undefined;
            resourceInputs["sourceServerId"] = state ? state.sourceServerId : undefined;
            resourceInputs["storageSizeInGb"] = state ? state.storageSizeInGb : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["administratorPassword"] = (args === null || args === void 0 ? void 0 : args.administratorPassword) ? pulumi.secret(args.administratorPassword) : undefined;
            resourceInputs["administratorUsername"] = args ? args.administratorUsername : undefined;
            resourceInputs["computeTier"] = args ? args.computeTier : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["highAvailabilityMode"] = args ? args.highAvailabilityMode : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["previewFeatures"] = args ? args.previewFeatures : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["sourceLocation"] = args ? args.sourceLocation : undefined;
            resourceInputs["sourceServerId"] = args ? args.sourceServerId : undefined;
            resourceInputs["storageSizeInGb"] = args ? args.storageSizeInGb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MongoCluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MongoCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MongoCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MongoCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoCluster.__pulumiType;
    }
}
exports.MongoCluster = MongoCluster;
/** @internal */
MongoCluster.__pulumiType = 'azure:cosmosdb/mongoCluster:MongoCluster';
//# sourceMappingURL=mongoCluster.js.map