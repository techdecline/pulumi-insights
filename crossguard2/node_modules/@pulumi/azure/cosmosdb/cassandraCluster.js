"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CassandraCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Cassandra Cluster.
 *
 * > **NOTE:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "accexample-rg",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const example = azuread.getServicePrincipal({
 *     displayName: "Azure Cosmos DB",
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: exampleVirtualNetwork.id,
 *     roleDefinitionName: "Network Contributor",
 *     principalId: example.then(example => example.objectId),
 * });
 * const exampleCassandraCluster = new azure.cosmosdb.CassandraCluster("example", {
 *     name: "example-cluster",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     delegatedManagementSubnetId: exampleSubnet.id,
 *     defaultAdminPassword: "Password1234",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * ```
 *
 * ## Import
 *
 * Cassandra Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/cassandraCluster:CassandraCluster example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1
 * ```
 */
class CassandraCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["clientCertificatePems"] = state ? state.clientCertificatePems : undefined;
            resourceInputs["defaultAdminPassword"] = state ? state.defaultAdminPassword : undefined;
            resourceInputs["delegatedManagementSubnetId"] = state ? state.delegatedManagementSubnetId : undefined;
            resourceInputs["externalGossipCertificatePems"] = state ? state.externalGossipCertificatePems : undefined;
            resourceInputs["externalSeedNodeIpAddresses"] = state ? state.externalSeedNodeIpAddresses : undefined;
            resourceInputs["hoursBetweenBackups"] = state ? state.hoursBetweenBackups : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repairEnabled"] = state ? state.repairEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultAdminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAdminPassword'");
            }
            if ((!args || args.delegatedManagementSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delegatedManagementSubnetId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["clientCertificatePems"] = args ? args.clientCertificatePems : undefined;
            resourceInputs["defaultAdminPassword"] = (args === null || args === void 0 ? void 0 : args.defaultAdminPassword) ? pulumi.secret(args.defaultAdminPassword) : undefined;
            resourceInputs["delegatedManagementSubnetId"] = args ? args.delegatedManagementSubnetId : undefined;
            resourceInputs["externalGossipCertificatePems"] = args ? args.externalGossipCertificatePems : undefined;
            resourceInputs["externalSeedNodeIpAddresses"] = args ? args.externalSeedNodeIpAddresses : undefined;
            resourceInputs["hoursBetweenBackups"] = args ? args.hoursBetweenBackups : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repairEnabled"] = args ? args.repairEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["defaultAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CassandraCluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CassandraCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CassandraCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CassandraCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CassandraCluster.__pulumiType;
    }
}
exports.CassandraCluster = CassandraCluster;
/** @internal */
CassandraCluster.__pulumiType = 'azure:cosmosdb/cassandraCluster:CassandraCluster';
//# sourceMappingURL=cassandraCluster.js.map