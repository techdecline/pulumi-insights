"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgresqlCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Cosmos DB for PostgreSQL Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const examplePostgresqlCluster = new azure.cosmosdb.PostgresqlCluster("example", {
 *     name: "example-cluster",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorLoginPassword: "H@Sh1CoR3!",
 *     coordinatorStorageQuotaInMb: 131072,
 *     coordinatorVcoreCount: 2,
 *     nodeCount: 0,
 * });
 * ```
 *
 * ## Import
 *
 * Azure Cosmos DB for PostgreSQL Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/postgresqlCluster:PostgresqlCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/cluster1
 * ```
 */
class PostgresqlCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["administratorLoginPassword"] = state ? state.administratorLoginPassword : undefined;
            resourceInputs["citusVersion"] = state ? state.citusVersion : undefined;
            resourceInputs["coordinatorPublicIpAccessEnabled"] = state ? state.coordinatorPublicIpAccessEnabled : undefined;
            resourceInputs["coordinatorServerEdition"] = state ? state.coordinatorServerEdition : undefined;
            resourceInputs["coordinatorStorageQuotaInMb"] = state ? state.coordinatorStorageQuotaInMb : undefined;
            resourceInputs["coordinatorVcoreCount"] = state ? state.coordinatorVcoreCount : undefined;
            resourceInputs["earliestRestoreTime"] = state ? state.earliestRestoreTime : undefined;
            resourceInputs["haEnabled"] = state ? state.haEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodePublicIpAccessEnabled"] = state ? state.nodePublicIpAccessEnabled : undefined;
            resourceInputs["nodeServerEdition"] = state ? state.nodeServerEdition : undefined;
            resourceInputs["nodeStorageQuotaInMb"] = state ? state.nodeStorageQuotaInMb : undefined;
            resourceInputs["nodeVcores"] = state ? state.nodeVcores : undefined;
            resourceInputs["pointInTimeInUtc"] = state ? state.pointInTimeInUtc : undefined;
            resourceInputs["preferredPrimaryZone"] = state ? state.preferredPrimaryZone : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["shardsOnCoordinatorEnabled"] = state ? state.shardsOnCoordinatorEnabled : undefined;
            resourceInputs["sourceLocation"] = state ? state.sourceLocation : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["sqlVersion"] = state ? state.sqlVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["administratorLoginPassword"] = (args === null || args === void 0 ? void 0 : args.administratorLoginPassword) ? pulumi.secret(args.administratorLoginPassword) : undefined;
            resourceInputs["citusVersion"] = args ? args.citusVersion : undefined;
            resourceInputs["coordinatorPublicIpAccessEnabled"] = args ? args.coordinatorPublicIpAccessEnabled : undefined;
            resourceInputs["coordinatorServerEdition"] = args ? args.coordinatorServerEdition : undefined;
            resourceInputs["coordinatorStorageQuotaInMb"] = args ? args.coordinatorStorageQuotaInMb : undefined;
            resourceInputs["coordinatorVcoreCount"] = args ? args.coordinatorVcoreCount : undefined;
            resourceInputs["haEnabled"] = args ? args.haEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodePublicIpAccessEnabled"] = args ? args.nodePublicIpAccessEnabled : undefined;
            resourceInputs["nodeServerEdition"] = args ? args.nodeServerEdition : undefined;
            resourceInputs["nodeStorageQuotaInMb"] = args ? args.nodeStorageQuotaInMb : undefined;
            resourceInputs["nodeVcores"] = args ? args.nodeVcores : undefined;
            resourceInputs["pointInTimeInUtc"] = args ? args.pointInTimeInUtc : undefined;
            resourceInputs["preferredPrimaryZone"] = args ? args.preferredPrimaryZone : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shardsOnCoordinatorEnabled"] = args ? args.shardsOnCoordinatorEnabled : undefined;
            resourceInputs["sourceLocation"] = args ? args.sourceLocation : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["sqlVersion"] = args ? args.sqlVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["earliestRestoreTime"] = undefined /*out*/;
            resourceInputs["servers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorLoginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PostgresqlCluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing PostgresqlCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PostgresqlCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PostgresqlCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PostgresqlCluster.__pulumiType;
    }
}
exports.PostgresqlCluster = PostgresqlCluster;
/** @internal */
PostgresqlCluster.__pulumiType = 'azure:cosmosdb/postgresqlCluster:PostgresqlCluster';
//# sourceMappingURL=postgresqlCluster.js.map