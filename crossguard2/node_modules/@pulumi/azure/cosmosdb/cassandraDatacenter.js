"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CassandraDatacenter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Cassandra Datacenter.
 *
 * > **NOTE:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "accexample-rg",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const example = azuread.getServicePrincipal({
 *     displayName: "Azure Cosmos DB",
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: exampleVirtualNetwork.id,
 *     roleDefinitionName: "Network Contributor",
 *     principalId: example.then(example => example.objectId),
 * });
 * const exampleCassandraCluster = new azure.cosmosdb.CassandraCluster("example", {
 *     name: "example-cluster",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     delegatedManagementSubnetId: exampleSubnet.id,
 *     defaultAdminPassword: "Password1234",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * const exampleCassandraDatacenter = new azure.cosmosdb.CassandraDatacenter("example", {
 *     name: "example-datacenter",
 *     location: exampleCassandraCluster.location,
 *     cassandraClusterId: exampleCassandraCluster.id,
 *     delegatedManagementSubnetId: exampleSubnet.id,
 *     nodeCount: 3,
 *     diskCount: 4,
 *     skuName: "Standard_DS14_v2",
 *     availabilityZonesEnabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * Cassandra Datacenters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cosmosdb/cassandraDatacenter:CassandraDatacenter example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1/dataCenters/dc1
 * ```
 */
class CassandraDatacenter extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["availabilityZonesEnabled"] = state ? state.availabilityZonesEnabled : undefined;
            resourceInputs["backupStorageCustomerKeyUri"] = state ? state.backupStorageCustomerKeyUri : undefined;
            resourceInputs["base64EncodedYamlFragment"] = state ? state.base64EncodedYamlFragment : undefined;
            resourceInputs["cassandraClusterId"] = state ? state.cassandraClusterId : undefined;
            resourceInputs["delegatedManagementSubnetId"] = state ? state.delegatedManagementSubnetId : undefined;
            resourceInputs["diskCount"] = state ? state.diskCount : undefined;
            resourceInputs["diskSku"] = state ? state.diskSku : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedDiskCustomerKeyUri"] = state ? state.managedDiskCustomerKeyUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["seedNodeIpAddresses"] = state ? state.seedNodeIpAddresses : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cassandraClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cassandraClusterId'");
            }
            if ((!args || args.delegatedManagementSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delegatedManagementSubnetId'");
            }
            resourceInputs["availabilityZonesEnabled"] = args ? args.availabilityZonesEnabled : undefined;
            resourceInputs["backupStorageCustomerKeyUri"] = args ? args.backupStorageCustomerKeyUri : undefined;
            resourceInputs["base64EncodedYamlFragment"] = args ? args.base64EncodedYamlFragment : undefined;
            resourceInputs["cassandraClusterId"] = args ? args.cassandraClusterId : undefined;
            resourceInputs["delegatedManagementSubnetId"] = args ? args.delegatedManagementSubnetId : undefined;
            resourceInputs["diskCount"] = args ? args.diskCount : undefined;
            resourceInputs["diskSku"] = args ? args.diskSku : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedDiskCustomerKeyUri"] = args ? args.managedDiskCustomerKeyUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["seedNodeIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CassandraDatacenter.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CassandraDatacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CassandraDatacenter(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CassandraDatacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CassandraDatacenter.__pulumiType;
    }
}
exports.CassandraDatacenter = CassandraDatacenter;
/** @internal */
CassandraDatacenter.__pulumiType = 'azure:cosmosdb/cassandraDatacenter:CassandraDatacenter';
//# sourceMappingURL=cassandraDatacenter.js.map