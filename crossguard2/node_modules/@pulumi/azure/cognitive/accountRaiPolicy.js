"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountRaiPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Cognitive Services Account RAI Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "East US",
 * });
 * const exampleAccount = new azure.cognitive.Account("example", {
 *     name: "example-account",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     kind: "OpenAI",
 *     skuName: "S0",
 * });
 * const exampleAccountRaiPolicy = new azure.cognitive.AccountRaiPolicy("example", {
 *     name: "example-rai-policy",
 *     cognitiveAccountId: exampleAccount.id,
 *     basePolicyName: "Microsoft.Default",
 *     contentFilters: [{
 *         name: "Hate",
 *         filterEnabled: true,
 *         blockEnabled: true,
 *         severityThreshold: "High",
 *         source: "Prompt",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Cognitive Service Account RAI Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cognitive/accountRaiPolicy:AccountRaiPolicy policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.CognitiveServices/accounts/account1/raiPolicies/policy1
 * ```
 */
class AccountRaiPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["basePolicyName"] = state ? state.basePolicyName : undefined;
            resourceInputs["cognitiveAccountId"] = state ? state.cognitiveAccountId : undefined;
            resourceInputs["contentFilters"] = state ? state.contentFilters : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.basePolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'basePolicyName'");
            }
            if ((!args || args.cognitiveAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cognitiveAccountId'");
            }
            if ((!args || args.contentFilters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentFilters'");
            }
            resourceInputs["basePolicyName"] = args ? args.basePolicyName : undefined;
            resourceInputs["cognitiveAccountId"] = args ? args.cognitiveAccountId : undefined;
            resourceInputs["contentFilters"] = args ? args.contentFilters : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountRaiPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AccountRaiPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccountRaiPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccountRaiPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountRaiPolicy.__pulumiType;
    }
}
exports.AccountRaiPolicy = AccountRaiPolicy;
/** @internal */
AccountRaiPolicy.__pulumiType = 'azure:cognitive/accountRaiPolicy:AccountRaiPolicy';
//# sourceMappingURL=accountRaiPolicy.js.map