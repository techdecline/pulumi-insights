"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistryCacheRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Container Registry Cache Rule.
 *
 * > **Note:** All arguments including the access key will be stored in the raw state as plain-text.
 * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const acr = new azure.containerservice.Registry("acr", {
 *     name: "containerRegistry1",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "Basic",
 * });
 * const cacheRule = new azure.containerservice.RegistryCacheRule("cache_rule", {
 *     name: "cacherule",
 *     containerRegistryId: acr.id,
 *     targetRepo: "target",
 *     sourceRepo: "docker.io/hello-world",
 *     credentialSetId: pulumi.interpolate`${acr.id}/credentialSets/example`,
 * });
 * ```
 *
 * ## Import
 *
 * Container Registry Cache Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerservice/registryCacheRule:RegistryCacheRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/cacheRules/myCacheRule
 * ```
 */
class RegistryCacheRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            resourceInputs["credentialSetId"] = state ? state.credentialSetId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceRepo"] = state ? state.sourceRepo : undefined;
            resourceInputs["targetRepo"] = state ? state.targetRepo : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.containerRegistryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryId'");
            }
            if ((!args || args.sourceRepo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRepo'");
            }
            if ((!args || args.targetRepo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRepo'");
            }
            resourceInputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            resourceInputs["credentialSetId"] = args ? args.credentialSetId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceRepo"] = args ? args.sourceRepo : undefined;
            resourceInputs["targetRepo"] = args ? args.targetRepo : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryCacheRule.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RegistryCacheRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RegistryCacheRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegistryCacheRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryCacheRule.__pulumiType;
    }
}
exports.RegistryCacheRule = RegistryCacheRule;
/** @internal */
RegistryCacheRule.__pulumiType = 'azure:containerservice/registryCacheRule:RegistryCacheRule';
//# sourceMappingURL=registryCacheRule.js.map