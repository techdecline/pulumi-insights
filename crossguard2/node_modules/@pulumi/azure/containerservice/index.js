"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenPassword = exports.RegistryWebook = exports.RegistryWebhook = exports.RegistryToken = exports.RegistryTaskScheduleRunNow = exports.RegistryTask = exports.RegistryScopeMap = exports.RegistryCredentialSet = exports.RegistryCacheRule = exports.RegistryAgentPool = exports.Registry = exports.KubernetesFleetManager = exports.KubernetesClusterNodePool = exports.KubernetesClusterExtension = exports.KubernetesCluster = exports.Group = exports.getRegistryTokenOutput = exports.getRegistryToken = exports.getRegistryScopeMapOutput = exports.getRegistryScopeMap = exports.getRegistryCacheRuleOutput = exports.getRegistryCacheRule = exports.getRegistryOutput = exports.getRegistry = exports.getKubernetesServiceVersionsOutput = exports.getKubernetesServiceVersions = exports.getKubernetesNodePoolSnapshotOutput = exports.getKubernetesNodePoolSnapshot = exports.getKubernetesClusterOutput = exports.getKubernetesCluster = exports.getGroupOutput = exports.getGroup = exports.getFleetManagerOutput = exports.getFleetManager = exports.getClusterNodePoolOutput = exports.getClusterNodePool = exports.FluxConfiguration = exports.FleetUpdateStrategy = exports.FleetUpdateRun = exports.FleetMember = exports.ConnectedRegistry = exports.ClusterTrustedAccessRoleBinding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.ClusterTrustedAccessRoleBinding = null;
utilities.lazyLoad(exports, ["ClusterTrustedAccessRoleBinding"], () => require("./clusterTrustedAccessRoleBinding"));
exports.ConnectedRegistry = null;
utilities.lazyLoad(exports, ["ConnectedRegistry"], () => require("./connectedRegistry"));
exports.FleetMember = null;
utilities.lazyLoad(exports, ["FleetMember"], () => require("./fleetMember"));
exports.FleetUpdateRun = null;
utilities.lazyLoad(exports, ["FleetUpdateRun"], () => require("./fleetUpdateRun"));
exports.FleetUpdateStrategy = null;
utilities.lazyLoad(exports, ["FleetUpdateStrategy"], () => require("./fleetUpdateStrategy"));
exports.FluxConfiguration = null;
utilities.lazyLoad(exports, ["FluxConfiguration"], () => require("./fluxConfiguration"));
exports.getClusterNodePool = null;
exports.getClusterNodePoolOutput = null;
utilities.lazyLoad(exports, ["getClusterNodePool", "getClusterNodePoolOutput"], () => require("./getClusterNodePool"));
exports.getFleetManager = null;
exports.getFleetManagerOutput = null;
utilities.lazyLoad(exports, ["getFleetManager", "getFleetManagerOutput"], () => require("./getFleetManager"));
exports.getGroup = null;
exports.getGroupOutput = null;
utilities.lazyLoad(exports, ["getGroup", "getGroupOutput"], () => require("./getGroup"));
exports.getKubernetesCluster = null;
exports.getKubernetesClusterOutput = null;
utilities.lazyLoad(exports, ["getKubernetesCluster", "getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));
exports.getKubernetesNodePoolSnapshot = null;
exports.getKubernetesNodePoolSnapshotOutput = null;
utilities.lazyLoad(exports, ["getKubernetesNodePoolSnapshot", "getKubernetesNodePoolSnapshotOutput"], () => require("./getKubernetesNodePoolSnapshot"));
exports.getKubernetesServiceVersions = null;
exports.getKubernetesServiceVersionsOutput = null;
utilities.lazyLoad(exports, ["getKubernetesServiceVersions", "getKubernetesServiceVersionsOutput"], () => require("./getKubernetesServiceVersions"));
exports.getRegistry = null;
exports.getRegistryOutput = null;
utilities.lazyLoad(exports, ["getRegistry", "getRegistryOutput"], () => require("./getRegistry"));
exports.getRegistryCacheRule = null;
exports.getRegistryCacheRuleOutput = null;
utilities.lazyLoad(exports, ["getRegistryCacheRule", "getRegistryCacheRuleOutput"], () => require("./getRegistryCacheRule"));
exports.getRegistryScopeMap = null;
exports.getRegistryScopeMapOutput = null;
utilities.lazyLoad(exports, ["getRegistryScopeMap", "getRegistryScopeMapOutput"], () => require("./getRegistryScopeMap"));
exports.getRegistryToken = null;
exports.getRegistryTokenOutput = null;
utilities.lazyLoad(exports, ["getRegistryToken", "getRegistryTokenOutput"], () => require("./getRegistryToken"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.KubernetesCluster = null;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));
exports.KubernetesClusterExtension = null;
utilities.lazyLoad(exports, ["KubernetesClusterExtension"], () => require("./kubernetesClusterExtension"));
exports.KubernetesClusterNodePool = null;
utilities.lazyLoad(exports, ["KubernetesClusterNodePool"], () => require("./kubernetesClusterNodePool"));
exports.KubernetesFleetManager = null;
utilities.lazyLoad(exports, ["KubernetesFleetManager"], () => require("./kubernetesFleetManager"));
exports.Registry = null;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));
exports.RegistryAgentPool = null;
utilities.lazyLoad(exports, ["RegistryAgentPool"], () => require("./registryAgentPool"));
exports.RegistryCacheRule = null;
utilities.lazyLoad(exports, ["RegistryCacheRule"], () => require("./registryCacheRule"));
exports.RegistryCredentialSet = null;
utilities.lazyLoad(exports, ["RegistryCredentialSet"], () => require("./registryCredentialSet"));
exports.RegistryScopeMap = null;
utilities.lazyLoad(exports, ["RegistryScopeMap"], () => require("./registryScopeMap"));
exports.RegistryTask = null;
utilities.lazyLoad(exports, ["RegistryTask"], () => require("./registryTask"));
exports.RegistryTaskScheduleRunNow = null;
utilities.lazyLoad(exports, ["RegistryTaskScheduleRunNow"], () => require("./registryTaskScheduleRunNow"));
exports.RegistryToken = null;
utilities.lazyLoad(exports, ["RegistryToken"], () => require("./registryToken"));
exports.RegistryWebhook = null;
utilities.lazyLoad(exports, ["RegistryWebhook"], () => require("./registryWebhook"));
exports.RegistryWebook = null;
utilities.lazyLoad(exports, ["RegistryWebook"], () => require("./registryWebook"));
exports.TokenPassword = null;
utilities.lazyLoad(exports, ["TokenPassword"], () => require("./tokenPassword"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:containerservice/clusterTrustedAccessRoleBinding:ClusterTrustedAccessRoleBinding":
                return new exports.ClusterTrustedAccessRoleBinding(name, undefined, { urn });
            case "azure:containerservice/connectedRegistry:ConnectedRegistry":
                return new exports.ConnectedRegistry(name, undefined, { urn });
            case "azure:containerservice/fleetMember:FleetMember":
                return new exports.FleetMember(name, undefined, { urn });
            case "azure:containerservice/fleetUpdateRun:FleetUpdateRun":
                return new exports.FleetUpdateRun(name, undefined, { urn });
            case "azure:containerservice/fleetUpdateStrategy:FleetUpdateStrategy":
                return new exports.FleetUpdateStrategy(name, undefined, { urn });
            case "azure:containerservice/fluxConfiguration:FluxConfiguration":
                return new exports.FluxConfiguration(name, undefined, { urn });
            case "azure:containerservice/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "azure:containerservice/kubernetesCluster:KubernetesCluster":
                return new exports.KubernetesCluster(name, undefined, { urn });
            case "azure:containerservice/kubernetesClusterExtension:KubernetesClusterExtension":
                return new exports.KubernetesClusterExtension(name, undefined, { urn });
            case "azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool":
                return new exports.KubernetesClusterNodePool(name, undefined, { urn });
            case "azure:containerservice/kubernetesFleetManager:KubernetesFleetManager":
                return new exports.KubernetesFleetManager(name, undefined, { urn });
            case "azure:containerservice/registry:Registry":
                return new exports.Registry(name, undefined, { urn });
            case "azure:containerservice/registryAgentPool:RegistryAgentPool":
                return new exports.RegistryAgentPool(name, undefined, { urn });
            case "azure:containerservice/registryCacheRule:RegistryCacheRule":
                return new exports.RegistryCacheRule(name, undefined, { urn });
            case "azure:containerservice/registryCredentialSet:RegistryCredentialSet":
                return new exports.RegistryCredentialSet(name, undefined, { urn });
            case "azure:containerservice/registryScopeMap:RegistryScopeMap":
                return new exports.RegistryScopeMap(name, undefined, { urn });
            case "azure:containerservice/registryTask:RegistryTask":
                return new exports.RegistryTask(name, undefined, { urn });
            case "azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow":
                return new exports.RegistryTaskScheduleRunNow(name, undefined, { urn });
            case "azure:containerservice/registryToken:RegistryToken":
                return new exports.RegistryToken(name, undefined, { urn });
            case "azure:containerservice/registryWebhook:RegistryWebhook":
                return new exports.RegistryWebhook(name, undefined, { urn });
            case "azure:containerservice/registryWebook:RegistryWebook":
                return new exports.RegistryWebook(name, undefined, { urn });
            case "azure:containerservice/tokenPassword:TokenPassword":
                return new exports.TokenPassword(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "containerservice/clusterTrustedAccessRoleBinding", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/connectedRegistry", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/fleetMember", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/fleetUpdateRun", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/fleetUpdateStrategy", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/fluxConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/group", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesCluster", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesClusterExtension", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesClusterNodePool", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesFleetManager", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registry", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryAgentPool", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryCacheRule", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryCredentialSet", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryScopeMap", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryTask", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryTaskScheduleRunNow", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryToken", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryWebhook", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryWebook", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/tokenPassword", _module);
//# sourceMappingURL=index.js.map