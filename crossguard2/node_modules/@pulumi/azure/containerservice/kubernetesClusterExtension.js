"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubernetesClusterExtension = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Kubernetes Cluster Extension.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKubernetesCluster = new azure.containerservice.KubernetesCluster("example", {
 *     name: "example-aks",
 *     location: "West Europe",
 *     resourceGroupName: example.name,
 *     dnsPrefix: "example-aks",
 *     defaultNodePool: {
 *         name: "default",
 *         nodeCount: 1,
 *         vmSize: "Standard_DS2_v2",
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleKubernetesClusterExtension = new azure.containerservice.KubernetesClusterExtension("example", {
 *     name: "example-ext",
 *     clusterId: exampleKubernetesCluster.id,
 *     extensionType: "microsoft.flux",
 * });
 * ```
 *
 * ## Import
 *
 * Kubernetes Cluster Extension can be imported using the `resource id` for different `cluster_resource_name`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerservice/kubernetesClusterExtension:KubernetesClusterExtension example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.ContainerService/managedClusters/cluster1/providers/Microsoft.KubernetesConfiguration/extensions/extension1
 * ```
 */
class KubernetesClusterExtension extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["aksAssignedIdentities"] = state ? state.aksAssignedIdentities : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configurationProtectedSettings"] = state ? state.configurationProtectedSettings : undefined;
            resourceInputs["configurationSettings"] = state ? state.configurationSettings : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["extensionType"] = state ? state.extensionType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["releaseNamespace"] = state ? state.releaseNamespace : undefined;
            resourceInputs["releaseTrain"] = state ? state.releaseTrain : undefined;
            resourceInputs["targetNamespace"] = state ? state.targetNamespace : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.extensionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionType'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configurationProtectedSettings"] = args ? args.configurationProtectedSettings : undefined;
            resourceInputs["configurationSettings"] = args ? args.configurationSettings : undefined;
            resourceInputs["extensionType"] = args ? args.extensionType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["releaseNamespace"] = args ? args.releaseNamespace : undefined;
            resourceInputs["releaseTrain"] = args ? args.releaseTrain : undefined;
            resourceInputs["targetNamespace"] = args ? args.targetNamespace : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["aksAssignedIdentities"] = undefined /*out*/;
            resourceInputs["currentVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesClusterExtension.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing KubernetesClusterExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KubernetesClusterExtension(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KubernetesClusterExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesClusterExtension.__pulumiType;
    }
}
exports.KubernetesClusterExtension = KubernetesClusterExtension;
/** @internal */
KubernetesClusterExtension.__pulumiType = 'azure:containerservice/kubernetesClusterExtension:KubernetesClusterExtension';
//# sourceMappingURL=kubernetesClusterExtension.js.map