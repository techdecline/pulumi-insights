import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a Container Registry Task.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleRegistry = new azure.containerservice.Registry("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "Basic",
 * });
 * const exampleRegistryTask = new azure.containerservice.RegistryTask("example", {
 *     name: "example-task",
 *     containerRegistryId: exampleRegistry.id,
 *     platform: {
 *         os: "Linux",
 *     },
 *     dockerStep: {
 *         dockerfilePath: "Dockerfile",
 *         contextPath: "https://github.com/<username>/<repository>#<branch>:<folder>",
 *         contextAccessToken: "<github personal access token>",
 *         imageNames: ["helloworld:{{.Run.ID}}"],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Container Registry Tasks can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerservice/registryTask:RegistryTask example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/tasks/task1
 * ```
 */
export declare class RegistryTask extends pulumi.CustomResource {
    /**
     * Get an existing RegistryTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryTaskState, opts?: pulumi.CustomResourceOptions): RegistryTask;
    /**
     * Returns true if the given object is an instance of RegistryTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RegistryTask;
    /**
     * The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
     */
    readonly agentPoolName: pulumi.Output<string | undefined>;
    /**
     * A `agentSetting` block as defined below.
     *
     * > **NOTE:** Only one of `agentPoolName` and `agentSetting` can be specified.
     */
    readonly agentSetting: pulumi.Output<outputs.containerservice.RegistryTaskAgentSetting | undefined>;
    /**
     * A `baseImageTrigger` block as defined below.
     */
    readonly baseImageTrigger: pulumi.Output<outputs.containerservice.RegistryTaskBaseImageTrigger | undefined>;
    /**
     * The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
     */
    readonly containerRegistryId: pulumi.Output<string>;
    /**
     * A `dockerStep` block as defined below.
     */
    readonly dockerStep: pulumi.Output<outputs.containerservice.RegistryTaskDockerStep | undefined>;
    /**
     * Should this Container Registry Task be enabled? Defaults to `true`.
     */
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * A `encodedStep` block as defined below.
     */
    readonly encodedStep: pulumi.Output<outputs.containerservice.RegistryTaskEncodedStep | undefined>;
    /**
     * A `fileStep` block as defined below.
     *
     * > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
     */
    readonly fileStep: pulumi.Output<outputs.containerservice.RegistryTaskFileStep | undefined>;
    /**
     * An `identity` block as defined below.
     */
    readonly identity: pulumi.Output<outputs.containerservice.RegistryTaskIdentity | undefined>;
    /**
     * Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
     */
    readonly isSystemTask: pulumi.Output<boolean | undefined>;
    readonly logTemplate: pulumi.Output<string | undefined>;
    /**
     * The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * A `platform` block as defined below.
     *
     * > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
     */
    readonly platform: pulumi.Output<outputs.containerservice.RegistryTaskPlatform | undefined>;
    readonly registryCredential: pulumi.Output<outputs.containerservice.RegistryTaskRegistryCredential | undefined>;
    /**
     * One or more `sourceTrigger` blocks as defined below.
     */
    readonly sourceTriggers: pulumi.Output<outputs.containerservice.RegistryTaskSourceTrigger[] | undefined>;
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly timeoutInSeconds: pulumi.Output<number | undefined>;
    /**
     * One or more `timerTrigger` blocks as defined below.
     */
    readonly timerTriggers: pulumi.Output<outputs.containerservice.RegistryTaskTimerTrigger[] | undefined>;
    /**
     * Create a RegistryTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryTaskArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RegistryTask resources.
 */
export interface RegistryTaskState {
    /**
     * The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
     */
    agentPoolName?: pulumi.Input<string>;
    /**
     * A `agentSetting` block as defined below.
     *
     * > **NOTE:** Only one of `agentPoolName` and `agentSetting` can be specified.
     */
    agentSetting?: pulumi.Input<inputs.containerservice.RegistryTaskAgentSetting>;
    /**
     * A `baseImageTrigger` block as defined below.
     */
    baseImageTrigger?: pulumi.Input<inputs.containerservice.RegistryTaskBaseImageTrigger>;
    /**
     * The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
     */
    containerRegistryId?: pulumi.Input<string>;
    /**
     * A `dockerStep` block as defined below.
     */
    dockerStep?: pulumi.Input<inputs.containerservice.RegistryTaskDockerStep>;
    /**
     * Should this Container Registry Task be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A `encodedStep` block as defined below.
     */
    encodedStep?: pulumi.Input<inputs.containerservice.RegistryTaskEncodedStep>;
    /**
     * A `fileStep` block as defined below.
     *
     * > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
     */
    fileStep?: pulumi.Input<inputs.containerservice.RegistryTaskFileStep>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.containerservice.RegistryTaskIdentity>;
    /**
     * Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
     */
    isSystemTask?: pulumi.Input<boolean>;
    logTemplate?: pulumi.Input<string>;
    /**
     * The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `platform` block as defined below.
     *
     * > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
     */
    platform?: pulumi.Input<inputs.containerservice.RegistryTaskPlatform>;
    registryCredential?: pulumi.Input<inputs.containerservice.RegistryTaskRegistryCredential>;
    /**
     * One or more `sourceTrigger` blocks as defined below.
     */
    sourceTriggers?: pulumi.Input<pulumi.Input<inputs.containerservice.RegistryTaskSourceTrigger>[]>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * One or more `timerTrigger` blocks as defined below.
     */
    timerTriggers?: pulumi.Input<pulumi.Input<inputs.containerservice.RegistryTaskTimerTrigger>[]>;
}
/**
 * The set of arguments for constructing a RegistryTask resource.
 */
export interface RegistryTaskArgs {
    /**
     * The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
     */
    agentPoolName?: pulumi.Input<string>;
    /**
     * A `agentSetting` block as defined below.
     *
     * > **NOTE:** Only one of `agentPoolName` and `agentSetting` can be specified.
     */
    agentSetting?: pulumi.Input<inputs.containerservice.RegistryTaskAgentSetting>;
    /**
     * A `baseImageTrigger` block as defined below.
     */
    baseImageTrigger?: pulumi.Input<inputs.containerservice.RegistryTaskBaseImageTrigger>;
    /**
     * The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
     */
    containerRegistryId: pulumi.Input<string>;
    /**
     * A `dockerStep` block as defined below.
     */
    dockerStep?: pulumi.Input<inputs.containerservice.RegistryTaskDockerStep>;
    /**
     * Should this Container Registry Task be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A `encodedStep` block as defined below.
     */
    encodedStep?: pulumi.Input<inputs.containerservice.RegistryTaskEncodedStep>;
    /**
     * A `fileStep` block as defined below.
     *
     * > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
     */
    fileStep?: pulumi.Input<inputs.containerservice.RegistryTaskFileStep>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.containerservice.RegistryTaskIdentity>;
    /**
     * Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
     */
    isSystemTask?: pulumi.Input<boolean>;
    logTemplate?: pulumi.Input<string>;
    /**
     * The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A `platform` block as defined below.
     *
     * > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
     */
    platform?: pulumi.Input<inputs.containerservice.RegistryTaskPlatform>;
    registryCredential?: pulumi.Input<inputs.containerservice.RegistryTaskRegistryCredential>;
    /**
     * One or more `sourceTrigger` blocks as defined below.
     */
    sourceTriggers?: pulumi.Input<pulumi.Input<inputs.containerservice.RegistryTaskSourceTrigger>[]>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * One or more `timerTrigger` blocks as defined below.
     */
    timerTriggers?: pulumi.Input<pulumi.Input<inputs.containerservice.RegistryTaskTimerTrigger>[]>;
}
