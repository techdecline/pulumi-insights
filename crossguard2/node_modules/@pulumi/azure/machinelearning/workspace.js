"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workspace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleInsights = new azure.appinsights.Insights("example", {
 *     name: "workspace-example-ai",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     applicationType: "web",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "workspaceexamplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "workspacestorageaccount",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleWorkspace = new azure.machinelearning.Workspace("example", {
 *     name: "example-workspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     applicationInsightsId: exampleInsights.id,
 *     keyVaultId: exampleKeyVault.id,
 *     storageAccountId: exampleAccount.id,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * ```
 *
 * ### With Data Encryption
 *
 * > **NOTE:** The Key Vault must enable purge protection.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleInsights = new azure.appinsights.Insights("example", {
 *     name: "workspace-example-ai",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     applicationType: "web",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "workspaceexamplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     purgeProtectionEnabled: true,
 * });
 * const exampleAccessPolicy = new azure.keyvault.AccessPolicy("example", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Create",
 *         "Get",
 *         "Delete",
 *         "Purge",
 *         "GetRotationPolicy",
 *     ],
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "workspacestorageaccount",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "workspaceexamplekeyvaultkey",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [
 *         exampleKeyVault,
 *         exampleAccessPolicy,
 *     ],
 * });
 * const exampleWorkspace = new azure.machinelearning.Workspace("example", {
 *     name: "example-workspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     applicationInsightsId: exampleInsights.id,
 *     keyVaultId: exampleKeyVault.id,
 *     storageAccountId: exampleAccount.id,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     encryption: {
 *         keyVaultId: exampleKeyVault.id,
 *         keyId: exampleKey.id,
 *     },
 * });
 * ```
 *
 * ### With User Assigned Identity And Data Encryption
 *
 * > **NOTE:** The Key Vault must enable purge protection.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleInsights = new azure.appinsights.Insights("example", {
 *     name: "example-ai",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     applicationType: "web",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestorageaccount",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "example-keyvalut",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     purgeProtectionEnabled: true,
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "example-identity",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const example_identity = new azure.keyvault.AccessPolicy("example-identity", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: exampleUserAssignedIdentity.principalId,
 *     keyPermissions: [
 *         "WrapKey",
 *         "UnwrapKey",
 *         "Get",
 *         "Recover",
 *     ],
 *     secretPermissions: [
 *         "Get",
 *         "List",
 *         "Set",
 *         "Delete",
 *         "Recover",
 *         "Backup",
 *         "Restore",
 *     ],
 * });
 * const example_sp = new azure.keyvault.AccessPolicy("example-sp", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Get",
 *         "Create",
 *         "Recover",
 *         "Delete",
 *         "Purge",
 *         "GetRotationPolicy",
 *     ],
 * });
 * const test = azuread.getServicePrincipal({
 *     displayName: "Azure Cosmos DB",
 * });
 * const example_cosmosdb = new azure.keyvault.AccessPolicy("example-cosmosdb", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: test.then(test => test.objectId),
 *     keyPermissions: [
 *         "Get",
 *         "Recover",
 *         "UnwrapKey",
 *         "WrapKey",
 *     ],
 * }, {
 *     dependsOn: [
 *         test,
 *         current,
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "example-keyvaultkey",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [
 *         exampleKeyVault,
 *         example_sp,
 *     ],
 * });
 * const example_role1 = new azure.authorization.Assignment("example-role1", {
 *     scope: exampleKeyVault.id,
 *     roleDefinitionName: "Contributor",
 *     principalId: exampleUserAssignedIdentity.principalId,
 * });
 * const example_role2 = new azure.authorization.Assignment("example-role2", {
 *     scope: exampleAccount.id,
 *     roleDefinitionName: "Storage Blob Data Contributor",
 *     principalId: exampleUserAssignedIdentity.principalId,
 * });
 * const example_role3 = new azure.authorization.Assignment("example-role3", {
 *     scope: exampleAccount.id,
 *     roleDefinitionName: "Contributor",
 *     principalId: exampleUserAssignedIdentity.principalId,
 * });
 * const example_role4 = new azure.authorization.Assignment("example-role4", {
 *     scope: exampleInsights.id,
 *     roleDefinitionName: "Contributor",
 *     principalId: exampleUserAssignedIdentity.principalId,
 * });
 * const exampleWorkspace = new azure.machinelearning.Workspace("example", {
 *     name: "example-workspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     applicationInsightsId: exampleInsights.id,
 *     keyVaultId: exampleKeyVault.id,
 *     storageAccountId: exampleAccount.id,
 *     highBusinessImpact: true,
 *     primaryUserAssignedIdentity: exampleUserAssignedIdentity.id,
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 *     encryption: {
 *         userAssignedIdentityId: exampleUserAssignedIdentity.id,
 *         keyVaultId: exampleKeyVault.id,
 *         keyId: exampleKey.id,
 *     },
 * }, {
 *     dependsOn: [
 *         example_role1,
 *         example_role2,
 *         example_role3,
 *         example_role4,
 *         example_cosmosdb,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Machine Learning Workspace can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:machinelearning/workspace:Workspace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.MachineLearningServices/workspaces/workspace1
 * ```
 */
class Workspace extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["applicationInsightsId"] = state ? state.applicationInsightsId : undefined;
            resourceInputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discoveryUrl"] = state ? state.discoveryUrl : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["featureStore"] = state ? state.featureStore : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["highBusinessImpact"] = state ? state.highBusinessImpact : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["imageBuildComputeName"] = state ? state.imageBuildComputeName : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedNetwork"] = state ? state.managedNetwork : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryUserAssignedIdentity"] = state ? state.primaryUserAssignedIdentity : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["serverlessCompute"] = state ? state.serverlessCompute : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["v1LegacyModeEnabled"] = state ? state.v1LegacyModeEnabled : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.applicationInsightsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationInsightsId'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["applicationInsightsId"] = args ? args.applicationInsightsId : undefined;
            resourceInputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["featureStore"] = args ? args.featureStore : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["highBusinessImpact"] = args ? args.highBusinessImpact : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["imageBuildComputeName"] = args ? args.imageBuildComputeName : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedNetwork"] = args ? args.managedNetwork : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryUserAssignedIdentity"] = args ? args.primaryUserAssignedIdentity : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serverlessCompute"] = args ? args.serverlessCompute : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["v1LegacyModeEnabled"] = args ? args.v1LegacyModeEnabled : undefined;
            resourceInputs["discoveryUrl"] = undefined /*out*/;
            resourceInputs["workspaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workspace.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Workspace(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }
}
exports.Workspace = Workspace;
/** @internal */
Workspace.__pulumiType = 'azure:machinelearning/workspace:Workspace';
//# sourceMappingURL=workspace.js.map