"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoverJobDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Storage Mover Job Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleMover = new azure.storage.Mover("example", {
 *     name: "example-ssm",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleMoverAgent = new azure.storage.MoverAgent("example", {
 *     name: "example-agent",
 *     storageMoverId: exampleMover.id,
 *     arcVirtualMachineId: pulumi.interpolate`${example.id}/providers/Microsoft.HybridCompute/machines/examples-hybridComputeName`,
 *     arcVirtualMachineUuid: "3bb2c024-eba9-4d18-9e7a-1d772fcc5fe9",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplesa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     allowNestedItemsToBePublic: true,
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "acccontainer",
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "blob",
 * });
 * const exampleMoverTargetEndpoint = new azure.storage.MoverTargetEndpoint("example", {
 *     name: "example-smte",
 *     storageMoverId: exampleMover.id,
 *     storageAccountId: exampleAccount.id,
 *     storageContainerName: exampleContainer.name,
 * });
 * const exampleMoverSourceEndpoint = new azure.storage.MoverSourceEndpoint("example", {
 *     name: "example-smse",
 *     storageMoverId: exampleMover.id,
 *     host: "192.168.0.1",
 * });
 * const exampleMoverProject = new azure.storage.MoverProject("example", {
 *     name: "example-sp",
 *     storageMoverId: exampleMover.id,
 * });
 * const exampleMoverJobDefinition = new azure.storage.MoverJobDefinition("example", {
 *     name: "example-sjd",
 *     storageMoverProjectId: exampleMoverProject.id,
 *     agentName: exampleMoverAgent.name,
 *     copyMode: "Additive",
 *     sourceName: exampleMoverSourceEndpoint.name,
 *     sourceSubPath: "/",
 *     targetName: exampleMoverTargetEndpoint.name,
 *     targetSubPath: "/",
 *     description: "Example Job Definition Description",
 * });
 * ```
 *
 * ## Import
 *
 * Storage Mover Job Definition can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/moverJobDefinition:MoverJobDefinition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.StorageMover/storageMovers/storageMover1/projects/project1/jobDefinitions/jobDefinition1
 * ```
 */
class MoverJobDefinition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["agentName"] = state ? state.agentName : undefined;
            resourceInputs["copyMode"] = state ? state.copyMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceName"] = state ? state.sourceName : undefined;
            resourceInputs["sourceSubPath"] = state ? state.sourceSubPath : undefined;
            resourceInputs["storageMoverProjectId"] = state ? state.storageMoverProjectId : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["targetSubPath"] = state ? state.targetSubPath : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.copyMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'copyMode'");
            }
            if ((!args || args.sourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceName'");
            }
            if ((!args || args.storageMoverProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageMoverProjectId'");
            }
            if ((!args || args.targetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetName'");
            }
            resourceInputs["agentName"] = args ? args.agentName : undefined;
            resourceInputs["copyMode"] = args ? args.copyMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceName"] = args ? args.sourceName : undefined;
            resourceInputs["sourceSubPath"] = args ? args.sourceSubPath : undefined;
            resourceInputs["storageMoverProjectId"] = args ? args.storageMoverProjectId : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["targetSubPath"] = args ? args.targetSubPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MoverJobDefinition.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MoverJobDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MoverJobDefinition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MoverJobDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MoverJobDefinition.__pulumiType;
    }
}
exports.MoverJobDefinition = MoverJobDefinition;
/** @internal */
MoverJobDefinition.__pulumiType = 'azure:storage/moverJobDefinition:MoverJobDefinition';
//# sourceMappingURL=moverJobDefinition.js.map