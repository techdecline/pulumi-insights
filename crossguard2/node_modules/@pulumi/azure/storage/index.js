"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoverTargetEndpoint = exports.MoverSourceEndpoint = exports.MoverProject = exports.MoverJobDefinition = exports.MoverAgent = exports.Mover = exports.ManagementPolicy = exports.LocalUser = exports.getTableEntityOutput = exports.getTableEntity = exports.getTableEntitiesOutput = exports.getTableEntities = exports.getTableOutput = exports.getTable = exports.getSyncGroupOutput = exports.getSyncGroup = exports.getSyncOutput = exports.getSync = exports.getStorageContainerOutput = exports.getStorageContainer = exports.getShareOutput = exports.getShare = exports.getQueueOutput = exports.getQueue = exports.getPolicyOutput = exports.getPolicy = exports.getEncryptionScopeOutput = exports.getEncryptionScope = exports.getContainersOutput = exports.getContainers = exports.getBlobOutput = exports.getBlob = exports.getAccountSASOutput = exports.getAccountSAS = exports.getAccountBlobContainerSASOutput = exports.getAccountBlobContainerSAS = exports.getAccountOutput = exports.getAccount = exports.EncryptionScope = exports.DataLakeGen2Path = exports.DataLakeGen2Filesystem = exports.CustomerManagedKey = exports.ContainerImmutabilityPolicy = exports.Container = exports.BlobInventoryPolicy = exports.Blob = exports.AccountStaticWebsite = exports.AccountQueueProperties = exports.AccountNetworkRules = exports.Account = void 0;
exports.ZipBlob = exports.TableEntity = exports.Table = exports.SyncServerEndpoint = exports.SyncGroup = exports.SyncCloudEndpoint = exports.Sync = exports.ShareFile = exports.ShareDirectory = exports.Share = exports.Queue = exports.ObjectReplication = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Account = null;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));
exports.AccountNetworkRules = null;
utilities.lazyLoad(exports, ["AccountNetworkRules"], () => require("./accountNetworkRules"));
exports.AccountQueueProperties = null;
utilities.lazyLoad(exports, ["AccountQueueProperties"], () => require("./accountQueueProperties"));
exports.AccountStaticWebsite = null;
utilities.lazyLoad(exports, ["AccountStaticWebsite"], () => require("./accountStaticWebsite"));
exports.Blob = null;
utilities.lazyLoad(exports, ["Blob"], () => require("./blob"));
exports.BlobInventoryPolicy = null;
utilities.lazyLoad(exports, ["BlobInventoryPolicy"], () => require("./blobInventoryPolicy"));
exports.Container = null;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));
exports.ContainerImmutabilityPolicy = null;
utilities.lazyLoad(exports, ["ContainerImmutabilityPolicy"], () => require("./containerImmutabilityPolicy"));
exports.CustomerManagedKey = null;
utilities.lazyLoad(exports, ["CustomerManagedKey"], () => require("./customerManagedKey"));
exports.DataLakeGen2Filesystem = null;
utilities.lazyLoad(exports, ["DataLakeGen2Filesystem"], () => require("./dataLakeGen2Filesystem"));
exports.DataLakeGen2Path = null;
utilities.lazyLoad(exports, ["DataLakeGen2Path"], () => require("./dataLakeGen2Path"));
exports.EncryptionScope = null;
utilities.lazyLoad(exports, ["EncryptionScope"], () => require("./encryptionScope"));
exports.getAccount = null;
exports.getAccountOutput = null;
utilities.lazyLoad(exports, ["getAccount", "getAccountOutput"], () => require("./getAccount"));
exports.getAccountBlobContainerSAS = null;
exports.getAccountBlobContainerSASOutput = null;
utilities.lazyLoad(exports, ["getAccountBlobContainerSAS", "getAccountBlobContainerSASOutput"], () => require("./getAccountBlobContainerSAS"));
exports.getAccountSAS = null;
exports.getAccountSASOutput = null;
utilities.lazyLoad(exports, ["getAccountSAS", "getAccountSASOutput"], () => require("./getAccountSAS"));
exports.getBlob = null;
exports.getBlobOutput = null;
utilities.lazyLoad(exports, ["getBlob", "getBlobOutput"], () => require("./getBlob"));
exports.getContainers = null;
exports.getContainersOutput = null;
utilities.lazyLoad(exports, ["getContainers", "getContainersOutput"], () => require("./getContainers"));
exports.getEncryptionScope = null;
exports.getEncryptionScopeOutput = null;
utilities.lazyLoad(exports, ["getEncryptionScope", "getEncryptionScopeOutput"], () => require("./getEncryptionScope"));
exports.getPolicy = null;
exports.getPolicyOutput = null;
utilities.lazyLoad(exports, ["getPolicy", "getPolicyOutput"], () => require("./getPolicy"));
exports.getQueue = null;
exports.getQueueOutput = null;
utilities.lazyLoad(exports, ["getQueue", "getQueueOutput"], () => require("./getQueue"));
exports.getShare = null;
exports.getShareOutput = null;
utilities.lazyLoad(exports, ["getShare", "getShareOutput"], () => require("./getShare"));
exports.getStorageContainer = null;
exports.getStorageContainerOutput = null;
utilities.lazyLoad(exports, ["getStorageContainer", "getStorageContainerOutput"], () => require("./getStorageContainer"));
exports.getSync = null;
exports.getSyncOutput = null;
utilities.lazyLoad(exports, ["getSync", "getSyncOutput"], () => require("./getSync"));
exports.getSyncGroup = null;
exports.getSyncGroupOutput = null;
utilities.lazyLoad(exports, ["getSyncGroup", "getSyncGroupOutput"], () => require("./getSyncGroup"));
exports.getTable = null;
exports.getTableOutput = null;
utilities.lazyLoad(exports, ["getTable", "getTableOutput"], () => require("./getTable"));
exports.getTableEntities = null;
exports.getTableEntitiesOutput = null;
utilities.lazyLoad(exports, ["getTableEntities", "getTableEntitiesOutput"], () => require("./getTableEntities"));
exports.getTableEntity = null;
exports.getTableEntityOutput = null;
utilities.lazyLoad(exports, ["getTableEntity", "getTableEntityOutput"], () => require("./getTableEntity"));
exports.LocalUser = null;
utilities.lazyLoad(exports, ["LocalUser"], () => require("./localUser"));
exports.ManagementPolicy = null;
utilities.lazyLoad(exports, ["ManagementPolicy"], () => require("./managementPolicy"));
exports.Mover = null;
utilities.lazyLoad(exports, ["Mover"], () => require("./mover"));
exports.MoverAgent = null;
utilities.lazyLoad(exports, ["MoverAgent"], () => require("./moverAgent"));
exports.MoverJobDefinition = null;
utilities.lazyLoad(exports, ["MoverJobDefinition"], () => require("./moverJobDefinition"));
exports.MoverProject = null;
utilities.lazyLoad(exports, ["MoverProject"], () => require("./moverProject"));
exports.MoverSourceEndpoint = null;
utilities.lazyLoad(exports, ["MoverSourceEndpoint"], () => require("./moverSourceEndpoint"));
exports.MoverTargetEndpoint = null;
utilities.lazyLoad(exports, ["MoverTargetEndpoint"], () => require("./moverTargetEndpoint"));
exports.ObjectReplication = null;
utilities.lazyLoad(exports, ["ObjectReplication"], () => require("./objectReplication"));
exports.Queue = null;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));
exports.Share = null;
utilities.lazyLoad(exports, ["Share"], () => require("./share"));
exports.ShareDirectory = null;
utilities.lazyLoad(exports, ["ShareDirectory"], () => require("./shareDirectory"));
exports.ShareFile = null;
utilities.lazyLoad(exports, ["ShareFile"], () => require("./shareFile"));
exports.Sync = null;
utilities.lazyLoad(exports, ["Sync"], () => require("./sync"));
exports.SyncCloudEndpoint = null;
utilities.lazyLoad(exports, ["SyncCloudEndpoint"], () => require("./syncCloudEndpoint"));
exports.SyncGroup = null;
utilities.lazyLoad(exports, ["SyncGroup"], () => require("./syncGroup"));
exports.SyncServerEndpoint = null;
utilities.lazyLoad(exports, ["SyncServerEndpoint"], () => require("./syncServerEndpoint"));
exports.Table = null;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));
exports.TableEntity = null;
utilities.lazyLoad(exports, ["TableEntity"], () => require("./tableEntity"));
__exportStar(require("./zMixins"), exports);
exports.ZipBlob = null;
utilities.lazyLoad(exports, ["ZipBlob"], () => require("./zipBlob"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:storage/account:Account":
                return new exports.Account(name, undefined, { urn });
            case "azure:storage/accountNetworkRules:AccountNetworkRules":
                return new exports.AccountNetworkRules(name, undefined, { urn });
            case "azure:storage/accountQueueProperties:AccountQueueProperties":
                return new exports.AccountQueueProperties(name, undefined, { urn });
            case "azure:storage/accountStaticWebsite:AccountStaticWebsite":
                return new exports.AccountStaticWebsite(name, undefined, { urn });
            case "azure:storage/blob:Blob":
                return new exports.Blob(name, undefined, { urn });
            case "azure:storage/blobInventoryPolicy:BlobInventoryPolicy":
                return new exports.BlobInventoryPolicy(name, undefined, { urn });
            case "azure:storage/container:Container":
                return new exports.Container(name, undefined, { urn });
            case "azure:storage/containerImmutabilityPolicy:ContainerImmutabilityPolicy":
                return new exports.ContainerImmutabilityPolicy(name, undefined, { urn });
            case "azure:storage/customerManagedKey:CustomerManagedKey":
                return new exports.CustomerManagedKey(name, undefined, { urn });
            case "azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem":
                return new exports.DataLakeGen2Filesystem(name, undefined, { urn });
            case "azure:storage/dataLakeGen2Path:DataLakeGen2Path":
                return new exports.DataLakeGen2Path(name, undefined, { urn });
            case "azure:storage/encryptionScope:EncryptionScope":
                return new exports.EncryptionScope(name, undefined, { urn });
            case "azure:storage/localUser:LocalUser":
                return new exports.LocalUser(name, undefined, { urn });
            case "azure:storage/managementPolicy:ManagementPolicy":
                return new exports.ManagementPolicy(name, undefined, { urn });
            case "azure:storage/mover:Mover":
                return new exports.Mover(name, undefined, { urn });
            case "azure:storage/moverAgent:MoverAgent":
                return new exports.MoverAgent(name, undefined, { urn });
            case "azure:storage/moverJobDefinition:MoverJobDefinition":
                return new exports.MoverJobDefinition(name, undefined, { urn });
            case "azure:storage/moverProject:MoverProject":
                return new exports.MoverProject(name, undefined, { urn });
            case "azure:storage/moverSourceEndpoint:MoverSourceEndpoint":
                return new exports.MoverSourceEndpoint(name, undefined, { urn });
            case "azure:storage/moverTargetEndpoint:MoverTargetEndpoint":
                return new exports.MoverTargetEndpoint(name, undefined, { urn });
            case "azure:storage/objectReplication:ObjectReplication":
                return new exports.ObjectReplication(name, undefined, { urn });
            case "azure:storage/queue:Queue":
                return new exports.Queue(name, undefined, { urn });
            case "azure:storage/share:Share":
                return new exports.Share(name, undefined, { urn });
            case "azure:storage/shareDirectory:ShareDirectory":
                return new exports.ShareDirectory(name, undefined, { urn });
            case "azure:storage/shareFile:ShareFile":
                return new exports.ShareFile(name, undefined, { urn });
            case "azure:storage/sync:Sync":
                return new exports.Sync(name, undefined, { urn });
            case "azure:storage/syncCloudEndpoint:SyncCloudEndpoint":
                return new exports.SyncCloudEndpoint(name, undefined, { urn });
            case "azure:storage/syncGroup:SyncGroup":
                return new exports.SyncGroup(name, undefined, { urn });
            case "azure:storage/syncServerEndpoint:SyncServerEndpoint":
                return new exports.SyncServerEndpoint(name, undefined, { urn });
            case "azure:storage/table:Table":
                return new exports.Table(name, undefined, { urn });
            case "azure:storage/tableEntity:TableEntity":
                return new exports.TableEntity(name, undefined, { urn });
            case "azure:storage/zipBlob:ZipBlob":
                return new exports.ZipBlob(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "storage/account", _module);
pulumi.runtime.registerResourceModule("azure", "storage/accountNetworkRules", _module);
pulumi.runtime.registerResourceModule("azure", "storage/accountQueueProperties", _module);
pulumi.runtime.registerResourceModule("azure", "storage/accountStaticWebsite", _module);
pulumi.runtime.registerResourceModule("azure", "storage/blob", _module);
pulumi.runtime.registerResourceModule("azure", "storage/blobInventoryPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "storage/container", _module);
pulumi.runtime.registerResourceModule("azure", "storage/containerImmutabilityPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "storage/customerManagedKey", _module);
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Filesystem", _module);
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Path", _module);
pulumi.runtime.registerResourceModule("azure", "storage/encryptionScope", _module);
pulumi.runtime.registerResourceModule("azure", "storage/localUser", _module);
pulumi.runtime.registerResourceModule("azure", "storage/managementPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "storage/mover", _module);
pulumi.runtime.registerResourceModule("azure", "storage/moverAgent", _module);
pulumi.runtime.registerResourceModule("azure", "storage/moverJobDefinition", _module);
pulumi.runtime.registerResourceModule("azure", "storage/moverProject", _module);
pulumi.runtime.registerResourceModule("azure", "storage/moverSourceEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "storage/moverTargetEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "storage/objectReplication", _module);
pulumi.runtime.registerResourceModule("azure", "storage/queue", _module);
pulumi.runtime.registerResourceModule("azure", "storage/share", _module);
pulumi.runtime.registerResourceModule("azure", "storage/shareDirectory", _module);
pulumi.runtime.registerResourceModule("azure", "storage/shareFile", _module);
pulumi.runtime.registerResourceModule("azure", "storage/sync", _module);
pulumi.runtime.registerResourceModule("azure", "storage/syncCloudEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "storage/syncGroup", _module);
pulumi.runtime.registerResourceModule("azure", "storage/syncServerEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "storage/table", _module);
pulumi.runtime.registerResourceModule("azure", "storage/tableEntity", _module);
pulumi.runtime.registerResourceModule("azure", "storage/zipBlob", _module);
//# sourceMappingURL=index.js.map