"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncServerEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Storage Sync Server Endpoint.
 *
 * > **NOTE:** The parent `azure.storage.SyncGroup` must have an `azure.storage.SyncCloudEndpoint` available before an `azure.storage.SyncServerEndpoint` resource can be created.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleSync = new azure.storage.Sync("example", {
 *     name: "example-storage-sync",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleSyncGroup = new azure.storage.SyncGroup("example", {
 *     name: "example-storage-sync-group",
 *     storageSyncId: exampleSync.id,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "example-storage-account",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleShare = new azure.storage.Share("example", {
 *     name: "example-storage-share",
 *     storageAccountName: exampleAccount.name,
 *     quota: 1,
 *     acls: [{
 *         id: "GhostedRecall",
 *         accessPolicies: [{
 *             permissions: "r",
 *         }],
 *     }],
 * });
 * const exampleSyncCloudEndpoint = new azure.storage.SyncCloudEndpoint("example", {
 *     name: "example-ss-ce",
 *     storageSyncGroupId: exampleSyncGroup.id,
 *     fileShareName: exampleShare.name,
 *     storageAccountId: exampleAccount.id,
 * });
 * const exampleSyncServerEndpoint = new azure.storage.SyncServerEndpoint("example", {
 *     name: "example-storage-sync-server-endpoint",
 *     storageSyncGroupId: exampleSyncGroup.id,
 *     registeredServerId: exampleSync.registeredServers[0],
 * }, {
 *     dependsOn: [exampleSyncCloudEndpoint],
 * });
 * ```
 *
 * ## Import
 *
 * Storage Sync Server Endpoints can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/syncServerEndpoint:SyncServerEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageSync/storageSyncServices/sync1/syncGroups/syncGroup1/serverEndpoints/endpoint1
 * ```
 */
class SyncServerEndpoint extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cloudTieringEnabled"] = state ? state.cloudTieringEnabled : undefined;
            resourceInputs["initialDownloadPolicy"] = state ? state.initialDownloadPolicy : undefined;
            resourceInputs["localCacheMode"] = state ? state.localCacheMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["registeredServerId"] = state ? state.registeredServerId : undefined;
            resourceInputs["serverLocalPath"] = state ? state.serverLocalPath : undefined;
            resourceInputs["storageSyncGroupId"] = state ? state.storageSyncGroupId : undefined;
            resourceInputs["tierFilesOlderThanDays"] = state ? state.tierFilesOlderThanDays : undefined;
            resourceInputs["volumeFreeSpacePercent"] = state ? state.volumeFreeSpacePercent : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.registeredServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registeredServerId'");
            }
            if ((!args || args.serverLocalPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverLocalPath'");
            }
            if ((!args || args.storageSyncGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageSyncGroupId'");
            }
            resourceInputs["cloudTieringEnabled"] = args ? args.cloudTieringEnabled : undefined;
            resourceInputs["initialDownloadPolicy"] = args ? args.initialDownloadPolicy : undefined;
            resourceInputs["localCacheMode"] = args ? args.localCacheMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registeredServerId"] = args ? args.registeredServerId : undefined;
            resourceInputs["serverLocalPath"] = args ? args.serverLocalPath : undefined;
            resourceInputs["storageSyncGroupId"] = args ? args.storageSyncGroupId : undefined;
            resourceInputs["tierFilesOlderThanDays"] = args ? args.tierFilesOlderThanDays : undefined;
            resourceInputs["volumeFreeSpacePercent"] = args ? args.volumeFreeSpacePercent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyncServerEndpoint.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SyncServerEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SyncServerEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SyncServerEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncServerEndpoint.__pulumiType;
    }
}
exports.SyncServerEndpoint = SyncServerEndpoint;
/** @internal */
SyncServerEndpoint.__pulumiType = 'azure:storage/syncServerEndpoint:SyncServerEndpoint';
//# sourceMappingURL=syncServerEndpoint.js.map