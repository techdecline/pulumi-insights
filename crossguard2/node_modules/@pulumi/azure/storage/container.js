"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Container within an Azure Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestoraccount",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "vhds",
 *     storageAccountId: exampleAccount.id,
 *     containerAccessType: "private",
 * });
 * ```
 *
 * ## Import
 *
 * Storage Containers can be imported using the `resource manager id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/container:Container container1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount/blobServices/default/containers/mycontainer
 * ```
 */
class Container extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["containerAccessType"] = state ? state.containerAccessType : undefined;
            resourceInputs["defaultEncryptionScope"] = state ? state.defaultEncryptionScope : undefined;
            resourceInputs["encryptionScopeOverrideEnabled"] = state ? state.encryptionScopeOverrideEnabled : undefined;
            resourceInputs["hasImmutabilityPolicy"] = state ? state.hasImmutabilityPolicy : undefined;
            resourceInputs["hasLegalHold"] = state ? state.hasLegalHold : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceManagerId"] = state ? state.resourceManagerId : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["containerAccessType"] = args ? args.containerAccessType : undefined;
            resourceInputs["defaultEncryptionScope"] = args ? args.defaultEncryptionScope : undefined;
            resourceInputs["encryptionScopeOverrideEnabled"] = args ? args.encryptionScopeOverrideEnabled : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["storageAccountName"] = args ? args.storageAccountName : undefined;
            resourceInputs["hasImmutabilityPolicy"] = undefined /*out*/;
            resourceInputs["hasLegalHold"] = undefined /*out*/;
            resourceInputs["resourceManagerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Container.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Container(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }
}
exports.Container = Container;
/** @internal */
Container.__pulumiType = 'azure:storage/container:Container';
//# sourceMappingURL=container.js.map