"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalUser = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Storage Account Local User.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "WestEurope",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "example-account",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountKind: "StorageV2",
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     isHnsEnabled: true,
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "example-container",
 *     storageAccountName: exampleAccount.name,
 * });
 * const exampleLocalUser = new azure.storage.LocalUser("example", {
 *     name: "user1",
 *     storageAccountId: exampleAccount.id,
 *     sshKeyEnabled: true,
 *     sshPasswordEnabled: true,
 *     homeDirectory: "example_path",
 *     sshAuthorizedKeys: [
 *         {
 *             description: "key1",
 *             key: firstPublicKey,
 *         },
 *         {
 *             description: "key2",
 *             key: secondPublicKey,
 *         },
 *     ],
 *     permissionScopes: [{
 *         permissions: {
 *             read: true,
 *             create: true,
 *         },
 *         service: "blob",
 *         resourceName: exampleContainer.name,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Storage Account Local Users can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/localUser:LocalUser example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Storage/storageAccounts/storageAccount1/localUsers/user1
 * ```
 */
class LocalUser extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["homeDirectory"] = state ? state.homeDirectory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["permissionScopes"] = state ? state.permissionScopes : undefined;
            resourceInputs["sid"] = state ? state.sid : undefined;
            resourceInputs["sshAuthorizedKeys"] = state ? state.sshAuthorizedKeys : undefined;
            resourceInputs["sshKeyEnabled"] = state ? state.sshKeyEnabled : undefined;
            resourceInputs["sshPasswordEnabled"] = state ? state.sshPasswordEnabled : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["homeDirectory"] = args ? args.homeDirectory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissionScopes"] = args ? args.permissionScopes : undefined;
            resourceInputs["sshAuthorizedKeys"] = args ? args.sshAuthorizedKeys : undefined;
            resourceInputs["sshKeyEnabled"] = args ? args.sshKeyEnabled : undefined;
            resourceInputs["sshPasswordEnabled"] = args ? args.sshPasswordEnabled : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["sid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "sid"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LocalUser.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing LocalUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LocalUser(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LocalUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalUser.__pulumiType;
    }
}
exports.LocalUser = LocalUser;
/** @internal */
LocalUser.__pulumiType = 'azure:storage/localUser:LocalUser';
//# sourceMappingURL=localUser.js.map