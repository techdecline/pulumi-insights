"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerImmutabilityPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Immutability Policy for a Container within an Azure Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestoraccount",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "example",
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "private",
 * });
 * const exampleContainerImmutabilityPolicy = new azure.storage.ContainerImmutabilityPolicy("example", {
 *     storageContainerResourceManagerId: exampleContainer.resourceManagerId,
 *     immutabilityPeriodInDays: 14,
 *     protectedAppendWritesAllEnabled: false,
 *     protectedAppendWritesEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Storage Container Immutability Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/containerImmutabilityPolicy:ContainerImmutabilityPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount/blobServices/default/containers/mycontainer/immutabilityPolicies/default
 * ```
 */
class ContainerImmutabilityPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["immutabilityPeriodInDays"] = state ? state.immutabilityPeriodInDays : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["protectedAppendWritesAllEnabled"] = state ? state.protectedAppendWritesAllEnabled : undefined;
            resourceInputs["protectedAppendWritesEnabled"] = state ? state.protectedAppendWritesEnabled : undefined;
            resourceInputs["storageContainerResourceManagerId"] = state ? state.storageContainerResourceManagerId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.immutabilityPeriodInDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'immutabilityPeriodInDays'");
            }
            if ((!args || args.storageContainerResourceManagerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageContainerResourceManagerId'");
            }
            resourceInputs["immutabilityPeriodInDays"] = args ? args.immutabilityPeriodInDays : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["protectedAppendWritesAllEnabled"] = args ? args.protectedAppendWritesAllEnabled : undefined;
            resourceInputs["protectedAppendWritesEnabled"] = args ? args.protectedAppendWritesEnabled : undefined;
            resourceInputs["storageContainerResourceManagerId"] = args ? args.storageContainerResourceManagerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerImmutabilityPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ContainerImmutabilityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ContainerImmutabilityPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ContainerImmutabilityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerImmutabilityPolicy.__pulumiType;
    }
}
exports.ContainerImmutabilityPolicy = ContainerImmutabilityPolicy;
/** @internal */
ContainerImmutabilityPolicy.__pulumiType = 'azure:storage/containerImmutabilityPolicy:ContainerImmutabilityPolicy';
//# sourceMappingURL=containerImmutabilityPolicy.js.map