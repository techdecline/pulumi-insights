"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableEntity = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Entity within a Table in an Azure Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "azureexample",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "azureexamplestorage1",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleTable = new azure.storage.Table("example", {
 *     name: "myexampletable",
 *     storageAccountName: exampleAccount.name,
 * });
 * const exampleTableEntity = new azure.storage.TableEntity("example", {
 *     storageTableId: exampleTable.id,
 *     partitionKey: "examplepartition",
 *     rowKey: "examplerow",
 *     entity: {
 *         example: "example",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Entities within a Table in an Azure Storage Account can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:storage/tableEntity:TableEntity entity1 https://example.table.core.windows.net/table1(PartitionKey='samplepartition',RowKey='samplerow')
 * ```
 */
class TableEntity extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["entity"] = state ? state.entity : undefined;
            resourceInputs["partitionKey"] = state ? state.partitionKey : undefined;
            resourceInputs["rowKey"] = state ? state.rowKey : undefined;
            resourceInputs["storageTableId"] = state ? state.storageTableId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.entity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entity'");
            }
            if ((!args || args.partitionKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionKey'");
            }
            if ((!args || args.rowKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rowKey'");
            }
            if ((!args || args.storageTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageTableId'");
            }
            resourceInputs["entity"] = args ? args.entity : undefined;
            resourceInputs["partitionKey"] = args ? args.partitionKey : undefined;
            resourceInputs["rowKey"] = args ? args.rowKey : undefined;
            resourceInputs["storageTableId"] = args ? args.storageTableId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TableEntity.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing TableEntity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TableEntity(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TableEntity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TableEntity.__pulumiType;
    }
}
exports.TableEntity = TableEntity;
/** @internal */
TableEntity.__pulumiType = 'azure:storage/tableEntity:TableEntity';
//# sourceMappingURL=tableEntity.js.map