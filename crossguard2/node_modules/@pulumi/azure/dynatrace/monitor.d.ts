import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages Dynatrace monitors.
 *
 * ## Import
 *
 * Dynatrace monitor can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dynatrace/monitor:Monitor example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Dynatrace.Observability/monitors/monitor1
 * ```
 */
export declare class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor;
    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Monitor;
    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     */
    readonly identity: pulumi.Output<outputs.dynatrace.MonitorIdentity>;
    /**
     * The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     */
    readonly marketplaceSubscription: pulumi.Output<string>;
    /**
     * Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     */
    readonly monitoringEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    readonly plan: pulumi.Output<outputs.dynatrace.MonitorPlan>;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
     */
    readonly user: pulumi.Output<outputs.dynatrace.MonitorUser>;
    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.dynatrace.MonitorIdentity>;
    /**
     * The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     */
    marketplaceSubscription?: pulumi.Input<string>;
    /**
     * Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     */
    monitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    plan?: pulumi.Input<inputs.dynatrace.MonitorPlan>;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
     */
    user?: pulumi.Input<inputs.dynatrace.MonitorUser>;
}
/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     */
    identity: pulumi.Input<inputs.dynatrace.MonitorIdentity>;
    /**
     * The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     */
    marketplaceSubscription: pulumi.Input<string>;
    /**
     * Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     */
    monitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     */
    plan: pulumi.Input<inputs.dynatrace.MonitorPlan>;
    /**
     * The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
     */
    user: pulumi.Input<inputs.dynatrace.MonitorUser>;
}
