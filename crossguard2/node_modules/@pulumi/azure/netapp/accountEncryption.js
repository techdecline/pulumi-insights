"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountEncryption = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a NetApp Account Encryption Resource.
 *
 * For more information about Azure NetApp Files Customer-Managed Keys feature, please refer to [Configure customer-managed keys for Azure NetApp Files volume encryption](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-customer-managed-keys)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const current = azure.core.getClientConfig({});
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "anf-user-assigned-identity",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "anfcmkakv",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     enabledForDiskEncryption: true,
 *     enabledForDeployment: true,
 *     enabledForTemplateDeployment: true,
 *     purgeProtectionEnabled: true,
 *     tenantId: "00000000-0000-0000-0000-000000000000",
 *     skuName: "standard",
 *     accessPolicies: [
 *         {
 *             tenantId: "00000000-0000-0000-0000-000000000000",
 *             objectId: current.then(current => current.objectId),
 *             keyPermissions: [
 *                 "Get",
 *                 "Create",
 *                 "Delete",
 *                 "WrapKey",
 *                 "UnwrapKey",
 *                 "GetRotationPolicy",
 *                 "SetRotationPolicy",
 *             ],
 *         },
 *         {
 *             tenantId: "00000000-0000-0000-0000-000000000000",
 *             objectId: exampleUserAssignedIdentity.principalId,
 *             keyPermissions: [
 *                 "Get",
 *                 "Encrypt",
 *                 "Decrypt",
 *             ],
 *         },
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "anfencryptionkey",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * });
 * const exampleAccount = new azure.netapp.Account("example", {
 *     name: "netappaccount",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 * });
 * const exampleAccountEncryption = new azure.netapp.AccountEncryption("example", {
 *     netappAccountId: exampleAccount.id,
 *     userAssignedIdentityId: exampleUserAssignedIdentity.id,
 *     encryptionKey: exampleKey.versionlessId,
 * });
 * ```
 *
 * ## Import
 *
 * Account Encryption Resources can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:netapp/accountEncryption:AccountEncryption example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1
 * ```
 */
class AccountEncryption extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["netappAccountId"] = state ? state.netappAccountId : undefined;
            resourceInputs["systemAssignedIdentityPrincipalId"] = state ? state.systemAssignedIdentityPrincipalId : undefined;
            resourceInputs["userAssignedIdentityId"] = state ? state.userAssignedIdentityId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.encryptionKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionKey'");
            }
            if ((!args || args.netappAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netappAccountId'");
            }
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["netappAccountId"] = args ? args.netappAccountId : undefined;
            resourceInputs["systemAssignedIdentityPrincipalId"] = args ? args.systemAssignedIdentityPrincipalId : undefined;
            resourceInputs["userAssignedIdentityId"] = args ? args.userAssignedIdentityId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountEncryption.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AccountEncryption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccountEncryption(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccountEncryption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountEncryption.__pulumiType;
    }
}
exports.AccountEncryption = AccountEncryption;
/** @internal */
AccountEncryption.__pulumiType = 'azure:netapp/accountEncryption:AccountEncryption';
//# sourceMappingURL=accountEncryption.js.map