"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Volume = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a NetApp Volume.
 *
 * !>**IMPORTANT:** This resource uses a feature to prevent deletion called `preventVolumeDestruction`, defaulting to `true`. It is intentionally set to `true` to prevent the possibility of accidental data loss. The example in this page shows all possible protection options you can apply, it is using same values as the defaults.
 *
 * ## Import
 *
 * NetApp Volumes can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:netapp/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1
 * ```
 */
class Volume extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["azureVmwareDataStoreEnabled"] = state ? state.azureVmwareDataStoreEnabled : undefined;
            resourceInputs["createFromSnapshotResourceId"] = state ? state.createFromSnapshotResourceId : undefined;
            resourceInputs["dataProtectionBackupPolicy"] = state ? state.dataProtectionBackupPolicy : undefined;
            resourceInputs["dataProtectionReplication"] = state ? state.dataProtectionReplication : undefined;
            resourceInputs["dataProtectionSnapshotPolicy"] = state ? state.dataProtectionSnapshotPolicy : undefined;
            resourceInputs["encryptionKeySource"] = state ? state.encryptionKeySource : undefined;
            resourceInputs["exportPolicyRules"] = state ? state.exportPolicyRules : undefined;
            resourceInputs["kerberosEnabled"] = state ? state.kerberosEnabled : undefined;
            resourceInputs["keyVaultPrivateEndpointId"] = state ? state.keyVaultPrivateEndpointId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mountIpAddresses"] = state ? state.mountIpAddresses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkFeatures"] = state ? state.networkFeatures : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["securityStyle"] = state ? state.securityStyle : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["smb3ProtocolEncryptionEnabled"] = state ? state.smb3ProtocolEncryptionEnabled : undefined;
            resourceInputs["smbAccessBasedEnumerationEnabled"] = state ? state.smbAccessBasedEnumerationEnabled : undefined;
            resourceInputs["smbContinuousAvailabilityEnabled"] = state ? state.smbContinuousAvailabilityEnabled : undefined;
            resourceInputs["smbNonBrowsableEnabled"] = state ? state.smbNonBrowsableEnabled : undefined;
            resourceInputs["snapshotDirectoryVisible"] = state ? state.snapshotDirectoryVisible : undefined;
            resourceInputs["storageQuotaInGb"] = state ? state.storageQuotaInGb : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throughputInMibps"] = state ? state.throughputInMibps : undefined;
            resourceInputs["volumePath"] = state ? state.volumePath : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.poolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serviceLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            if ((!args || args.storageQuotaInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageQuotaInGb'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.volumePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumePath'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["azureVmwareDataStoreEnabled"] = args ? args.azureVmwareDataStoreEnabled : undefined;
            resourceInputs["createFromSnapshotResourceId"] = args ? args.createFromSnapshotResourceId : undefined;
            resourceInputs["dataProtectionBackupPolicy"] = args ? args.dataProtectionBackupPolicy : undefined;
            resourceInputs["dataProtectionReplication"] = args ? args.dataProtectionReplication : undefined;
            resourceInputs["dataProtectionSnapshotPolicy"] = args ? args.dataProtectionSnapshotPolicy : undefined;
            resourceInputs["encryptionKeySource"] = args ? args.encryptionKeySource : undefined;
            resourceInputs["exportPolicyRules"] = args ? args.exportPolicyRules : undefined;
            resourceInputs["kerberosEnabled"] = args ? args.kerberosEnabled : undefined;
            resourceInputs["keyVaultPrivateEndpointId"] = args ? args.keyVaultPrivateEndpointId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkFeatures"] = args ? args.networkFeatures : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["securityStyle"] = args ? args.securityStyle : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["smb3ProtocolEncryptionEnabled"] = args ? args.smb3ProtocolEncryptionEnabled : undefined;
            resourceInputs["smbAccessBasedEnumerationEnabled"] = args ? args.smbAccessBasedEnumerationEnabled : undefined;
            resourceInputs["smbContinuousAvailabilityEnabled"] = args ? args.smbContinuousAvailabilityEnabled : undefined;
            resourceInputs["smbNonBrowsableEnabled"] = args ? args.smbNonBrowsableEnabled : undefined;
            resourceInputs["snapshotDirectoryVisible"] = args ? args.snapshotDirectoryVisible : undefined;
            resourceInputs["storageQuotaInGb"] = args ? args.storageQuotaInGb : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughputInMibps"] = args ? args.throughputInMibps : undefined;
            resourceInputs["volumePath"] = args ? args.volumePath : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["mountIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Volume(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }
}
exports.Volume = Volume;
/** @internal */
Volume.__pulumiType = 'azure:netapp/volume:Volume';
//# sourceMappingURL=volume.js.map