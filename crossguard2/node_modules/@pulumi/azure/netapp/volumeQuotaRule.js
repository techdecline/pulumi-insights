"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeQuotaRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Volume Quota Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-virtualnetwork",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 *     delegations: [{
 *         name: "netapp",
 *         serviceDelegation: {
 *             name: "Microsoft.Netapp/volumes",
 *             actions: [
 *                 "Microsoft.Network/networkinterfaces/*",
 *                 "Microsoft.Network/virtualNetworks/subnets/join/action",
 *             ],
 *         },
 *     }],
 * });
 * const exampleAccount = new azure.netapp.Account("example", {
 *     name: "example-netappaccount",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const examplePool = new azure.netapp.Pool("example", {
 *     name: "example-netapppool",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     accountName: exampleAccount.name,
 *     serviceLevel: "Premium",
 *     sizeInTb: 4,
 * });
 * const exampleVolume = new azure.netapp.Volume("example", {
 *     name: "example-netappvolume",
 *     location: example.location,
 *     zone: "1",
 *     resourceGroupName: example.name,
 *     accountName: exampleAccount.name,
 *     poolName: examplePool.name,
 *     volumePath: "my-unique-file-path",
 *     serviceLevel: "Premium",
 *     subnetId: exampleSubnet.id,
 *     networkFeatures: "Basic",
 *     protocols: ["NFSv4.1"],
 *     securityStyle: "unix",
 *     storageQuotaInGb: 100,
 *     snapshotDirectoryVisible: false,
 * });
 * const quota1 = new azure.netapp.VolumeQuotaRule("quota1", {
 *     name: "example-quota-rule-1",
 *     location: example.location,
 *     volumeId: exampleVolume.id,
 *     quotaTarget: "3001",
 *     quotaSizeInKib: 1024,
 *     quotaType: "IndividualGroupQuota",
 * });
 * const quota2 = new azure.netapp.VolumeQuotaRule("quota2", {
 *     name: "example-quota-rule-2",
 *     location: example.location,
 *     volumeId: exampleVolume.id,
 *     quotaTarget: "2001",
 *     quotaSizeInKib: 1024,
 *     quotaType: "IndividualUserQuota",
 * });
 * const quota3 = new azure.netapp.VolumeQuotaRule("quota3", {
 *     name: "example-quota-rule-3",
 *     location: example.location,
 *     volumeId: exampleVolume.id,
 *     quotaSizeInKib: 1024,
 *     quotaType: "DefaultUserQuota",
 * });
 * const quota4 = new azure.netapp.VolumeQuotaRule("quota4", {
 *     name: "example-quota-rule-4",
 *     location: example.location,
 *     volumeId: exampleVolume.id,
 *     quotaSizeInKib: 1024,
 *     quotaType: "DefaultGroupQuota",
 * });
 * ```
 *
 * ## Import
 *
 * Volume Quota Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:netapp/volumeQuotaRule:VolumeQuotaRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/vol1/volumeQuotaRules/quota1
 * ```
 */
class VolumeQuotaRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["quotaSizeInKib"] = state ? state.quotaSizeInKib : undefined;
            resourceInputs["quotaTarget"] = state ? state.quotaTarget : undefined;
            resourceInputs["quotaType"] = state ? state.quotaType : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.quotaSizeInKib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'quotaSizeInKib'");
            }
            if ((!args || args.quotaType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'quotaType'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["quotaSizeInKib"] = args ? args.quotaSizeInKib : undefined;
            resourceInputs["quotaTarget"] = args ? args.quotaTarget : undefined;
            resourceInputs["quotaType"] = args ? args.quotaType : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeQuotaRule.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VolumeQuotaRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VolumeQuotaRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VolumeQuotaRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeQuotaRule.__pulumiType;
    }
}
exports.VolumeQuotaRule = VolumeQuotaRule;
/** @internal */
VolumeQuotaRule.__pulumiType = 'azure:netapp/volumeQuotaRule:VolumeQuotaRule';
//# sourceMappingURL=volumeQuotaRule.js.map