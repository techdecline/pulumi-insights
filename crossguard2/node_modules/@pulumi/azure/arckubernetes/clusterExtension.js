"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterExtension = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Arc Kubernetes Cluster Extension.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleCluster = new azure.arckubernetes.Cluster("example", {
 *     name: "example-akcc",
 *     resourceGroupName: example.name,
 *     location: "West Europe",
 *     agentPublicKeyCertificate: std.filebase64({
 *         input: "testdata/public.cer",
 *     }).then(invoke => invoke.result),
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         ENV: "Test",
 *     },
 * });
 * const exampleClusterExtension = new azure.arckubernetes.ClusterExtension("example", {
 *     name: "example-ext",
 *     clusterId: exampleCluster.id,
 *     extensionType: "microsoft.flux",
 * });
 * ```
 *
 * ## Import
 *
 * Arc Kubernetes Cluster Extension can be imported using the `resource id` for different `cluster_resource_name`, e.g.
 *
 * ```sh
 * $ pulumi import azure:arckubernetes/clusterExtension:ClusterExtension example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Kubernetes/connectedClusters/cluster1/providers/Microsoft.KubernetesConfiguration/extensions/extension1
 * ```
 */
class ClusterExtension extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configurationProtectedSettings"] = state ? state.configurationProtectedSettings : undefined;
            resourceInputs["configurationSettings"] = state ? state.configurationSettings : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["extensionType"] = state ? state.extensionType : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseNamespace"] = state ? state.releaseNamespace : undefined;
            resourceInputs["releaseTrain"] = state ? state.releaseTrain : undefined;
            resourceInputs["targetNamespace"] = state ? state.targetNamespace : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.extensionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionType'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configurationProtectedSettings"] = args ? args.configurationProtectedSettings : undefined;
            resourceInputs["configurationSettings"] = args ? args.configurationSettings : undefined;
            resourceInputs["extensionType"] = args ? args.extensionType : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["releaseNamespace"] = args ? args.releaseNamespace : undefined;
            resourceInputs["releaseTrain"] = args ? args.releaseTrain : undefined;
            resourceInputs["targetNamespace"] = args ? args.targetNamespace : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["currentVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterExtension.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ClusterExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ClusterExtension(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClusterExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterExtension.__pulumiType;
    }
}
exports.ClusterExtension = ClusterExtension;
/** @internal */
ClusterExtension.__pulumiType = 'azure:arckubernetes/clusterExtension:ClusterExtension';
//# sourceMappingURL=clusterExtension.js.map