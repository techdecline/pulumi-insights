"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedServer = exports.getEnterpriseDatabaseOutput = exports.getEnterpriseDatabase = exports.getCacheOutput = exports.getCache = exports.FirewallRule = exports.EnterpriseDatabase = exports.EnterpriseCluster = exports.CacheAccessPolicyAssignment = exports.CacheAccessPolicy = exports.Cache = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Cache = null;
utilities.lazyLoad(exports, ["Cache"], () => require("./cache"));
exports.CacheAccessPolicy = null;
utilities.lazyLoad(exports, ["CacheAccessPolicy"], () => require("./cacheAccessPolicy"));
exports.CacheAccessPolicyAssignment = null;
utilities.lazyLoad(exports, ["CacheAccessPolicyAssignment"], () => require("./cacheAccessPolicyAssignment"));
exports.EnterpriseCluster = null;
utilities.lazyLoad(exports, ["EnterpriseCluster"], () => require("./enterpriseCluster"));
exports.EnterpriseDatabase = null;
utilities.lazyLoad(exports, ["EnterpriseDatabase"], () => require("./enterpriseDatabase"));
exports.FirewallRule = null;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));
exports.getCache = null;
exports.getCacheOutput = null;
utilities.lazyLoad(exports, ["getCache", "getCacheOutput"], () => require("./getCache"));
exports.getEnterpriseDatabase = null;
exports.getEnterpriseDatabaseOutput = null;
utilities.lazyLoad(exports, ["getEnterpriseDatabase", "getEnterpriseDatabaseOutput"], () => require("./getEnterpriseDatabase"));
exports.LinkedServer = null;
utilities.lazyLoad(exports, ["LinkedServer"], () => require("./linkedServer"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:redis/cache:Cache":
                return new exports.Cache(name, undefined, { urn });
            case "azure:redis/cacheAccessPolicy:CacheAccessPolicy":
                return new exports.CacheAccessPolicy(name, undefined, { urn });
            case "azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment":
                return new exports.CacheAccessPolicyAssignment(name, undefined, { urn });
            case "azure:redis/enterpriseCluster:EnterpriseCluster":
                return new exports.EnterpriseCluster(name, undefined, { urn });
            case "azure:redis/enterpriseDatabase:EnterpriseDatabase":
                return new exports.EnterpriseDatabase(name, undefined, { urn });
            case "azure:redis/firewallRule:FirewallRule":
                return new exports.FirewallRule(name, undefined, { urn });
            case "azure:redis/linkedServer:LinkedServer":
                return new exports.LinkedServer(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "redis/cache", _module);
pulumi.runtime.registerResourceModule("azure", "redis/cacheAccessPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "redis/cacheAccessPolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "redis/enterpriseCluster", _module);
pulumi.runtime.registerResourceModule("azure", "redis/enterpriseDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "redis/firewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "redis/linkedServer", _module);
//# sourceMappingURL=index.js.map