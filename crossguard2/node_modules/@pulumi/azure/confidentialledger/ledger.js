"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ledger = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Confidential Ledger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const ledger = new azure.confidentialledger.Ledger("ledger", {
 *     name: "example-ledger",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     ledgerType: "Private",
 *     azureadBasedServicePrincipals: [{
 *         principalId: current.then(current => current.objectId),
 *         tenantId: current.then(current => current.tenantId),
 *         ledgerRoleName: "Administrator",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Confidential Ledgers can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:confidentialledger/ledger:Ledger example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-group/providers/Microsoft.ConfidentialLedger/ledgers/example-ledger
 * ```
 */
class Ledger extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["azureadBasedServicePrincipals"] = state ? state.azureadBasedServicePrincipals : undefined;
            resourceInputs["certificateBasedSecurityPrincipals"] = state ? state.certificateBasedSecurityPrincipals : undefined;
            resourceInputs["identityServiceEndpoint"] = state ? state.identityServiceEndpoint : undefined;
            resourceInputs["ledgerEndpoint"] = state ? state.ledgerEndpoint : undefined;
            resourceInputs["ledgerType"] = state ? state.ledgerType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.azureadBasedServicePrincipals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureadBasedServicePrincipals'");
            }
            if ((!args || args.ledgerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ledgerType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["azureadBasedServicePrincipals"] = args ? args.azureadBasedServicePrincipals : undefined;
            resourceInputs["certificateBasedSecurityPrincipals"] = args ? args.certificateBasedSecurityPrincipals : undefined;
            resourceInputs["ledgerType"] = args ? args.ledgerType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["identityServiceEndpoint"] = undefined /*out*/;
            resourceInputs["ledgerEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ledger.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Ledger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Ledger(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Ledger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ledger.__pulumiType;
    }
}
exports.Ledger = Ledger;
/** @internal */
Ledger.__pulumiType = 'azure:confidentialledger/ledger:Ledger';
//# sourceMappingURL=ledger.js.map