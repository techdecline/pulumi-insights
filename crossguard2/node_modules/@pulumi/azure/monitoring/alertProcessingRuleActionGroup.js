"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertProcessingRuleActionGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Alert Processing Rule which apply action group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleActionGroup = new azure.monitoring.ActionGroup("example", {
 *     name: "example-action-group",
 *     resourceGroupName: example.name,
 *     shortName: "action",
 * });
 * const exampleAlertProcessingRuleActionGroup = new azure.monitoring.AlertProcessingRuleActionGroup("example", {
 *     name: "example",
 *     resourceGroupName: "example",
 *     scopes: [example.id],
 *     addActionGroupIds: [exampleActionGroup.id],
 *     condition: {
 *         targetResourceType: {
 *             operator: "Equals",
 *             values: ["Microsoft.Compute/VirtualMachines"],
 *         },
 *         severity: {
 *             operator: "Equals",
 *             values: [
 *                 "Sev0",
 *                 "Sev1",
 *                 "Sev2",
 *             ],
 *         },
 *     },
 *     schedule: {
 *         effectiveFrom: "2022-01-01T01:02:03",
 *         effectiveUntil: "2022-02-02T01:02:03",
 *         timeZone: "Pacific Standard Time",
 *         recurrence: {
 *             dailies: [{
 *                 startTime: "17:00:00",
 *                 endTime: "09:00:00",
 *             }],
 *             weeklies: [{
 *                 daysOfWeeks: [
 *                     "Saturday",
 *                     "Sunday",
 *                 ],
 *             }],
 *         },
 *     },
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Alert Processing Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.AlertsManagement/actionRules/actionRule1
 * ```
 */
class AlertProcessingRuleActionGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["addActionGroupIds"] = state ? state.addActionGroupIds : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.addActionGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addActionGroupIds'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["addActionGroupIds"] = args ? args.addActionGroupIds : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:monitoring/actionRuleActionGroup:ActionRuleActionGroup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AlertProcessingRuleActionGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AlertProcessingRuleActionGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AlertProcessingRuleActionGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AlertProcessingRuleActionGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertProcessingRuleActionGroup.__pulumiType;
    }
}
exports.AlertProcessingRuleActionGroup = AlertProcessingRuleActionGroup;
/** @internal */
AlertProcessingRuleActionGroup.__pulumiType = 'azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup';
//# sourceMappingURL=alertProcessingRuleActionGroup.js.map