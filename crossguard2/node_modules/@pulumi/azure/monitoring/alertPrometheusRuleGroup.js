"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertPrometheusRuleGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Alert Management Prometheus Rule Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleActionGroup = new azure.monitoring.ActionGroup("example", {
 *     name: "example-mag",
 *     resourceGroupName: example.name,
 *     shortName: "testag",
 * });
 * const exampleWorkspace = new azure.monitoring.Workspace("example", {
 *     name: "example-amw",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleKubernetesCluster = new azure.containerservice.KubernetesCluster("example", {
 *     name: "example-cluster",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     dnsPrefix: "example-aks",
 *     defaultNodePool: {
 *         name: "default",
 *         nodeCount: 1,
 *         vmSize: "Standard_DS2_v2",
 *         hostEncryptionEnabled: true,
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleAlertPrometheusRuleGroup = new azure.monitoring.AlertPrometheusRuleGroup("example", {
 *     name: "example-amprg",
 *     location: "West Europe",
 *     resourceGroupName: example.name,
 *     clusterName: exampleKubernetesCluster.name,
 *     description: "This is the description of the following rule group",
 *     ruleGroupEnabled: false,
 *     interval: "PT1M",
 *     scopes: [exampleWorkspace.id],
 *     rules: [
 *         {
 *             enabled: false,
 *             expression: "histogram_quantile(0.99, sum(rate(jobs_duration_seconds_bucket{service=\"billing-processing\"}[5m])) by (job_type))\n",
 *             record: "job_type:billing_jobs_duration_seconds:99p5m",
 *             labels: {
 *                 team: "prod",
 *             },
 *         },
 *         {
 *             alert: "Billing_Processing_Very_Slow",
 *             enabled: true,
 *             expression: "histogram_quantile(0.99, sum(rate(jobs_duration_seconds_bucket{service=\"billing-processing\"}[5m])) by (job_type))\n",
 *             "for": "PT5M",
 *             severity: 2,
 *             actions: [{
 *                 actionGroupId: exampleActionGroup.id,
 *             }],
 *             alertResolution: {
 *                 autoResolved: true,
 *                 timeToResolve: "PT10M",
 *             },
 *             annotations: {
 *                 annotationName: "annotationValue",
 *             },
 *             labels: {
 *                 team: "prod",
 *             },
 *         },
 *     ],
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Alert Management Prometheus Rule Group can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:monitoring/alertPrometheusRuleGroup:AlertPrometheusRuleGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AlertsManagement/prometheusRuleGroups/ruleGroup1
 * ```
 */
class AlertPrometheusRuleGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["ruleGroupEnabled"] = state ? state.ruleGroupEnabled : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["ruleGroupEnabled"] = args ? args.ruleGroupEnabled : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertPrometheusRuleGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AlertPrometheusRuleGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AlertPrometheusRuleGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AlertPrometheusRuleGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertPrometheusRuleGroup.__pulumiType;
    }
}
exports.AlertPrometheusRuleGroup = AlertPrometheusRuleGroup;
/** @internal */
AlertPrometheusRuleGroup.__pulumiType = 'azure:monitoring/alertPrometheusRuleGroup:AlertPrometheusRuleGroup';
//# sourceMappingURL=alertPrometheusRuleGroup.js.map