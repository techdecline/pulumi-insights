"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledQueryRulesLog = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a LogToMetricAction Scheduled Query Rules resource within Azure Monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "monitoring-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "loganalytics",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 *     retentionInDays: 30,
 * });
 * const exampleActionGroup = new azure.monitoring.ActionGroup("example", {
 *     name: "example-actiongroup",
 *     resourceGroupName: example.name,
 *     shortName: "exampleact",
 *     webhookReceivers: [{
 *         name: "callmyapi",
 *         serviceUri: "http://example.com/alert",
 *     }],
 * });
 * // Example: Creates alert using the new Scheduled Query Rules metric
 * const exampleMetricAlert = new azure.monitoring.MetricAlert("example", {
 *     name: "example-metricalert",
 *     resourceGroupName: example.name,
 *     scopes: [exampleAnalyticsWorkspace.id],
 *     description: "Action will be triggered when Average_% Idle Time metric is less than 10.",
 *     frequency: "PT1M",
 *     windowSize: "PT5M",
 *     criterias: [{
 *         metricNamespace: "Microsoft.OperationalInsights/workspaces",
 *         metricName: "UsedCapacity",
 *         aggregation: "Average",
 *         operator: "LessThan",
 *         threshold: 10,
 *     }],
 *     actions: [{
 *         actionGroupId: exampleActionGroup.id,
 *     }],
 * });
 * // Example: LogToMetric Action for the named Computer
 * const exampleScheduledQueryRulesLog = new azure.monitoring.ScheduledQueryRulesLog("example", {
 *     name: "example",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     criteria: {
 *         metricName: "Average_% Idle Time",
 *         dimensions: [{
 *             name: "Computer",
 *             operator: "Include",
 *             values: ["targetVM"],
 *         }],
 *     },
 *     dataSourceId: exampleAnalyticsWorkspace.id,
 *     description: "Scheduled query rule LogToMetric example",
 *     enabled: true,
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Scheduled Query Rule Log can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/scheduledQueryRules/myrulename
 * ```
 */
class ScheduledQueryRulesLog extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authorizedResourceIds"] = state ? state.authorizedResourceIds : undefined;
            resourceInputs["criteria"] = state ? state.criteria : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.criteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'criteria'");
            }
            if ((!args || args.dataSourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authorizedResourceIds"] = args ? args.authorizedResourceIds : undefined;
            resourceInputs["criteria"] = args ? args.criteria : undefined;
            resourceInputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledQueryRulesLog.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ScheduledQueryRulesLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ScheduledQueryRulesLog(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ScheduledQueryRulesLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledQueryRulesLog.__pulumiType;
    }
}
exports.ScheduledQueryRulesLog = ScheduledQueryRulesLog;
/** @internal */
ScheduledQueryRulesLog.__pulumiType = 'azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog';
//# sourceMappingURL=scheduledQueryRulesLog.js.map