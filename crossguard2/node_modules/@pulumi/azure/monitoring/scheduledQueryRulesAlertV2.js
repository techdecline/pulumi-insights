"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledQueryRulesAlertV2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AlertingAction Scheduled Query Rules Version 2 resource within Azure Monitor
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleInsights = new azure.appinsights.Insights("example", {
 *     name: "example-ai",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     applicationType: "web",
 * });
 * const exampleActionGroup = new azure.monitoring.ActionGroup("example", {
 *     name: "example-mag",
 *     resourceGroupName: example.name,
 *     shortName: "test mag",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "example-uai",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleAssignment = new azure.authorization.Assignment("example", {
 *     scope: exampleInsights.id,
 *     roleDefinitionName: "Reader",
 *     principalId: exampleUserAssignedIdentity.principalId,
 * });
 * const exampleScheduledQueryRulesAlertV2 = new azure.monitoring.ScheduledQueryRulesAlertV2("example", {
 *     name: "example-msqrv2",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     evaluationFrequency: "PT10M",
 *     windowDuration: "PT10M",
 *     scopes: exampleInsights.id,
 *     severity: 4,
 *     criterias: [{
 *         query: `requests
 *   | summarize CountByCountry=count() by client_CountryOrRegion
 * `,
 *         timeAggregationMethod: "Maximum",
 *         threshold: 17.5,
 *         operator: "LessThan",
 *         resourceIdColumn: "client_CountryOrRegion",
 *         metricMeasureColumn: "CountByCountry",
 *         dimensions: [{
 *             name: "client_CountryOrRegion",
 *             operator: "Exclude",
 *             values: ["123"],
 *         }],
 *         failingPeriods: {
 *             minimumFailingPeriodsToTriggerAlert: 1,
 *             numberOfEvaluationPeriods: 1,
 *         },
 *     }],
 *     autoMitigationEnabled: true,
 *     workspaceAlertsStorageEnabled: false,
 *     description: "example sqr",
 *     displayName: "example-sqr",
 *     enabled: true,
 *     queryTimeRangeOverride: "PT1H",
 *     skipQueryValidation: true,
 *     action: {
 *         actionGroups: [exampleActionGroup.id],
 *         customProperties: {
 *             key: "value",
 *             key2: "value2",
 *         },
 *     },
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 *     tags: {
 *         key: "value",
 *         key2: "value2",
 *     },
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * ```
 *
 * ## Import
 *
 * Monitor Scheduled Query Rule Alert can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Insights/scheduledQueryRules/rule1
 * ```
 */
class ScheduledQueryRulesAlertV2 extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["autoMitigationEnabled"] = state ? state.autoMitigationEnabled : undefined;
            resourceInputs["createdWithApiVersion"] = state ? state.createdWithApiVersion : undefined;
            resourceInputs["criterias"] = state ? state.criterias : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["evaluationFrequency"] = state ? state.evaluationFrequency : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["isALegacyLogAnalyticsRule"] = state ? state.isALegacyLogAnalyticsRule : undefined;
            resourceInputs["isWorkspaceAlertsStorageConfigured"] = state ? state.isWorkspaceAlertsStorageConfigured : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["muteActionsAfterAlertDuration"] = state ? state.muteActionsAfterAlertDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryTimeRangeOverride"] = state ? state.queryTimeRangeOverride : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["skipQueryValidation"] = state ? state.skipQueryValidation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetResourceTypes"] = state ? state.targetResourceTypes : undefined;
            resourceInputs["windowDuration"] = state ? state.windowDuration : undefined;
            resourceInputs["workspaceAlertsStorageEnabled"] = state ? state.workspaceAlertsStorageEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.criterias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'criterias'");
            }
            if ((!args || args.evaluationFrequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationFrequency'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if ((!args || args.windowDuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'windowDuration'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["autoMitigationEnabled"] = args ? args.autoMitigationEnabled : undefined;
            resourceInputs["criterias"] = args ? args.criterias : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["evaluationFrequency"] = args ? args.evaluationFrequency : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["muteActionsAfterAlertDuration"] = args ? args.muteActionsAfterAlertDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryTimeRangeOverride"] = args ? args.queryTimeRangeOverride : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["skipQueryValidation"] = args ? args.skipQueryValidation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetResourceTypes"] = args ? args.targetResourceTypes : undefined;
            resourceInputs["windowDuration"] = args ? args.windowDuration : undefined;
            resourceInputs["workspaceAlertsStorageEnabled"] = args ? args.workspaceAlertsStorageEnabled : undefined;
            resourceInputs["createdWithApiVersion"] = undefined /*out*/;
            resourceInputs["isALegacyLogAnalyticsRule"] = undefined /*out*/;
            resourceInputs["isWorkspaceAlertsStorageConfigured"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledQueryRulesAlertV2.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ScheduledQueryRulesAlertV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ScheduledQueryRulesAlertV2(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ScheduledQueryRulesAlertV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledQueryRulesAlertV2.__pulumiType;
    }
}
exports.ScheduledQueryRulesAlertV2 = ScheduledQueryRulesAlertV2;
/** @internal */
ScheduledQueryRulesAlertV2.__pulumiType = 'azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2';
//# sourceMappingURL=scheduledQueryRulesAlertV2.js.map