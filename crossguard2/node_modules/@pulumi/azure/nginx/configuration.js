"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the configuration for a Nginx Deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const examplePublicIp = new azure.network.PublicIp("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     allocationMethod: "Static",
 *     sku: "Standard",
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 *     delegations: [{
 *         name: "delegation",
 *         serviceDelegation: {
 *             name: "NGINX.NGINXPLUS/nginxDeployments",
 *             actions: ["Microsoft.Network/virtualNetworks/subnets/join/action"],
 *         },
 *     }],
 * });
 * const exampleDeployment = new azure.nginx.Deployment("example", {
 *     name: "example-nginx",
 *     resourceGroupName: example.name,
 *     sku: "publicpreview_Monthly_gmz7xq9ge3py",
 *     location: example.location,
 *     diagnoseSupportEnabled: true,
 *     frontendPublic: {
 *         ipAddresses: [examplePublicIp.id],
 *     },
 *     networkInterfaces: [{
 *         subnetId: exampleSubnet.id,
 *     }],
 * });
 * const exampleConfiguration = new azure.nginx.Configuration("example", {
 *     nginxDeploymentId: exampleDeployment.id,
 *     rootFile: "/etc/nginx/nginx.conf",
 *     configFiles: [
 *         {
 *             content: std.base64encode({
 *                 input: `http {
 *     server {
 *         listen 80;
 *         location / {
 *             default_type text/html;
 *             return 200 '<!doctype html><html lang="en"><head></head><body>
 *                 <div>this one will be updated</div>
 *                 <div>at 10:38 am</div>
 *             </body></html>';
 *         }
 *         include site/*.conf;
 *     }
 * }
 * `,
 *             }).then(invoke => invoke.result),
 *             virtualPath: "/etc/nginx/nginx.conf",
 *         },
 *         {
 *             content: std.base64encode({
 *                 input: `location /bbb {
 *  default_type text/html;
 *  return 200 '<!doctype html><html lang="en"><head></head><body>
 *   <div>this one will be updated</div>
 *   <div>at 10:38 am</div>
 *  </body></html>';
 * }
 * `,
 *             }).then(invoke => invoke.result),
 *             virtualPath: "/etc/nginx/site/b.conf",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * An Nginx Configuration can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:nginx/configuration:Configuration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1/configurations/default
 * ```
 */
class Configuration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configFiles"] = state ? state.configFiles : undefined;
            resourceInputs["nginxDeploymentId"] = state ? state.nginxDeploymentId : undefined;
            resourceInputs["packageData"] = state ? state.packageData : undefined;
            resourceInputs["protectedFiles"] = state ? state.protectedFiles : undefined;
            resourceInputs["rootFile"] = state ? state.rootFile : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.nginxDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nginxDeploymentId'");
            }
            if ((!args || args.rootFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootFile'");
            }
            resourceInputs["configFiles"] = args ? args.configFiles : undefined;
            resourceInputs["nginxDeploymentId"] = args ? args.nginxDeploymentId : undefined;
            resourceInputs["packageData"] = args ? args.packageData : undefined;
            resourceInputs["protectedFiles"] = args ? args.protectedFiles : undefined;
            resourceInputs["rootFile"] = args ? args.rootFile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Configuration.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Configuration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Configuration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Configuration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Configuration.__pulumiType;
    }
}
exports.Configuration = Configuration;
/** @internal */
Configuration.__pulumiType = 'azure:nginx/configuration:Configuration';
//# sourceMappingURL=configuration.js.map