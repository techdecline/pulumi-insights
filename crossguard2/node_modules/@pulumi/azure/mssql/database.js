"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleServer = new azure.mssql.Server("example", {
 *     name: "example-sqlserver",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     version: "12.0",
 *     administratorLogin: "4dm1n157r470r",
 *     administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
 * });
 * const exampleDatabase = new azure.mssql.Database("example", {
 *     name: "example-db",
 *     serverId: exampleServer.id,
 *     collation: "SQL_Latin1_General_CP1_CI_AS",
 *     licenseType: "LicenseIncluded",
 *     maxSizeGb: 2,
 *     skuName: "S0",
 *     enclaveType: "VBS",
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ### Transparent Data Encryption(TDE) With A Customer Managed Key(CMK) During Create
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "example-admin",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplesa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServer = new azure.mssql.Server("example", {
 *     name: "example-sqlserver",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     version: "12.0",
 *     administratorLogin: "4dm1n157r470r",
 *     administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
 * });
 * // Create a key vault with access policies which allow for the current user to get, list, create, delete, update, recover, purge and getRotationPolicy for the key vault key and also add a key vault access policy for the Microsoft Sql Server instance User Managed Identity to get, wrap, and unwrap key(s)
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "mssqltdeexample",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     enabledForDiskEncryption: true,
 *     tenantId: exampleUserAssignedIdentity.tenantId,
 *     softDeleteRetentionDays: 7,
 *     purgeProtectionEnabled: true,
 *     skuName: "standard",
 *     accessPolicies: [
 *         {
 *             tenantId: current.tenantId,
 *             objectId: current.objectId,
 *             keyPermissions: [
 *                 "Get",
 *                 "List",
 *                 "Create",
 *                 "Delete",
 *                 "Update",
 *                 "Recover",
 *                 "Purge",
 *                 "GetRotationPolicy",
 *             ],
 *         },
 *         {
 *             tenantId: exampleUserAssignedIdentity.tenantId,
 *             objectId: exampleUserAssignedIdentity.principalId,
 *             keyPermissions: [
 *                 "Get",
 *                 "WrapKey",
 *                 "UnwrapKey",
 *             ],
 *         },
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "example-key",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "unwrapKey",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [exampleKeyVault],
 * });
 * const exampleDatabase = new azure.mssql.Database("example", {
 *     name: "example-db",
 *     serverId: exampleServer.id,
 *     collation: "SQL_Latin1_General_CP1_CI_AS",
 *     licenseType: "LicenseIncluded",
 *     maxSizeGb: 4,
 *     readScale: true,
 *     skuName: "S0",
 *     zoneRedundant: true,
 *     enclaveType: "VBS",
 *     tags: {
 *         foo: "bar",
 *     },
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 *     transparentDataEncryptionKeyVaultKeyId: exampleKey.id,
 * });
 * ```
 *
 * ## Import
 *
 * SQL Database can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mssql/database:Database example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/example1
 * ```
 */
class Database extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoPauseDelayInMinutes"] = state ? state.autoPauseDelayInMinutes : undefined;
            resourceInputs["collation"] = state ? state.collation : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["creationSourceDatabaseId"] = state ? state.creationSourceDatabaseId : undefined;
            resourceInputs["elasticPoolId"] = state ? state.elasticPoolId : undefined;
            resourceInputs["enclaveType"] = state ? state.enclaveType : undefined;
            resourceInputs["geoBackupEnabled"] = state ? state.geoBackupEnabled : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["import"] = state ? state.import : undefined;
            resourceInputs["ledgerEnabled"] = state ? state.ledgerEnabled : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["longTermRetentionPolicy"] = state ? state.longTermRetentionPolicy : undefined;
            resourceInputs["maintenanceConfigurationName"] = state ? state.maintenanceConfigurationName : undefined;
            resourceInputs["maxSizeGb"] = state ? state.maxSizeGb : undefined;
            resourceInputs["minCapacity"] = state ? state.minCapacity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readReplicaCount"] = state ? state.readReplicaCount : undefined;
            resourceInputs["readScale"] = state ? state.readScale : undefined;
            resourceInputs["recoverDatabaseId"] = state ? state.recoverDatabaseId : undefined;
            resourceInputs["recoveryPointId"] = state ? state.recoveryPointId : undefined;
            resourceInputs["restoreDroppedDatabaseId"] = state ? state.restoreDroppedDatabaseId : undefined;
            resourceInputs["restoreLongTermRetentionBackupId"] = state ? state.restoreLongTermRetentionBackupId : undefined;
            resourceInputs["restorePointInTime"] = state ? state.restorePointInTime : undefined;
            resourceInputs["sampleName"] = state ? state.sampleName : undefined;
            resourceInputs["secondaryType"] = state ? state.secondaryType : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["shortTermRetentionPolicy"] = state ? state.shortTermRetentionPolicy : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["storageAccountType"] = state ? state.storageAccountType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = state ? state.threatDetectionPolicy : undefined;
            resourceInputs["transparentDataEncryptionEnabled"] = state ? state.transparentDataEncryptionEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyAutomaticRotationEnabled"] = state ? state.transparentDataEncryptionKeyAutomaticRotationEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyVaultKeyId"] = state ? state.transparentDataEncryptionKeyVaultKeyId : undefined;
            resourceInputs["zoneRedundant"] = state ? state.zoneRedundant : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["autoPauseDelayInMinutes"] = args ? args.autoPauseDelayInMinutes : undefined;
            resourceInputs["collation"] = args ? args.collation : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["creationSourceDatabaseId"] = args ? args.creationSourceDatabaseId : undefined;
            resourceInputs["elasticPoolId"] = args ? args.elasticPoolId : undefined;
            resourceInputs["enclaveType"] = args ? args.enclaveType : undefined;
            resourceInputs["geoBackupEnabled"] = args ? args.geoBackupEnabled : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["import"] = args ? args.import : undefined;
            resourceInputs["ledgerEnabled"] = args ? args.ledgerEnabled : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["longTermRetentionPolicy"] = args ? args.longTermRetentionPolicy : undefined;
            resourceInputs["maintenanceConfigurationName"] = args ? args.maintenanceConfigurationName : undefined;
            resourceInputs["maxSizeGb"] = args ? args.maxSizeGb : undefined;
            resourceInputs["minCapacity"] = args ? args.minCapacity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readReplicaCount"] = args ? args.readReplicaCount : undefined;
            resourceInputs["readScale"] = args ? args.readScale : undefined;
            resourceInputs["recoverDatabaseId"] = args ? args.recoverDatabaseId : undefined;
            resourceInputs["recoveryPointId"] = args ? args.recoveryPointId : undefined;
            resourceInputs["restoreDroppedDatabaseId"] = args ? args.restoreDroppedDatabaseId : undefined;
            resourceInputs["restoreLongTermRetentionBackupId"] = args ? args.restoreLongTermRetentionBackupId : undefined;
            resourceInputs["restorePointInTime"] = args ? args.restorePointInTime : undefined;
            resourceInputs["sampleName"] = args ? args.sampleName : undefined;
            resourceInputs["secondaryType"] = args ? args.secondaryType : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["shortTermRetentionPolicy"] = args ? args.shortTermRetentionPolicy : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["storageAccountType"] = args ? args.storageAccountType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = args ? args.threatDetectionPolicy : undefined;
            resourceInputs["transparentDataEncryptionEnabled"] = args ? args.transparentDataEncryptionEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyAutomaticRotationEnabled"] = args ? args.transparentDataEncryptionKeyAutomaticRotationEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyVaultKeyId"] = args ? args.transparentDataEncryptionKeyVaultKeyId : undefined;
            resourceInputs["zoneRedundant"] = args ? args.zoneRedundant : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:sql/database:Database" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Database(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }
}
exports.Database = Database;
/** @internal */
Database.__pulumiType = 'azure:mssql/database:Database';
//# sourceMappingURL=database.js.map