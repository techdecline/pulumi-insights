"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkRule = exports.VirtualMachineGroup = exports.VirtualMachineAvailabilityGroupListener = exports.VirtualMachine = exports.ServerVulnerabilityAssessment = exports.ServerTransparentDataEncryption = exports.ServerSecurityAlertPolicy = exports.ServerMicrosoftSupportAuditingPolicy = exports.ServerExtendedAuditingPolicy = exports.ServerDnsAlias = exports.Server = exports.OutboundFirewallRule = exports.ManagedInstanceVulnerabilityAssessment = exports.ManagedInstanceTransparentDataEncryption = exports.ManagedInstanceSecurityAlertPolicy = exports.ManagedInstanceFailoverGroup = exports.ManagedInstanceActiveDirectoryAdministrator = exports.ManagedInstance = exports.ManagedDatabase = exports.JobTargetGroup = exports.JobSchedule = exports.JobCredential = exports.JobAgent = exports.Job = exports.getServerOutput = exports.getServer = exports.getManagedInstanceOutput = exports.getManagedInstance = exports.getManagedDatabaseOutput = exports.getManagedDatabase = exports.getElasticPoolOutput = exports.getElasticPool = exports.getDatabaseOutput = exports.getDatabase = exports.FirewallRule = exports.FailoverGroup = exports.ElasticPool = exports.DatabaseVulnerabilityAssessmentRuleBaseline = exports.DatabaseExtendedAuditingPolicy = exports.Database = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Database = null;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
exports.DatabaseExtendedAuditingPolicy = null;
utilities.lazyLoad(exports, ["DatabaseExtendedAuditingPolicy"], () => require("./databaseExtendedAuditingPolicy"));
exports.DatabaseVulnerabilityAssessmentRuleBaseline = null;
utilities.lazyLoad(exports, ["DatabaseVulnerabilityAssessmentRuleBaseline"], () => require("./databaseVulnerabilityAssessmentRuleBaseline"));
exports.ElasticPool = null;
utilities.lazyLoad(exports, ["ElasticPool"], () => require("./elasticPool"));
exports.FailoverGroup = null;
utilities.lazyLoad(exports, ["FailoverGroup"], () => require("./failoverGroup"));
exports.FirewallRule = null;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));
exports.getDatabase = null;
exports.getDatabaseOutput = null;
utilities.lazyLoad(exports, ["getDatabase", "getDatabaseOutput"], () => require("./getDatabase"));
exports.getElasticPool = null;
exports.getElasticPoolOutput = null;
utilities.lazyLoad(exports, ["getElasticPool", "getElasticPoolOutput"], () => require("./getElasticPool"));
exports.getManagedDatabase = null;
exports.getManagedDatabaseOutput = null;
utilities.lazyLoad(exports, ["getManagedDatabase", "getManagedDatabaseOutput"], () => require("./getManagedDatabase"));
exports.getManagedInstance = null;
exports.getManagedInstanceOutput = null;
utilities.lazyLoad(exports, ["getManagedInstance", "getManagedInstanceOutput"], () => require("./getManagedInstance"));
exports.getServer = null;
exports.getServerOutput = null;
utilities.lazyLoad(exports, ["getServer", "getServerOutput"], () => require("./getServer"));
exports.Job = null;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));
exports.JobAgent = null;
utilities.lazyLoad(exports, ["JobAgent"], () => require("./jobAgent"));
exports.JobCredential = null;
utilities.lazyLoad(exports, ["JobCredential"], () => require("./jobCredential"));
exports.JobSchedule = null;
utilities.lazyLoad(exports, ["JobSchedule"], () => require("./jobSchedule"));
exports.JobTargetGroup = null;
utilities.lazyLoad(exports, ["JobTargetGroup"], () => require("./jobTargetGroup"));
exports.ManagedDatabase = null;
utilities.lazyLoad(exports, ["ManagedDatabase"], () => require("./managedDatabase"));
exports.ManagedInstance = null;
utilities.lazyLoad(exports, ["ManagedInstance"], () => require("./managedInstance"));
exports.ManagedInstanceActiveDirectoryAdministrator = null;
utilities.lazyLoad(exports, ["ManagedInstanceActiveDirectoryAdministrator"], () => require("./managedInstanceActiveDirectoryAdministrator"));
exports.ManagedInstanceFailoverGroup = null;
utilities.lazyLoad(exports, ["ManagedInstanceFailoverGroup"], () => require("./managedInstanceFailoverGroup"));
exports.ManagedInstanceSecurityAlertPolicy = null;
utilities.lazyLoad(exports, ["ManagedInstanceSecurityAlertPolicy"], () => require("./managedInstanceSecurityAlertPolicy"));
exports.ManagedInstanceTransparentDataEncryption = null;
utilities.lazyLoad(exports, ["ManagedInstanceTransparentDataEncryption"], () => require("./managedInstanceTransparentDataEncryption"));
exports.ManagedInstanceVulnerabilityAssessment = null;
utilities.lazyLoad(exports, ["ManagedInstanceVulnerabilityAssessment"], () => require("./managedInstanceVulnerabilityAssessment"));
exports.OutboundFirewallRule = null;
utilities.lazyLoad(exports, ["OutboundFirewallRule"], () => require("./outboundFirewallRule"));
exports.Server = null;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));
exports.ServerDnsAlias = null;
utilities.lazyLoad(exports, ["ServerDnsAlias"], () => require("./serverDnsAlias"));
exports.ServerExtendedAuditingPolicy = null;
utilities.lazyLoad(exports, ["ServerExtendedAuditingPolicy"], () => require("./serverExtendedAuditingPolicy"));
exports.ServerMicrosoftSupportAuditingPolicy = null;
utilities.lazyLoad(exports, ["ServerMicrosoftSupportAuditingPolicy"], () => require("./serverMicrosoftSupportAuditingPolicy"));
exports.ServerSecurityAlertPolicy = null;
utilities.lazyLoad(exports, ["ServerSecurityAlertPolicy"], () => require("./serverSecurityAlertPolicy"));
exports.ServerTransparentDataEncryption = null;
utilities.lazyLoad(exports, ["ServerTransparentDataEncryption"], () => require("./serverTransparentDataEncryption"));
exports.ServerVulnerabilityAssessment = null;
utilities.lazyLoad(exports, ["ServerVulnerabilityAssessment"], () => require("./serverVulnerabilityAssessment"));
exports.VirtualMachine = null;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));
exports.VirtualMachineAvailabilityGroupListener = null;
utilities.lazyLoad(exports, ["VirtualMachineAvailabilityGroupListener"], () => require("./virtualMachineAvailabilityGroupListener"));
exports.VirtualMachineGroup = null;
utilities.lazyLoad(exports, ["VirtualMachineGroup"], () => require("./virtualMachineGroup"));
exports.VirtualNetworkRule = null;
utilities.lazyLoad(exports, ["VirtualNetworkRule"], () => require("./virtualNetworkRule"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:mssql/database:Database":
                return new exports.Database(name, undefined, { urn });
            case "azure:mssql/databaseExtendedAuditingPolicy:DatabaseExtendedAuditingPolicy":
                return new exports.DatabaseExtendedAuditingPolicy(name, undefined, { urn });
            case "azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline":
                return new exports.DatabaseVulnerabilityAssessmentRuleBaseline(name, undefined, { urn });
            case "azure:mssql/elasticPool:ElasticPool":
                return new exports.ElasticPool(name, undefined, { urn });
            case "azure:mssql/failoverGroup:FailoverGroup":
                return new exports.FailoverGroup(name, undefined, { urn });
            case "azure:mssql/firewallRule:FirewallRule":
                return new exports.FirewallRule(name, undefined, { urn });
            case "azure:mssql/job:Job":
                return new exports.Job(name, undefined, { urn });
            case "azure:mssql/jobAgent:JobAgent":
                return new exports.JobAgent(name, undefined, { urn });
            case "azure:mssql/jobCredential:JobCredential":
                return new exports.JobCredential(name, undefined, { urn });
            case "azure:mssql/jobSchedule:JobSchedule":
                return new exports.JobSchedule(name, undefined, { urn });
            case "azure:mssql/jobTargetGroup:JobTargetGroup":
                return new exports.JobTargetGroup(name, undefined, { urn });
            case "azure:mssql/managedDatabase:ManagedDatabase":
                return new exports.ManagedDatabase(name, undefined, { urn });
            case "azure:mssql/managedInstance:ManagedInstance":
                return new exports.ManagedInstance(name, undefined, { urn });
            case "azure:mssql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator":
                return new exports.ManagedInstanceActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup":
                return new exports.ManagedInstanceFailoverGroup(name, undefined, { urn });
            case "azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy":
                return new exports.ManagedInstanceSecurityAlertPolicy(name, undefined, { urn });
            case "azure:mssql/managedInstanceTransparentDataEncryption:ManagedInstanceTransparentDataEncryption":
                return new exports.ManagedInstanceTransparentDataEncryption(name, undefined, { urn });
            case "azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment":
                return new exports.ManagedInstanceVulnerabilityAssessment(name, undefined, { urn });
            case "azure:mssql/outboundFirewallRule:OutboundFirewallRule":
                return new exports.OutboundFirewallRule(name, undefined, { urn });
            case "azure:mssql/server:Server":
                return new exports.Server(name, undefined, { urn });
            case "azure:mssql/serverDnsAlias:ServerDnsAlias":
                return new exports.ServerDnsAlias(name, undefined, { urn });
            case "azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy":
                return new exports.ServerExtendedAuditingPolicy(name, undefined, { urn });
            case "azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy":
                return new exports.ServerMicrosoftSupportAuditingPolicy(name, undefined, { urn });
            case "azure:mssql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy":
                return new exports.ServerSecurityAlertPolicy(name, undefined, { urn });
            case "azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption":
                return new exports.ServerTransparentDataEncryption(name, undefined, { urn });
            case "azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment":
                return new exports.ServerVulnerabilityAssessment(name, undefined, { urn });
            case "azure:mssql/virtualMachine:VirtualMachine":
                return new exports.VirtualMachine(name, undefined, { urn });
            case "azure:mssql/virtualMachineAvailabilityGroupListener:VirtualMachineAvailabilityGroupListener":
                return new exports.VirtualMachineAvailabilityGroupListener(name, undefined, { urn });
            case "azure:mssql/virtualMachineGroup:VirtualMachineGroup":
                return new exports.VirtualMachineGroup(name, undefined, { urn });
            case "azure:mssql/virtualNetworkRule:VirtualNetworkRule":
                return new exports.VirtualNetworkRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "mssql/database", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/databaseExtendedAuditingPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/databaseVulnerabilityAssessmentRuleBaseline", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/elasticPool", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/failoverGroup", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/firewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/job", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/jobAgent", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/jobCredential", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/jobSchedule", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/jobTargetGroup", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/managedDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstance", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceActiveDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceFailoverGroup", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceSecurityAlertPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceTransparentDataEncryption", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/managedInstanceVulnerabilityAssessment", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/outboundFirewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/server", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/serverDnsAlias", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/serverExtendedAuditingPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/serverMicrosoftSupportAuditingPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/serverSecurityAlertPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/serverTransparentDataEncryption", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/serverVulnerabilityAssessment", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/virtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/virtualMachineAvailabilityGroupListener", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/virtualMachineGroup", _module);
pulumi.runtime.registerResourceModule("azure", "mssql/virtualNetworkRule", _module);
//# sourceMappingURL=index.js.map