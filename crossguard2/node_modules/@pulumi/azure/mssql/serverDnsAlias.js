"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerDnsAlias = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a MS SQL Server DNS Alias.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleServer = new azure.mssql.Server("example", {
 *     name: "example-sqlserver",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     version: "12.0",
 *     administratorLogin: "missadministrator",
 *     administratorLoginPassword: "AdminPassword123!",
 * });
 * const exampleServerDnsAlias = new azure.mssql.ServerDnsAlias("example", {
 *     name: "example-dns-alias",
 *     mssqlServerId: exampleServer.id,
 * });
 * ```
 *
 * ## Import
 *
 * MSSQL Server DNS Aliass can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mssql/serverDnsAlias:ServerDnsAlias example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/dnsAliases/default
 * ```
 */
class ServerDnsAlias extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dnsRecord"] = state ? state.dnsRecord : undefined;
            resourceInputs["mssqlServerId"] = state ? state.mssqlServerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.mssqlServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mssqlServerId'");
            }
            resourceInputs["mssqlServerId"] = args ? args.mssqlServerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["dnsRecord"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerDnsAlias.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ServerDnsAlias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServerDnsAlias(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServerDnsAlias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerDnsAlias.__pulumiType;
    }
}
exports.ServerDnsAlias = ServerDnsAlias;
/** @internal */
ServerDnsAlias.__pulumiType = 'azure:mssql/serverDnsAlias:ServerDnsAlias';
//# sourceMappingURL=serverDnsAlias.js.map