"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Suppression = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Specifies a suppression for an Azure Advisor recommendation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = azure.advisor.getRecommendations({});
 * const exampleSuppression = new azure.advisor.Suppression("example", {
 *     name: "HardcodedSuppressionName",
 *     recommendationId: test.recommendations[0].recommendationName,
 *     resourceId: current.then(current => `/subscriptions/${current.subscriptionId}`),
 *     ttl: "01:00:00:00",
 * });
 * ```
 *
 * ## Import
 *
 * Advisor suppressions can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:advisor/suppression:Suppression example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Advisor/recommendations/00000000-0000-0000-0000-000000000000/suppressions/name
 * ```
 */
class Suppression extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recommendationId"] = state ? state.recommendationId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["suppressionId"] = state ? state.suppressionId : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.recommendationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recommendationId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recommendationId"] = args ? args.recommendationId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["suppressionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Suppression.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Suppression resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Suppression(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Suppression.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Suppression.__pulumiType;
    }
}
exports.Suppression = Suppression;
/** @internal */
Suppression.__pulumiType = 'azure:advisor/suppression:Suppression';
//# sourceMappingURL=suppression.js.map