"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedtechService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Healthcare Med Tech Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "east us",
 * });
 * const exampleWorkspace = new azure.healthcare.Workspace("example", {
 *     name: "examplewkspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * const exampleMedtechService = new azure.healthcare.MedtechService("example", {
 *     name: "examplemed",
 *     workspaceId: exampleWorkspace.id,
 *     location: "east us",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     eventhubNamespaceName: "example-eventhub-namespace",
 *     eventhubName: "example-eventhub",
 *     eventhubConsumerGroupName: "$Default",
 *     deviceMappingJson: JSON.stringify({
 *         templateType: "CollectionContent",
 *         template: [{
 *             templateType: "JsonPathContent",
 *             template: {
 *                 typeName: "heartrate",
 *                 typeMatchExpression: "$..[?(@heartrate)]",
 *                 deviceIdExpression: "$.deviceid",
 *                 timestampExpression: "$.measurementdatetime",
 *                 values: [{
 *                     required: "true",
 *                     valueExpression: "$.heartrate",
 *                     valueName: "hr",
 *                 }],
 *             },
 *         }],
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Healthcare Med Tech Service can be imported using the resource`id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:healthcare/medtechService:MedtechService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotConnectors/iotconnector1
 * ```
 */
class MedtechService extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["deviceMappingJson"] = state ? state.deviceMappingJson : undefined;
            resourceInputs["eventhubConsumerGroupName"] = state ? state.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubName"] = state ? state.eventhubName : undefined;
            resourceInputs["eventhubNamespaceName"] = state ? state.eventhubNamespaceName : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.deviceMappingJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceMappingJson'");
            }
            if ((!args || args.eventhubConsumerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubConsumerGroupName'");
            }
            if ((!args || args.eventhubName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubName'");
            }
            if ((!args || args.eventhubNamespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubNamespaceName'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["deviceMappingJson"] = args ? args.deviceMappingJson : undefined;
            resourceInputs["eventhubConsumerGroupName"] = args ? args.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubName"] = args ? args.eventhubName : undefined;
            resourceInputs["eventhubNamespaceName"] = args ? args.eventhubNamespaceName : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MedtechService.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MedtechService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MedtechService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MedtechService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MedtechService.__pulumiType;
    }
}
exports.MedtechService = MedtechService;
/** @internal */
MedtechService.__pulumiType = 'azure:healthcare/medtechService:MedtechService';
//# sourceMappingURL=medtechService.js.map