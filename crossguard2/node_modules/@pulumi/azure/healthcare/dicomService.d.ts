import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a Healthcare DICOM Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const test = new azure.healthcare.Workspace("test", {
 *     name: "tfexworkspace",
 *     resourceGroupName: "tfex-resource_group",
 *     location: "east us",
 * });
 * const testDicomService = new azure.healthcare.DicomService("test", {
 *     name: "tfexDicom",
 *     workspaceId: test.id,
 *     location: "east us",
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         environment: "None",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Healthcare DICOM Service can be imported using the resource`id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:healthcare/dicomService:DicomService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomServices/service1
 * ```
 */
export declare class DicomService extends pulumi.CustomResource {
    /**
     * Get an existing DicomService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DicomServiceState, opts?: pulumi.CustomResourceOptions): DicomService;
    /**
     * Returns true if the given object is an instance of DicomService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DicomService;
    /**
     * The `authentication` block as defined below.
     */
    readonly authentications: pulumi.Output<outputs.healthcare.DicomServiceAuthentication[]>;
    /**
     * A `cors` block as defined below.
     */
    readonly cors: pulumi.Output<outputs.healthcare.DicomServiceCors>;
    /**
     * If data partitions are enabled or not. Defaults to `false`. Changing this forces a new Healthcare DICOM Service to be created.
     */
    readonly dataPartitionsEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The URL of the key to use for encryption as part of the customer-managed key encryption settings. For more details, refer to the [Azure Customer-Managed Keys Overview](https://learn.microsoft.com/en-us/azure/storage/common/customer-managed-keys-overview).
     */
    readonly encryptionKeyUrl: pulumi.Output<string | undefined>;
    /**
     * An `identity` block as defined below.
     */
    readonly identity: pulumi.Output<outputs.healthcare.DicomServiceIdentity | undefined>;
    /**
     * Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
     */
    readonly name: pulumi.Output<string>;
    readonly privateEndpoints: pulumi.Output<outputs.healthcare.DicomServicePrivateEndpoint[]>;
    /**
     * Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
     */
    readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The url of the Healthcare DICOM Services.
     */
    readonly serviceUrl: pulumi.Output<string>;
    /**
     * A `storage` block as defined below.
     */
    readonly storage: pulumi.Output<outputs.healthcare.DicomServiceStorage>;
    /**
     * A mapping of tags to assign to the Healthcare DICOM Service.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Specifies the ID of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
     */
    readonly workspaceId: pulumi.Output<string>;
    /**
     * Create a DicomService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DicomServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering DicomService resources.
 */
export interface DicomServiceState {
    /**
     * The `authentication` block as defined below.
     */
    authentications?: pulumi.Input<pulumi.Input<inputs.healthcare.DicomServiceAuthentication>[]>;
    /**
     * A `cors` block as defined below.
     */
    cors?: pulumi.Input<inputs.healthcare.DicomServiceCors>;
    /**
     * If data partitions are enabled or not. Defaults to `false`. Changing this forces a new Healthcare DICOM Service to be created.
     */
    dataPartitionsEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the key to use for encryption as part of the customer-managed key encryption settings. For more details, refer to the [Azure Customer-Managed Keys Overview](https://learn.microsoft.com/en-us/azure/storage/common/customer-managed-keys-overview).
     */
    encryptionKeyUrl?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.healthcare.DicomServiceIdentity>;
    /**
     * Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
     */
    name?: pulumi.Input<string>;
    privateEndpoints?: pulumi.Input<pulumi.Input<inputs.healthcare.DicomServicePrivateEndpoint>[]>;
    /**
     * Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The url of the Healthcare DICOM Services.
     */
    serviceUrl?: pulumi.Input<string>;
    /**
     * A `storage` block as defined below.
     */
    storage?: pulumi.Input<inputs.healthcare.DicomServiceStorage>;
    /**
     * A mapping of tags to assign to the Healthcare DICOM Service.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Specifies the ID of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
     */
    workspaceId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a DicomService resource.
 */
export interface DicomServiceArgs {
    /**
     * A `cors` block as defined below.
     */
    cors?: pulumi.Input<inputs.healthcare.DicomServiceCors>;
    /**
     * If data partitions are enabled or not. Defaults to `false`. Changing this forces a new Healthcare DICOM Service to be created.
     */
    dataPartitionsEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the key to use for encryption as part of the customer-managed key encryption settings. For more details, refer to the [Azure Customer-Managed Keys Overview](https://learn.microsoft.com/en-us/azure/storage/common/customer-managed-keys-overview).
     */
    encryptionKeyUrl?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.healthcare.DicomServiceIdentity>;
    /**
     * Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * A `storage` block as defined below.
     */
    storage?: pulumi.Input<inputs.healthcare.DicomServiceStorage>;
    /**
     * A mapping of tags to assign to the Healthcare DICOM Service.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Specifies the ID of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
     */
    workspaceId: pulumi.Input<string>;
}
