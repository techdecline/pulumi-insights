"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Standard = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Logic App (Standard / Single Tenant)
 *
 * ## Example Usage
 *
 * ### With App Service Plan)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "azure-functions-test-rg",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "functionsapptestsa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const examplePlan = new azure.appservice.Plan("example", {
 *     name: "azure-functions-test-service-plan",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     kind: "elastic",
 *     sku: {
 *         tier: "WorkflowStandard",
 *         size: "WS1",
 *     },
 * });
 * const exampleStandard = new azure.logicapps.Standard("example", {
 *     name: "test-azure-functions",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     appServicePlanId: examplePlan.id,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 *     appSettings: {
 *         FUNCTIONS_WORKER_RUNTIME: "node",
 *         WEBSITE_NODE_DEFAULT_VERSION: "~18",
 *     },
 * });
 * ```
 *
 * ### For Container Mode)
 *
 * > **Note:** You must set `azure.appservice.Plan` `kind` to `Linux` and `reserved` to `true` when used with `linuxFxVersion`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "azure-functions-test-rg",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "functionsapptestsa",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const examplePlan = new azure.appservice.Plan("example", {
 *     name: "azure-functions-test-service-plan",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     kind: "Linux",
 *     reserved: true,
 *     sku: {
 *         tier: "WorkflowStandard",
 *         size: "WS1",
 *     },
 * });
 * const exampleStandard = new azure.logicapps.Standard("example", {
 *     name: "test-azure-functions",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     appServicePlanId: examplePlan.id,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 *     siteConfig: {
 *         linuxFxVersion: "DOCKER|mcr.microsoft.com/azure-functions/dotnet:3.0-appservice",
 *     },
 *     appSettings: {
 *         DOCKER_REGISTRY_SERVER_URL: "https://<server-name>.azurecr.io",
 *         DOCKER_REGISTRY_SERVER_USERNAME: "username",
 *         DOCKER_REGISTRY_SERVER_PASSWORD: "password",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Logic Apps can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:logicapps/standard:Standard logicapp1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/logicapp1
 * ```
 */
class Standard extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appServicePlanId"] = state ? state.appServicePlanId : undefined;
            resourceInputs["appSettings"] = state ? state.appSettings : undefined;
            resourceInputs["bundleVersion"] = state ? state.bundleVersion : undefined;
            resourceInputs["clientAffinityEnabled"] = state ? state.clientAffinityEnabled : undefined;
            resourceInputs["clientCertificateMode"] = state ? state.clientCertificateMode : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["customDomainVerificationId"] = state ? state.customDomainVerificationId : undefined;
            resourceInputs["defaultHostname"] = state ? state.defaultHostname : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["httpsOnly"] = state ? state.httpsOnly : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundIpAddresses"] = state ? state.outboundIpAddresses : undefined;
            resourceInputs["possibleOutboundIpAddresses"] = state ? state.possibleOutboundIpAddresses : undefined;
            resourceInputs["publicNetworkAccess"] = state ? state.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["siteConfig"] = state ? state.siteConfig : undefined;
            resourceInputs["siteCredentials"] = state ? state.siteCredentials : undefined;
            resourceInputs["storageAccountAccessKey"] = state ? state.storageAccountAccessKey : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
            resourceInputs["storageAccountShareName"] = state ? state.storageAccountShareName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useExtensionBundle"] = state ? state.useExtensionBundle : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["virtualNetworkSubnetId"] = state ? state.virtualNetworkSubnetId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.appServicePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appServicePlanId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountAccessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountAccessKey'");
            }
            if ((!args || args.storageAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            resourceInputs["appServicePlanId"] = args ? args.appServicePlanId : undefined;
            resourceInputs["appSettings"] = args ? args.appSettings : undefined;
            resourceInputs["bundleVersion"] = args ? args.bundleVersion : undefined;
            resourceInputs["clientAffinityEnabled"] = args ? args.clientAffinityEnabled : undefined;
            resourceInputs["clientCertificateMode"] = args ? args.clientCertificateMode : undefined;
            resourceInputs["connectionStrings"] = args ? args.connectionStrings : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["httpsOnly"] = args ? args.httpsOnly : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["siteConfig"] = args ? args.siteConfig : undefined;
            resourceInputs["storageAccountAccessKey"] = (args === null || args === void 0 ? void 0 : args.storageAccountAccessKey) ? pulumi.secret(args.storageAccountAccessKey) : undefined;
            resourceInputs["storageAccountName"] = args ? args.storageAccountName : undefined;
            resourceInputs["storageAccountShareName"] = args ? args.storageAccountShareName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useExtensionBundle"] = args ? args.useExtensionBundle : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["virtualNetworkSubnetId"] = args ? args.virtualNetworkSubnetId : undefined;
            resourceInputs["customDomainVerificationId"] = undefined /*out*/;
            resourceInputs["defaultHostname"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["outboundIpAddresses"] = undefined /*out*/;
            resourceInputs["possibleOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["siteCredentials"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["storageAccountAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Standard.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Standard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Standard(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Standard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Standard.__pulumiType;
    }
}
exports.Standard = Standard;
/** @internal */
Standard.__pulumiType = 'azure:logicapps/standard:Standard';
//# sourceMappingURL=standard.js.map