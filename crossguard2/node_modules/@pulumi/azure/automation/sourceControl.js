"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceControl = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Automation Source Control.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.automation.Account("example", {
 *     name: "example-account",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     skuName: "Basic",
 * });
 * const exampleSourceControl = new azure.automation.SourceControl("example", {
 *     name: "example",
 *     automationAccountId: exampleAccount.id,
 *     folderPath: "runbook",
 *     security: {
 *         token: "ghp_xxx",
 *         tokenType: "PersonalAccessToken",
 *     },
 *     repositoryUrl: "https://github.com/foo/bat.git",
 *     sourceControlType: "GitHub",
 *     branch: "main",
 * });
 * ```
 *
 * ## Import
 *
 * Automations can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:automation/sourceControl:SourceControl example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/sourceControls/sc1
 * ```
 */
class SourceControl extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["automaticSync"] = state ? state.automaticSync : undefined;
            resourceInputs["automationAccountId"] = state ? state.automationAccountId : undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publishRunbookEnabled"] = state ? state.publishRunbookEnabled : undefined;
            resourceInputs["repositoryUrl"] = state ? state.repositoryUrl : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["sourceControlType"] = state ? state.sourceControlType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.automationAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'automationAccountId'");
            }
            if ((!args || args.folderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderPath'");
            }
            if ((!args || args.repositoryUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryUrl'");
            }
            if ((!args || args.security === undefined) && !opts.urn) {
                throw new Error("Missing required property 'security'");
            }
            if ((!args || args.sourceControlType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceControlType'");
            }
            resourceInputs["automaticSync"] = args ? args.automaticSync : undefined;
            resourceInputs["automationAccountId"] = args ? args.automationAccountId : undefined;
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publishRunbookEnabled"] = args ? args.publishRunbookEnabled : undefined;
            resourceInputs["repositoryUrl"] = args ? args.repositoryUrl : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["sourceControlType"] = args ? args.sourceControlType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceControl.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SourceControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SourceControl(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SourceControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceControl.__pulumiType;
    }
}
exports.SourceControl = SourceControl;
/** @internal */
SourceControl.__pulumiType = 'azure:automation/sourceControl:SourceControl';
//# sourceMappingURL=sourceControl.js.map