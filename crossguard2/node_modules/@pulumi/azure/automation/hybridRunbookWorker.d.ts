import * as pulumi from "@pulumi/pulumi";
/**
 * Manages a Automation Hybrid Runbook Worker.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.automation.Account("example", {
 *     name: "example-account",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     skuName: "Basic",
 * });
 * const exampleHybridRunbookWorkerGroup = new azure.automation.HybridRunbookWorkerGroup("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     automationAccountName: exampleAccount.name,
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     resourceGroupName: example.name,
 *     addressSpaces: ["192.168.1.0/24"],
 *     location: example.location,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["192.168.1.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
 *     name: "example-nic",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     ipConfigurations: [{
 *         name: "vm-example",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleLinuxVirtualMachine = new azure.compute.LinuxVirtualMachine("example", {
 *     name: "example-vm",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     size: "Standard_B1s",
 *     adminUsername: "testadmin",
 *     adminPassword: "Password1234!",
 *     disablePasswordAuthentication: false,
 *     sourceImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 * });
 * const exampleHybridRunbookWorker = new azure.automation.HybridRunbookWorker("example", {
 *     resourceGroupName: example.name,
 *     automationAccountName: exampleAccount.name,
 *     workerGroupName: exampleHybridRunbookWorkerGroup.name,
 *     vmResourceId: exampleLinuxVirtualMachine.id,
 *     workerId: "00000000-0000-0000-0000-000000000000",
 * });
 * ```
 *
 * ## Import
 *
 * Automations can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:automation/hybridRunbookWorker:HybridRunbookWorker example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/hybridRunbookWorkerGroups/group1/hybridRunbookWorkers/00000000-0000-0000-0000-000000000000
 * ```
 */
export declare class HybridRunbookWorker extends pulumi.CustomResource {
    /**
     * Get an existing HybridRunbookWorker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HybridRunbookWorkerState, opts?: pulumi.CustomResourceOptions): HybridRunbookWorker;
    /**
     * Returns true if the given object is an instance of HybridRunbookWorker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is HybridRunbookWorker;
    /**
     * The name of the automation account in which the Hybrid Worker is created. Changing this forces a new resource to be created.
     */
    readonly automationAccountName: pulumi.Output<string>;
    /**
     * The IP address of assigned machine.
     */
    readonly ip: pulumi.Output<string>;
    /**
     * Last Heartbeat from the Worker.
     */
    readonly lastSeenDateTime: pulumi.Output<string>;
    /**
     * The registration time of the worker machine.
     */
    readonly registrationDateTime: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Automation should exist. Changing this forces a new Automation to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The ID of the virtual machine used for this HybridWorker. Changing this forces a new Automation to be created.
     */
    readonly vmResourceId: pulumi.Output<string>;
    /**
     * The name of the HybridWorker Group. Changing this forces a new Automation to be created.
     */
    readonly workerGroupName: pulumi.Output<string>;
    /**
     * Specify the ID of this HybridWorker in UUID notation. Changing this forces a new Automation to be created.
     */
    readonly workerId: pulumi.Output<string>;
    /**
     * The name of HybridWorker.
     */
    readonly workerName: pulumi.Output<string>;
    /**
     * The type of the HybridWorker, the possible values are `HybridV1` and `HybridV2`.
     */
    readonly workerType: pulumi.Output<string>;
    /**
     * Create a HybridRunbookWorker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HybridRunbookWorkerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering HybridRunbookWorker resources.
 */
export interface HybridRunbookWorkerState {
    /**
     * The name of the automation account in which the Hybrid Worker is created. Changing this forces a new resource to be created.
     */
    automationAccountName?: pulumi.Input<string>;
    /**
     * The IP address of assigned machine.
     */
    ip?: pulumi.Input<string>;
    /**
     * Last Heartbeat from the Worker.
     */
    lastSeenDateTime?: pulumi.Input<string>;
    /**
     * The registration time of the worker machine.
     */
    registrationDateTime?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Automation should exist. Changing this forces a new Automation to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The ID of the virtual machine used for this HybridWorker. Changing this forces a new Automation to be created.
     */
    vmResourceId?: pulumi.Input<string>;
    /**
     * The name of the HybridWorker Group. Changing this forces a new Automation to be created.
     */
    workerGroupName?: pulumi.Input<string>;
    /**
     * Specify the ID of this HybridWorker in UUID notation. Changing this forces a new Automation to be created.
     */
    workerId?: pulumi.Input<string>;
    /**
     * The name of HybridWorker.
     */
    workerName?: pulumi.Input<string>;
    /**
     * The type of the HybridWorker, the possible values are `HybridV1` and `HybridV2`.
     */
    workerType?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a HybridRunbookWorker resource.
 */
export interface HybridRunbookWorkerArgs {
    /**
     * The name of the automation account in which the Hybrid Worker is created. Changing this forces a new resource to be created.
     */
    automationAccountName: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Automation should exist. Changing this forces a new Automation to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The ID of the virtual machine used for this HybridWorker. Changing this forces a new Automation to be created.
     */
    vmResourceId: pulumi.Input<string>;
    /**
     * The name of the HybridWorker Group. Changing this forces a new Automation to be created.
     */
    workerGroupName: pulumi.Input<string>;
    /**
     * Specify the ID of this HybridWorker in UUID notation. Changing this forces a new Automation to be created.
     */
    workerId: pulumi.Input<string>;
}
