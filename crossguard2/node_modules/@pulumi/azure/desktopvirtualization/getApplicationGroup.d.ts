import * as pulumi from "@pulumi/pulumi";
/**
 * Use this data source to access information about an existing Application Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.desktopvirtualization.getApplicationGroup({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export declare function getApplicationGroup(args: GetApplicationGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationGroupResult>;
/**
 * A collection of arguments for invoking getApplicationGroup.
 */
export interface GetApplicationGroupArgs {
    /**
     * The name of this Application Group.
     */
    name: string;
    /**
     * The name of the Resource Group where the Application Group exists.
     */
    resourceGroupName: string;
}
/**
 * A collection of values returned by getApplicationGroup.
 */
export interface GetApplicationGroupResult {
    /**
     * The description of the Application Group.
     */
    readonly description: string;
    /**
     * The friendly name of the Application Group.
     */
    readonly friendlyName: string;
    /**
     * The Virtual Desktop Host Pool ID the Application Group is associated to.
     */
    readonly hostPoolId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Azure Region where the Application Group exists.
     */
    readonly location: string;
    readonly name: string;
    readonly resourceGroupName: string;
    /**
     * A mapping of tags assigned to the Application Group.
     */
    readonly tags: {
        [key: string]: string;
    };
    /**
     * The type of Application Group (`RemoteApp` or `Desktop`).
     */
    readonly type: string;
    /**
     * The Virtual Desktop Workspace ID the Application Group is associated to.
     */
    readonly workspaceId: string;
}
/**
 * Use this data source to access information about an existing Application Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.desktopvirtualization.getApplicationGroup({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export declare function getApplicationGroupOutput(args: GetApplicationGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetApplicationGroupResult>;
/**
 * A collection of arguments for invoking getApplicationGroup.
 */
export interface GetApplicationGroupOutputArgs {
    /**
     * The name of this Application Group.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Application Group exists.
     */
    resourceGroupName: pulumi.Input<string>;
}
