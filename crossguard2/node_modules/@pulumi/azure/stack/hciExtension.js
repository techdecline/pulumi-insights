"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.HciExtension = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Stack HCI Extension.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-hci-ext",
 *     location: "West Europe",
 * });
 * const exampleHciExtension = new azure.stack.HciExtension("example", {
 *     name: "AzureMonitorWindowsAgent",
 *     arcSettingId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-hci/providers/Microsoft.AzureStackHCI/clusters/hci-cl/arcSettings/default",
 *     publisher: "Microsoft.Azure.Monitor",
 *     type: "MicrosoftMonitoringAgent",
 *     autoUpgradeMinorVersionEnabled: true,
 *     automaticUpgradeEnabled: true,
 *     typeHandlerVersion: "1.22.0",
 * });
 * ```
 *
 * ## Import
 *
 * Azure Stack HCI Extension can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:stack/hciExtension:HciExtension example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/clusters/cluster1/arcSettings/default/extensions/extension1
 * ```
 */
class HciExtension extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arcSettingId"] = state ? state.arcSettingId : undefined;
            resourceInputs["autoUpgradeMinorVersionEnabled"] = state ? state.autoUpgradeMinorVersionEnabled : undefined;
            resourceInputs["automaticUpgradeEnabled"] = state ? state.automaticUpgradeEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectedSettings"] = state ? state.protectedSettings : undefined;
            resourceInputs["publisher"] = state ? state.publisher : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["typeHandlerVersion"] = state ? state.typeHandlerVersion : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.arcSettingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arcSettingId'");
            }
            if ((!args || args.publisher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publisher'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["arcSettingId"] = args ? args.arcSettingId : undefined;
            resourceInputs["autoUpgradeMinorVersionEnabled"] = args ? args.autoUpgradeMinorVersionEnabled : undefined;
            resourceInputs["automaticUpgradeEnabled"] = args ? args.automaticUpgradeEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectedSettings"] = (args === null || args === void 0 ? void 0 : args.protectedSettings) ? pulumi.secret(args.protectedSettings) : undefined;
            resourceInputs["publisher"] = args ? args.publisher : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["typeHandlerVersion"] = args ? args.typeHandlerVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["protectedSettings"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HciExtension.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing HciExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HciExtension(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HciExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HciExtension.__pulumiType;
    }
}
exports.HciExtension = HciExtension;
/** @internal */
HciExtension.__pulumiType = 'azure:stack/hciExtension:HciExtension';
//# sourceMappingURL=hciExtension.js.map