"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.HciDeploymentSetting = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Stack HCI Deployment Setting.
 *
 * > Note: Completion of the prerequisites of deploying the Azure Stack HCI in your environment is outside the scope of this document. For more details refer to the [Azure Stack HCI deployment sequence](https://learn.microsoft.com/en-us/azure-stack/hci/deploy/deployment-introduction#deployment-sequence). If you encounter issues completing the prerequisites, we'd recommend opening a ticket with Microsoft Support.
 *
 * > Note: During the deployment process, the service will generate additional resources, including a new Arc Bridge Appliance and a Custom Location containing several Stack HCI Storage Paths. The provider will attempt to remove these resources on the deletion or recreation of `azure.stack.HciDeploymentSetting`.
 *
 * ## Import
 *
 * Stack HCI Deployment Settings can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:stack/hciDeploymentSetting:HciDeploymentSetting example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.AzureStackHCI/clusters/clus1/deploymentSettings/default
 * ```
 */
class HciDeploymentSetting extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arcResourceIds"] = state ? state.arcResourceIds : undefined;
            resourceInputs["scaleUnits"] = state ? state.scaleUnits : undefined;
            resourceInputs["stackHciClusterId"] = state ? state.stackHciClusterId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.arcResourceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arcResourceIds'");
            }
            if ((!args || args.scaleUnits === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scaleUnits'");
            }
            if ((!args || args.stackHciClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackHciClusterId'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["arcResourceIds"] = args ? args.arcResourceIds : undefined;
            resourceInputs["scaleUnits"] = args ? args.scaleUnits : undefined;
            resourceInputs["stackHciClusterId"] = args ? args.stackHciClusterId : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HciDeploymentSetting.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing HciDeploymentSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HciDeploymentSetting(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HciDeploymentSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HciDeploymentSetting.__pulumiType;
    }
}
exports.HciDeploymentSetting = HciDeploymentSetting;
/** @internal */
HciDeploymentSetting.__pulumiType = 'azure:stack/hciDeploymentSetting:HciDeploymentSetting';
//# sourceMappingURL=hciDeploymentSetting.js.map