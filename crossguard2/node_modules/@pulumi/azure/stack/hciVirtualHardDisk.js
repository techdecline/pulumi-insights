"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.HciVirtualHardDisk = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Stack HCI Virtual Hard Disk.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleHciStoragePath = new azure.stack.HciStoragePath("example", {
 *     name: "example-sp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     customLocationId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
 *     path: "C:\\ClusterStorage\\UserStorage_2\\sp-example",
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * const exampleHciVirtualHardDisk = new azure.stack.HciVirtualHardDisk("example", {
 *     name: "example-vhd",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     customLocationId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
 *     diskSizeInGb: 2,
 *     storagePathId: exampleHciStoragePath.id,
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Azure Stack HCI Virtual Hard Disks can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:stack/hciVirtualHardDisk:HciVirtualHardDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.AzureStackHCI/virtualHardDisks/disk1
 * ```
 */
class HciVirtualHardDisk extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["blockSizeInBytes"] = state ? state.blockSizeInBytes : undefined;
            resourceInputs["customLocationId"] = state ? state.customLocationId : undefined;
            resourceInputs["diskFileFormat"] = state ? state.diskFileFormat : undefined;
            resourceInputs["diskSizeInGb"] = state ? state.diskSizeInGb : undefined;
            resourceInputs["dynamicEnabled"] = state ? state.dynamicEnabled : undefined;
            resourceInputs["hypervGeneration"] = state ? state.hypervGeneration : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logicalSectorInBytes"] = state ? state.logicalSectorInBytes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["physicalSectorInBytes"] = state ? state.physicalSectorInBytes : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["storagePathId"] = state ? state.storagePathId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.customLocationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customLocationId'");
            }
            if ((!args || args.diskSizeInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSizeInGb'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["blockSizeInBytes"] = args ? args.blockSizeInBytes : undefined;
            resourceInputs["customLocationId"] = args ? args.customLocationId : undefined;
            resourceInputs["diskFileFormat"] = args ? args.diskFileFormat : undefined;
            resourceInputs["diskSizeInGb"] = args ? args.diskSizeInGb : undefined;
            resourceInputs["dynamicEnabled"] = args ? args.dynamicEnabled : undefined;
            resourceInputs["hypervGeneration"] = args ? args.hypervGeneration : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logicalSectorInBytes"] = args ? args.logicalSectorInBytes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["physicalSectorInBytes"] = args ? args.physicalSectorInBytes : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["storagePathId"] = args ? args.storagePathId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HciVirtualHardDisk.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing HciVirtualHardDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HciVirtualHardDisk(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HciVirtualHardDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HciVirtualHardDisk.__pulumiType;
    }
}
exports.HciVirtualHardDisk = HciVirtualHardDisk;
/** @internal */
HciVirtualHardDisk.__pulumiType = 'azure:stack/hciVirtualHardDisk:HciVirtualHardDisk';
//# sourceMappingURL=hciVirtualHardDisk.js.map