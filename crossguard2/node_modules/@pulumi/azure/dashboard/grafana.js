"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grafana = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Dashboard Grafana.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleGrafana = new azure.dashboard.Grafana("example", {
 *     name: "example-dg",
 *     resourceGroupName: example.name,
 *     location: "West Europe",
 *     grafanaMajorVersion: "10",
 *     apiKeyEnabled: true,
 *     deterministicOutboundIpEnabled: true,
 *     publicNetworkAccessEnabled: false,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Dashboard Grafana can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dashboard/grafana:Grafana example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Dashboard/grafana/workspace1
 * ```
 */
class Grafana extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiKeyEnabled"] = state ? state.apiKeyEnabled : undefined;
            resourceInputs["autoGeneratedDomainNameLabelScope"] = state ? state.autoGeneratedDomainNameLabelScope : undefined;
            resourceInputs["azureMonitorWorkspaceIntegrations"] = state ? state.azureMonitorWorkspaceIntegrations : undefined;
            resourceInputs["deterministicOutboundIpEnabled"] = state ? state.deterministicOutboundIpEnabled : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["grafanaMajorVersion"] = state ? state.grafanaMajorVersion : undefined;
            resourceInputs["grafanaVersion"] = state ? state.grafanaVersion : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundIps"] = state ? state.outboundIps : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["smtp"] = state ? state.smtp : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["zoneRedundancyEnabled"] = state ? state.zoneRedundancyEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.grafanaMajorVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grafanaMajorVersion'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["apiKeyEnabled"] = args ? args.apiKeyEnabled : undefined;
            resourceInputs["autoGeneratedDomainNameLabelScope"] = args ? args.autoGeneratedDomainNameLabelScope : undefined;
            resourceInputs["azureMonitorWorkspaceIntegrations"] = args ? args.azureMonitorWorkspaceIntegrations : undefined;
            resourceInputs["deterministicOutboundIpEnabled"] = args ? args.deterministicOutboundIpEnabled : undefined;
            resourceInputs["grafanaMajorVersion"] = args ? args.grafanaMajorVersion : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["smtp"] = args ? args.smtp : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zoneRedundancyEnabled"] = args ? args.zoneRedundancyEnabled : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["grafanaVersion"] = undefined /*out*/;
            resourceInputs["outboundIps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Grafana.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Grafana resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Grafana(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Grafana.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Grafana.__pulumiType;
    }
}
exports.Grafana = Grafana;
/** @internal */
Grafana.__pulumiType = 'azure:dashboard/grafana:Grafana';
//# sourceMappingURL=grafana.js.map