import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a Dashboard Grafana.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleGrafana = new azure.dashboard.Grafana("example", {
 *     name: "example-dg",
 *     resourceGroupName: example.name,
 *     location: "West Europe",
 *     grafanaMajorVersion: "10",
 *     apiKeyEnabled: true,
 *     deterministicOutboundIpEnabled: true,
 *     publicNetworkAccessEnabled: false,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Dashboard Grafana can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:dashboard/grafana:Grafana example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Dashboard/grafana/workspace1
 * ```
 */
export declare class Grafana extends pulumi.CustomResource {
    /**
     * Get an existing Grafana resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrafanaState, opts?: pulumi.CustomResourceOptions): Grafana;
    /**
     * Returns true if the given object is an instance of Grafana.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Grafana;
    /**
     * Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     */
    readonly apiKeyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     */
    readonly autoGeneratedDomainNameLabelScope: pulumi.Output<string | undefined>;
    /**
     * A `azureMonitorWorkspaceIntegrations` block as defined below.
     */
    readonly azureMonitorWorkspaceIntegrations: pulumi.Output<outputs.dashboard.GrafanaAzureMonitorWorkspaceIntegration[] | undefined>;
    /**
     * Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     */
    readonly deterministicOutboundIpEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The endpoint of the Grafana instance.
     */
    readonly endpoint: pulumi.Output<string>;
    /**
     * Which major version of Grafana to deploy. Possible values are `9`, `10`. Changing this forces a new resource to be created.
     */
    readonly grafanaMajorVersion: pulumi.Output<string>;
    /**
     * The full Grafana software semantic version deployed.
     */
    readonly grafanaVersion: pulumi.Output<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     */
    readonly identity: pulumi.Output<outputs.dashboard.GrafanaIdentity | undefined>;
    /**
     * Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * List of outbound IPs if deterministicOutboundIP is enabled.
     */
    readonly outboundIps: pulumi.Output<string[]>;
    /**
     * Whether to enable traffic over the public interface. Defaults to `true`.
     */
    readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     */
    readonly sku: pulumi.Output<string | undefined>;
    /**
     * A `smtp` block as defined below.
     */
    readonly smtp: pulumi.Output<outputs.dashboard.GrafanaSmtp | undefined>;
    /**
     * A mapping of tags which should be assigned to the Dashboard Grafana.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     */
    readonly zoneRedundancyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Create a Grafana resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrafanaArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Grafana resources.
 */
export interface GrafanaState {
    /**
     * Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     */
    apiKeyEnabled?: pulumi.Input<boolean>;
    /**
     * Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     */
    autoGeneratedDomainNameLabelScope?: pulumi.Input<string>;
    /**
     * A `azureMonitorWorkspaceIntegrations` block as defined below.
     */
    azureMonitorWorkspaceIntegrations?: pulumi.Input<pulumi.Input<inputs.dashboard.GrafanaAzureMonitorWorkspaceIntegration>[]>;
    /**
     * Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     */
    deterministicOutboundIpEnabled?: pulumi.Input<boolean>;
    /**
     * The endpoint of the Grafana instance.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Which major version of Grafana to deploy. Possible values are `9`, `10`. Changing this forces a new resource to be created.
     */
    grafanaMajorVersion?: pulumi.Input<string>;
    /**
     * The full Grafana software semantic version deployed.
     */
    grafanaVersion?: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     */
    identity?: pulumi.Input<inputs.dashboard.GrafanaIdentity>;
    /**
     * Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * List of outbound IPs if deterministicOutboundIP is enabled.
     */
    outboundIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable traffic over the public interface. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     */
    sku?: pulumi.Input<string>;
    /**
     * A `smtp` block as defined below.
     */
    smtp?: pulumi.Input<inputs.dashboard.GrafanaSmtp>;
    /**
     * A mapping of tags which should be assigned to the Dashboard Grafana.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     */
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a Grafana resource.
 */
export interface GrafanaArgs {
    /**
     * Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
     */
    apiKeyEnabled?: pulumi.Input<boolean>;
    /**
     * Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
     */
    autoGeneratedDomainNameLabelScope?: pulumi.Input<string>;
    /**
     * A `azureMonitorWorkspaceIntegrations` block as defined below.
     */
    azureMonitorWorkspaceIntegrations?: pulumi.Input<pulumi.Input<inputs.dashboard.GrafanaAzureMonitorWorkspaceIntegration>[]>;
    /**
     * Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
     */
    deterministicOutboundIpEnabled?: pulumi.Input<boolean>;
    /**
     * Which major version of Grafana to deploy. Possible values are `9`, `10`. Changing this forces a new resource to be created.
     */
    grafanaMajorVersion: pulumi.Input<string>;
    /**
     * An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
     */
    identity?: pulumi.Input<inputs.dashboard.GrafanaIdentity>;
    /**
     * Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enable traffic over the public interface. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the SKU used for the Grafana instance. Possible values are `Standard` and `Essential`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
     */
    sku?: pulumi.Input<string>;
    /**
     * A `smtp` block as defined below.
     */
    smtp?: pulumi.Input<inputs.dashboard.GrafanaSmtp>;
    /**
     * A mapping of tags which should be assigned to the Dashboard Grafana.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
     */
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}
