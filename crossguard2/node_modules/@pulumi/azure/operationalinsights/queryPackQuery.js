"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryPackQuery = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Log Analytics Query Pack Query.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleQueryPack = new azure.loganalytics.QueryPack("example", {
 *     name: "example-laqp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleQueryPackQuery = new azure.operationalinsights.QueryPackQuery("example", {
 *     name: "19952bc3-0bf9-49eb-b713-6b80e7a41847",
 *     queryPackId: exampleQueryPack.id,
 *     body: `let newExceptionsTimeRange = 1d;
 * let timeRangeToCheckBefore = 7d;
 * exceptions
 * | where timestamp < ago(timeRangeToCheckBefore)
 * | summarize count() by problemId
 * | join kind= rightanti (
 * exceptions
 * | where timestamp >= ago(newExceptionsTimeRange)
 * | extend stack = tostring(details[0].rawStack)
 * | summarize count(), dcount(user_AuthenticatedId), min(timestamp), max(timestamp), any(stack) by problemId
 * ) on problemId
 * | order by  count_ desc
 * `,
 *     displayName: "Exceptions - New in the last 24 hours",
 * });
 * ```
 *
 * ## Import
 *
 * Log Analytics Query Pack Queries can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:operationalinsights/queryPackQuery:QueryPackQuery example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.OperationalInsights/queryPacks/queryPack1/queries/15b49e87-8555-4d92-8a7b-2014b469a9df
 * ```
 */
class QueryPackQuery extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalSettingsJson"] = state ? state.additionalSettingsJson : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryPackId"] = state ? state.queryPackId : undefined;
            resourceInputs["resourceTypes"] = state ? state.resourceTypes : undefined;
            resourceInputs["solutions"] = state ? state.solutions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.body === undefined) && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.queryPackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryPackId'");
            }
            resourceInputs["additionalSettingsJson"] = args ? args.additionalSettingsJson : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryPackId"] = args ? args.queryPackId : undefined;
            resourceInputs["resourceTypes"] = args ? args.resourceTypes : undefined;
            resourceInputs["solutions"] = args ? args.solutions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QueryPackQuery.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing QueryPackQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new QueryPackQuery(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of QueryPackQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QueryPackQuery.__pulumiType;
    }
}
exports.QueryPackQuery = QueryPackQuery;
/** @internal */
QueryPackQuery.__pulumiType = 'azure:operationalinsights/queryPackQuery:QueryPackQuery';
//# sourceMappingURL=queryPackQuery.js.map