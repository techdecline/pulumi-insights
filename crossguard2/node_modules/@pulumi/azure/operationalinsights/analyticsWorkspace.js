"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsWorkspace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Log Analytics (formally Operational Insights) Workspace.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "acctest-01",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 *     retentionInDays: 30,
 * });
 * ```
 *
 * ## Import
 *
 * Log Analytics Workspaces can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:operationalinsights/analyticsWorkspace:AnalyticsWorkspace workspace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.OperationalInsights/workspaces/workspace1
 * ```
 */
class AnalyticsWorkspace extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowResourceOnlyPermissions"] = state ? state.allowResourceOnlyPermissions : undefined;
            resourceInputs["cmkForQueryForced"] = state ? state.cmkForQueryForced : undefined;
            resourceInputs["dailyQuotaGb"] = state ? state.dailyQuotaGb : undefined;
            resourceInputs["dataCollectionRuleId"] = state ? state.dataCollectionRuleId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["immediateDataPurgeOn30DaysEnabled"] = state ? state.immediateDataPurgeOn30DaysEnabled : undefined;
            resourceInputs["internetIngestionEnabled"] = state ? state.internetIngestionEnabled : undefined;
            resourceInputs["internetQueryEnabled"] = state ? state.internetQueryEnabled : undefined;
            resourceInputs["localAuthenticationDisabled"] = state ? state.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primarySharedKey"] = state ? state.primarySharedKey : undefined;
            resourceInputs["reservationCapacityInGbPerDay"] = state ? state.reservationCapacityInGbPerDay : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retentionInDays"] = state ? state.retentionInDays : undefined;
            resourceInputs["secondarySharedKey"] = state ? state.secondarySharedKey : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["allowResourceOnlyPermissions"] = args ? args.allowResourceOnlyPermissions : undefined;
            resourceInputs["cmkForQueryForced"] = args ? args.cmkForQueryForced : undefined;
            resourceInputs["dailyQuotaGb"] = args ? args.dailyQuotaGb : undefined;
            resourceInputs["dataCollectionRuleId"] = args ? args.dataCollectionRuleId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["immediateDataPurgeOn30DaysEnabled"] = args ? args.immediateDataPurgeOn30DaysEnabled : undefined;
            resourceInputs["internetIngestionEnabled"] = args ? args.internetIngestionEnabled : undefined;
            resourceInputs["internetQueryEnabled"] = args ? args.internetQueryEnabled : undefined;
            resourceInputs["localAuthenticationDisabled"] = args ? args.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reservationCapacityInGbPerDay"] = args ? args.reservationCapacityInGbPerDay : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retentionInDays"] = args ? args.retentionInDays : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["primarySharedKey"] = undefined /*out*/;
            resourceInputs["secondarySharedKey"] = undefined /*out*/;
            resourceInputs["workspaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primarySharedKey", "secondarySharedKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AnalyticsWorkspace.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AnalyticsWorkspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AnalyticsWorkspace(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AnalyticsWorkspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnalyticsWorkspace.__pulumiType;
    }
}
exports.AnalyticsWorkspace = AnalyticsWorkspace;
/** @internal */
AnalyticsWorkspace.__pulumiType = 'azure:operationalinsights/analyticsWorkspace:AnalyticsWorkspace';
//# sourceMappingURL=analyticsWorkspace.js.map