"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkSimPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Mobile Network Sim Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleNetwork = new azure.mobile.Network("example", {
 *     name: "example-mn",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     mobileCountryCode: "001",
 *     mobileNetworkCode: "01",
 * });
 * const exampleNetworkDataNetwork = new azure.mobile.NetworkDataNetwork("example", {
 *     name: "example-mndn",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 * });
 * const exampleNetworkService = new azure.mobile.NetworkService("example", {
 *     name: "example-mns",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 *     servicePrecedence: 0,
 *     pccRules: [{
 *         name: "default-rule",
 *         precedence: 1,
 *         trafficControlEnabled: true,
 *         serviceDataFlowTemplates: [{
 *             direction: "Uplink",
 *             name: "IP-to-server",
 *             ports: [],
 *             protocols: ["ip"],
 *             remoteIpLists: ["10.3.4.0/24"],
 *         }],
 *     }],
 * });
 * const exampleNetworkSlice = new azure.mobile.NetworkSlice("example", {
 *     name: "example-mns",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 *     singleNetworkSliceSelectionAssistanceInformation: {
 *         sliceServiceType: 1,
 *     },
 * });
 * const exampleNetworkSimPolicy = new azure.mobile.NetworkSimPolicy("example", {
 *     name: "example-mnsp",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 *     registrationTimerInSeconds: 3240,
 *     defaultSliceId: exampleNetworkSlice.id,
 *     slices: [{
 *         defaultDataNetworkId: exampleNetworkDataNetwork.id,
 *         sliceId: exampleNetworkSlice.id,
 *         dataNetworks: [{
 *             dataNetworkId: exampleNetworkDataNetwork.id,
 *             allocationAndRetentionPriorityLevel: 9,
 *             defaultSessionType: "IPv4",
 *             qosIndicator: 9,
 *             preemptionCapability: "NotPreempt",
 *             preemptionVulnerability: "Preemptable",
 *             allowedServicesIds: [exampleNetworkService.id],
 *             sessionAggregateMaximumBitRate: {
 *                 downlink: "1 Gbps",
 *                 uplink: "500 Mbps",
 *             },
 *         }],
 *     }],
 *     userEquipmentAggregateMaximumBitRate: {
 *         downlink: "1 Gbps",
 *         uplink: "500 Mbps",
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Mobile Network Sim Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mobile/networkSimPolicy:NetworkSimPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/mobileNetworks/mobileNetwork1/simPolicies/simPolicy1
 * ```
 */
class NetworkSimPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["defaultSliceId"] = state ? state.defaultSliceId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mobileNetworkId"] = state ? state.mobileNetworkId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ratFrequencySelectionPriorityIndex"] = state ? state.ratFrequencySelectionPriorityIndex : undefined;
            resourceInputs["registrationTimerInSeconds"] = state ? state.registrationTimerInSeconds : undefined;
            resourceInputs["slices"] = state ? state.slices : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userEquipmentAggregateMaximumBitRate"] = state ? state.userEquipmentAggregateMaximumBitRate : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultSliceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultSliceId'");
            }
            if ((!args || args.mobileNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobileNetworkId'");
            }
            if ((!args || args.slices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slices'");
            }
            if ((!args || args.userEquipmentAggregateMaximumBitRate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userEquipmentAggregateMaximumBitRate'");
            }
            resourceInputs["defaultSliceId"] = args ? args.defaultSliceId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mobileNetworkId"] = args ? args.mobileNetworkId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ratFrequencySelectionPriorityIndex"] = args ? args.ratFrequencySelectionPriorityIndex : undefined;
            resourceInputs["registrationTimerInSeconds"] = args ? args.registrationTimerInSeconds : undefined;
            resourceInputs["slices"] = args ? args.slices : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userEquipmentAggregateMaximumBitRate"] = args ? args.userEquipmentAggregateMaximumBitRate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSimPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkSimPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkSimPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkSimPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSimPolicy.__pulumiType;
    }
}
exports.NetworkSimPolicy = NetworkSimPolicy;
/** @internal */
NetworkSimPolicy.__pulumiType = 'azure:mobile/networkSimPolicy:NetworkSimPolicy';
//# sourceMappingURL=networkSimPolicy.js.map