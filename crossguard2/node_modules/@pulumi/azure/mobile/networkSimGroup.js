"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkSimGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Mobile Network Sim Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleNetwork = new azure.mobile.Network("example", {
 *     name: "example-mn",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     mobileCountryCode: "001",
 *     mobileNetworkCode: "01",
 * });
 * const example = azure.authorization.getUserAssignedIdentity({
 *     name: "name_of_user_assigned_identity",
 *     resourceGroupName: "name_of_resource_group",
 * });
 * const exampleGetKeyVault = azure.keyvault.getKeyVault({
 *     name: "example-kv",
 *     resourceGroupName: "some-resource-group",
 * });
 * const exampleGetKey = exampleGetKeyVault.then(exampleGetKeyVault => azure.keyvault.getKey({
 *     name: "example-key",
 *     keyVaultId: exampleGetKeyVault.id,
 * }));
 * const exampleNetworkSimGroup = new azure.mobile.NetworkSimGroup("example", {
 *     name: "example-mnsg",
 *     location: exampleResourceGroup.location,
 *     mobileNetworkId: exampleNetwork.id,
 *     encryptionKeyUrl: exampleGetKey.then(exampleGetKey => exampleGetKey.id),
 *     identity: {
 *         type: "SystemAssigned, UserAssigned",
 *         identityIds: [example.then(example => example.id)],
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Mobile Network Sim Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mobile/networkSimGroup:NetworkSimGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/simGroups/simGroup1
 * ```
 */
class NetworkSimGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["encryptionKeyUrl"] = state ? state.encryptionKeyUrl : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mobileNetworkId"] = state ? state.mobileNetworkId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.mobileNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobileNetworkId'");
            }
            resourceInputs["encryptionKeyUrl"] = args ? args.encryptionKeyUrl : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mobileNetworkId"] = args ? args.mobileNetworkId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSimGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkSimGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkSimGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkSimGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSimGroup.__pulumiType;
    }
}
exports.NetworkSimGroup = NetworkSimGroup;
/** @internal */
NetworkSimGroup.__pulumiType = 'azure:mobile/networkSimGroup:NetworkSimGroup';
//# sourceMappingURL=networkSimGroup.js.map