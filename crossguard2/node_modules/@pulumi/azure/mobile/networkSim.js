"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkSim = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Mobile Network Sim.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleNetwork = new azure.mobile.Network("example", {
 *     name: "example-mn",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     mobileCountryCode: "001",
 *     mobileNetworkCode: "01",
 * });
 * const exampleNetworkSimGroup = new azure.mobile.NetworkSimGroup("example", {
 *     name: "example-mnsg",
 *     location: example.location,
 *     mobileNetworkId: exampleNetwork.id,
 * });
 * const exampleNetworkSlice = new azure.mobile.NetworkSlice("example", {
 *     name: "example-slice",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 *     singleNetworkSliceSelectionAssistanceInformation: {
 *         sliceServiceType: 1,
 *     },
 * });
 * const exampleNetworkAttachedDataNetwork = new azure.mobile.NetworkAttachedDataNetwork("example", {
 *     mobileNetworkDataNetworkName: exampleAzurermMobileNetworkDataNetwork.name,
 *     mobileNetworkPacketCoreDataPlaneId: exampleAzurermMobileNetworkPacketCoreDataPlane.id,
 *     location: example.location,
 *     dnsAddresses: ["1.1.1.1"],
 *     userEquipmentAddressPoolPrefixes: ["2.4.0.0/24"],
 *     userEquipmentStaticAddressPoolPrefixes: ["2.4.1.0/24"],
 *     userPlaneAccessName: "test",
 *     userPlaneAccessIpv4Address: "10.204.141.4",
 *     userPlaneAccessIpv4Gateway: "10.204.141.1",
 *     userPlaneAccessIpv4Subnet: "10.204.141.0/24",
 * });
 * const exampleNetworkSim = new azure.mobile.NetworkSim("example", {
 *     name: "example-sim",
 *     mobileNetworkSimGroupId: exampleNetworkSimGroup.id,
 *     authenticationKey: "00000000000000000000000000000000",
 *     integratedCircuitCardIdentifier: "8900000000000000000",
 *     internationalMobileSubscriberIdentity: "000000000000000",
 *     operatorKeyCode: "00000000000000000000000000000000",
 *     staticIpConfigurations: [{
 *         attachedDataNetworkId: test.id,
 *         sliceId: testAzurermMobileNetworkSlice.id,
 *         staticIpv4Address: "2.4.0.1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Mobile Network Sim can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mobile/networkSim:NetworkSim example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/simGroups/simGroup1/sims/sim1
 * ```
 */
class NetworkSim extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authenticationKey"] = state ? state.authenticationKey : undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["integratedCircuitCardIdentifier"] = state ? state.integratedCircuitCardIdentifier : undefined;
            resourceInputs["internationalMobileSubscriberIdentity"] = state ? state.internationalMobileSubscriberIdentity : undefined;
            resourceInputs["mobileNetworkSimGroupId"] = state ? state.mobileNetworkSimGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatorKeyCode"] = state ? state.operatorKeyCode : undefined;
            resourceInputs["simPolicyId"] = state ? state.simPolicyId : undefined;
            resourceInputs["simState"] = state ? state.simState : undefined;
            resourceInputs["staticIpConfigurations"] = state ? state.staticIpConfigurations : undefined;
            resourceInputs["vendorKeyFingerprint"] = state ? state.vendorKeyFingerprint : undefined;
            resourceInputs["vendorName"] = state ? state.vendorName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authenticationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationKey'");
            }
            if ((!args || args.integratedCircuitCardIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integratedCircuitCardIdentifier'");
            }
            if ((!args || args.internationalMobileSubscriberIdentity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'internationalMobileSubscriberIdentity'");
            }
            if ((!args || args.mobileNetworkSimGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobileNetworkSimGroupId'");
            }
            if ((!args || args.operatorKeyCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatorKeyCode'");
            }
            resourceInputs["authenticationKey"] = (args === null || args === void 0 ? void 0 : args.authenticationKey) ? pulumi.secret(args.authenticationKey) : undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["integratedCircuitCardIdentifier"] = args ? args.integratedCircuitCardIdentifier : undefined;
            resourceInputs["internationalMobileSubscriberIdentity"] = args ? args.internationalMobileSubscriberIdentity : undefined;
            resourceInputs["mobileNetworkSimGroupId"] = args ? args.mobileNetworkSimGroupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatorKeyCode"] = (args === null || args === void 0 ? void 0 : args.operatorKeyCode) ? pulumi.secret(args.operatorKeyCode) : undefined;
            resourceInputs["simPolicyId"] = args ? args.simPolicyId : undefined;
            resourceInputs["staticIpConfigurations"] = args ? args.staticIpConfigurations : undefined;
            resourceInputs["simState"] = undefined /*out*/;
            resourceInputs["vendorKeyFingerprint"] = undefined /*out*/;
            resourceInputs["vendorName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authenticationKey", "operatorKeyCode"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NetworkSim.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkSim resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkSim(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkSim.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSim.__pulumiType;
    }
}
exports.NetworkSim = NetworkSim;
/** @internal */
NetworkSim.__pulumiType = 'azure:mobile/networkSim:NetworkSim';
//# sourceMappingURL=networkSim.js.map