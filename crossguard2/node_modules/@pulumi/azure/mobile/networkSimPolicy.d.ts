import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a Mobile Network Sim Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleNetwork = new azure.mobile.Network("example", {
 *     name: "example-mn",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     mobileCountryCode: "001",
 *     mobileNetworkCode: "01",
 * });
 * const exampleNetworkDataNetwork = new azure.mobile.NetworkDataNetwork("example", {
 *     name: "example-mndn",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 * });
 * const exampleNetworkService = new azure.mobile.NetworkService("example", {
 *     name: "example-mns",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 *     servicePrecedence: 0,
 *     pccRules: [{
 *         name: "default-rule",
 *         precedence: 1,
 *         trafficControlEnabled: true,
 *         serviceDataFlowTemplates: [{
 *             direction: "Uplink",
 *             name: "IP-to-server",
 *             ports: [],
 *             protocols: ["ip"],
 *             remoteIpLists: ["10.3.4.0/24"],
 *         }],
 *     }],
 * });
 * const exampleNetworkSlice = new azure.mobile.NetworkSlice("example", {
 *     name: "example-mns",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 *     singleNetworkSliceSelectionAssistanceInformation: {
 *         sliceServiceType: 1,
 *     },
 * });
 * const exampleNetworkSimPolicy = new azure.mobile.NetworkSimPolicy("example", {
 *     name: "example-mnsp",
 *     mobileNetworkId: exampleNetwork.id,
 *     location: example.location,
 *     registrationTimerInSeconds: 3240,
 *     defaultSliceId: exampleNetworkSlice.id,
 *     slices: [{
 *         defaultDataNetworkId: exampleNetworkDataNetwork.id,
 *         sliceId: exampleNetworkSlice.id,
 *         dataNetworks: [{
 *             dataNetworkId: exampleNetworkDataNetwork.id,
 *             allocationAndRetentionPriorityLevel: 9,
 *             defaultSessionType: "IPv4",
 *             qosIndicator: 9,
 *             preemptionCapability: "NotPreempt",
 *             preemptionVulnerability: "Preemptable",
 *             allowedServicesIds: [exampleNetworkService.id],
 *             sessionAggregateMaximumBitRate: {
 *                 downlink: "1 Gbps",
 *                 uplink: "500 Mbps",
 *             },
 *         }],
 *     }],
 *     userEquipmentAggregateMaximumBitRate: {
 *         downlink: "1 Gbps",
 *         uplink: "500 Mbps",
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Mobile Network Sim Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mobile/networkSimPolicy:NetworkSimPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/mobileNetworks/mobileNetwork1/simPolicies/simPolicy1
 * ```
 */
export declare class NetworkSimPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSimPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSimPolicyState, opts?: pulumi.CustomResourceOptions): NetworkSimPolicy;
    /**
     * Returns true if the given object is an instance of NetworkSimPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is NetworkSimPolicy;
    /**
     * The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
     */
    readonly defaultSliceId: pulumi.Output<string>;
    /**
     * Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    readonly mobileNetworkId: pulumi.Output<string>;
    /**
     * The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     */
    readonly ratFrequencySelectionPriorityIndex: pulumi.Output<number | undefined>;
    /**
     * Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
     */
    readonly registrationTimerInSeconds: pulumi.Output<number | undefined>;
    /**
     * An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     */
    readonly slices: pulumi.Output<outputs.mobile.NetworkSimPolicySlice[]>;
    /**
     * A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A `userEquipmentAggregateMaximumBitRate` block as defined below.
     */
    readonly userEquipmentAggregateMaximumBitRate: pulumi.Output<outputs.mobile.NetworkSimPolicyUserEquipmentAggregateMaximumBitRate>;
    /**
     * Create a NetworkSimPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkSimPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering NetworkSimPolicy resources.
 */
export interface NetworkSimPolicyState {
    /**
     * The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
     */
    defaultSliceId?: pulumi.Input<string>;
    /**
     * Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    mobileNetworkId?: pulumi.Input<string>;
    /**
     * The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     */
    ratFrequencySelectionPriorityIndex?: pulumi.Input<number>;
    /**
     * Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
     */
    registrationTimerInSeconds?: pulumi.Input<number>;
    /**
     * An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     */
    slices?: pulumi.Input<pulumi.Input<inputs.mobile.NetworkSimPolicySlice>[]>;
    /**
     * A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `userEquipmentAggregateMaximumBitRate` block as defined below.
     */
    userEquipmentAggregateMaximumBitRate?: pulumi.Input<inputs.mobile.NetworkSimPolicyUserEquipmentAggregateMaximumBitRate>;
}
/**
 * The set of arguments for constructing a NetworkSimPolicy resource.
 */
export interface NetworkSimPolicyArgs {
    /**
     * The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
     */
    defaultSliceId: pulumi.Input<string>;
    /**
     * Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    mobileNetworkId: pulumi.Input<string>;
    /**
     * The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     */
    ratFrequencySelectionPriorityIndex?: pulumi.Input<number>;
    /**
     * Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
     */
    registrationTimerInSeconds?: pulumi.Input<number>;
    /**
     * An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     */
    slices: pulumi.Input<pulumi.Input<inputs.mobile.NetworkSimPolicySlice>[]>;
    /**
     * A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `userEquipmentAggregateMaximumBitRate` block as defined below.
     */
    userEquipmentAggregateMaximumBitRate: pulumi.Input<inputs.mobile.NetworkSimPolicyUserEquipmentAggregateMaximumBitRate>;
}
