"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkAttachedDataNetwork = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Mobile Network Attached Data Network.
 *
 * ## Import
 *
 * Mobile Network Attached Data Network can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mobile/networkAttachedDataNetwork:NetworkAttachedDataNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/packetCoreControlPlane1/packetCoreDataPlanes/packetCoreDataPlane1/attachedDataNetworks/attachedDataNetwork1
 * ```
 */
class NetworkAttachedDataNetwork extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dnsAddresses"] = state ? state.dnsAddresses : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mobileNetworkDataNetworkName"] = state ? state.mobileNetworkDataNetworkName : undefined;
            resourceInputs["mobileNetworkPacketCoreDataPlaneId"] = state ? state.mobileNetworkPacketCoreDataPlaneId : undefined;
            resourceInputs["networkAddressPortTranslation"] = state ? state.networkAddressPortTranslation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userEquipmentAddressPoolPrefixes"] = state ? state.userEquipmentAddressPoolPrefixes : undefined;
            resourceInputs["userEquipmentStaticAddressPoolPrefixes"] = state ? state.userEquipmentStaticAddressPoolPrefixes : undefined;
            resourceInputs["userPlaneAccessIpv4Address"] = state ? state.userPlaneAccessIpv4Address : undefined;
            resourceInputs["userPlaneAccessIpv4Gateway"] = state ? state.userPlaneAccessIpv4Gateway : undefined;
            resourceInputs["userPlaneAccessIpv4Subnet"] = state ? state.userPlaneAccessIpv4Subnet : undefined;
            resourceInputs["userPlaneAccessName"] = state ? state.userPlaneAccessName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dnsAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsAddresses'");
            }
            if ((!args || args.mobileNetworkDataNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobileNetworkDataNetworkName'");
            }
            if ((!args || args.mobileNetworkPacketCoreDataPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobileNetworkPacketCoreDataPlaneId'");
            }
            resourceInputs["dnsAddresses"] = args ? args.dnsAddresses : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mobileNetworkDataNetworkName"] = args ? args.mobileNetworkDataNetworkName : undefined;
            resourceInputs["mobileNetworkPacketCoreDataPlaneId"] = args ? args.mobileNetworkPacketCoreDataPlaneId : undefined;
            resourceInputs["networkAddressPortTranslation"] = args ? args.networkAddressPortTranslation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userEquipmentAddressPoolPrefixes"] = args ? args.userEquipmentAddressPoolPrefixes : undefined;
            resourceInputs["userEquipmentStaticAddressPoolPrefixes"] = args ? args.userEquipmentStaticAddressPoolPrefixes : undefined;
            resourceInputs["userPlaneAccessIpv4Address"] = args ? args.userPlaneAccessIpv4Address : undefined;
            resourceInputs["userPlaneAccessIpv4Gateway"] = args ? args.userPlaneAccessIpv4Gateway : undefined;
            resourceInputs["userPlaneAccessIpv4Subnet"] = args ? args.userPlaneAccessIpv4Subnet : undefined;
            resourceInputs["userPlaneAccessName"] = args ? args.userPlaneAccessName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkAttachedDataNetwork.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkAttachedDataNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkAttachedDataNetwork(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkAttachedDataNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkAttachedDataNetwork.__pulumiType;
    }
}
exports.NetworkAttachedDataNetwork = NetworkAttachedDataNetwork;
/** @internal */
NetworkAttachedDataNetwork.__pulumiType = 'azure:mobile/networkAttachedDataNetwork:NetworkAttachedDataNetwork';
//# sourceMappingURL=networkAttachedDataNetwork.js.map