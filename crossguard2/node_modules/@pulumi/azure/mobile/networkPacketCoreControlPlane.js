"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkPacketCoreControlPlane = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Mobile Network Packet Core Control Plane.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleNetwork = new azure.mobile.Network("example", {
 *     name: "example-mn",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     mobileCountryCode: "001",
 *     mobileNetworkCode: "01",
 * });
 * const exampleNetworkSite = new azure.mobile.NetworkSite("example", {
 *     name: "example-mns",
 *     mobileNetworkId: test.id,
 *     location: example.location,
 * });
 * const exampleDevice = new azure.databoxedge.Device("example", {
 *     name: "example-device",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     skuName: "EdgeP_Base-Standard",
 * });
 * const exampleNetworkPacketCoreControlPlane = new azure.mobile.NetworkPacketCoreControlPlane("example", {
 *     name: "example-mnpccp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "G0",
 *     controlPlaneAccessName: "default-interface",
 *     controlPlaneAccessIpv4Address: "192.168.1.199",
 *     controlPlaneAccessIpv4Gateway: "192.168.1.1",
 *     controlPlaneAccessIpv4Subnet: "192.168.1.0/25",
 *     siteIds: [exampleNetworkSite.id],
 *     localDiagnosticsAccess: {
 *         authenticationType: "AAD",
 *     },
 *     platform: {
 *         type: "AKS-HCI",
 *         edgeDeviceId: exampleDevice.id,
 *     },
 *     interoperabilitySettingsJson: JSON.stringify({
 *         key: "value",
 *     }),
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Mobile Network Packet Core Control Plane can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/packetCoreControlPlane1
 * ```
 */
class NetworkPacketCoreControlPlane extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["controlPlaneAccessIpv4Address"] = state ? state.controlPlaneAccessIpv4Address : undefined;
            resourceInputs["controlPlaneAccessIpv4Gateway"] = state ? state.controlPlaneAccessIpv4Gateway : undefined;
            resourceInputs["controlPlaneAccessIpv4Subnet"] = state ? state.controlPlaneAccessIpv4Subnet : undefined;
            resourceInputs["controlPlaneAccessName"] = state ? state.controlPlaneAccessName : undefined;
            resourceInputs["coreNetworkTechnology"] = state ? state.coreNetworkTechnology : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["interoperabilitySettingsJson"] = state ? state.interoperabilitySettingsJson : undefined;
            resourceInputs["localDiagnosticsAccess"] = state ? state.localDiagnosticsAccess : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["siteIds"] = state ? state.siteIds : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["softwareVersion"] = state ? state.softwareVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userEquipmentMtuInBytes"] = state ? state.userEquipmentMtuInBytes : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.localDiagnosticsAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localDiagnosticsAccess'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.siteIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteIds'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["controlPlaneAccessIpv4Address"] = args ? args.controlPlaneAccessIpv4Address : undefined;
            resourceInputs["controlPlaneAccessIpv4Gateway"] = args ? args.controlPlaneAccessIpv4Gateway : undefined;
            resourceInputs["controlPlaneAccessIpv4Subnet"] = args ? args.controlPlaneAccessIpv4Subnet : undefined;
            resourceInputs["controlPlaneAccessName"] = args ? args.controlPlaneAccessName : undefined;
            resourceInputs["coreNetworkTechnology"] = args ? args.coreNetworkTechnology : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["interoperabilitySettingsJson"] = args ? args.interoperabilitySettingsJson : undefined;
            resourceInputs["localDiagnosticsAccess"] = args ? args.localDiagnosticsAccess : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["siteIds"] = args ? args.siteIds : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["softwareVersion"] = args ? args.softwareVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userEquipmentMtuInBytes"] = args ? args.userEquipmentMtuInBytes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPacketCoreControlPlane.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkPacketCoreControlPlane resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkPacketCoreControlPlane(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkPacketCoreControlPlane.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPacketCoreControlPlane.__pulumiType;
    }
}
exports.NetworkPacketCoreControlPlane = NetworkPacketCoreControlPlane;
/** @internal */
NetworkPacketCoreControlPlane.__pulumiType = 'azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane';
//# sourceMappingURL=networkPacketCoreControlPlane.js.map