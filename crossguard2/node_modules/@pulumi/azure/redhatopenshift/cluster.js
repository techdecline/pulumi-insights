"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a fully managed Azure Red Hat OpenShift Cluster (also known as ARO).
 *
 * > **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = azure.core.getClientConfig({});
 * const exampleGetClientConfig = azuread.getClientConfig({});
 * const exampleApplication = new azuread.Application("example", {displayName: "example-aro"});
 * const exampleServicePrincipal = new azuread.ServicePrincipal("example", {clientId: exampleApplication.clientId});
 * const exampleServicePrincipalPassword = new azuread.ServicePrincipalPassword("example", {servicePrincipalId: exampleServicePrincipal.objectId});
 * const redhatopenshift = azuread.getServicePrincipal({
 *     clientId: "f1dd0a37-89c6-4e07-bcd1-ffd3d43d8875",
 * });
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West US",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vnet",
 *     addressSpaces: ["10.0.0.0/22"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const roleNetwork1 = new azure.authorization.Assignment("role_network1", {
 *     scope: exampleVirtualNetwork.id,
 *     roleDefinitionName: "Network Contributor",
 *     principalId: exampleServicePrincipal.objectId,
 * });
 * const roleNetwork2 = new azure.authorization.Assignment("role_network2", {
 *     scope: exampleVirtualNetwork.id,
 *     roleDefinitionName: "Network Contributor",
 *     principalId: redhatopenshift.then(redhatopenshift => redhatopenshift.objectId),
 * });
 * const mainSubnet = new azure.network.Subnet("main_subnet", {
 *     name: "main-subnet",
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.0.0/23"],
 *     serviceEndpoints: [
 *         "Microsoft.Storage",
 *         "Microsoft.ContainerRegistry",
 *     ],
 * });
 * const workerSubnet = new azure.network.Subnet("worker_subnet", {
 *     name: "worker-subnet",
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/23"],
 *     serviceEndpoints: [
 *         "Microsoft.Storage",
 *         "Microsoft.ContainerRegistry",
 *     ],
 * });
 * const exampleCluster = new azure.redhatopenshift.Cluster("example", {
 *     name: "examplearo",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     clusterProfile: {
 *         domain: "aro-example.com",
 *         version: "4.13.23",
 *     },
 *     networkProfile: {
 *         podCidr: "10.128.0.0/14",
 *         serviceCidr: "172.30.0.0/16",
 *     },
 *     mainProfile: {
 *         vmSize: "Standard_D8s_v3",
 *         subnetId: mainSubnet.id,
 *     },
 *     apiServerProfile: {
 *         visibility: "Public",
 *     },
 *     ingressProfile: {
 *         visibility: "Public",
 *     },
 *     workerProfile: {
 *         vmSize: "Standard_D4s_v3",
 *         diskSizeGb: 128,
 *         nodeCount: 3,
 *         subnetId: workerSubnet.id,
 *     },
 *     servicePrincipal: {
 *         clientId: exampleApplication.clientId,
 *         clientSecret: exampleServicePrincipalPassword.value,
 *     },
 * }, {
 *     dependsOn: [
 *         roleNetwork1,
 *         roleNetwork2,
 *     ],
 * });
 * export const consoleUrl = exampleCluster.consoleUrl;
 * ```
 *
 * ## Import
 *
 * Red Hat OpenShift Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:redhatopenshift/cluster:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/group1/providers/Microsoft.RedHatOpenShift/openShiftClusters/cluster1
 * ```
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiServerProfile"] = state ? state.apiServerProfile : undefined;
            resourceInputs["clusterProfile"] = state ? state.clusterProfile : undefined;
            resourceInputs["consoleUrl"] = state ? state.consoleUrl : undefined;
            resourceInputs["ingressProfile"] = state ? state.ingressProfile : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mainProfile"] = state ? state.mainProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfile"] = state ? state.networkProfile : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["servicePrincipal"] = state ? state.servicePrincipal : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workerProfile"] = state ? state.workerProfile : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiServerProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiServerProfile'");
            }
            if ((!args || args.clusterProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterProfile'");
            }
            if ((!args || args.ingressProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingressProfile'");
            }
            if ((!args || args.mainProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainProfile'");
            }
            if ((!args || args.networkProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfile'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.servicePrincipal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipal'");
            }
            if ((!args || args.workerProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerProfile'");
            }
            resourceInputs["apiServerProfile"] = args ? args.apiServerProfile : undefined;
            resourceInputs["clusterProfile"] = args ? args.clusterProfile : undefined;
            resourceInputs["ingressProfile"] = args ? args.ingressProfile : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mainProfile"] = args ? args.mainProfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfile"] = args ? args.networkProfile : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["servicePrincipal"] = args ? args.servicePrincipal : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workerProfile"] = args ? args.workerProfile : undefined;
            resourceInputs["consoleUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'azure:redhatopenshift/cluster:Cluster';
//# sourceMappingURL=cluster.js.map