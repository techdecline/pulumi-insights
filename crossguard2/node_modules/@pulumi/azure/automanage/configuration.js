"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Automanage Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-automanage",
 *     location: "West Europe",
 * });
 * const exampleConfiguration = new azure.automanage.Configuration("example", {
 *     name: "example-acmp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     antimalware: {
 *         exclusions: {
 *             extensions: "exe;dll",
 *             paths: "C:\\Windows\\Temp;D:\\Temp",
 *             processes: "svchost.exe;notepad.exe",
 *         },
 *         realTimeProtectionEnabled: true,
 *         scheduledScanEnabled: true,
 *         scheduledScanType: "Quick",
 *         scheduledScanDay: 1,
 *         scheduledScanTimeInMinutes: 1339,
 *     },
 *     azureSecurityBaseline: {
 *         assignmentType: "ApplyAndAutoCorrect",
 *     },
 *     automationAccountEnabled: true,
 *     backup: {
 *         policyName: "acctest-backup-policy-%d",
 *         timeZone: "UTC",
 *         instantRpRetentionRangeInDays: 2,
 *         schedulePolicy: {
 *             scheduleRunFrequency: "Daily",
 *             scheduleRunDays: [
 *                 "Monday",
 *                 "Tuesday",
 *             ],
 *             scheduleRunTimes: ["12:00"],
 *             schedulePolicyType: "SimpleSchedulePolicy",
 *         },
 *         retentionPolicy: {
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *             dailySchedule: {
 *                 retentionTimes: ["12:00"],
 *                 retentionDuration: {
 *                     count: 7,
 *                     durationType: "Days",
 *                 },
 *             },
 *             weeklySchedule: {
 *                 retentionTimes: ["14:00"],
 *                 retentionDuration: {
 *                     count: 4,
 *                     durationType: "Weeks",
 *                 },
 *             },
 *         },
 *     },
 *     bootDiagnosticsEnabled: true,
 *     defenderForCloudEnabled: true,
 *     guestConfigurationEnabled: true,
 *     logAnalyticsEnabled: true,
 *     statusChangeAlertEnabled: true,
 *     tags: {
 *         env: "test",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Automanage Configuration can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:automanage/configuration:Configuration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AutoManage/configurationProfiles/configurationProfile1
 * ```
 */
class Configuration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["antimalware"] = state ? state.antimalware : undefined;
            resourceInputs["automationAccountEnabled"] = state ? state.automationAccountEnabled : undefined;
            resourceInputs["azureSecurityBaseline"] = state ? state.azureSecurityBaseline : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["bootDiagnosticsEnabled"] = state ? state.bootDiagnosticsEnabled : undefined;
            resourceInputs["defenderForCloudEnabled"] = state ? state.defenderForCloudEnabled : undefined;
            resourceInputs["guestConfigurationEnabled"] = state ? state.guestConfigurationEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logAnalyticsEnabled"] = state ? state.logAnalyticsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["statusChangeAlertEnabled"] = state ? state.statusChangeAlertEnabled : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["antimalware"] = args ? args.antimalware : undefined;
            resourceInputs["automationAccountEnabled"] = args ? args.automationAccountEnabled : undefined;
            resourceInputs["azureSecurityBaseline"] = args ? args.azureSecurityBaseline : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["bootDiagnosticsEnabled"] = args ? args.bootDiagnosticsEnabled : undefined;
            resourceInputs["defenderForCloudEnabled"] = args ? args.defenderForCloudEnabled : undefined;
            resourceInputs["guestConfigurationEnabled"] = args ? args.guestConfigurationEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logAnalyticsEnabled"] = args ? args.logAnalyticsEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["statusChangeAlertEnabled"] = args ? args.statusChangeAlertEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Configuration.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Configuration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Configuration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Configuration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Configuration.__pulumiType;
    }
}
exports.Configuration = Configuration;
/** @internal */
Configuration.__pulumiType = 'azure:automanage/configuration:Configuration';
//# sourceMappingURL=configuration.js.map