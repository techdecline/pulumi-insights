"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedPrivateEndpoint = exports.LinkedServiceWeb = exports.LinkedServiceSynapse = exports.LinkedServiceSqlServer = exports.LinkedServiceSnowflake = exports.LinkedServiceSftp = exports.LinkedServicePostgresql = exports.LinkedServiceOdbc = exports.LinkedServiceOdata = exports.LinkedServiceMysql = exports.LinkedServiceKusto = exports.LinkedServiceKeyVault = exports.LinkedServiceDataLakeStorageGen2 = exports.LinkedServiceCosmosDbMongoApi = exports.LinkedServiceCosmosDb = exports.LinkedServiceAzureTableStorage = exports.LinkedServiceAzureSqlDatabase = exports.LinkedServiceAzureSearch = exports.LinkedServiceAzureFunction = exports.LinkedServiceAzureFileStorage = exports.LinkedServiceAzureDatabricks = exports.LinkedServiceAzureBlobStorage = exports.LinkedCustomService = exports.IntegrationRuntimeSsis = exports.IntegrationRuntimeSelfHosted = exports.IntegrationRuntimeRule = exports.getTriggerSchedulesOutput = exports.getTriggerSchedules = exports.getTriggerScheduleOutput = exports.getTriggerSchedule = exports.getFactoryOutput = exports.getFactory = exports.FlowletDataFlow = exports.Factory = exports.DatasetSqlServerTable = exports.DatasetSnowflake = exports.DatasetPostgresql = exports.DatasetParquet = exports.DatasetMysql = exports.DatasetJson = exports.DatasetHttp = exports.DatasetDelimitedText = exports.DatasetCosmosDBApi = exports.DatasetBinary = exports.DatasetAzureSqlTable = exports.DatasetAzureBlob = exports.DataFlow = exports.CustomDataset = exports.CredentialUserManagedIdentity = exports.CredentialServicePrincipal = void 0;
exports.TriggerTumblingWindow = exports.TriggerSchedule = exports.TriggerCustomEvent = exports.TriggerBlobEvent = exports.Pipeline = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.CredentialServicePrincipal = null;
utilities.lazyLoad(exports, ["CredentialServicePrincipal"], () => require("./credentialServicePrincipal"));
exports.CredentialUserManagedIdentity = null;
utilities.lazyLoad(exports, ["CredentialUserManagedIdentity"], () => require("./credentialUserManagedIdentity"));
exports.CustomDataset = null;
utilities.lazyLoad(exports, ["CustomDataset"], () => require("./customDataset"));
exports.DataFlow = null;
utilities.lazyLoad(exports, ["DataFlow"], () => require("./dataFlow"));
exports.DatasetAzureBlob = null;
utilities.lazyLoad(exports, ["DatasetAzureBlob"], () => require("./datasetAzureBlob"));
exports.DatasetAzureSqlTable = null;
utilities.lazyLoad(exports, ["DatasetAzureSqlTable"], () => require("./datasetAzureSqlTable"));
exports.DatasetBinary = null;
utilities.lazyLoad(exports, ["DatasetBinary"], () => require("./datasetBinary"));
exports.DatasetCosmosDBApi = null;
utilities.lazyLoad(exports, ["DatasetCosmosDBApi"], () => require("./datasetCosmosDBApi"));
exports.DatasetDelimitedText = null;
utilities.lazyLoad(exports, ["DatasetDelimitedText"], () => require("./datasetDelimitedText"));
exports.DatasetHttp = null;
utilities.lazyLoad(exports, ["DatasetHttp"], () => require("./datasetHttp"));
exports.DatasetJson = null;
utilities.lazyLoad(exports, ["DatasetJson"], () => require("./datasetJson"));
exports.DatasetMysql = null;
utilities.lazyLoad(exports, ["DatasetMysql"], () => require("./datasetMysql"));
exports.DatasetParquet = null;
utilities.lazyLoad(exports, ["DatasetParquet"], () => require("./datasetParquet"));
exports.DatasetPostgresql = null;
utilities.lazyLoad(exports, ["DatasetPostgresql"], () => require("./datasetPostgresql"));
exports.DatasetSnowflake = null;
utilities.lazyLoad(exports, ["DatasetSnowflake"], () => require("./datasetSnowflake"));
exports.DatasetSqlServerTable = null;
utilities.lazyLoad(exports, ["DatasetSqlServerTable"], () => require("./datasetSqlServerTable"));
exports.Factory = null;
utilities.lazyLoad(exports, ["Factory"], () => require("./factory"));
exports.FlowletDataFlow = null;
utilities.lazyLoad(exports, ["FlowletDataFlow"], () => require("./flowletDataFlow"));
exports.getFactory = null;
exports.getFactoryOutput = null;
utilities.lazyLoad(exports, ["getFactory", "getFactoryOutput"], () => require("./getFactory"));
exports.getTriggerSchedule = null;
exports.getTriggerScheduleOutput = null;
utilities.lazyLoad(exports, ["getTriggerSchedule", "getTriggerScheduleOutput"], () => require("./getTriggerSchedule"));
exports.getTriggerSchedules = null;
exports.getTriggerSchedulesOutput = null;
utilities.lazyLoad(exports, ["getTriggerSchedules", "getTriggerSchedulesOutput"], () => require("./getTriggerSchedules"));
exports.IntegrationRuntimeRule = null;
utilities.lazyLoad(exports, ["IntegrationRuntimeRule"], () => require("./integrationRuntimeRule"));
exports.IntegrationRuntimeSelfHosted = null;
utilities.lazyLoad(exports, ["IntegrationRuntimeSelfHosted"], () => require("./integrationRuntimeSelfHosted"));
exports.IntegrationRuntimeSsis = null;
utilities.lazyLoad(exports, ["IntegrationRuntimeSsis"], () => require("./integrationRuntimeSsis"));
exports.LinkedCustomService = null;
utilities.lazyLoad(exports, ["LinkedCustomService"], () => require("./linkedCustomService"));
exports.LinkedServiceAzureBlobStorage = null;
utilities.lazyLoad(exports, ["LinkedServiceAzureBlobStorage"], () => require("./linkedServiceAzureBlobStorage"));
exports.LinkedServiceAzureDatabricks = null;
utilities.lazyLoad(exports, ["LinkedServiceAzureDatabricks"], () => require("./linkedServiceAzureDatabricks"));
exports.LinkedServiceAzureFileStorage = null;
utilities.lazyLoad(exports, ["LinkedServiceAzureFileStorage"], () => require("./linkedServiceAzureFileStorage"));
exports.LinkedServiceAzureFunction = null;
utilities.lazyLoad(exports, ["LinkedServiceAzureFunction"], () => require("./linkedServiceAzureFunction"));
exports.LinkedServiceAzureSearch = null;
utilities.lazyLoad(exports, ["LinkedServiceAzureSearch"], () => require("./linkedServiceAzureSearch"));
exports.LinkedServiceAzureSqlDatabase = null;
utilities.lazyLoad(exports, ["LinkedServiceAzureSqlDatabase"], () => require("./linkedServiceAzureSqlDatabase"));
exports.LinkedServiceAzureTableStorage = null;
utilities.lazyLoad(exports, ["LinkedServiceAzureTableStorage"], () => require("./linkedServiceAzureTableStorage"));
exports.LinkedServiceCosmosDb = null;
utilities.lazyLoad(exports, ["LinkedServiceCosmosDb"], () => require("./linkedServiceCosmosDb"));
exports.LinkedServiceCosmosDbMongoApi = null;
utilities.lazyLoad(exports, ["LinkedServiceCosmosDbMongoApi"], () => require("./linkedServiceCosmosDbMongoApi"));
exports.LinkedServiceDataLakeStorageGen2 = null;
utilities.lazyLoad(exports, ["LinkedServiceDataLakeStorageGen2"], () => require("./linkedServiceDataLakeStorageGen2"));
exports.LinkedServiceKeyVault = null;
utilities.lazyLoad(exports, ["LinkedServiceKeyVault"], () => require("./linkedServiceKeyVault"));
exports.LinkedServiceKusto = null;
utilities.lazyLoad(exports, ["LinkedServiceKusto"], () => require("./linkedServiceKusto"));
exports.LinkedServiceMysql = null;
utilities.lazyLoad(exports, ["LinkedServiceMysql"], () => require("./linkedServiceMysql"));
exports.LinkedServiceOdata = null;
utilities.lazyLoad(exports, ["LinkedServiceOdata"], () => require("./linkedServiceOdata"));
exports.LinkedServiceOdbc = null;
utilities.lazyLoad(exports, ["LinkedServiceOdbc"], () => require("./linkedServiceOdbc"));
exports.LinkedServicePostgresql = null;
utilities.lazyLoad(exports, ["LinkedServicePostgresql"], () => require("./linkedServicePostgresql"));
exports.LinkedServiceSftp = null;
utilities.lazyLoad(exports, ["LinkedServiceSftp"], () => require("./linkedServiceSftp"));
exports.LinkedServiceSnowflake = null;
utilities.lazyLoad(exports, ["LinkedServiceSnowflake"], () => require("./linkedServiceSnowflake"));
exports.LinkedServiceSqlServer = null;
utilities.lazyLoad(exports, ["LinkedServiceSqlServer"], () => require("./linkedServiceSqlServer"));
exports.LinkedServiceSynapse = null;
utilities.lazyLoad(exports, ["LinkedServiceSynapse"], () => require("./linkedServiceSynapse"));
exports.LinkedServiceWeb = null;
utilities.lazyLoad(exports, ["LinkedServiceWeb"], () => require("./linkedServiceWeb"));
exports.ManagedPrivateEndpoint = null;
utilities.lazyLoad(exports, ["ManagedPrivateEndpoint"], () => require("./managedPrivateEndpoint"));
exports.Pipeline = null;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));
exports.TriggerBlobEvent = null;
utilities.lazyLoad(exports, ["TriggerBlobEvent"], () => require("./triggerBlobEvent"));
exports.TriggerCustomEvent = null;
utilities.lazyLoad(exports, ["TriggerCustomEvent"], () => require("./triggerCustomEvent"));
exports.TriggerSchedule = null;
utilities.lazyLoad(exports, ["TriggerSchedule"], () => require("./triggerSchedule"));
exports.TriggerTumblingWindow = null;
utilities.lazyLoad(exports, ["TriggerTumblingWindow"], () => require("./triggerTumblingWindow"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:datafactory/credentialServicePrincipal:CredentialServicePrincipal":
                return new exports.CredentialServicePrincipal(name, undefined, { urn });
            case "azure:datafactory/credentialUserManagedIdentity:CredentialUserManagedIdentity":
                return new exports.CredentialUserManagedIdentity(name, undefined, { urn });
            case "azure:datafactory/customDataset:CustomDataset":
                return new exports.CustomDataset(name, undefined, { urn });
            case "azure:datafactory/dataFlow:DataFlow":
                return new exports.DataFlow(name, undefined, { urn });
            case "azure:datafactory/datasetAzureBlob:DatasetAzureBlob":
                return new exports.DatasetAzureBlob(name, undefined, { urn });
            case "azure:datafactory/datasetAzureSqlTable:DatasetAzureSqlTable":
                return new exports.DatasetAzureSqlTable(name, undefined, { urn });
            case "azure:datafactory/datasetBinary:DatasetBinary":
                return new exports.DatasetBinary(name, undefined, { urn });
            case "azure:datafactory/datasetCosmosDBApi:DatasetCosmosDBApi":
                return new exports.DatasetCosmosDBApi(name, undefined, { urn });
            case "azure:datafactory/datasetDelimitedText:DatasetDelimitedText":
                return new exports.DatasetDelimitedText(name, undefined, { urn });
            case "azure:datafactory/datasetHttp:DatasetHttp":
                return new exports.DatasetHttp(name, undefined, { urn });
            case "azure:datafactory/datasetJson:DatasetJson":
                return new exports.DatasetJson(name, undefined, { urn });
            case "azure:datafactory/datasetMysql:DatasetMysql":
                return new exports.DatasetMysql(name, undefined, { urn });
            case "azure:datafactory/datasetParquet:DatasetParquet":
                return new exports.DatasetParquet(name, undefined, { urn });
            case "azure:datafactory/datasetPostgresql:DatasetPostgresql":
                return new exports.DatasetPostgresql(name, undefined, { urn });
            case "azure:datafactory/datasetSnowflake:DatasetSnowflake":
                return new exports.DatasetSnowflake(name, undefined, { urn });
            case "azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable":
                return new exports.DatasetSqlServerTable(name, undefined, { urn });
            case "azure:datafactory/factory:Factory":
                return new exports.Factory(name, undefined, { urn });
            case "azure:datafactory/flowletDataFlow:FlowletDataFlow":
                return new exports.FlowletDataFlow(name, undefined, { urn });
            case "azure:datafactory/integrationRuntimeRule:IntegrationRuntimeRule":
                return new exports.IntegrationRuntimeRule(name, undefined, { urn });
            case "azure:datafactory/integrationRuntimeSelfHosted:IntegrationRuntimeSelfHosted":
                return new exports.IntegrationRuntimeSelfHosted(name, undefined, { urn });
            case "azure:datafactory/integrationRuntimeSsis:IntegrationRuntimeSsis":
                return new exports.IntegrationRuntimeSsis(name, undefined, { urn });
            case "azure:datafactory/linkedCustomService:LinkedCustomService":
                return new exports.LinkedCustomService(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage":
                return new exports.LinkedServiceAzureBlobStorage(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks":
                return new exports.LinkedServiceAzureDatabricks(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureFileStorage:LinkedServiceAzureFileStorage":
                return new exports.LinkedServiceAzureFileStorage(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureFunction:LinkedServiceAzureFunction":
                return new exports.LinkedServiceAzureFunction(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureSearch:LinkedServiceAzureSearch":
                return new exports.LinkedServiceAzureSearch(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureSqlDatabase:LinkedServiceAzureSqlDatabase":
                return new exports.LinkedServiceAzureSqlDatabase(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureTableStorage:LinkedServiceAzureTableStorage":
                return new exports.LinkedServiceAzureTableStorage(name, undefined, { urn });
            case "azure:datafactory/linkedServiceCosmosDb:LinkedServiceCosmosDb":
                return new exports.LinkedServiceCosmosDb(name, undefined, { urn });
            case "azure:datafactory/linkedServiceCosmosDbMongoApi:LinkedServiceCosmosDbMongoApi":
                return new exports.LinkedServiceCosmosDbMongoApi(name, undefined, { urn });
            case "azure:datafactory/linkedServiceDataLakeStorageGen2:LinkedServiceDataLakeStorageGen2":
                return new exports.LinkedServiceDataLakeStorageGen2(name, undefined, { urn });
            case "azure:datafactory/linkedServiceKeyVault:LinkedServiceKeyVault":
                return new exports.LinkedServiceKeyVault(name, undefined, { urn });
            case "azure:datafactory/linkedServiceKusto:LinkedServiceKusto":
                return new exports.LinkedServiceKusto(name, undefined, { urn });
            case "azure:datafactory/linkedServiceMysql:LinkedServiceMysql":
                return new exports.LinkedServiceMysql(name, undefined, { urn });
            case "azure:datafactory/linkedServiceOdata:LinkedServiceOdata":
                return new exports.LinkedServiceOdata(name, undefined, { urn });
            case "azure:datafactory/linkedServiceOdbc:LinkedServiceOdbc":
                return new exports.LinkedServiceOdbc(name, undefined, { urn });
            case "azure:datafactory/linkedServicePostgresql:LinkedServicePostgresql":
                return new exports.LinkedServicePostgresql(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSftp:LinkedServiceSftp":
                return new exports.LinkedServiceSftp(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSnowflake:LinkedServiceSnowflake":
                return new exports.LinkedServiceSnowflake(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSqlServer:LinkedServiceSqlServer":
                return new exports.LinkedServiceSqlServer(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSynapse:LinkedServiceSynapse":
                return new exports.LinkedServiceSynapse(name, undefined, { urn });
            case "azure:datafactory/linkedServiceWeb:LinkedServiceWeb":
                return new exports.LinkedServiceWeb(name, undefined, { urn });
            case "azure:datafactory/managedPrivateEndpoint:ManagedPrivateEndpoint":
                return new exports.ManagedPrivateEndpoint(name, undefined, { urn });
            case "azure:datafactory/pipeline:Pipeline":
                return new exports.Pipeline(name, undefined, { urn });
            case "azure:datafactory/triggerBlobEvent:TriggerBlobEvent":
                return new exports.TriggerBlobEvent(name, undefined, { urn });
            case "azure:datafactory/triggerCustomEvent:TriggerCustomEvent":
                return new exports.TriggerCustomEvent(name, undefined, { urn });
            case "azure:datafactory/triggerSchedule:TriggerSchedule":
                return new exports.TriggerSchedule(name, undefined, { urn });
            case "azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow":
                return new exports.TriggerTumblingWindow(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "datafactory/credentialServicePrincipal", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/credentialUserManagedIdentity", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/customDataset", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/dataFlow", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetAzureBlob", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetAzureSqlTable", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetBinary", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetCosmosDBApi", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetDelimitedText", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetHttp", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetJson", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetMysql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetParquet", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetPostgresql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetSnowflake", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetSqlServerTable", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/factory", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/flowletDataFlow", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeRule", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeSelfHosted", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeSsis", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedCustomService", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureBlobStorage", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureDatabricks", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureFileStorage", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureFunction", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureSearch", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureSqlDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureTableStorage", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceCosmosDb", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceCosmosDbMongoApi", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceDataLakeStorageGen2", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceKeyVault", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceKusto", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceMysql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceOdata", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceOdbc", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServicePostgresql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSftp", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSnowflake", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSqlServer", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSynapse", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceWeb", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/managedPrivateEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/pipeline", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerBlobEvent", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerCustomEvent", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerSchedule", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerTumblingWindow", _module);
//# sourceMappingURL=index.js.map