"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedServiceAzureDatabricks = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Linked Service (connection) between Azure Databricks and Azure Data Factory.
 *
 * ## Example Usage
 *
 * ### With Managed Identity & New Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example",
 *     location: "East US",
 * });
 * //Create a Linked Service using managed identity and new cluster config
 * const exampleFactory = new azure.datafactory.Factory("example", {
 *     name: "TestDtaFactory92783401247",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * //Create a databricks instance
 * const exampleWorkspace = new azure.databricks.Workspace("example", {
 *     name: "databricks-test",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "standard",
 * });
 * const msiLinked = new azure.datafactory.LinkedServiceAzureDatabricks("msi_linked", {
 *     name: "ADBLinkedServiceViaMSI",
 *     dataFactoryId: exampleFactory.id,
 *     description: "ADB Linked Service via MSI",
 *     adbDomain: pulumi.interpolate`https://${exampleWorkspace.workspaceUrl}`,
 *     msiWorkSpaceResourceId: exampleWorkspace.id,
 *     newClusterConfig: {
 *         nodeType: "Standard_NC12",
 *         clusterVersion: "5.5.x-gpu-scala2.11",
 *         minNumberOfWorkers: 1,
 *         maxNumberOfWorkers: 5,
 *         driverNodeType: "Standard_NC12",
 *         logDestination: "dbfs:/logs",
 *         customTags: {
 *             custom_tag1: "sct_value_1",
 *             custom_tag2: "sct_value_2",
 *         },
 *         sparkConfig: {
 *             config1: "value1",
 *             config2: "value2",
 *         },
 *         sparkEnvironmentVariables: {
 *             envVar1: "value1",
 *             envVar2: "value2",
 *         },
 *         initScripts: [
 *             "init.sh",
 *             "init2.sh",
 *         ],
 *     },
 * });
 * ```
 *
 * ### With Access Token & Existing Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example",
 *     location: "East US",
 * });
 * //Link to an existing cluster via access token
 * const exampleFactory = new azure.datafactory.Factory("example", {
 *     name: "TestDtaFactory92783401247",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * });
 * //Create a databricks instance
 * const exampleWorkspace = new azure.databricks.Workspace("example", {
 *     name: "databricks-test",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "standard",
 * });
 * const atLinked = new azure.datafactory.LinkedServiceAzureDatabricks("at_linked", {
 *     name: "ADBLinkedServiceViaAccessToken",
 *     dataFactoryId: exampleFactory.id,
 *     description: "ADB Linked Service via Access Token",
 *     existingClusterId: "0308-201146-sly615",
 *     accessToken: "SomeDatabricksAccessToken",
 *     adbDomain: pulumi.interpolate`https://${exampleWorkspace.workspaceUrl}`,
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Linked Services can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
 * ```
 */
class LinkedServiceAzureDatabricks extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["adbDomain"] = state ? state.adbDomain : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["existingClusterId"] = state ? state.existingClusterId : undefined;
            resourceInputs["instancePool"] = state ? state.instancePool : undefined;
            resourceInputs["integrationRuntimeName"] = state ? state.integrationRuntimeName : undefined;
            resourceInputs["keyVaultPassword"] = state ? state.keyVaultPassword : undefined;
            resourceInputs["msiWorkSpaceResourceId"] = state ? state.msiWorkSpaceResourceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newClusterConfig"] = state ? state.newClusterConfig : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.adbDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adbDomain'");
            }
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            resourceInputs["accessToken"] = (args === null || args === void 0 ? void 0 : args.accessToken) ? pulumi.secret(args.accessToken) : undefined;
            resourceInputs["adbDomain"] = args ? args.adbDomain : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["existingClusterId"] = args ? args.existingClusterId : undefined;
            resourceInputs["instancePool"] = args ? args.instancePool : undefined;
            resourceInputs["integrationRuntimeName"] = args ? args.integrationRuntimeName : undefined;
            resourceInputs["keyVaultPassword"] = args ? args.keyVaultPassword : undefined;
            resourceInputs["msiWorkSpaceResourceId"] = args ? args.msiWorkSpaceResourceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newClusterConfig"] = args ? args.newClusterConfig : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LinkedServiceAzureDatabricks.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing LinkedServiceAzureDatabricks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LinkedServiceAzureDatabricks(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LinkedServiceAzureDatabricks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedServiceAzureDatabricks.__pulumiType;
    }
}
exports.LinkedServiceAzureDatabricks = LinkedServiceAzureDatabricks;
/** @internal */
LinkedServiceAzureDatabricks.__pulumiType = 'azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks';
//# sourceMappingURL=linkedServiceAzureDatabricks.js.map