"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Certifiate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Key Vault Certificate.
 *
 * ## Example Usage
 *
 * ### Importing A PFX)
 *
 * > **Note:** this example assumed the PFX file is located in the same directory at `certificate-to-import.pfx`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         certificatePermissions: [
 *             "Create",
 *             "Delete",
 *             "DeleteIssuers",
 *             "Get",
 *             "GetIssuers",
 *             "Import",
 *             "List",
 *             "ListIssuers",
 *             "ManageContacts",
 *             "ManageIssuers",
 *             "SetIssuers",
 *             "Update",
 *         ],
 *         keyPermissions: [
 *             "Backup",
 *             "Create",
 *             "Decrypt",
 *             "Delete",
 *             "Encrypt",
 *             "Get",
 *             "Import",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Sign",
 *             "UnwrapKey",
 *             "Update",
 *             "Verify",
 *             "WrapKey",
 *         ],
 *         secretPermissions: [
 *             "Backup",
 *             "Delete",
 *             "Get",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Set",
 *         ],
 *     }],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("example", {
 *     name: "imported-cert",
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: std.filebase64({
 *             input: "certificate-to-import.pfx",
 *         }).then(invoke => invoke.result),
 *         password: "",
 *     },
 * });
 * ```
 *
 * ### Generating a new certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     softDeleteRetentionDays: 7,
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         certificatePermissions: [
 *             "Create",
 *             "Delete",
 *             "DeleteIssuers",
 *             "Get",
 *             "GetIssuers",
 *             "Import",
 *             "List",
 *             "ListIssuers",
 *             "ManageContacts",
 *             "ManageIssuers",
 *             "Purge",
 *             "SetIssuers",
 *             "Update",
 *         ],
 *         keyPermissions: [
 *             "Backup",
 *             "Create",
 *             "Decrypt",
 *             "Delete",
 *             "Encrypt",
 *             "Get",
 *             "Import",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Sign",
 *             "UnwrapKey",
 *             "Update",
 *             "Verify",
 *             "WrapKey",
 *         ],
 *         secretPermissions: [
 *             "Backup",
 *             "Delete",
 *             "Get",
 *             "List",
 *             "Purge",
 *             "Recover",
 *             "Restore",
 *             "Set",
 *         ],
 *     }],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("example", {
 *     name: "generated-cert",
 *     keyVaultId: exampleKeyVault.id,
 *     certificatePolicy: {
 *         issuerParameters: {
 *             name: "Self",
 *         },
 *         keyProperties: {
 *             exportable: true,
 *             keySize: 2048,
 *             keyType: "RSA",
 *             reuseKey: true,
 *         },
 *         lifetimeActions: [{
 *             action: {
 *                 actionType: "AutoRenew",
 *             },
 *             trigger: {
 *                 daysBeforeExpiry: 30,
 *             },
 *         }],
 *         secretProperties: {
 *             contentType: "application/x-pkcs12",
 *         },
 *         x509CertificateProperties: {
 *             extendedKeyUsages: ["1.3.6.1.5.5.7.3.1"],
 *             keyUsages: [
 *                 "cRLSign",
 *                 "dataEncipherment",
 *                 "digitalSignature",
 *                 "keyAgreement",
 *                 "keyCertSign",
 *                 "keyEncipherment",
 *             ],
 *             subjectAlternativeNames: {
 *                 dnsNames: [
 *                     "internal.contoso.com",
 *                     "domain.hello.world",
 *                 ],
 *             },
 *             subject: "CN=hello-world",
 *             validityInMonths: 12,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Key Vault Certificates can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:keyvault/certifiate:Certifiate example "https://example-keyvault.vault.azure.net/certificates/example/fdf067c93bbb4b22bff4d8b7a9a56217"
 * ```
 *
 * @deprecated azure.keyvault.Certifiate has been deprecated in favor of azure.keyvault.Certificate
 */
class Certifiate extends pulumi.CustomResource {
    /** @deprecated azure.keyvault.Certifiate has been deprecated in favor of azure.keyvault.Certificate */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("Certifiate is deprecated: azure.keyvault.Certifiate has been deprecated in favor of azure.keyvault.Certificate");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateAttributes"] = state ? state.certificateAttributes : undefined;
            resourceInputs["certificateData"] = state ? state.certificateData : undefined;
            resourceInputs["certificateDataBase64"] = state ? state.certificateDataBase64 : undefined;
            resourceInputs["certificatePolicy"] = state ? state.certificatePolicy : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceManagerId"] = state ? state.resourceManagerId : undefined;
            resourceInputs["resourceManagerVersionlessId"] = state ? state.resourceManagerVersionlessId : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versionlessId"] = state ? state.versionlessId : undefined;
            resourceInputs["versionlessSecretId"] = state ? state.versionlessSecretId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificatePolicy"] = args ? args.certificatePolicy : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["certificateAttributes"] = undefined /*out*/;
            resourceInputs["certificateData"] = undefined /*out*/;
            resourceInputs["certificateDataBase64"] = undefined /*out*/;
            resourceInputs["resourceManagerId"] = undefined /*out*/;
            resourceInputs["resourceManagerVersionlessId"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["versionlessId"] = undefined /*out*/;
            resourceInputs["versionlessSecretId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certifiate.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Certifiate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("Certifiate is deprecated: azure.keyvault.Certifiate has been deprecated in favor of azure.keyvault.Certificate");
        return new Certifiate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Certifiate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certifiate.__pulumiType;
    }
}
exports.Certifiate = Certifiate;
/** @internal */
Certifiate.__pulumiType = 'azure:keyvault/certifiate:Certifiate';
//# sourceMappingURL=certifiate.js.map