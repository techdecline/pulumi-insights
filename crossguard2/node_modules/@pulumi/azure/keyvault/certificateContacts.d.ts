import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages Key Vault Certificate Contacts.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 * });
 * const exampleAccessPolicy = new azure.keyvault.AccessPolicy("example", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     certificatePermissions: ["ManageContacts"],
 *     keyPermissions: ["Create"],
 *     secretPermissions: ["Set"],
 * });
 * const exampleCertificateContacts = new azure.keyvault.CertificateContacts("example", {
 *     keyVaultId: exampleKeyVault.id,
 *     contacts: [
 *         {
 *             email: "example@example.com",
 *             name: "example",
 *             phone: "01234567890",
 *         },
 *         {
 *             email: "example2@example.com",
 *         },
 *     ],
 * }, {
 *     dependsOn: [exampleAccessPolicy],
 * });
 * ```
 *
 * ## Import
 *
 * Key Vault Certificate Contacts can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:keyvault/certificateContacts:CertificateContacts example https://example-keyvault.vault.azure.net/certificates/contacts
 * ```
 */
export declare class CertificateContacts extends pulumi.CustomResource {
    /**
     * Get an existing CertificateContacts resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateContactsState, opts?: pulumi.CustomResourceOptions): CertificateContacts;
    /**
     * Returns true if the given object is an instance of CertificateContacts.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CertificateContacts;
    /**
     * One or more `contact` blocks as defined below.
     */
    readonly contacts: pulumi.Output<outputs.keyvault.CertificateContactsContact[] | undefined>;
    /**
     * The ID of the Key Vault. Changing this forces a new resource to be created.
     */
    readonly keyVaultId: pulumi.Output<string>;
    /**
     * Create a CertificateContacts resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateContactsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering CertificateContacts resources.
 */
export interface CertificateContactsState {
    /**
     * One or more `contact` blocks as defined below.
     */
    contacts?: pulumi.Input<pulumi.Input<inputs.keyvault.CertificateContactsContact>[]>;
    /**
     * The ID of the Key Vault. Changing this forces a new resource to be created.
     */
    keyVaultId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a CertificateContacts resource.
 */
export interface CertificateContactsArgs {
    /**
     * One or more `contact` blocks as defined below.
     */
    contacts?: pulumi.Input<pulumi.Input<inputs.keyvault.CertificateContactsContact>[]>;
    /**
     * The ID of the Key Vault. Changing this forces a new resource to be created.
     */
    keyVaultId: pulumi.Input<string>;
}
