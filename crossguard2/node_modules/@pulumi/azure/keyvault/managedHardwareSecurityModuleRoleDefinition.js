"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedHardwareSecurityModuleRoleDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a KeyVault Managed Hardware Security Module Role Definition. This resource works together with Managed hardware security module resource.
 *
 * ## Import
 *
 * KeyVaults can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:keyvault/managedHardwareSecurityModuleRoleDefinition:ManagedHardwareSecurityModuleRoleDefinition example https://0000.managedhsm.azure.net///RoleDefinition/00000000-0000-0000-0000-000000000000
 * ```
 */
class ManagedHardwareSecurityModuleRoleDefinition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["managedHsmId"] = state ? state.managedHsmId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["resourceManagerId"] = state ? state.resourceManagerId : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["roleType"] = state ? state.roleType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.managedHsmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedHsmId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["managedHsmId"] = args ? args.managedHsmId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["resourceManagerId"] = undefined /*out*/;
            resourceInputs["roleType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedHardwareSecurityModuleRoleDefinition.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ManagedHardwareSecurityModuleRoleDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ManagedHardwareSecurityModuleRoleDefinition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedHardwareSecurityModuleRoleDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedHardwareSecurityModuleRoleDefinition.__pulumiType;
    }
}
exports.ManagedHardwareSecurityModuleRoleDefinition = ManagedHardwareSecurityModuleRoleDefinition;
/** @internal */
ManagedHardwareSecurityModuleRoleDefinition.__pulumiType = 'azure:keyvault/managedHardwareSecurityModuleRoleDefinition:ManagedHardwareSecurityModuleRoleDefinition';
//# sourceMappingURL=managedHardwareSecurityModuleRoleDefinition.js.map