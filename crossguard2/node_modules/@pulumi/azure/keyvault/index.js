"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = exports.ManagedStorageAccountSasTokenDefinition = exports.ManagedStorageAccount = exports.ManagedHardwareSecurityModuleRoleDefinition = exports.ManagedHardwareSecurityModuleRoleAssignment = exports.ManagedHardwareSecurityModuleKeyRotationPolicy = exports.ManagedHardwareSecurityModuleKey = exports.ManagedHardwareSecurityModule = exports.KeyVault = exports.Key = exports.getSecretsOutput = exports.getSecrets = exports.getSecretOutput = exports.getSecret = exports.getManagedHardwareSecurityModuleRoleDefinitionOutput = exports.getManagedHardwareSecurityModuleRoleDefinition = exports.getManagedHardwareSecurityModuleKeyOutput = exports.getManagedHardwareSecurityModuleKey = exports.getManagedHardwareSecurityModuleOutput = exports.getManagedHardwareSecurityModule = exports.getKeyVaultOutput = exports.getKeyVault = exports.getKeyOutput = exports.getKey = exports.getEncryptedValueOutput = exports.getEncryptedValue = exports.getCertificatesOutput = exports.getCertificates = exports.getCertificateIssuerOutput = exports.getCertificateIssuer = exports.getCertificateDataOutput = exports.getCertificateData = exports.getCertificateOutput = exports.getCertificate = exports.getAccessPolicyOutput = exports.getAccessPolicy = exports.CertificateIssuer = exports.CertificateContacts = exports.Certificate = exports.Certifiate = exports.AccessPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AccessPolicy = null;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));
exports.Certifiate = null;
utilities.lazyLoad(exports, ["Certifiate"], () => require("./certifiate"));
exports.Certificate = null;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));
exports.CertificateContacts = null;
utilities.lazyLoad(exports, ["CertificateContacts"], () => require("./certificateContacts"));
exports.CertificateIssuer = null;
utilities.lazyLoad(exports, ["CertificateIssuer"], () => require("./certificateIssuer"));
exports.getAccessPolicy = null;
exports.getAccessPolicyOutput = null;
utilities.lazyLoad(exports, ["getAccessPolicy", "getAccessPolicyOutput"], () => require("./getAccessPolicy"));
exports.getCertificate = null;
exports.getCertificateOutput = null;
utilities.lazyLoad(exports, ["getCertificate", "getCertificateOutput"], () => require("./getCertificate"));
exports.getCertificateData = null;
exports.getCertificateDataOutput = null;
utilities.lazyLoad(exports, ["getCertificateData", "getCertificateDataOutput"], () => require("./getCertificateData"));
exports.getCertificateIssuer = null;
exports.getCertificateIssuerOutput = null;
utilities.lazyLoad(exports, ["getCertificateIssuer", "getCertificateIssuerOutput"], () => require("./getCertificateIssuer"));
exports.getCertificates = null;
exports.getCertificatesOutput = null;
utilities.lazyLoad(exports, ["getCertificates", "getCertificatesOutput"], () => require("./getCertificates"));
exports.getEncryptedValue = null;
exports.getEncryptedValueOutput = null;
utilities.lazyLoad(exports, ["getEncryptedValue", "getEncryptedValueOutput"], () => require("./getEncryptedValue"));
exports.getKey = null;
exports.getKeyOutput = null;
utilities.lazyLoad(exports, ["getKey", "getKeyOutput"], () => require("./getKey"));
exports.getKeyVault = null;
exports.getKeyVaultOutput = null;
utilities.lazyLoad(exports, ["getKeyVault", "getKeyVaultOutput"], () => require("./getKeyVault"));
exports.getManagedHardwareSecurityModule = null;
exports.getManagedHardwareSecurityModuleOutput = null;
utilities.lazyLoad(exports, ["getManagedHardwareSecurityModule", "getManagedHardwareSecurityModuleOutput"], () => require("./getManagedHardwareSecurityModule"));
exports.getManagedHardwareSecurityModuleKey = null;
exports.getManagedHardwareSecurityModuleKeyOutput = null;
utilities.lazyLoad(exports, ["getManagedHardwareSecurityModuleKey", "getManagedHardwareSecurityModuleKeyOutput"], () => require("./getManagedHardwareSecurityModuleKey"));
exports.getManagedHardwareSecurityModuleRoleDefinition = null;
exports.getManagedHardwareSecurityModuleRoleDefinitionOutput = null;
utilities.lazyLoad(exports, ["getManagedHardwareSecurityModuleRoleDefinition", "getManagedHardwareSecurityModuleRoleDefinitionOutput"], () => require("./getManagedHardwareSecurityModuleRoleDefinition"));
exports.getSecret = null;
exports.getSecretOutput = null;
utilities.lazyLoad(exports, ["getSecret", "getSecretOutput"], () => require("./getSecret"));
exports.getSecrets = null;
exports.getSecretsOutput = null;
utilities.lazyLoad(exports, ["getSecrets", "getSecretsOutput"], () => require("./getSecrets"));
exports.Key = null;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));
exports.KeyVault = null;
utilities.lazyLoad(exports, ["KeyVault"], () => require("./keyVault"));
exports.ManagedHardwareSecurityModule = null;
utilities.lazyLoad(exports, ["ManagedHardwareSecurityModule"], () => require("./managedHardwareSecurityModule"));
exports.ManagedHardwareSecurityModuleKey = null;
utilities.lazyLoad(exports, ["ManagedHardwareSecurityModuleKey"], () => require("./managedHardwareSecurityModuleKey"));
exports.ManagedHardwareSecurityModuleKeyRotationPolicy = null;
utilities.lazyLoad(exports, ["ManagedHardwareSecurityModuleKeyRotationPolicy"], () => require("./managedHardwareSecurityModuleKeyRotationPolicy"));
exports.ManagedHardwareSecurityModuleRoleAssignment = null;
utilities.lazyLoad(exports, ["ManagedHardwareSecurityModuleRoleAssignment"], () => require("./managedHardwareSecurityModuleRoleAssignment"));
exports.ManagedHardwareSecurityModuleRoleDefinition = null;
utilities.lazyLoad(exports, ["ManagedHardwareSecurityModuleRoleDefinition"], () => require("./managedHardwareSecurityModuleRoleDefinition"));
exports.ManagedStorageAccount = null;
utilities.lazyLoad(exports, ["ManagedStorageAccount"], () => require("./managedStorageAccount"));
exports.ManagedStorageAccountSasTokenDefinition = null;
utilities.lazyLoad(exports, ["ManagedStorageAccountSasTokenDefinition"], () => require("./managedStorageAccountSasTokenDefinition"));
exports.Secret = null;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:keyvault/accessPolicy:AccessPolicy":
                return new exports.AccessPolicy(name, undefined, { urn });
            case "azure:keyvault/certifiate:Certifiate":
                return new exports.Certifiate(name, undefined, { urn });
            case "azure:keyvault/certificate:Certificate":
                return new exports.Certificate(name, undefined, { urn });
            case "azure:keyvault/certificateContacts:CertificateContacts":
                return new exports.CertificateContacts(name, undefined, { urn });
            case "azure:keyvault/certificateIssuer:CertificateIssuer":
                return new exports.CertificateIssuer(name, undefined, { urn });
            case "azure:keyvault/key:Key":
                return new exports.Key(name, undefined, { urn });
            case "azure:keyvault/keyVault:KeyVault":
                return new exports.KeyVault(name, undefined, { urn });
            case "azure:keyvault/managedHardwareSecurityModule:ManagedHardwareSecurityModule":
                return new exports.ManagedHardwareSecurityModule(name, undefined, { urn });
            case "azure:keyvault/managedHardwareSecurityModuleKey:ManagedHardwareSecurityModuleKey":
                return new exports.ManagedHardwareSecurityModuleKey(name, undefined, { urn });
            case "azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy":
                return new exports.ManagedHardwareSecurityModuleKeyRotationPolicy(name, undefined, { urn });
            case "azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment":
                return new exports.ManagedHardwareSecurityModuleRoleAssignment(name, undefined, { urn });
            case "azure:keyvault/managedHardwareSecurityModuleRoleDefinition:ManagedHardwareSecurityModuleRoleDefinition":
                return new exports.ManagedHardwareSecurityModuleRoleDefinition(name, undefined, { urn });
            case "azure:keyvault/managedStorageAccount:ManagedStorageAccount":
                return new exports.ManagedStorageAccount(name, undefined, { urn });
            case "azure:keyvault/managedStorageAccountSasTokenDefinition:ManagedStorageAccountSasTokenDefinition":
                return new exports.ManagedStorageAccountSasTokenDefinition(name, undefined, { urn });
            case "azure:keyvault/secret:Secret":
                return new exports.Secret(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "keyvault/accessPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certifiate", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certificateContacts", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certificateIssuer", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/key", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/keyVault", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedHardwareSecurityModule", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedHardwareSecurityModuleKey", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedHardwareSecurityModuleKeyRotationPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedHardwareSecurityModuleRoleAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedHardwareSecurityModuleRoleDefinition", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedStorageAccount", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedStorageAccountSasTokenDefinition", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/secret", _module);
//# sourceMappingURL=index.js.map