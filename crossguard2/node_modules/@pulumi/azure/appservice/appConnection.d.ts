import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a service connector for function app.
 *
 * ## Import
 *
 * Service Connector for app service can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appservice/appConnection:AppConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Web/sites/webapp/providers/Microsoft.ServiceLinker/linkers/serviceconnector1
 * ```
 */
export declare class AppConnection extends pulumi.CustomResource {
    /**
     * Get an existing AppConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConnectionState, opts?: pulumi.CustomResourceOptions): AppConnection;
    /**
     * Returns true if the given object is an instance of AppConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AppConnection;
    /**
     * The authentication info. An `authentication` block as defined below.
     *
     * > **Note:** If a Managed Identity is used, this will need to be configured on the App Service.
     */
    readonly authentication: pulumi.Output<outputs.appservice.AppConnectionAuthentication>;
    readonly clientType: pulumi.Output<string | undefined>;
    /**
     * The ID of the data source function app. Changing this forces a new resource to be created.
     */
    readonly functionAppId: pulumi.Output<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    readonly name: pulumi.Output<string>;
    readonly secretStore: pulumi.Output<outputs.appservice.AppConnectionSecretStore | undefined>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    readonly targetResourceId: pulumi.Output<string>;
    readonly vnetSolution: pulumi.Output<string | undefined>;
    /**
     * Create a AppConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConnectionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AppConnection resources.
 */
export interface AppConnectionState {
    /**
     * The authentication info. An `authentication` block as defined below.
     *
     * > **Note:** If a Managed Identity is used, this will need to be configured on the App Service.
     */
    authentication?: pulumi.Input<inputs.appservice.AppConnectionAuthentication>;
    clientType?: pulumi.Input<string>;
    /**
     * The ID of the data source function app. Changing this forces a new resource to be created.
     */
    functionAppId?: pulumi.Input<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    secretStore?: pulumi.Input<inputs.appservice.AppConnectionSecretStore>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    targetResourceId?: pulumi.Input<string>;
    vnetSolution?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AppConnection resource.
 */
export interface AppConnectionArgs {
    /**
     * The authentication info. An `authentication` block as defined below.
     *
     * > **Note:** If a Managed Identity is used, this will need to be configured on the App Service.
     */
    authentication: pulumi.Input<inputs.appservice.AppConnectionAuthentication>;
    clientType?: pulumi.Input<string>;
    /**
     * The ID of the data source function app. Changing this forces a new resource to be created.
     */
    functionAppId: pulumi.Input<string>;
    /**
     * The name of the service connection. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    secretStore?: pulumi.Input<inputs.appservice.AppConnectionSecretStore>;
    /**
     * The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
     */
    targetResourceId: pulumi.Input<string>;
    vnetSolution?: pulumi.Input<string>;
}
