import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a Linux Web App.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     osType: "Linux",
 *     skuName: "P1v2",
 * });
 * const exampleLinuxWebApp = new azure.appservice.LinuxWebApp("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: exampleServicePlan.location,
 *     servicePlanId: exampleServicePlan.id,
 *     siteConfig: {},
 * });
 * ```
 *
 * ## Import
 *
 * Linux Web Apps can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:appservice/linuxWebApp:LinuxWebApp example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
 * ```
 */
export declare class LinuxWebApp extends pulumi.CustomResource {
    /**
     * Get an existing LinuxWebApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinuxWebAppState, opts?: pulumi.CustomResourceOptions): LinuxWebApp;
    /**
     * Returns true if the given object is an instance of LinuxWebApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LinuxWebApp;
    /**
     * A map of key-value pairs of App Settings.
     */
    readonly appSettings: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A `authSettings` block as defined below.
     */
    readonly authSettings: pulumi.Output<outputs.appservice.LinuxWebAppAuthSettings | undefined>;
    /**
     * An `authSettingsV2` block as defined below.
     */
    readonly authSettingsV2: pulumi.Output<outputs.appservice.LinuxWebAppAuthSettingsV2 | undefined>;
    /**
     * A `backup` block as defined below.
     */
    readonly backup: pulumi.Output<outputs.appservice.LinuxWebAppBackup | undefined>;
    /**
     * Should Client Affinity be enabled?
     */
    readonly clientAffinityEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Should Client Certificates be enabled?
     */
    readonly clientCertificateEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    readonly clientCertificateExclusionPaths: pulumi.Output<string | undefined>;
    /**
     * The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`. Defaults to `Required`.
     */
    readonly clientCertificateMode: pulumi.Output<string | undefined>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    readonly connectionStrings: pulumi.Output<outputs.appservice.LinuxWebAppConnectionString[] | undefined>;
    /**
     * The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    readonly customDomainVerificationId: pulumi.Output<string>;
    /**
     * The default hostname of the Linux Web App.
     */
    readonly defaultHostname: pulumi.Output<string>;
    /**
     * Should the Linux Web App be enabled? Defaults to `true`.
     */
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
     */
    readonly ftpPublishBasicAuthenticationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the App Service Environment used by App Service.
     */
    readonly hostingEnvironmentId: pulumi.Output<string>;
    /**
     * Should the Linux Web App require HTTPS connections. Defaults to `false`.
     */
    readonly httpsOnly: pulumi.Output<boolean | undefined>;
    /**
     * An `identity` block as defined below.
     */
    readonly identity: pulumi.Output<outputs.appservice.LinuxWebAppIdentity | undefined>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
     */
    readonly keyVaultReferenceIdentityId: pulumi.Output<string>;
    /**
     * The Kind value for this Linux Web App.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * A `logs` block as defined below.
     */
    readonly logs: pulumi.Output<outputs.appservice.LinuxWebAppLogs | undefined>;
    readonly name: pulumi.Output<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
     */
    readonly outboundIpAddressLists: pulumi.Output<string[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     */
    readonly outboundIpAddresses: pulumi.Output<string>;
    /**
     * A list of possible outbound ip address.
     */
    readonly possibleOutboundIpAddressLists: pulumi.Output<string[]>;
    /**
     * A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    readonly possibleOutboundIpAddresses: pulumi.Output<string>;
    /**
     * Should public network access be enabled for the Web App. Defaults to `true`.
     */
    readonly publicNetworkAccessEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The ID of the Service Plan that this Linux App Service will be created in.
     */
    readonly servicePlanId: pulumi.Output<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    readonly siteConfig: pulumi.Output<outputs.appservice.LinuxWebAppSiteConfig>;
    /**
     * A `siteCredential` block as defined below.
     */
    readonly siteCredentials: pulumi.Output<outputs.appservice.LinuxWebAppSiteCredential[]>;
    /**
     * A `stickySettings` block as defined below.
     */
    readonly stickySettings: pulumi.Output<outputs.appservice.LinuxWebAppStickySettings | undefined>;
    /**
     * One or more `storageAccount` blocks as defined below.
     */
    readonly storageAccounts: pulumi.Output<outputs.appservice.LinuxWebAppStorageAccount[] | undefined>;
    /**
     * A mapping of tags which should be assigned to the Linux Web App.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly virtualNetworkSubnetId: pulumi.Output<string | undefined>;
    /**
     * Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
     *
     * > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
     */
    readonly webdeployPublishBasicAuthenticationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The local path and filename of the Zip packaged application to deploy to this Linux Web App.
     *
     * > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
     */
    readonly zipDeployFile: pulumi.Output<string>;
    /**
     * Create a LinuxWebApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinuxWebAppArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LinuxWebApp resources.
 */
export interface LinuxWebAppState {
    /**
     * A map of key-value pairs of App Settings.
     */
    appSettings?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.LinuxWebAppAuthSettings>;
    /**
     * An `authSettingsV2` block as defined below.
     */
    authSettingsV2?: pulumi.Input<inputs.appservice.LinuxWebAppAuthSettingsV2>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.LinuxWebAppBackup>;
    /**
     * Should Client Affinity be enabled?
     */
    clientAffinityEnabled?: pulumi.Input<boolean>;
    /**
     * Should Client Certificates be enabled?
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    clientCertificateExclusionPaths?: pulumi.Input<string>;
    /**
     * The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`. Defaults to `Required`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxWebAppConnectionString>[]>;
    /**
     * The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    customDomainVerificationId?: pulumi.Input<string>;
    /**
     * The default hostname of the Linux Web App.
     */
    defaultHostname?: pulumi.Input<string>;
    /**
     * Should the Linux Web App be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
     */
    ftpPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the App Service Environment used by App Service.
     */
    hostingEnvironmentId?: pulumi.Input<string>;
    /**
     * Should the Linux Web App require HTTPS connections. Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.LinuxWebAppIdentity>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    /**
     * The Kind value for this Linux Web App.
     */
    kind?: pulumi.Input<string>;
    /**
     * The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.appservice.LinuxWebAppLogs>;
    name?: pulumi.Input<string>;
    /**
     * A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
     */
    outboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     */
    outboundIpAddresses?: pulumi.Input<string>;
    /**
     * A list of possible outbound ip address.
     */
    possibleOutboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
     */
    possibleOutboundIpAddresses?: pulumi.Input<string>;
    /**
     * Should public network access be enabled for the Web App. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The ID of the Service Plan that this Linux App Service will be created in.
     */
    servicePlanId?: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig?: pulumi.Input<inputs.appservice.LinuxWebAppSiteConfig>;
    /**
     * A `siteCredential` block as defined below.
     */
    siteCredentials?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxWebAppSiteCredential>[]>;
    /**
     * A `stickySettings` block as defined below.
     */
    stickySettings?: pulumi.Input<inputs.appservice.LinuxWebAppStickySettings>;
    /**
     * One or more `storageAccount` blocks as defined below.
     */
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxWebAppStorageAccount>[]>;
    /**
     * A mapping of tags which should be assigned to the Linux Web App.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
    /**
     * Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
     *
     * > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
     */
    webdeployPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The local path and filename of the Zip packaged application to deploy to this Linux Web App.
     *
     * > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
     */
    zipDeployFile?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a LinuxWebApp resource.
 */
export interface LinuxWebAppArgs {
    /**
     * A map of key-value pairs of App Settings.
     */
    appSettings?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.LinuxWebAppAuthSettings>;
    /**
     * An `authSettingsV2` block as defined below.
     */
    authSettingsV2?: pulumi.Input<inputs.appservice.LinuxWebAppAuthSettingsV2>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.LinuxWebAppBackup>;
    /**
     * Should Client Affinity be enabled?
     */
    clientAffinityEnabled?: pulumi.Input<boolean>;
    /**
     * Should Client Certificates be enabled?
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    clientCertificateExclusionPaths?: pulumi.Input<string>;
    /**
     * The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`. Defaults to `Required`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxWebAppConnectionString>[]>;
    /**
     * Should the Linux Web App be enabled? Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
     */
    ftpPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * Should the Linux Web App require HTTPS connections. Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * An `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.LinuxWebAppIdentity>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    /**
     * The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * A `logs` block as defined below.
     */
    logs?: pulumi.Input<inputs.appservice.LinuxWebAppLogs>;
    name?: pulumi.Input<string>;
    /**
     * Should public network access be enabled for the Web App. Defaults to `true`.
     */
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The ID of the Service Plan that this Linux App Service will be created in.
     */
    servicePlanId: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig: pulumi.Input<inputs.appservice.LinuxWebAppSiteConfig>;
    /**
     * A `stickySettings` block as defined below.
     */
    stickySettings?: pulumi.Input<inputs.appservice.LinuxWebAppStickySettings>;
    /**
     * One or more `storageAccount` blocks as defined below.
     */
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxWebAppStorageAccount>[]>;
    /**
     * A mapping of tags which should be assigned to the Linux Web App.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
    /**
     * Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
     *
     * > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
     */
    webdeployPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The local path and filename of the Zip packaged application to deploy to this Linux Web App.
     *
     * > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
     */
    zipDeployFile?: pulumi.Input<string>;
}
