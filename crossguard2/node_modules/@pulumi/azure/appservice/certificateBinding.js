"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateBinding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an App Service Certificate Binding.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "webapp",
 *     location: "West Europe",
 * });
 * const examplePlan = new azure.appservice.Plan("example", {
 *     name: "appserviceplan",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: {
 *         tier: "Premium",
 *         size: "P1",
 *     },
 * });
 * const exampleAppService = new azure.appservice.AppService("example", {
 *     name: "mywebapp",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     appServicePlanId: examplePlan.id,
 * });
 * const example = azure.dns.getZoneOutput({
 *     name: "example.com",
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleCNameRecord = new azure.dns.CNameRecord("example", {
 *     name: "www",
 *     zoneName: example.apply(example => example.name),
 *     resourceGroupName: example.apply(example => example.resourceGroupName),
 *     ttl: 300,
 *     record: exampleAppService.defaultSiteHostname,
 * });
 * const exampleTxtRecord = new azure.dns.TxtRecord("example", {
 *     name: pulumi.interpolate`asuid.${exampleCNameRecord.name}`,
 *     zoneName: example.apply(example => example.name),
 *     resourceGroupName: example.apply(example => example.resourceGroupName),
 *     ttl: 300,
 *     records: [{
 *         value: exampleAppService.customDomainVerificationId,
 *     }],
 * });
 * const exampleCustomHostnameBinding = new azure.appservice.CustomHostnameBinding("example", {
 *     hostname: std.trimOutput({
 *         input: exampleCNameRecord.fqdn,
 *         cutset: ".",
 *     }).apply(invoke => invoke.result),
 *     appServiceName: exampleAppService.name,
 *     resourceGroupName: exampleResourceGroup.name,
 * }, {
 *     dependsOn: [exampleTxtRecord],
 * });
 * const exampleManagedCertificate = new azure.appservice.ManagedCertificate("example", {customHostnameBindingId: exampleCustomHostnameBinding.id});
 * const exampleCertificateBinding = new azure.appservice.CertificateBinding("example", {
 *     hostnameBindingId: exampleCustomHostnameBinding.id,
 *     certificateId: exampleManagedCertificate.id,
 *     sslState: "SniEnabled",
 * });
 * ```
 *
 * ## Import
 *
 * App Service Certificate Bindings can be imported using the `hostname_binding_id` and the `app_service_certificate_id` , e.g.
 *
 * ```sh
 * $ pulumi import azure:appservice/certificateBinding:CertificateBinding example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/hostNameBindings/mywebsite.com|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/certificates/mywebsite.com"
 * ```
 */
class CertificateBinding extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appServiceName"] = state ? state.appServiceName : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["hostnameBindingId"] = state ? state.hostnameBindingId : undefined;
            resourceInputs["sslState"] = state ? state.sslState : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.certificateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateId'");
            }
            if ((!args || args.hostnameBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnameBindingId'");
            }
            if ((!args || args.sslState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslState'");
            }
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["hostnameBindingId"] = args ? args.hostnameBindingId : undefined;
            resourceInputs["sslState"] = args ? args.sslState : undefined;
            resourceInputs["appServiceName"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateBinding.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CertificateBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CertificateBinding(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CertificateBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateBinding.__pulumiType;
    }
}
exports.CertificateBinding = CertificateBinding;
/** @internal */
CertificateBinding.__pulumiType = 'azure:appservice/certificateBinding:CertificateBinding';
//# sourceMappingURL=certificateBinding.js.map