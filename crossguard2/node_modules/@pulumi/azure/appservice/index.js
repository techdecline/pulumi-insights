"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicCertificate = exports.Plan = exports.ManagedCertificate = exports.LinuxWebAppSlot = exports.LinuxWebApp = exports.LinuxFunctionAppSlot = exports.LinuxFunctionApp = exports.HybridConnection = exports.getWindowsWebAppOutput = exports.getWindowsWebApp = exports.getWindowsFunctionAppOutput = exports.getWindowsFunctionApp = exports.getStaticWebAppOutput = exports.getStaticWebApp = exports.getSourceControlTokenOutput = exports.getSourceControlToken = exports.getServicePlanOutput = exports.getServicePlan = exports.getLinuxWebAppOutput = exports.getLinuxWebApp = exports.getLinuxFunctionAppOutput = exports.getLinuxFunctionApp = exports.getFunctionAppHostKeysOutput = exports.getFunctionAppHostKeys = exports.getFunctionAppOutput = exports.getFunctionApp = exports.getEnvironmentV3Output = exports.getEnvironmentV3 = exports.getCertificateOrderOutput = exports.getCertificateOrder = exports.getCertificateOutput = exports.getCertificate = exports.getAppServicePlanOutput = exports.getAppServicePlan = exports.getAppServiceOutput = exports.getAppService = exports.FunctionAppSlot = exports.FunctionAppHybridConnection = exports.FunctionAppFunction = exports.FunctionAppActiveSlot = exports.FunctionApp = exports.EnvironmentV3 = exports.CustomHostnameBinding = exports.Connection = exports.CertificateOrder = exports.CertificateBinding = exports.Certificate = exports.AppService = exports.AppConnection = exports.ActiveSlot = void 0;
exports.WindowsWebAppSlot = exports.WindowsWebApp = exports.WindowsFunctionAppSlot = exports.WindowsFunctionApp = exports.WebAppHybridConnection = exports.WebAppActiveSlot = exports.VirtualNetworkSwiftConnection = exports.StaticWebAppFunctionAppRegistration = exports.StaticWebAppCustomDomain = exports.StaticWebApp = exports.StaticSiteCustomDomain = exports.StaticSite = exports.SourceControlToken = exports.SourceControlSlot = exports.SourceControl = exports.SourceCodeToken = exports.SlotVirtualNetworkSwiftConnection = exports.SlotCustomHostnameBinding = exports.Slot = exports.ServicePlan = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.ActiveSlot = null;
utilities.lazyLoad(exports, ["ActiveSlot"], () => require("./activeSlot"));
exports.AppConnection = null;
utilities.lazyLoad(exports, ["AppConnection"], () => require("./appConnection"));
exports.AppService = null;
utilities.lazyLoad(exports, ["AppService"], () => require("./appService"));
exports.Certificate = null;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));
exports.CertificateBinding = null;
utilities.lazyLoad(exports, ["CertificateBinding"], () => require("./certificateBinding"));
exports.CertificateOrder = null;
utilities.lazyLoad(exports, ["CertificateOrder"], () => require("./certificateOrder"));
exports.Connection = null;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));
exports.CustomHostnameBinding = null;
utilities.lazyLoad(exports, ["CustomHostnameBinding"], () => require("./customHostnameBinding"));
exports.EnvironmentV3 = null;
utilities.lazyLoad(exports, ["EnvironmentV3"], () => require("./environmentV3"));
exports.FunctionApp = null;
utilities.lazyLoad(exports, ["FunctionApp"], () => require("./functionApp"));
exports.FunctionAppActiveSlot = null;
utilities.lazyLoad(exports, ["FunctionAppActiveSlot"], () => require("./functionAppActiveSlot"));
exports.FunctionAppFunction = null;
utilities.lazyLoad(exports, ["FunctionAppFunction"], () => require("./functionAppFunction"));
exports.FunctionAppHybridConnection = null;
utilities.lazyLoad(exports, ["FunctionAppHybridConnection"], () => require("./functionAppHybridConnection"));
exports.FunctionAppSlot = null;
utilities.lazyLoad(exports, ["FunctionAppSlot"], () => require("./functionAppSlot"));
exports.getAppService = null;
exports.getAppServiceOutput = null;
utilities.lazyLoad(exports, ["getAppService", "getAppServiceOutput"], () => require("./getAppService"));
exports.getAppServicePlan = null;
exports.getAppServicePlanOutput = null;
utilities.lazyLoad(exports, ["getAppServicePlan", "getAppServicePlanOutput"], () => require("./getAppServicePlan"));
exports.getCertificate = null;
exports.getCertificateOutput = null;
utilities.lazyLoad(exports, ["getCertificate", "getCertificateOutput"], () => require("./getCertificate"));
exports.getCertificateOrder = null;
exports.getCertificateOrderOutput = null;
utilities.lazyLoad(exports, ["getCertificateOrder", "getCertificateOrderOutput"], () => require("./getCertificateOrder"));
exports.getEnvironmentV3 = null;
exports.getEnvironmentV3Output = null;
utilities.lazyLoad(exports, ["getEnvironmentV3", "getEnvironmentV3Output"], () => require("./getEnvironmentV3"));
exports.getFunctionApp = null;
exports.getFunctionAppOutput = null;
utilities.lazyLoad(exports, ["getFunctionApp", "getFunctionAppOutput"], () => require("./getFunctionApp"));
exports.getFunctionAppHostKeys = null;
exports.getFunctionAppHostKeysOutput = null;
utilities.lazyLoad(exports, ["getFunctionAppHostKeys", "getFunctionAppHostKeysOutput"], () => require("./getFunctionAppHostKeys"));
exports.getLinuxFunctionApp = null;
exports.getLinuxFunctionAppOutput = null;
utilities.lazyLoad(exports, ["getLinuxFunctionApp", "getLinuxFunctionAppOutput"], () => require("./getLinuxFunctionApp"));
exports.getLinuxWebApp = null;
exports.getLinuxWebAppOutput = null;
utilities.lazyLoad(exports, ["getLinuxWebApp", "getLinuxWebAppOutput"], () => require("./getLinuxWebApp"));
exports.getServicePlan = null;
exports.getServicePlanOutput = null;
utilities.lazyLoad(exports, ["getServicePlan", "getServicePlanOutput"], () => require("./getServicePlan"));
exports.getSourceControlToken = null;
exports.getSourceControlTokenOutput = null;
utilities.lazyLoad(exports, ["getSourceControlToken", "getSourceControlTokenOutput"], () => require("./getSourceControlToken"));
exports.getStaticWebApp = null;
exports.getStaticWebAppOutput = null;
utilities.lazyLoad(exports, ["getStaticWebApp", "getStaticWebAppOutput"], () => require("./getStaticWebApp"));
exports.getWindowsFunctionApp = null;
exports.getWindowsFunctionAppOutput = null;
utilities.lazyLoad(exports, ["getWindowsFunctionApp", "getWindowsFunctionAppOutput"], () => require("./getWindowsFunctionApp"));
exports.getWindowsWebApp = null;
exports.getWindowsWebAppOutput = null;
utilities.lazyLoad(exports, ["getWindowsWebApp", "getWindowsWebAppOutput"], () => require("./getWindowsWebApp"));
exports.HybridConnection = null;
utilities.lazyLoad(exports, ["HybridConnection"], () => require("./hybridConnection"));
__exportStar(require("./kind"), exports);
exports.LinuxFunctionApp = null;
utilities.lazyLoad(exports, ["LinuxFunctionApp"], () => require("./linuxFunctionApp"));
exports.LinuxFunctionAppSlot = null;
utilities.lazyLoad(exports, ["LinuxFunctionAppSlot"], () => require("./linuxFunctionAppSlot"));
exports.LinuxWebApp = null;
utilities.lazyLoad(exports, ["LinuxWebApp"], () => require("./linuxWebApp"));
exports.LinuxWebAppSlot = null;
utilities.lazyLoad(exports, ["LinuxWebAppSlot"], () => require("./linuxWebAppSlot"));
exports.ManagedCertificate = null;
utilities.lazyLoad(exports, ["ManagedCertificate"], () => require("./managedCertificate"));
exports.Plan = null;
utilities.lazyLoad(exports, ["Plan"], () => require("./plan"));
exports.PublicCertificate = null;
utilities.lazyLoad(exports, ["PublicCertificate"], () => require("./publicCertificate"));
exports.ServicePlan = null;
utilities.lazyLoad(exports, ["ServicePlan"], () => require("./servicePlan"));
exports.Slot = null;
utilities.lazyLoad(exports, ["Slot"], () => require("./slot"));
exports.SlotCustomHostnameBinding = null;
utilities.lazyLoad(exports, ["SlotCustomHostnameBinding"], () => require("./slotCustomHostnameBinding"));
exports.SlotVirtualNetworkSwiftConnection = null;
utilities.lazyLoad(exports, ["SlotVirtualNetworkSwiftConnection"], () => require("./slotVirtualNetworkSwiftConnection"));
exports.SourceCodeToken = null;
utilities.lazyLoad(exports, ["SourceCodeToken"], () => require("./sourceCodeToken"));
exports.SourceControl = null;
utilities.lazyLoad(exports, ["SourceControl"], () => require("./sourceControl"));
exports.SourceControlSlot = null;
utilities.lazyLoad(exports, ["SourceControlSlot"], () => require("./sourceControlSlot"));
exports.SourceControlToken = null;
utilities.lazyLoad(exports, ["SourceControlToken"], () => require("./sourceControlToken"));
exports.StaticSite = null;
utilities.lazyLoad(exports, ["StaticSite"], () => require("./staticSite"));
exports.StaticSiteCustomDomain = null;
utilities.lazyLoad(exports, ["StaticSiteCustomDomain"], () => require("./staticSiteCustomDomain"));
exports.StaticWebApp = null;
utilities.lazyLoad(exports, ["StaticWebApp"], () => require("./staticWebApp"));
exports.StaticWebAppCustomDomain = null;
utilities.lazyLoad(exports, ["StaticWebAppCustomDomain"], () => require("./staticWebAppCustomDomain"));
exports.StaticWebAppFunctionAppRegistration = null;
utilities.lazyLoad(exports, ["StaticWebAppFunctionAppRegistration"], () => require("./staticWebAppFunctionAppRegistration"));
exports.VirtualNetworkSwiftConnection = null;
utilities.lazyLoad(exports, ["VirtualNetworkSwiftConnection"], () => require("./virtualNetworkSwiftConnection"));
exports.WebAppActiveSlot = null;
utilities.lazyLoad(exports, ["WebAppActiveSlot"], () => require("./webAppActiveSlot"));
exports.WebAppHybridConnection = null;
utilities.lazyLoad(exports, ["WebAppHybridConnection"], () => require("./webAppHybridConnection"));
exports.WindowsFunctionApp = null;
utilities.lazyLoad(exports, ["WindowsFunctionApp"], () => require("./windowsFunctionApp"));
exports.WindowsFunctionAppSlot = null;
utilities.lazyLoad(exports, ["WindowsFunctionAppSlot"], () => require("./windowsFunctionAppSlot"));
exports.WindowsWebApp = null;
utilities.lazyLoad(exports, ["WindowsWebApp"], () => require("./windowsWebApp"));
exports.WindowsWebAppSlot = null;
utilities.lazyLoad(exports, ["WindowsWebAppSlot"], () => require("./windowsWebAppSlot"));
__exportStar(require("./zMixins"), exports);
__exportStar(require("./zMixins_durable"), exports);
__exportStar(require("./zMixins_http"), exports);
__exportStar(require("./zMixins_timer"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:appservice/activeSlot:ActiveSlot":
                return new exports.ActiveSlot(name, undefined, { urn });
            case "azure:appservice/appConnection:AppConnection":
                return new exports.AppConnection(name, undefined, { urn });
            case "azure:appservice/appService:AppService":
                return new exports.AppService(name, undefined, { urn });
            case "azure:appservice/certificate:Certificate":
                return new exports.Certificate(name, undefined, { urn });
            case "azure:appservice/certificateBinding:CertificateBinding":
                return new exports.CertificateBinding(name, undefined, { urn });
            case "azure:appservice/certificateOrder:CertificateOrder":
                return new exports.CertificateOrder(name, undefined, { urn });
            case "azure:appservice/connection:Connection":
                return new exports.Connection(name, undefined, { urn });
            case "azure:appservice/customHostnameBinding:CustomHostnameBinding":
                return new exports.CustomHostnameBinding(name, undefined, { urn });
            case "azure:appservice/environmentV3:EnvironmentV3":
                return new exports.EnvironmentV3(name, undefined, { urn });
            case "azure:appservice/functionApp:FunctionApp":
                return new exports.FunctionApp(name, undefined, { urn });
            case "azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot":
                return new exports.FunctionAppActiveSlot(name, undefined, { urn });
            case "azure:appservice/functionAppFunction:FunctionAppFunction":
                return new exports.FunctionAppFunction(name, undefined, { urn });
            case "azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection":
                return new exports.FunctionAppHybridConnection(name, undefined, { urn });
            case "azure:appservice/functionAppSlot:FunctionAppSlot":
                return new exports.FunctionAppSlot(name, undefined, { urn });
            case "azure:appservice/hybridConnection:HybridConnection":
                return new exports.HybridConnection(name, undefined, { urn });
            case "azure:appservice/linuxFunctionApp:LinuxFunctionApp":
                return new exports.LinuxFunctionApp(name, undefined, { urn });
            case "azure:appservice/linuxFunctionAppSlot:LinuxFunctionAppSlot":
                return new exports.LinuxFunctionAppSlot(name, undefined, { urn });
            case "azure:appservice/linuxWebApp:LinuxWebApp":
                return new exports.LinuxWebApp(name, undefined, { urn });
            case "azure:appservice/linuxWebAppSlot:LinuxWebAppSlot":
                return new exports.LinuxWebAppSlot(name, undefined, { urn });
            case "azure:appservice/managedCertificate:ManagedCertificate":
                return new exports.ManagedCertificate(name, undefined, { urn });
            case "azure:appservice/plan:Plan":
                return new exports.Plan(name, undefined, { urn });
            case "azure:appservice/publicCertificate:PublicCertificate":
                return new exports.PublicCertificate(name, undefined, { urn });
            case "azure:appservice/servicePlan:ServicePlan":
                return new exports.ServicePlan(name, undefined, { urn });
            case "azure:appservice/slot:Slot":
                return new exports.Slot(name, undefined, { urn });
            case "azure:appservice/slotCustomHostnameBinding:SlotCustomHostnameBinding":
                return new exports.SlotCustomHostnameBinding(name, undefined, { urn });
            case "azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection":
                return new exports.SlotVirtualNetworkSwiftConnection(name, undefined, { urn });
            case "azure:appservice/sourceCodeToken:SourceCodeToken":
                return new exports.SourceCodeToken(name, undefined, { urn });
            case "azure:appservice/sourceControl:SourceControl":
                return new exports.SourceControl(name, undefined, { urn });
            case "azure:appservice/sourceControlSlot:SourceControlSlot":
                return new exports.SourceControlSlot(name, undefined, { urn });
            case "azure:appservice/sourceControlToken:SourceControlToken":
                return new exports.SourceControlToken(name, undefined, { urn });
            case "azure:appservice/staticSite:StaticSite":
                return new exports.StaticSite(name, undefined, { urn });
            case "azure:appservice/staticSiteCustomDomain:StaticSiteCustomDomain":
                return new exports.StaticSiteCustomDomain(name, undefined, { urn });
            case "azure:appservice/staticWebApp:StaticWebApp":
                return new exports.StaticWebApp(name, undefined, { urn });
            case "azure:appservice/staticWebAppCustomDomain:StaticWebAppCustomDomain":
                return new exports.StaticWebAppCustomDomain(name, undefined, { urn });
            case "azure:appservice/staticWebAppFunctionAppRegistration:StaticWebAppFunctionAppRegistration":
                return new exports.StaticWebAppFunctionAppRegistration(name, undefined, { urn });
            case "azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection":
                return new exports.VirtualNetworkSwiftConnection(name, undefined, { urn });
            case "azure:appservice/webAppActiveSlot:WebAppActiveSlot":
                return new exports.WebAppActiveSlot(name, undefined, { urn });
            case "azure:appservice/webAppHybridConnection:WebAppHybridConnection":
                return new exports.WebAppHybridConnection(name, undefined, { urn });
            case "azure:appservice/windowsFunctionApp:WindowsFunctionApp":
                return new exports.WindowsFunctionApp(name, undefined, { urn });
            case "azure:appservice/windowsFunctionAppSlot:WindowsFunctionAppSlot":
                return new exports.WindowsFunctionAppSlot(name, undefined, { urn });
            case "azure:appservice/windowsWebApp:WindowsWebApp":
                return new exports.WindowsWebApp(name, undefined, { urn });
            case "azure:appservice/windowsWebAppSlot:WindowsWebAppSlot":
                return new exports.WindowsWebAppSlot(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "appservice/activeSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/appConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/appService", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificateBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificateOrder", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/connection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/customHostnameBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/environmentV3", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppActiveSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppFunction", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppHybridConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/hybridConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/linuxFunctionApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/linuxFunctionAppSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/linuxWebApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/linuxWebAppSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/managedCertificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/plan", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/publicCertificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/servicePlan", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slotCustomHostnameBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slotVirtualNetworkSwiftConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/sourceCodeToken", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/sourceControl", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/sourceControlSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/sourceControlToken", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticSite", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticSiteCustomDomain", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticWebApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticWebAppCustomDomain", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticWebAppFunctionAppRegistration", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/virtualNetworkSwiftConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/webAppActiveSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/webAppHybridConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/windowsFunctionApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/windowsFunctionAppSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/windowsWebApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/windowsWebAppSlot", _module);
//# sourceMappingURL=index.js.map