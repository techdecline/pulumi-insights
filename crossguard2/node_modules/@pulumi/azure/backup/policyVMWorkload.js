"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyVMWorkload = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure VM Workload Backup Policy within a Recovery Services vault.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-bpvmw",
 *     location: "West Europe",
 * });
 * const exampleVault = new azure.recoveryservices.Vault("example", {
 *     name: "example-rsv",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 *     softDeleteEnabled: false,
 * });
 * const examplePolicyVMWorkload = new azure.backup.PolicyVMWorkload("example", {
 *     name: "example-bpvmw",
 *     resourceGroupName: example.name,
 *     recoveryVaultName: exampleVault.name,
 *     workloadType: "SQLDataBase",
 *     settings: {
 *         timeZone: "UTC",
 *         compressionEnabled: false,
 *     },
 *     protectionPolicies: [
 *         {
 *             policyType: "Full",
 *             backup: {
 *                 frequency: "Daily",
 *                 time: "15:00",
 *             },
 *             retentionDaily: {
 *                 count: 8,
 *             },
 *         },
 *         {
 *             policyType: "Log",
 *             backup: {
 *                 frequencyInMinutes: 15,
 *             },
 *             simpleRetention: {
 *                 count: 8,
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Azure VM Workload Backup Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:backup/policyVMWorkload:PolicyVMWorkload policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/vault1/backupPolicies/policy1
 * ```
 */
class PolicyVMWorkload extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectionPolicies"] = state ? state.protectionPolicies : undefined;
            resourceInputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["workloadType"] = state ? state.workloadType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.protectionPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionPolicies'");
            }
            if ((!args || args.recoveryVaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.settings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            if ((!args || args.workloadType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workloadType'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectionPolicies"] = args ? args.protectionPolicies : undefined;
            resourceInputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["workloadType"] = args ? args.workloadType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyVMWorkload.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing PolicyVMWorkload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PolicyVMWorkload(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PolicyVMWorkload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyVMWorkload.__pulumiType;
    }
}
exports.PolicyVMWorkload = PolicyVMWorkload;
/** @internal */
PolicyVMWorkload.__pulumiType = 'azure:backup/policyVMWorkload:PolicyVMWorkload';
//# sourceMappingURL=policyVMWorkload.js.map