"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceTrust = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Active Directory Domain Service Trust.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.domainservices.getService({
 *     name: "example-ds",
 *     resourceGroupName: "example-rg",
 * });
 * const exampleServiceTrust = new azure.domainservices.ServiceTrust("example", {
 *     name: "example-trust",
 *     domainServiceId: example.then(example => example.id),
 *     trustedDomainFqdn: "example.com",
 *     trustedDomainDnsIps: [
 *         "10.1.0.3",
 *         "10.1.0.4",
 *     ],
 *     password: "Password123",
 * });
 * ```
 *
 * ## Import
 *
 * Active Directory Domain Service Trusts can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:domainservices/serviceTrust:ServiceTrust example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AAD/domainServices/DomainService1/trusts/trust1
 * ```
 */
class ServiceTrust extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["domainServiceId"] = state ? state.domainServiceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["trustedDomainDnsIps"] = state ? state.trustedDomainDnsIps : undefined;
            resourceInputs["trustedDomainFqdn"] = state ? state.trustedDomainFqdn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainServiceId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.trustedDomainDnsIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustedDomainDnsIps'");
            }
            if ((!args || args.trustedDomainFqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustedDomainFqdn'");
            }
            resourceInputs["domainServiceId"] = args ? args.domainServiceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["trustedDomainDnsIps"] = args ? args.trustedDomainDnsIps : undefined;
            resourceInputs["trustedDomainFqdn"] = args ? args.trustedDomainFqdn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceTrust.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ServiceTrust resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServiceTrust(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServiceTrust.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceTrust.__pulumiType;
    }
}
exports.ServiceTrust = ServiceTrust;
/** @internal */
ServiceTrust.__pulumiType = 'azure:domainservices/serviceTrust:ServiceTrust';
//# sourceMappingURL=serviceTrust.js.map