"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Monitor = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Native New Relic Monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "East US",
 * });
 * const exampleMonitor = new azure.newrelic.Monitor("example", {
 *     name: "example-nrm",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     plan: {
 *         effectiveDate: "2023-06-06T00:00:00Z",
 *     },
 *     user: {
 *         email: "user@example.com",
 *         firstName: "Example",
 *         lastName: "User",
 *         phoneNumber: "+12313803556",
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * ```
 *
 * ## Role Assignment
 *
 * To enable metrics flow, perform role assignment on the identity created above. `Monitoring reader(43d0d8ad-25c7-4714-9337-8ba259a9fe05)` role is required .
 *
 * ### Role assignment on the monitor created
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = azure.core.getSubscription({});
 * const monitoringReader = azure.authorization.getRoleDefinition({
 *     name: "Monitoring Reader",
 * });
 * const example = new azure.authorization.Assignment("example", {
 *     scope: primary.then(primary => primary.id),
 *     roleDefinitionId: Promise.all([primary, monitoringReader]).then(([primary, monitoringReader]) => `${primary.id}${monitoringReader.id}`),
 *     principalId: exampleAzurermNewRelicMonitor.identity[0].principalId,
 * });
 * ```
 *
 * ## Import
 *
 * Azure Native New Relic Monitor can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:newrelic/monitor:Monitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1
 * ```
 */
class Monitor extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountCreationSource"] = state ? state.accountCreationSource : undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ingestionKey"] = state ? state.ingestionKey : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgCreationSource"] = state ? state.orgCreationSource : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["accountCreationSource"] = args ? args.accountCreationSource : undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["ingestionKey"] = (args === null || args === void 0 ? void 0 : args.ingestionKey) ? pulumi.secret(args.ingestionKey) : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgCreationSource"] = args ? args.orgCreationSource : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ingestionKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Monitor(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }
}
exports.Monitor = Monitor;
/** @internal */
Monitor.__pulumiType = 'azure:newrelic/monitor:Monitor';
//# sourceMappingURL=monitor.js.map