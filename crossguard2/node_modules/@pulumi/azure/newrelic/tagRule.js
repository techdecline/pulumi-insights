"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Native New Relic Tag Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "East US",
 * });
 * const exampleMonitor = new azure.newrelic.Monitor("example", {
 *     name: "example-nrm",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     plan: {
 *         effectiveDate: "2023-06-06T00:00:00Z",
 *     },
 *     user: {
 *         email: "user@example.com",
 *         firstName: "Example",
 *         lastName: "User",
 *         phoneNumber: "+12313803556",
 *     },
 * });
 * const exampleTagRule = new azure.newrelic.TagRule("example", {
 *     monitorId: exampleMonitor.id,
 *     azureActiveDirectoryLogEnabled: true,
 *     activityLogEnabled: true,
 *     metricEnabled: true,
 *     subscriptionLogEnabled: true,
 *     logTagFilters: [{
 *         name: "key",
 *         action: "Include",
 *         value: "value",
 *     }],
 *     metricTagFilters: [{
 *         name: "key",
 *         action: "Exclude",
 *         value: "value",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Azure Native New Relic Tag Rule can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:newrelic/tagRule:TagRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1/tagRules/ruleSet1
 * ```
 */
class TagRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["activityLogEnabled"] = state ? state.activityLogEnabled : undefined;
            resourceInputs["azureActiveDirectoryLogEnabled"] = state ? state.azureActiveDirectoryLogEnabled : undefined;
            resourceInputs["logTagFilters"] = state ? state.logTagFilters : undefined;
            resourceInputs["metricEnabled"] = state ? state.metricEnabled : undefined;
            resourceInputs["metricTagFilters"] = state ? state.metricTagFilters : undefined;
            resourceInputs["monitorId"] = state ? state.monitorId : undefined;
            resourceInputs["subscriptionLogEnabled"] = state ? state.subscriptionLogEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.monitorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorId'");
            }
            resourceInputs["activityLogEnabled"] = args ? args.activityLogEnabled : undefined;
            resourceInputs["azureActiveDirectoryLogEnabled"] = args ? args.azureActiveDirectoryLogEnabled : undefined;
            resourceInputs["logTagFilters"] = args ? args.logTagFilters : undefined;
            resourceInputs["metricEnabled"] = args ? args.metricEnabled : undefined;
            resourceInputs["metricTagFilters"] = args ? args.metricTagFilters : undefined;
            resourceInputs["monitorId"] = args ? args.monitorId : undefined;
            resourceInputs["subscriptionLogEnabled"] = args ? args.subscriptionLogEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TagRule.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing TagRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TagRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TagRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TagRule.__pulumiType;
    }
}
exports.TagRule = TagRule;
/** @internal */
TagRule.__pulumiType = 'azure:newrelic/tagRule:TagRule';
//# sourceMappingURL=tagRule.js.map