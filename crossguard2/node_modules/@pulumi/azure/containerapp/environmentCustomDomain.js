"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentCustomDomain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Container App Environment Custom Domain Suffix.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "acctest-01",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 *     retentionInDays: 30,
 * });
 * const exampleEnvironment = new azure.containerapp.Environment("example", {
 *     name: "my-environment",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     logAnalyticsWorkspaceId: exampleAnalyticsWorkspace.id,
 * });
 * const exampleEnvironmentCustomDomain = new azure.containerapp.EnvironmentCustomDomain("example", {
 *     containerAppEnvironmentId: exampleEnvironment.id,
 *     certificateBlobBase64: std.filebase64({
 *         input: "testacc.pfx",
 *     }).then(invoke => invoke.result),
 *     certificatePassword: "TestAcc",
 *     dnsSuffix: "acceptancetest.contoso.com",
 * });
 * ```
 *
 * ## Import
 *
 * A Container App Environment Custom Domain Suffix can be imported using the `resource id` of its parent container ontainer App Environment , e.g.
 *
 * ```sh
 * $ pulumi import azure:containerapp/environmentCustomDomain:EnvironmentCustomDomain example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/managedEnvironments/myEnvironment"
 * ```
 */
class EnvironmentCustomDomain extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["certificateBlobBase64"] = state ? state.certificateBlobBase64 : undefined;
            resourceInputs["certificatePassword"] = state ? state.certificatePassword : undefined;
            resourceInputs["containerAppEnvironmentId"] = state ? state.containerAppEnvironmentId : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.certificateBlobBase64 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateBlobBase64'");
            }
            if ((!args || args.certificatePassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificatePassword'");
            }
            if ((!args || args.containerAppEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppEnvironmentId'");
            }
            if ((!args || args.dnsSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsSuffix'");
            }
            resourceInputs["certificateBlobBase64"] = args ? args.certificateBlobBase64 : undefined;
            resourceInputs["certificatePassword"] = (args === null || args === void 0 ? void 0 : args.certificatePassword) ? pulumi.secret(args.certificatePassword) : undefined;
            resourceInputs["containerAppEnvironmentId"] = args ? args.containerAppEnvironmentId : undefined;
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificatePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EnvironmentCustomDomain.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EnvironmentCustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EnvironmentCustomDomain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EnvironmentCustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentCustomDomain.__pulumiType;
    }
}
exports.EnvironmentCustomDomain = EnvironmentCustomDomain;
/** @internal */
EnvironmentCustomDomain.__pulumiType = 'azure:containerapp/environmentCustomDomain:EnvironmentCustomDomain';
//# sourceMappingURL=environmentCustomDomain.js.map