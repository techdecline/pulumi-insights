"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentStorage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Container App Environment Storage.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "acctest-01",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 *     retentionInDays: 30,
 * });
 * const exampleEnvironment = new azure.containerapp.Environment("example", {
 *     name: "myEnvironment",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     logAnalyticsWorkspaceId: exampleAnalyticsWorkspace.id,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "azureteststorage",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleShare = new azure.storage.Share("example", {
 *     name: "sharename",
 *     storageAccountName: exampleAccount.name,
 *     quota: 5,
 * });
 * const exampleEnvironmentStorage = new azure.containerapp.EnvironmentStorage("example", {
 *     name: "mycontainerappstorage",
 *     containerAppEnvironmentId: exampleEnvironment.id,
 *     accountName: exampleAccount.name,
 *     shareName: exampleShare.name,
 *     accessKey: exampleAccount.primaryAccessKey,
 *     accessMode: "ReadOnly",
 * });
 * ```
 *
 * ## Import
 *
 * A Container App Environment Storage can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:containerapp/environmentStorage:EnvironmentStorage example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/managedEnvironments/myEnvironment/storages/mystorage"
 * ```
 */
class EnvironmentStorage extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["containerAppEnvironmentId"] = state ? state.containerAppEnvironmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if ((!args || args.accessMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessMode'");
            }
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.containerAppEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppEnvironmentId'");
            }
            if ((!args || args.shareName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareName'");
            }
            resourceInputs["accessKey"] = (args === null || args === void 0 ? void 0 : args.accessKey) ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["containerAppEnvironmentId"] = args ? args.containerAppEnvironmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EnvironmentStorage.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EnvironmentStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EnvironmentStorage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EnvironmentStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentStorage.__pulumiType;
    }
}
exports.EnvironmentStorage = EnvironmentStorage;
/** @internal */
EnvironmentStorage.__pulumiType = 'azure:containerapp/environmentStorage:EnvironmentStorage';
//# sourceMappingURL=environmentStorage.js.map