"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedPrivateLinkService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the Shared Private Link Service for an Azure Search Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const test = new azure.core.ResourceGroup("test", {
 *     name: "example-resourceGroup",
 *     location: "east us",
 * });
 * const testService = new azure.search.Service("test", {
 *     name: "example-search",
 *     resourceGroupName: test.name,
 *     location: test.location,
 *     sku: "standard",
 * });
 * const testAccount = new azure.storage.Account("test", {
 *     name: "xiaxintestsaforsearchspl",
 *     resourceGroupName: test.name,
 *     location: test.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const testSharedPrivateLinkService = new azure.search.SharedPrivateLinkService("test", {
 *     name: "example-spl",
 *     searchServiceId: testService.id,
 *     subresourceName: "blob",
 *     targetResourceId: testAccount.id,
 *     requestMessage: "please approve",
 * });
 * ```
 *
 * ## Import
 *
 * Azure Search Shared Private Link Resource can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:search/sharedPrivateLinkService:SharedPrivateLinkService example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Search/searchServices/service1/sharedPrivateLinkResources/resource1
 * ```
 */
class SharedPrivateLinkService extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requestMessage"] = state ? state.requestMessage : undefined;
            resourceInputs["searchServiceId"] = state ? state.searchServiceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subresourceName"] = state ? state.subresourceName : undefined;
            resourceInputs["targetResourceId"] = state ? state.targetResourceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.searchServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchServiceId'");
            }
            if ((!args || args.subresourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subresourceName'");
            }
            if ((!args || args.targetResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requestMessage"] = args ? args.requestMessage : undefined;
            resourceInputs["searchServiceId"] = args ? args.searchServiceId : undefined;
            resourceInputs["subresourceName"] = args ? args.subresourceName : undefined;
            resourceInputs["targetResourceId"] = args ? args.targetResourceId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedPrivateLinkService.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SharedPrivateLinkService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SharedPrivateLinkService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SharedPrivateLinkService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedPrivateLinkService.__pulumiType;
    }
}
exports.SharedPrivateLinkService = SharedPrivateLinkService;
/** @internal */
SharedPrivateLinkService.__pulumiType = 'azure:search/sharedPrivateLinkService:SharedPrivateLinkService';
//# sourceMappingURL=sharedPrivateLinkService.js.map