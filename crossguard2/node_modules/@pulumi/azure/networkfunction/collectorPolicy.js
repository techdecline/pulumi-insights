"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectorPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Network Function Collector Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West US 2",
 * });
 * const exampleExpressRoutePort = new azure.network.ExpressRoutePort("example", {
 *     name: "example-erp",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     peeringLocation: "Equinix-Seattle-SE2",
 *     bandwidthInGbps: 10,
 *     encapsulation: "Dot1Q",
 * });
 * const exampleExpressRouteCircuit = new azure.network.ExpressRouteCircuit("example", {
 *     name: "example-erc",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     expressRoutePortId: exampleExpressRoutePort.id,
 *     bandwidthInGbps: 1,
 *     sku: {
 *         tier: "Standard",
 *         family: "MeteredData",
 *     },
 * });
 * const exampleExpressRouteCircuitPeering = new azure.network.ExpressRouteCircuitPeering("example", {
 *     peeringType: "MicrosoftPeering",
 *     expressRouteCircuitName: exampleExpressRouteCircuit.name,
 *     resourceGroupName: example.name,
 *     peerAsn: 100,
 *     primaryPeerAddressPrefix: "192.168.199.0/30",
 *     secondaryPeerAddressPrefix: "192.168.200.0/30",
 *     vlanId: 300,
 *     microsoftPeeringConfig: {
 *         advertisedPublicPrefixes: ["123.6.0.0/24"],
 *     },
 * });
 * const exampleAzureTrafficCollector = new azure.networkfunction.AzureTrafficCollector("example", {
 *     name: "example-nfatc",
 *     location: example.location,
 *     resourceGroupName: example.name,
 * }, {
 *     dependsOn: [exampleExpressRouteCircuitPeering],
 * });
 * const exampleCollectorPolicy = new azure.networkfunction.CollectorPolicy("example", {
 *     name: "example-nfcp",
 *     trafficCollectorId: exampleAzureTrafficCollector.id,
 *     location: example.location,
 *     ipfxEmission: {
 *         destinationTypes: "AzureMonitor",
 *     },
 *     ipfxIngestion: {
 *         sourceResourceIds: [exampleExpressRouteCircuit.id],
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Network Function Collector Policy can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:networkfunction/collectorPolicy:CollectorPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.NetworkFunction/azureTrafficCollectors/azureTrafficCollector1/collectorPolicies/collectorPolicy1
 * ```
 */
class CollectorPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["ipfxEmission"] = state ? state.ipfxEmission : undefined;
            resourceInputs["ipfxIngestion"] = state ? state.ipfxIngestion : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficCollectorId"] = state ? state.trafficCollectorId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.ipfxEmission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipfxEmission'");
            }
            if ((!args || args.ipfxIngestion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipfxIngestion'");
            }
            if ((!args || args.trafficCollectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficCollectorId'");
            }
            resourceInputs["ipfxEmission"] = args ? args.ipfxEmission : undefined;
            resourceInputs["ipfxIngestion"] = args ? args.ipfxIngestion : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficCollectorId"] = args ? args.trafficCollectorId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CollectorPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CollectorPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CollectorPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CollectorPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CollectorPolicy.__pulumiType;
    }
}
exports.CollectorPolicy = CollectorPolicy;
/** @internal */
CollectorPolicy.__pulumiType = 'azure:networkfunction/collectorPolicy:CollectorPolicy';
//# sourceMappingURL=collectorPolicy.js.map