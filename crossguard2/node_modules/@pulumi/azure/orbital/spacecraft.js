"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spacecraft = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Spacecraft.
 *
 * > **Note:** The `azure.orbital.Spacecraft` resource has been deprecated and will be removed in v5.0 of the AzureRM Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "rg-example",
 *     location: "West Europe",
 * });
 * const exampleSpacecraft = new azure.orbital.Spacecraft("example", {
 *     name: "example-spacecraft",
 *     resourceGroupName: example.name,
 *     location: "westeurope",
 *     noradId: "12345",
 *     links: [{
 *         bandwidthMhz: 30,
 *         centerFrequencyMhz: 2050,
 *         direction: "Uplink",
 *         polarization: "LHCP",
 *         name: "examplename",
 *     }],
 *     twoLineElements: [
 *         "1 23455U 94089A   97320.90946019  .00000140  00000-0  10191-3 0  2621",
 *         "2 23455  99.0090 272.6745 0008546 223.1686 136.8816 14.11711747148495",
 *     ],
 *     titleLine: "AQUA",
 *     tags: {
 *         "aks-managed-cluster-name": "9a57225d-a405-4d40-aa46-f13d2342abef",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Spacecraft can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:orbital/spacecraft:Spacecraft example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Orbital/spacecrafts/spacecraft1
 * ```
 */
class Spacecraft extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noradId"] = state ? state.noradId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["titleLine"] = state ? state.titleLine : undefined;
            resourceInputs["twoLineElements"] = state ? state.twoLineElements : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.links === undefined) && !opts.urn) {
                throw new Error("Missing required property 'links'");
            }
            if ((!args || args.noradId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'noradId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.titleLine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'titleLine'");
            }
            if ((!args || args.twoLineElements === undefined) && !opts.urn) {
                throw new Error("Missing required property 'twoLineElements'");
            }
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noradId"] = args ? args.noradId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["titleLine"] = args ? args.titleLine : undefined;
            resourceInputs["twoLineElements"] = args ? args.twoLineElements : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Spacecraft.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Spacecraft resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Spacecraft(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Spacecraft.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Spacecraft.__pulumiType;
    }
}
exports.Spacecraft = Spacecraft;
/** @internal */
Spacecraft.__pulumiType = 'azure:orbital/spacecraft:Spacecraft';
//# sourceMappingURL=spacecraft.js.map