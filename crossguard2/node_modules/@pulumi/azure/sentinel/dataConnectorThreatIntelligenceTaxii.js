"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataConnectorThreatIntelligenceTaxii = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Threat Intelligence TAXII Data Connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "example-workspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 * });
 * const exampleLogAnalyticsWorkspaceOnboarding = new azure.sentinel.LogAnalyticsWorkspaceOnboarding("example", {workspaceId: exampleAnalyticsWorkspace.id});
 * const exampleDataConnectorThreatIntelligenceTaxii = new azure.sentinel.DataConnectorThreatIntelligenceTaxii("example", {
 *     name: "example",
 *     logAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.workspaceId,
 *     displayName: "example",
 *     apiRootUrl: "https://foo/taxii2/api2/",
 *     collectionId: "someid",
 * });
 * ```
 *
 * ## Import
 *
 * Threat Intelligence TAXII Data Connectors can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:sentinel/dataConnectorThreatIntelligenceTaxii:DataConnectorThreatIntelligenceTaxii example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
 * ```
 */
class DataConnectorThreatIntelligenceTaxii extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiRootUrl"] = state ? state.apiRootUrl : undefined;
            resourceInputs["collectionId"] = state ? state.collectionId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = state ? state.logAnalyticsWorkspaceId : undefined;
            resourceInputs["lookbackDate"] = state ? state.lookbackDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pollingFrequency"] = state ? state.pollingFrequency : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiRootUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiRootUrl'");
            }
            if ((!args || args.collectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectionId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.logAnalyticsWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logAnalyticsWorkspaceId'");
            }
            resourceInputs["apiRootUrl"] = args ? args.apiRootUrl : undefined;
            resourceInputs["collectionId"] = args ? args.collectionId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = args ? args.logAnalyticsWorkspaceId : undefined;
            resourceInputs["lookbackDate"] = args ? args.lookbackDate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["pollingFrequency"] = args ? args.pollingFrequency : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["userName"] = (args === null || args === void 0 ? void 0 : args.userName) ? pulumi.secret(args.userName) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "userName"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DataConnectorThreatIntelligenceTaxii.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DataConnectorThreatIntelligenceTaxii resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataConnectorThreatIntelligenceTaxii(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataConnectorThreatIntelligenceTaxii.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataConnectorThreatIntelligenceTaxii.__pulumiType;
    }
}
exports.DataConnectorThreatIntelligenceTaxii = DataConnectorThreatIntelligenceTaxii;
/** @internal */
DataConnectorThreatIntelligenceTaxii.__pulumiType = 'azure:sentinel/dataConnectorThreatIntelligenceTaxii:DataConnectorThreatIntelligenceTaxii';
//# sourceMappingURL=dataConnectorThreatIntelligenceTaxii.js.map