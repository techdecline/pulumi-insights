"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThreatIntelligenceIndicator = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Sentinel Threat Intelligence Indicator.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "east us",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "example-law",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 *     retentionInDays: 30,
 * });
 * const exampleLogAnalyticsWorkspaceOnboarding = new azure.sentinel.LogAnalyticsWorkspaceOnboarding("example", {workspaceId: exampleAnalyticsWorkspace.id});
 * const exampleThreatIntelligenceIndicator = new azure.sentinel.ThreatIntelligenceIndicator("example", {
 *     workspaceId: exampleLogAnalyticsWorkspaceOnboarding.workspaceId,
 *     patternType: "domain-name",
 *     pattern: "http://example.com",
 *     source: "Microsoft Sentinel",
 *     validateFromUtc: "2022-12-14T16:00:00Z",
 *     displayName: "example-indicator",
 * });
 * ```
 *
 * ## Import
 *
 * Sentinel Threat Intelligence Indicators can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:sentinel/threatIntelligenceIndicator:ThreatIntelligenceIndicator example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/indicator1
 * ```
 */
class ThreatIntelligenceIndicator extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["confidence"] = state ? state.confidence : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["defanged"] = state ? state.defanged : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["extension"] = state ? state.extension : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["externalLastUpdatedTimeUtc"] = state ? state.externalLastUpdatedTimeUtc : undefined;
            resourceInputs["externalReferences"] = state ? state.externalReferences : undefined;
            resourceInputs["granularMarkings"] = state ? state.granularMarkings : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["indicatorTypes"] = state ? state.indicatorTypes : undefined;
            resourceInputs["killChainPhases"] = state ? state.killChainPhases : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["lastUpdatedTimeUtc"] = state ? state.lastUpdatedTimeUtc : undefined;
            resourceInputs["objectMarkingRefs"] = state ? state.objectMarkingRefs : undefined;
            resourceInputs["parsedPatterns"] = state ? state.parsedPatterns : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["patternType"] = state ? state.patternType : undefined;
            resourceInputs["patternVersion"] = state ? state.patternVersion : undefined;
            resourceInputs["revoked"] = state ? state.revoked : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatTypes"] = state ? state.threatTypes : undefined;
            resourceInputs["validateFromUtc"] = state ? state.validateFromUtc : undefined;
            resourceInputs["validateUntilUtc"] = state ? state.validateUntilUtc : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.pattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pattern'");
            }
            if ((!args || args.patternType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'patternType'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.validateFromUtc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validateFromUtc'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["confidence"] = args ? args.confidence : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["extension"] = args ? args.extension : undefined;
            resourceInputs["externalReferences"] = args ? args.externalReferences : undefined;
            resourceInputs["granularMarkings"] = args ? args.granularMarkings : undefined;
            resourceInputs["killChainPhases"] = args ? args.killChainPhases : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["objectMarkingRefs"] = args ? args.objectMarkingRefs : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["patternType"] = args ? args.patternType : undefined;
            resourceInputs["patternVersion"] = args ? args.patternVersion : undefined;
            resourceInputs["revoked"] = args ? args.revoked : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatTypes"] = args ? args.threatTypes : undefined;
            resourceInputs["validateFromUtc"] = args ? args.validateFromUtc : undefined;
            resourceInputs["validateUntilUtc"] = args ? args.validateUntilUtc : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["defanged"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["externalLastUpdatedTimeUtc"] = undefined /*out*/;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["indicatorTypes"] = undefined /*out*/;
            resourceInputs["lastUpdatedTimeUtc"] = undefined /*out*/;
            resourceInputs["parsedPatterns"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatIntelligenceIndicator.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ThreatIntelligenceIndicator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ThreatIntelligenceIndicator(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ThreatIntelligenceIndicator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatIntelligenceIndicator.__pulumiType;
    }
}
exports.ThreatIntelligenceIndicator = ThreatIntelligenceIndicator;
/** @internal */
ThreatIntelligenceIndicator.__pulumiType = 'azure:sentinel/threatIntelligenceIndicator:ThreatIntelligenceIndicator';
//# sourceMappingURL=threatIntelligenceIndicator.js.map