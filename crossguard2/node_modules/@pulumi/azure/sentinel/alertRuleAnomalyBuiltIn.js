"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertRuleAnomalyBuiltIn = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "example-law",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "PerGB2018",
 * });
 * const exampleLogAnalyticsWorkspaceOnboarding = new azure.sentinel.LogAnalyticsWorkspaceOnboarding("example", {
 *     workspaceId: exampleAnalyticsWorkspace.id,
 *     customerManagedKeyEnabled: false,
 * });
 * const example = azure.sentinel.getAlertRuleAnomalyOutput({
 *     logAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.workspaceId,
 *     displayName: "Potential data staging",
 * });
 * const exampleAlertRuleAnomalyBuiltIn = new azure.sentinel.AlertRuleAnomalyBuiltIn("example", {
 *     displayName: "Potential data staging",
 *     logAnalyticsWorkspaceId: exampleAnalyticsWorkspace.id,
 *     mode: "Production",
 *     enabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * Built In Anomaly Alert Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:sentinel/alertRuleAnomalyBuiltIn:AlertRuleAnomalyBuiltIn example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/setting1
 * ```
 */
class AlertRuleAnomalyBuiltIn extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["anomalySettingsVersion"] = state ? state.anomalySettingsVersion : undefined;
            resourceInputs["anomalyVersion"] = state ? state.anomalyVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = state ? state.logAnalyticsWorkspaceId : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["multiSelectObservations"] = state ? state.multiSelectObservations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prioritizedExcludeObservations"] = state ? state.prioritizedExcludeObservations : undefined;
            resourceInputs["requiredDataConnectors"] = state ? state.requiredDataConnectors : undefined;
            resourceInputs["settingsDefinitionId"] = state ? state.settingsDefinitionId : undefined;
            resourceInputs["singleSelectObservations"] = state ? state.singleSelectObservations : undefined;
            resourceInputs["tactics"] = state ? state.tactics : undefined;
            resourceInputs["techniques"] = state ? state.techniques : undefined;
            resourceInputs["thresholdObservations"] = state ? state.thresholdObservations : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.logAnalyticsWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logAnalyticsWorkspaceId'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = args ? args.logAnalyticsWorkspaceId : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["anomalySettingsVersion"] = undefined /*out*/;
            resourceInputs["anomalyVersion"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["frequency"] = undefined /*out*/;
            resourceInputs["multiSelectObservations"] = undefined /*out*/;
            resourceInputs["prioritizedExcludeObservations"] = undefined /*out*/;
            resourceInputs["requiredDataConnectors"] = undefined /*out*/;
            resourceInputs["settingsDefinitionId"] = undefined /*out*/;
            resourceInputs["singleSelectObservations"] = undefined /*out*/;
            resourceInputs["tactics"] = undefined /*out*/;
            resourceInputs["techniques"] = undefined /*out*/;
            resourceInputs["thresholdObservations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertRuleAnomalyBuiltIn.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AlertRuleAnomalyBuiltIn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AlertRuleAnomalyBuiltIn(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AlertRuleAnomalyBuiltIn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertRuleAnomalyBuiltIn.__pulumiType;
    }
}
exports.AlertRuleAnomalyBuiltIn = AlertRuleAnomalyBuiltIn;
/** @internal */
AlertRuleAnomalyBuiltIn.__pulumiType = 'azure:sentinel/alertRuleAnomalyBuiltIn:AlertRuleAnomalyBuiltIn';
//# sourceMappingURL=alertRuleAnomalyBuiltIn.js.map