"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Sentinel Metadata.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "example-workspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "pergb2018",
 * });
 * const exampleAnalyticsSolution = new azure.operationalinsights.AnalyticsSolution("example", {
 *     solutionName: "SecurityInsights",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     workspaceResourceId: exampleAnalyticsWorkspace.id,
 *     workspaceName: exampleAnalyticsWorkspace.name,
 *     plan: {
 *         publisher: "Microsoft",
 *         product: "OMSGallery/SecurityInsights",
 *     },
 * });
 * const exampleAlertRuleNrt = new azure.sentinel.AlertRuleNrt("example", {
 *     name: "example",
 *     logAnalyticsWorkspaceId: exampleAnalyticsSolution.workspaceResourceId,
 *     displayName: "example",
 *     severity: "High",
 *     query: `AzureActivity |
 *   where OperationName == "Create or Update Virtual Machine" or OperationName =="Create Deployment" |
 *   where ActivityStatus == "Succeeded" |
 *   make-series dcount(ResourceId) default=0 on EventSubmissionTimestamp in range(ago(7d), now(), 1d) by Caller
 * `,
 * });
 * const exampleMetadata = new azure.sentinel.Metadata("example", {
 *     name: "exampl",
 *     workspaceId: exampleAnalyticsSolution.workspaceResourceId,
 *     contentId: exampleAlertRuleNrt.name,
 *     kind: "AnalyticsRule",
 *     parentId: exampleAlertRuleNrt.id,
 * });
 * ```
 *
 * ## Import
 *
 * Sentinel Metadata can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:sentinel/metadata:Metadata example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/metadata/metadata1
 * ```
 */
class Metadata extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["contentId"] = state ? state.contentId : undefined;
            resourceInputs["contentSchemaVersion"] = state ? state.contentSchemaVersion : undefined;
            resourceInputs["customVersion"] = state ? state.customVersion : undefined;
            resourceInputs["dependency"] = state ? state.dependency : undefined;
            resourceInputs["firstPublishDate"] = state ? state.firstPublishDate : undefined;
            resourceInputs["iconId"] = state ? state.iconId : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["lastPublishDate"] = state ? state.lastPublishDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["previewImages"] = state ? state.previewImages : undefined;
            resourceInputs["previewImagesDarks"] = state ? state.previewImagesDarks : undefined;
            resourceInputs["providers"] = state ? state.providers : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["support"] = state ? state.support : undefined;
            resourceInputs["threatAnalysisTactics"] = state ? state.threatAnalysisTactics : undefined;
            resourceInputs["threatAnalysisTechniques"] = state ? state.threatAnalysisTechniques : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.contentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentId'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["author"] = args ? args.author : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["contentId"] = args ? args.contentId : undefined;
            resourceInputs["contentSchemaVersion"] = args ? args.contentSchemaVersion : undefined;
            resourceInputs["customVersion"] = args ? args.customVersion : undefined;
            resourceInputs["dependency"] = args ? args.dependency : undefined;
            resourceInputs["firstPublishDate"] = args ? args.firstPublishDate : undefined;
            resourceInputs["iconId"] = args ? args.iconId : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["lastPublishDate"] = args ? args.lastPublishDate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["previewImages"] = args ? args.previewImages : undefined;
            resourceInputs["previewImagesDarks"] = args ? args.previewImagesDarks : undefined;
            resourceInputs["providers"] = args ? args.providers : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["support"] = args ? args.support : undefined;
            resourceInputs["threatAnalysisTactics"] = args ? args.threatAnalysisTactics : undefined;
            resourceInputs["threatAnalysisTechniques"] = args ? args.threatAnalysisTechniques : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metadata.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Metadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Metadata(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Metadata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metadata.__pulumiType;
    }
}
exports.Metadata = Metadata;
/** @internal */
Metadata.__pulumiType = 'azure:sentinel/metadata:Metadata';
//# sourceMappingURL=metadata.js.map