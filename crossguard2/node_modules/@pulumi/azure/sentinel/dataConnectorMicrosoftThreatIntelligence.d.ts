import * as pulumi from "@pulumi/pulumi";
/**
 * Manages a Microsoft Threat Intelligence Data Connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "east us",
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("example", {
 *     name: "example-workspace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "PerGB2018",
 * });
 * const exampleLogAnalyticsWorkspaceOnboarding = new azure.sentinel.LogAnalyticsWorkspaceOnboarding("example", {workspaceId: exampleAnalyticsWorkspace.id});
 * const exampleDataConnectorMicrosoftThreatIntelligence = new azure.sentinel.DataConnectorMicrosoftThreatIntelligence("example", {
 *     name: "example-dc-msti",
 *     logAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.workspaceId,
 *     microsoftEmergingThreatFeedLookbackDate: "1970-01-01T00:00:00Z",
 * });
 * ```
 *
 * ## Import
 *
 * sentinels can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:sentinel/dataConnectorMicrosoftThreatIntelligence:DataConnectorMicrosoftThreatIntelligence example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
 * ```
 */
export declare class DataConnectorMicrosoftThreatIntelligence extends pulumi.CustomResource {
    /**
     * Get an existing DataConnectorMicrosoftThreatIntelligence resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataConnectorMicrosoftThreatIntelligenceState, opts?: pulumi.CustomResourceOptions): DataConnectorMicrosoftThreatIntelligence;
    /**
     * Returns true if the given object is an instance of DataConnectorMicrosoftThreatIntelligence.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DataConnectorMicrosoftThreatIntelligence;
    /**
     * The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
     */
    readonly logAnalyticsWorkspaceId: pulumi.Output<string>;
    /**
     * The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
     */
    readonly microsoftEmergingThreatFeedLookbackDate: pulumi.Output<string>;
    /**
     * The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
     *
     * > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
     */
    readonly tenantId: pulumi.Output<string>;
    /**
     * Create a DataConnectorMicrosoftThreatIntelligence resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataConnectorMicrosoftThreatIntelligenceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering DataConnectorMicrosoftThreatIntelligence resources.
 */
export interface DataConnectorMicrosoftThreatIntelligenceState {
    /**
     * The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
     */
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
    /**
     * The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
     */
    microsoftEmergingThreatFeedLookbackDate?: pulumi.Input<string>;
    /**
     * The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
     *
     * > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
     */
    tenantId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a DataConnectorMicrosoftThreatIntelligence resource.
 */
export interface DataConnectorMicrosoftThreatIntelligenceArgs {
    /**
     * The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
     */
    logAnalyticsWorkspaceId: pulumi.Input<string>;
    /**
     * The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
     */
    microsoftEmergingThreatFeedLookbackDate: pulumi.Input<string>;
    /**
     * The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
     *
     * > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
     */
    tenantId?: pulumi.Input<string>;
}
