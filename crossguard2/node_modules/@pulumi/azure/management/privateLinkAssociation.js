"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivateLinkAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Resource Management Private Link Association.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const example = azure.core.getClientConfig({});
 * const exampleGetGroup = example.then(example => azure.management.getGroup({
 *     name: example.tenantId,
 * }));
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example",
 *     location: "West Europe",
 * });
 * const examplePrivateLink = new azure.management.PrivateLink("example", {
 *     name: "example",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const exampleRandomUuid = new random.RandomUuid("example", {});
 * const examplePrivateLinkAssociation = new azure.management.PrivateLinkAssociation("example", {
 *     name: exampleRandomUuid.result,
 *     managementGroupId: exampleAzurermManagementGroup.id,
 *     resourceManagementPrivateLinkId: examplePrivateLink.id,
 *     publicNetworkAccessEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * An existing Private Link Association can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:management/privateLinkAssociation:PrivateLinkAssociation example /providers/Microsoft.Management/managementGroups/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/privateLinkAssociations/00000000-0000-0000-0000-000000000000
 * ```
 */
class PrivateLinkAssociation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["managementGroupId"] = state ? state.managementGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceManagementPrivateLinkId"] = state ? state.resourceManagementPrivateLinkId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.managementGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementGroupId'");
            }
            if ((!args || args.publicNetworkAccessEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicNetworkAccessEnabled'");
            }
            if ((!args || args.resourceManagementPrivateLinkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceManagementPrivateLinkId'");
            }
            resourceInputs["managementGroupId"] = args ? args.managementGroupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceManagementPrivateLinkId"] = args ? args.resourceManagementPrivateLinkId : undefined;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateLinkAssociation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing PrivateLinkAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PrivateLinkAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PrivateLinkAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateLinkAssociation.__pulumiType;
    }
}
exports.PrivateLinkAssociation = PrivateLinkAssociation;
/** @internal */
PrivateLinkAssociation.__pulumiType = 'azure:management/privateLinkAssociation:PrivateLinkAssociation';
//# sourceMappingURL=privateLinkAssociation.js.map