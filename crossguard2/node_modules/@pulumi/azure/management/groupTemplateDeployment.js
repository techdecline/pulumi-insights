"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupTemplateDeployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Template Deployment at a Management Group Scope.
 *
 * > **Note:** Deleting a Deployment at the Management Group Scope will not delete any resources created by the deployment.
 *
 * > **Note:** Deployments to a Management Group are always Incrementally applied. Existing resources that are not part of the template will not be removed.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.management.getGroup({
 *     name: "00000000-0000-0000-0000-000000000000",
 * });
 * const exampleGroupTemplateDeployment = new azure.management.GroupTemplateDeployment("example", {
 *     name: "example",
 *     location: "West Europe",
 *     managementGroupId: example.then(example => example.id),
 *     templateContent: `{
 *   "schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
 *   "contentVersion": "1.0.0.0",
 *   "parameters": {
 *     "policyAssignmentName": {
 *       "type": "string",
 *       "defaultValue": "[guid(parameters('policyDefinitionID'), resourceGroup().name)]",
 *       "metadata": {
 *         "description": "Specifies the name of the policy assignment, can be used defined or an idempotent name as the defaultValue provides."
 *       }
 *     },
 *     "policyDefinitionID": {
 *       "type": "string",
 *       "metadata": {
 *         "description": "Specifies the ID of the policy definition or policy set definition being assigned."
 *       }
 *     }
 *   },
 *   "resources": [
 *     {
 *       "type": "Microsoft.Authorization/policyAssignments",
 *       "name": "[parameters('policyAssignmentName')]",
 *       "apiVersion": "2019-09-01",
 *       "properties": {
 *         "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
 *         "policyDefinitionId": "[parameters('policyDefinitionID')]"
 *       }
 *     }
 *   ]
 * }
 * `,
 *     parametersContent: `{
 *   "schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
 *   "contentVersion": "1.0.0.0",
 *   "parameters": {
 *     "policyDefinitionID": {
 *       "value": "/providers/Microsoft.Authorization/policyDefinitions/0a914e76-4921-4c19-b460-a2d36003525a"
 *     }
 *   }
 * }
 * `,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = azure.management.getGroup({
 *     name: "00000000-0000-0000-0000-000000000000",
 * });
 * const exampleGroupTemplateDeployment = new azure.management.GroupTemplateDeployment("example", {
 *     name: "example",
 *     location: "West Europe",
 *     managementGroupId: example.then(example => example.id),
 *     templateContent: std.file({
 *         input: "templates/example-deploy-template.json",
 *     }).then(invoke => invoke.result),
 *     parametersContent: std.file({
 *         input: "templates/example-deploy-params.json",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.management.getGroup({
 *     name: "00000000-0000-0000-0000-000000000000",
 * });
 * const exampleGetTemplateSpecVersion = azure.core.getTemplateSpecVersion({
 *     name: "exampleTemplateForManagementGroup",
 *     resourceGroupName: "exampleResourceGroup",
 *     version: "v1.0.9",
 * });
 * const exampleGroupTemplateDeployment = new azure.management.GroupTemplateDeployment("example", {
 *     name: "example",
 *     location: "West Europe",
 *     managementGroupId: example.then(example => example.id),
 *     templateSpecVersionId: exampleGetTemplateSpecVersion.then(exampleGetTemplateSpecVersion => exampleGetTemplateSpecVersion.id),
 * });
 * ```
 *
 * ## Import
 *
 * Management Group Template Deployments can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:management/groupTemplateDeployment:GroupTemplateDeployment example /providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Resources/deployments/deploy1
 * ```
 */
class GroupTemplateDeployment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["debugLevel"] = state ? state.debugLevel : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managementGroupId"] = state ? state.managementGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputContent"] = state ? state.outputContent : undefined;
            resourceInputs["parametersContent"] = state ? state.parametersContent : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateContent"] = state ? state.templateContent : undefined;
            resourceInputs["templateSpecVersionId"] = state ? state.templateSpecVersionId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.managementGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementGroupId'");
            }
            resourceInputs["debugLevel"] = args ? args.debugLevel : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementGroupId"] = args ? args.managementGroupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parametersContent"] = args ? args.parametersContent : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateContent"] = args ? args.templateContent : undefined;
            resourceInputs["templateSpecVersionId"] = args ? args.templateSpecVersionId : undefined;
            resourceInputs["outputContent"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupTemplateDeployment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GroupTemplateDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GroupTemplateDeployment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GroupTemplateDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupTemplateDeployment.__pulumiType;
    }
}
exports.GroupTemplateDeployment = GroupTemplateDeployment;
/** @internal */
GroupTemplateDeployment.__pulumiType = 'azure:management/groupTemplateDeployment:GroupTemplateDeployment';
//# sourceMappingURL=groupTemplateDeployment.js.map