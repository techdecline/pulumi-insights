"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomCertificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Web PubSub Custom Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azurerm from "@pulumi/azurerm";
 * import * as std from "@pulumi/std";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleWebPubsubService = new azurerm.index.WebPubsubService("example", {
 *     name: "example-webpubsub",
 *     location: testAzurermResourceGroup.location,
 *     resourceGroupName: testAzurermResourceGroup.name,
 *     sku: [{
 *         name: "Premium_P1",
 *         capacity: 1,
 *     }],
 *     identity: [{
 *         type: "SystemAssigned",
 *     }],
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     accessPolicies: [
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: current.then(current => current.objectId),
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: testAzurermWebPubsubService.identity[0].principalId,
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *     ],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("example", {
 *     name: "imported-cert",
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: std.filebase64({
 *             input: "certificate-to-import.pfx",
 *         }).then(invoke => invoke.result),
 *         password: "",
 *     },
 * });
 * const test = new azure.webpubsub.CustomCertificate("test", {
 *     name: "example-cert",
 *     webPubsubId: exampleWebPubsubService.id,
 *     customCertificateId: exampleCertificate.id,
 * }, {
 *     dependsOn: [exampleAzurermKeyVaultAccessPolicy],
 * });
 * ```
 *
 * ## Import
 *
 * Custom Certificate for a Web PubSub service can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:webpubsub/customCertificate:CustomCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/webPubSub/WebPubsub1/customCertificates/cert1
 * ```
 */
class CustomCertificate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["certificateVersion"] = state ? state.certificateVersion : undefined;
            resourceInputs["customCertificateId"] = state ? state.customCertificateId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["webPubsubId"] = state ? state.webPubsubId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.customCertificateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customCertificateId'");
            }
            if ((!args || args.webPubsubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'webPubsubId'");
            }
            resourceInputs["customCertificateId"] = args ? args.customCertificateId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["webPubsubId"] = args ? args.webPubsubId : undefined;
            resourceInputs["certificateVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomCertificate.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CustomCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CustomCertificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CustomCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomCertificate.__pulumiType;
    }
}
exports.CustomCertificate = CustomCertificate;
/** @internal */
CustomCertificate.__pulumiType = 'azure:webpubsub/customCertificate:CustomCertificate';
//# sourceMappingURL=customCertificate.js.map