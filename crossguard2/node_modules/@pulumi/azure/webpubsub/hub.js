"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hub = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the hub settings for a Web Pubsub.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "terraform-webpubsub",
 *     location: "east us",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "tfex-uai",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleService = new azure.webpubsub.Service("example", {
 *     name: "tfex-webpubsub",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard_S1",
 *     capacity: 1,
 * });
 * const exampleHub = new azure.webpubsub.Hub("example", {
 *     name: "tfex_wpsh",
 *     webPubsubId: exampleService.id,
 *     eventHandlers: [
 *         {
 *             urlTemplate: "https://test.com/api/{hub}/{event}",
 *             userEventPattern: "*",
 *             systemEvents: [
 *                 "connect",
 *                 "connected",
 *             ],
 *         },
 *         {
 *             urlTemplate: "https://test.com/api/{hub}/{event}",
 *             userEventPattern: "event1, event2",
 *             systemEvents: ["connected"],
 *             auth: {
 *                 managedIdentityId: exampleUserAssignedIdentity.id,
 *             },
 *         },
 *     ],
 *     eventListeners: [
 *         {
 *             systemEventNameFilters: ["connected"],
 *             userEventNameFilters: [
 *                 "event1",
 *                 "event2",
 *             ],
 *             eventhubNamespaceName: test.name,
 *             eventhubName: test1.name,
 *         },
 *         {
 *             systemEventNameFilters: ["connected"],
 *             userEventNameFilters: ["*"],
 *             eventhubNamespaceName: test.name,
 *             eventhubName: test1.name,
 *         },
 *         {
 *             systemEventNameFilters: ["connected"],
 *             userEventNameFilters: ["event1"],
 *             eventhubNamespaceName: test.name,
 *             eventhubName: test1.name,
 *         },
 *     ],
 *     anonymousConnectionsEnabled: true,
 * }, {
 *     dependsOn: [exampleService],
 * });
 * ```
 *
 * ## Import
 *
 * Web Pubsub Hub can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:webpubsub/hub:Hub example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/webPubSub/webPubSub1/hubs/webPubSubhub1
 * ```
 */
class Hub extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["anonymousConnectionsEnabled"] = state ? state.anonymousConnectionsEnabled : undefined;
            resourceInputs["eventHandlers"] = state ? state.eventHandlers : undefined;
            resourceInputs["eventListeners"] = state ? state.eventListeners : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["webPubsubId"] = state ? state.webPubsubId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.webPubsubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'webPubsubId'");
            }
            resourceInputs["anonymousConnectionsEnabled"] = args ? args.anonymousConnectionsEnabled : undefined;
            resourceInputs["eventHandlers"] = args ? args.eventHandlers : undefined;
            resourceInputs["eventListeners"] = args ? args.eventListeners : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["webPubsubId"] = args ? args.webPubsubId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Hub.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Hub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Hub(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Hub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hub.__pulumiType;
    }
}
exports.Hub = Hub;
/** @internal */
Hub.__pulumiType = 'azure:webpubsub/hub:Hub';
//# sourceMappingURL=hub.js.map