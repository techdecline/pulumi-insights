"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudVmCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Cloud VM Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleExadataInfrastructure = new azure.oracle.ExadataInfrastructure("example", {
 *     name: "example-exadata-infrastructure",
 *     displayName: "example-exadata-infrastructure",
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     shape: "Exadata.X9M",
 *     storageCount: 3,
 *     computeCount: 2,
 *     zones: ["3"],
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-virtual-network",
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 *     delegations: [{
 *         name: "delegation",
 *         serviceDelegation: {
 *             actions: [
 *                 "Microsoft.Network/networkinterfaces/*",
 *                 "Microsoft.Network/virtualNetworks/subnets/join/action",
 *             ],
 *             name: "Oracle.Database/networkAttachments",
 *         },
 *     }],
 * });
 * const example = azure.oracle.getDbServersOutput({
 *     resourceGroupName: exampleResourceGroup.name,
 *     cloudExadataInfrastructureName: exampleExadataInfrastructure.name,
 * });
 * const exampleCloudVmCluster = new azure.oracle.CloudVmCluster("example", {
 *     name: "example-cloud-vm-cluster",
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     giVersion: "23.0.0.0",
 *     virtualNetworkId: exampleVirtualNetwork.id,
 *     licenseModel: "BringYourOwnLicense",
 *     dbServers: example.apply(example => .map(obj => (obj.ocid))),
 *     sshPublicKeys: [std.file({
 *         input: "~/.ssh/id_rsa.pub",
 *     }).then(invoke => invoke.result)],
 *     displayName: "example-cloud-vm-cluster",
 *     cloudExadataInfrastructureId: exampleExadataInfrastructure.id,
 *     cpuCoreCount: 2,
 *     hostname: "hostname",
 *     subnetId: exampleSubnet.id,
 * });
 * ```
 *
 * ## Import
 *
 * Cloud VM Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:oracle/cloudVmCluster:CloudVmCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup/providers/Oracle.Database/cloudVmClusters/cloudVmClusters1
 * ```
 */
class CloudVmCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["backupSubnetCidr"] = state ? state.backupSubnetCidr : undefined;
            resourceInputs["cloudExadataInfrastructureId"] = state ? state.cloudExadataInfrastructureId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["cpuCoreCount"] = state ? state.cpuCoreCount : undefined;
            resourceInputs["dataCollectionOptions"] = state ? state.dataCollectionOptions : undefined;
            resourceInputs["dataStoragePercentage"] = state ? state.dataStoragePercentage : undefined;
            resourceInputs["dataStorageSizeInTbs"] = state ? state.dataStorageSizeInTbs : undefined;
            resourceInputs["dbNodeStorageSizeInGbs"] = state ? state.dbNodeStorageSizeInGbs : undefined;
            resourceInputs["dbServers"] = state ? state.dbServers : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["giVersion"] = state ? state.giVersion : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["hostnameActual"] = state ? state.hostnameActual : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["localBackupEnabled"] = state ? state.localBackupEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["memorySizeInGbs"] = state ? state.memorySizeInGbs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocid"] = state ? state.ocid : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scanListenerPortTcp"] = state ? state.scanListenerPortTcp : undefined;
            resourceInputs["scanListenerPortTcpSsl"] = state ? state.scanListenerPortTcpSsl : undefined;
            resourceInputs["sparseDiskgroupEnabled"] = state ? state.sparseDiskgroupEnabled : undefined;
            resourceInputs["sshPublicKeys"] = state ? state.sshPublicKeys : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cloudExadataInfrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudExadataInfrastructureId'");
            }
            if ((!args || args.cpuCoreCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuCoreCount'");
            }
            if ((!args || args.dbServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbServers'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.giVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'giVersion'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.licenseModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseModel'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sshPublicKeys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshPublicKeys'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.virtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkId'");
            }
            resourceInputs["backupSubnetCidr"] = args ? args.backupSubnetCidr : undefined;
            resourceInputs["cloudExadataInfrastructureId"] = args ? args.cloudExadataInfrastructureId : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["cpuCoreCount"] = args ? args.cpuCoreCount : undefined;
            resourceInputs["dataCollectionOptions"] = args ? args.dataCollectionOptions : undefined;
            resourceInputs["dataStoragePercentage"] = args ? args.dataStoragePercentage : undefined;
            resourceInputs["dataStorageSizeInTbs"] = args ? args.dataStorageSizeInTbs : undefined;
            resourceInputs["dbNodeStorageSizeInGbs"] = args ? args.dbNodeStorageSizeInGbs : undefined;
            resourceInputs["dbServers"] = args ? args.dbServers : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["giVersion"] = args ? args.giVersion : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["localBackupEnabled"] = args ? args.localBackupEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["memorySizeInGbs"] = args ? args.memorySizeInGbs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scanListenerPortTcp"] = args ? args.scanListenerPortTcp : undefined;
            resourceInputs["scanListenerPortTcpSsl"] = args ? args.scanListenerPortTcpSsl : undefined;
            resourceInputs["sparseDiskgroupEnabled"] = args ? args.sparseDiskgroupEnabled : undefined;
            resourceInputs["sshPublicKeys"] = args ? args.sshPublicKeys : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["hostnameActual"] = undefined /*out*/;
            resourceInputs["ocid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudVmCluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CloudVmCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CloudVmCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CloudVmCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudVmCluster.__pulumiType;
    }
}
exports.CloudVmCluster = CloudVmCluster;
/** @internal */
CloudVmCluster.__pulumiType = 'azure:oracle/cloudVmCluster:CloudVmCluster';
//# sourceMappingURL=cloudVmCluster.js.map