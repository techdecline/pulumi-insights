"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExadataInfrastructure = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Cloud Exadata Infrastructure.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleExadataInfrastructure = new azure.oracle.ExadataInfrastructure("example", {
 *     name: "example-exadata-infra",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     zones: ["1"],
 *     displayName: "example-exadata-infra",
 *     storageCount: 3,
 *     computeCount: 2,
 *     shape: "Exadata.X9M",
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Exadata Infrastructures can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:oracle/exadataInfrastructure:ExadataInfrastructure example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup/providers/Oracle.Database/cloudExadataInfrastructures/cloudExadataInfrastructures1
 * ```
 */
class ExadataInfrastructure extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["computeCount"] = state ? state.computeCount : undefined;
            resourceInputs["customerContacts"] = state ? state.customerContacts : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindows"] = state ? state.maintenanceWindows : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["storageCount"] = state ? state.storageCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.computeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeCount'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.shape === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shape'");
            }
            if ((!args || args.storageCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageCount'");
            }
            if ((!args || args.zones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zones'");
            }
            resourceInputs["computeCount"] = args ? args.computeCount : undefined;
            resourceInputs["customerContacts"] = args ? args.customerContacts : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindows"] = args ? args.maintenanceWindows : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["storageCount"] = args ? args.storageCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExadataInfrastructure.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ExadataInfrastructure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ExadataInfrastructure(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ExadataInfrastructure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExadataInfrastructure.__pulumiType;
    }
}
exports.ExadataInfrastructure = ExadataInfrastructure;
/** @internal */
ExadataInfrastructure.__pulumiType = 'azure:oracle/exadataInfrastructure:ExadataInfrastructure';
//# sourceMappingURL=exadataInfrastructure.js.map