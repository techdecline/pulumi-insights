"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrontdoorRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Front Door (standard/premium) Route.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-cdn-frontdoor",
 *     location: "West Europe",
 * });
 * const exampleZone = new azure.dns.Zone("example", {
 *     name: "example.com",
 *     resourceGroupName: example.name,
 * });
 * const exampleFrontdoorProfile = new azure.cdn.FrontdoorProfile("example", {
 *     name: "example-profile",
 *     resourceGroupName: example.name,
 *     skuName: "Standard_AzureFrontDoor",
 * });
 * const exampleFrontdoorOriginGroup = new azure.cdn.FrontdoorOriginGroup("example", {
 *     name: "example-originGroup",
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 *     loadBalancing: {
 *         additionalLatencyInMilliseconds: 0,
 *         sampleSize: 16,
 *         successfulSamplesRequired: 3,
 *     },
 * });
 * const exampleFrontdoorOrigin = new azure.cdn.FrontdoorOrigin("example", {
 *     name: "example-origin",
 *     cdnFrontdoorOriginGroupId: exampleFrontdoorOriginGroup.id,
 *     enabled: true,
 *     certificateNameCheckEnabled: false,
 *     hostName: "contoso.com",
 *     httpPort: 80,
 *     httpsPort: 443,
 *     originHostHeader: "www.contoso.com",
 *     priority: 1,
 *     weight: 1,
 * });
 * const exampleFrontdoorEndpoint = new azure.cdn.FrontdoorEndpoint("example", {
 *     name: "example-endpoint",
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 * });
 * const exampleFrontdoorRuleSet = new azure.cdn.FrontdoorRuleSet("example", {
 *     name: "ExampleRuleSet",
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 * });
 * const contoso = new azure.cdn.FrontdoorCustomDomain("contoso", {
 *     name: "contoso-custom-domain",
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 *     dnsZoneId: exampleZone.id,
 *     hostName: std.joinOutput({
 *         separator: ".",
 *         input: [
 *             "contoso",
 *             exampleZone.name,
 *         ],
 *     }).apply(invoke => invoke.result),
 *     tls: {
 *         certificateType: "ManagedCertificate",
 *         minimumTlsVersion: "TLS12",
 *     },
 * });
 * const fabrikam = new azure.cdn.FrontdoorCustomDomain("fabrikam", {
 *     name: "fabrikam-custom-domain",
 *     cdnFrontdoorProfileId: exampleFrontdoorProfile.id,
 *     dnsZoneId: exampleZone.id,
 *     hostName: std.joinOutput({
 *         separator: ".",
 *         input: [
 *             "fabrikam",
 *             exampleZone.name,
 *         ],
 *     }).apply(invoke => invoke.result),
 *     tls: {
 *         certificateType: "ManagedCertificate",
 *         minimumTlsVersion: "TLS12",
 *     },
 * });
 * const exampleFrontdoorRoute = new azure.cdn.FrontdoorRoute("example", {
 *     name: "example-route",
 *     cdnFrontdoorEndpointId: exampleFrontdoorEndpoint.id,
 *     cdnFrontdoorOriginGroupId: exampleFrontdoorOriginGroup.id,
 *     cdnFrontdoorOriginIds: [exampleFrontdoorOrigin.id],
 *     cdnFrontdoorRuleSetIds: [exampleFrontdoorRuleSet.id],
 *     enabled: true,
 *     forwardingProtocol: "HttpsOnly",
 *     httpsRedirectEnabled: true,
 *     patternsToMatches: ["/*"],
 *     supportedProtocols: [
 *         "Http",
 *         "Https",
 *     ],
 *     cdnFrontdoorCustomDomainIds: [
 *         contoso.id,
 *         fabrikam.id,
 *     ],
 *     linkToDefaultDomain: false,
 *     cache: {
 *         queryStringCachingBehavior: "IgnoreSpecifiedQueryStrings",
 *         queryStrings: [
 *             "account",
 *             "settings",
 *         ],
 *         compressionEnabled: true,
 *         contentTypesToCompresses: [
 *             "text/html",
 *             "text/javascript",
 *             "text/xml",
 *         ],
 *     },
 * });
 * const contosoFrontdoorCustomDomainAssociation = new azure.cdn.FrontdoorCustomDomainAssociation("contoso", {
 *     cdnFrontdoorCustomDomainId: contoso.id,
 *     cdnFrontdoorRouteIds: [exampleFrontdoorRoute.id],
 * });
 * const fabrikamFrontdoorCustomDomainAssociation = new azure.cdn.FrontdoorCustomDomainAssociation("fabrikam", {
 *     cdnFrontdoorCustomDomainId: fabrikam.id,
 *     cdnFrontdoorRouteIds: [exampleFrontdoorRoute.id],
 * });
 * ```
 *
 * ## Import
 *
 * Front Door Routes can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:cdn/frontdoorRoute:FrontdoorRoute example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/afdEndpoints/endpoint1/routes/route1
 * ```
 */
class FrontdoorRoute extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cache"] = state ? state.cache : undefined;
            resourceInputs["cdnFrontdoorCustomDomainIds"] = state ? state.cdnFrontdoorCustomDomainIds : undefined;
            resourceInputs["cdnFrontdoorEndpointId"] = state ? state.cdnFrontdoorEndpointId : undefined;
            resourceInputs["cdnFrontdoorOriginGroupId"] = state ? state.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["cdnFrontdoorOriginIds"] = state ? state.cdnFrontdoorOriginIds : undefined;
            resourceInputs["cdnFrontdoorOriginPath"] = state ? state.cdnFrontdoorOriginPath : undefined;
            resourceInputs["cdnFrontdoorRuleSetIds"] = state ? state.cdnFrontdoorRuleSetIds : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["forwardingProtocol"] = state ? state.forwardingProtocol : undefined;
            resourceInputs["httpsRedirectEnabled"] = state ? state.httpsRedirectEnabled : undefined;
            resourceInputs["linkToDefaultDomain"] = state ? state.linkToDefaultDomain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["patternsToMatches"] = state ? state.patternsToMatches : undefined;
            resourceInputs["supportedProtocols"] = state ? state.supportedProtocols : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cdnFrontdoorEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorEndpointId'");
            }
            if ((!args || args.cdnFrontdoorOriginGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorOriginGroupId'");
            }
            if ((!args || args.cdnFrontdoorOriginIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorOriginIds'");
            }
            if ((!args || args.patternsToMatches === undefined) && !opts.urn) {
                throw new Error("Missing required property 'patternsToMatches'");
            }
            if ((!args || args.supportedProtocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'supportedProtocols'");
            }
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["cdnFrontdoorCustomDomainIds"] = args ? args.cdnFrontdoorCustomDomainIds : undefined;
            resourceInputs["cdnFrontdoorEndpointId"] = args ? args.cdnFrontdoorEndpointId : undefined;
            resourceInputs["cdnFrontdoorOriginGroupId"] = args ? args.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["cdnFrontdoorOriginIds"] = args ? args.cdnFrontdoorOriginIds : undefined;
            resourceInputs["cdnFrontdoorOriginPath"] = args ? args.cdnFrontdoorOriginPath : undefined;
            resourceInputs["cdnFrontdoorRuleSetIds"] = args ? args.cdnFrontdoorRuleSetIds : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["forwardingProtocol"] = args ? args.forwardingProtocol : undefined;
            resourceInputs["httpsRedirectEnabled"] = args ? args.httpsRedirectEnabled : undefined;
            resourceInputs["linkToDefaultDomain"] = args ? args.linkToDefaultDomain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["patternsToMatches"] = args ? args.patternsToMatches : undefined;
            resourceInputs["supportedProtocols"] = args ? args.supportedProtocols : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrontdoorRoute.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FrontdoorRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FrontdoorRoute(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FrontdoorRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrontdoorRoute.__pulumiType;
    }
}
exports.FrontdoorRoute = FrontdoorRoute;
/** @internal */
FrontdoorRoute.__pulumiType = 'azure:cdn/frontdoorRoute:FrontdoorRoute';
//# sourceMappingURL=frontdoorRoute.js.map