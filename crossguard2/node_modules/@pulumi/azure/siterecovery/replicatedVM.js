"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplicatedVM = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const primary = new azure.core.ResourceGroup("primary", {
 *     name: "tfex-replicated-vm-primary",
 *     location: "West US",
 * });
 * const secondary = new azure.core.ResourceGroup("secondary", {
 *     name: "tfex-replicated-vm-secondary",
 *     location: "East US",
 * });
 * const primaryVirtualNetwork = new azure.network.VirtualNetwork("primary", {
 *     name: "network1",
 *     resourceGroupName: primary.name,
 *     addressSpaces: ["192.168.1.0/24"],
 *     location: primary.location,
 * });
 * const primarySubnet = new azure.network.Subnet("primary", {
 *     name: "network1-subnet",
 *     resourceGroupName: primary.name,
 *     virtualNetworkName: primaryVirtualNetwork.name,
 *     addressPrefixes: ["192.168.1.0/24"],
 * });
 * const primaryPublicIp = new azure.network.PublicIp("primary", {
 *     name: "vm-public-ip-primary",
 *     allocationMethod: "Static",
 *     location: primary.location,
 *     resourceGroupName: primary.name,
 *     sku: "Basic",
 * });
 * const vmNetworkInterface = new azure.network.NetworkInterface("vm", {
 *     name: "vm-nic",
 *     location: primary.location,
 *     resourceGroupName: primary.name,
 *     ipConfigurations: [{
 *         name: "vm",
 *         subnetId: primarySubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *         publicIpAddressId: primaryPublicIp.id,
 *     }],
 * });
 * const vm = new azure.compute.VirtualMachine("vm", {
 *     name: "vm",
 *     location: primary.location,
 *     resourceGroupName: primary.name,
 *     vmSize: "Standard_B1s",
 *     networkInterfaceIds: [vmNetworkInterface.id],
 *     storageImageReference: {
 *         publisher: "Canonical",
 *         offer: "0001-com-ubuntu-server-jammy",
 *         sku: "22_04-lts",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         name: "vm-os-disk",
 *         osType: "Linux",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Premium_LRS",
 *     },
 *     osProfile: {
 *         adminUsername: "test-admin-123",
 *         adminPassword: "test-pwd-123",
 *         computerName: "vm",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 * });
 * const vault = new azure.recoveryservices.Vault("vault", {
 *     name: "example-recovery-vault",
 *     location: secondary.location,
 *     resourceGroupName: secondary.name,
 *     sku: "Standard",
 * });
 * const primaryFabric = new azure.siterecovery.Fabric("primary", {
 *     name: "primary-fabric",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     location: primary.location,
 * });
 * const secondaryFabric = new azure.siterecovery.Fabric("secondary", {
 *     name: "secondary-fabric",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     location: secondary.location,
 * });
 * const primaryProtectionContainer = new azure.siterecovery.ProtectionContainer("primary", {
 *     name: "primary-protection-container",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     recoveryFabricName: primaryFabric.name,
 * });
 * const secondaryProtectionContainer = new azure.siterecovery.ProtectionContainer("secondary", {
 *     name: "secondary-protection-container",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     recoveryFabricName: secondaryFabric.name,
 * });
 * const policy = new azure.siterecovery.ReplicationPolicy("policy", {
 *     name: "policy",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     recoveryPointRetentionInMinutes: 24 * 60,
 *     applicationConsistentSnapshotFrequencyInMinutes: 4 * 60,
 * });
 * const container_mapping = new azure.siterecovery.ProtectionContainerMapping("container-mapping", {
 *     name: "container-mapping",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     recoveryFabricName: primaryFabric.name,
 *     recoverySourceProtectionContainerName: primaryProtectionContainer.name,
 *     recoveryTargetProtectionContainerId: secondaryProtectionContainer.id,
 *     recoveryReplicationPolicyId: policy.id,
 * });
 * const secondaryVirtualNetwork = new azure.network.VirtualNetwork("secondary", {
 *     name: "network2",
 *     resourceGroupName: secondary.name,
 *     addressSpaces: ["192.168.2.0/24"],
 *     location: secondary.location,
 * });
 * const network_mapping = new azure.siterecovery.NetworkMapping("network-mapping", {
 *     name: "network-mapping",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     sourceRecoveryFabricName: primaryFabric.name,
 *     targetRecoveryFabricName: secondaryFabric.name,
 *     sourceNetworkId: primaryVirtualNetwork.id,
 *     targetNetworkId: secondaryVirtualNetwork.id,
 * });
 * const primaryAccount = new azure.storage.Account("primary", {
 *     name: "primaryrecoverycache",
 *     location: primary.location,
 *     resourceGroupName: primary.name,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const secondarySubnet = new azure.network.Subnet("secondary", {
 *     name: "network2-subnet",
 *     resourceGroupName: secondary.name,
 *     virtualNetworkName: secondaryVirtualNetwork.name,
 *     addressPrefixes: ["192.168.2.0/24"],
 * });
 * const secondaryPublicIp = new azure.network.PublicIp("secondary", {
 *     name: "vm-public-ip-secondary",
 *     allocationMethod: "Static",
 *     location: secondary.location,
 *     resourceGroupName: secondary.name,
 *     sku: "Basic",
 * });
 * const vm_replication = new azure.siterecovery.ReplicatedVM("vm-replication", {
 *     name: "vm-replication",
 *     resourceGroupName: secondary.name,
 *     recoveryVaultName: vault.name,
 *     sourceRecoveryFabricName: primaryFabric.name,
 *     sourceVmId: vm.id,
 *     recoveryReplicationPolicyId: policy.id,
 *     sourceRecoveryProtectionContainerName: primaryProtectionContainer.name,
 *     targetResourceGroupId: secondary.id,
 *     targetRecoveryFabricId: secondaryFabric.id,
 *     targetRecoveryProtectionContainerId: secondaryProtectionContainer.id,
 *     managedDisks: [{
 *         diskId: vm.storageOsDisk.apply(storageOsDisk => storageOsDisk.managedDiskId),
 *         stagingStorageAccountId: primaryAccount.id,
 *         targetResourceGroupId: secondary.id,
 *         targetDiskType: "Premium_LRS",
 *         targetReplicaDiskType: "Premium_LRS",
 *     }],
 *     networkInterfaces: [{
 *         sourceNetworkInterfaceId: vmNetworkInterface.id,
 *         targetSubnetName: secondarySubnet.name,
 *         recoveryPublicIpAddressId: secondaryPublicIp.id,
 *     }],
 * }, {
 *     dependsOn: [
 *         container_mapping,
 *         network_mapping,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Site Recovery Replicated VM's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
 * ```
 */
class ReplicatedVM extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["managedDisks"] = state ? state.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = state ? state.multiVmGroupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = state ? state.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sourceRecoveryFabricName"] = state ? state.sourceRecoveryFabricName : undefined;
            resourceInputs["sourceRecoveryProtectionContainerName"] = state ? state.sourceRecoveryProtectionContainerName : undefined;
            resourceInputs["sourceVmId"] = state ? state.sourceVmId : undefined;
            resourceInputs["targetAvailabilitySetId"] = state ? state.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticStorageAccountId"] = state ? state.targetBootDiagnosticStorageAccountId : undefined;
            resourceInputs["targetCapacityReservationGroupId"] = state ? state.targetCapacityReservationGroupId : undefined;
            resourceInputs["targetEdgeZone"] = state ? state.targetEdgeZone : undefined;
            resourceInputs["targetNetworkId"] = state ? state.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = state ? state.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetRecoveryFabricId"] = state ? state.targetRecoveryFabricId : undefined;
            resourceInputs["targetRecoveryProtectionContainerId"] = state ? state.targetRecoveryProtectionContainerId : undefined;
            resourceInputs["targetResourceGroupId"] = state ? state.targetResourceGroupId : undefined;
            resourceInputs["targetVirtualMachineScaleSetId"] = state ? state.targetVirtualMachineScaleSetId : undefined;
            resourceInputs["targetVirtualMachineSize"] = state ? state.targetVirtualMachineSize : undefined;
            resourceInputs["targetZone"] = state ? state.targetZone : undefined;
            resourceInputs["testNetworkId"] = state ? state.testNetworkId : undefined;
            resourceInputs["unmanagedDisks"] = state ? state.unmanagedDisks : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.recoveryReplicationPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryReplicationPolicyId'");
            }
            if ((!args || args.recoveryVaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sourceRecoveryFabricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRecoveryFabricName'");
            }
            if ((!args || args.sourceRecoveryProtectionContainerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRecoveryProtectionContainerName'");
            }
            if ((!args || args.sourceVmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVmId'");
            }
            if ((!args || args.targetRecoveryFabricId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRecoveryFabricId'");
            }
            if ((!args || args.targetRecoveryProtectionContainerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRecoveryProtectionContainerId'");
            }
            if ((!args || args.targetResourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceGroupId'");
            }
            resourceInputs["managedDisks"] = args ? args.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = args ? args.multiVmGroupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = args ? args.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sourceRecoveryFabricName"] = args ? args.sourceRecoveryFabricName : undefined;
            resourceInputs["sourceRecoveryProtectionContainerName"] = args ? args.sourceRecoveryProtectionContainerName : undefined;
            resourceInputs["sourceVmId"] = args ? args.sourceVmId : undefined;
            resourceInputs["targetAvailabilitySetId"] = args ? args.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticStorageAccountId"] = args ? args.targetBootDiagnosticStorageAccountId : undefined;
            resourceInputs["targetCapacityReservationGroupId"] = args ? args.targetCapacityReservationGroupId : undefined;
            resourceInputs["targetEdgeZone"] = args ? args.targetEdgeZone : undefined;
            resourceInputs["targetNetworkId"] = args ? args.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = args ? args.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetRecoveryFabricId"] = args ? args.targetRecoveryFabricId : undefined;
            resourceInputs["targetRecoveryProtectionContainerId"] = args ? args.targetRecoveryProtectionContainerId : undefined;
            resourceInputs["targetResourceGroupId"] = args ? args.targetResourceGroupId : undefined;
            resourceInputs["targetVirtualMachineScaleSetId"] = args ? args.targetVirtualMachineScaleSetId : undefined;
            resourceInputs["targetVirtualMachineSize"] = args ? args.targetVirtualMachineSize : undefined;
            resourceInputs["targetZone"] = args ? args.targetZone : undefined;
            resourceInputs["testNetworkId"] = args ? args.testNetworkId : undefined;
            resourceInputs["unmanagedDisks"] = args ? args.unmanagedDisks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReplicatedVM.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ReplicatedVM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReplicatedVM(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReplicatedVM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicatedVM.__pulumiType;
    }
}
exports.ReplicatedVM = ReplicatedVM;
/** @internal */
ReplicatedVM.__pulumiType = 'azure:siterecovery/replicatedVM:ReplicatedVM';
//# sourceMappingURL=replicatedVM.js.map