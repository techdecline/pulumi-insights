"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VmwareReplicatedVm = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a VMWare replicated VM using Azure Site Recovery (VMWare to Azure only). A replicated VM keeps a copiously updated image of the VM in Azure in order to be able to start the VM in Azure in case of a disaster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West US",
 * });
 * const exampleVault = new azure.recoveryservices.Vault("example", {
 *     name: "example-recovery-vault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 * });
 * const exampleVMWareReplicationPolicy = new azure.siterecovery.VMWareReplicationPolicy("example", {
 *     recoveryVaultId: exampleVault.id,
 *     name: "example-policy",
 *     recoveryPointRetentionInMinutes: 1440,
 *     applicationConsistentSnapshotFrequencyInMinutes: 240,
 * });
 * const test = new azure.siterecovery.VmwareReplicationPolicyAssociation("test", {
 *     name: "example-association",
 *     recoveryVaultId: exampleVault.id,
 *     policyId: exampleVMWareReplicationPolicy.id,
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestorageacc",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountKind: "StorageV2",
 *     accountReplicationType: "LRS",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-net",
 *     resourceGroupName: example.name,
 *     addressSpaces: ["192.168.2.0/24"],
 *     location: example.location,
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-subnet",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["192.168.2.0/24"],
 * });
 * const exampleVmwareReplicatedVm = new azure.siterecovery.VmwareReplicatedVm("example", {
 *     name: "example-vmware-vm",
 *     recoveryVaultId: exampleVault.id,
 *     sourceVmName: "example-vm",
 *     applianceName: "example-appliance",
 *     recoveryReplicationPolicyId: exampleAzurermSiteRecoveryVmwareReplicationPolicyAssociation.policyId,
 *     physicalServerCredentialName: "example-creds",
 *     licenseType: "NotSpecified",
 *     targetBootDiagnosticsStorageAccountId: exampleAccount.id,
 *     targetVmName: "example_replicated_vm",
 *     targetResourceGroupId: example.id,
 *     defaultLogStorageAccountId: exampleAccount.id,
 *     defaultRecoveryDiskType: "Standard_LRS",
 *     targetNetworkId: exampleVirtualNetwork.id,
 *     networkInterfaces: [{
 *         sourceMacAddress: "00:00:00:00:00:00",
 *         targetSubnetName: exampleSubnet.name,
 *         isPrimary: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Site Recovery VMWare Replicated VM's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:siterecovery/vmwareReplicatedVm:VmwareReplicatedVm vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
 * ```
 */
class VmwareReplicatedVm extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["applianceName"] = state ? state.applianceName : undefined;
            resourceInputs["defaultLogStorageAccountId"] = state ? state.defaultLogStorageAccountId : undefined;
            resourceInputs["defaultRecoveryDiskType"] = state ? state.defaultRecoveryDiskType : undefined;
            resourceInputs["defaultTargetDiskEncryptionSetId"] = state ? state.defaultTargetDiskEncryptionSetId : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["managedDisks"] = state ? state.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = state ? state.multiVmGroupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["physicalServerCredentialName"] = state ? state.physicalServerCredentialName : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = state ? state.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultId"] = state ? state.recoveryVaultId : undefined;
            resourceInputs["sourceVmName"] = state ? state.sourceVmName : undefined;
            resourceInputs["targetAvailabilitySetId"] = state ? state.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticsStorageAccountId"] = state ? state.targetBootDiagnosticsStorageAccountId : undefined;
            resourceInputs["targetNetworkId"] = state ? state.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = state ? state.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetResourceGroupId"] = state ? state.targetResourceGroupId : undefined;
            resourceInputs["targetVmName"] = state ? state.targetVmName : undefined;
            resourceInputs["targetVmSize"] = state ? state.targetVmSize : undefined;
            resourceInputs["targetZone"] = state ? state.targetZone : undefined;
            resourceInputs["testNetworkId"] = state ? state.testNetworkId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.applianceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applianceName'");
            }
            if ((!args || args.physicalServerCredentialName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalServerCredentialName'");
            }
            if ((!args || args.recoveryReplicationPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryReplicationPolicyId'");
            }
            if ((!args || args.recoveryVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultId'");
            }
            if ((!args || args.sourceVmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVmName'");
            }
            if ((!args || args.targetResourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceGroupId'");
            }
            if ((!args || args.targetVmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetVmName'");
            }
            resourceInputs["applianceName"] = args ? args.applianceName : undefined;
            resourceInputs["defaultLogStorageAccountId"] = args ? args.defaultLogStorageAccountId : undefined;
            resourceInputs["defaultRecoveryDiskType"] = args ? args.defaultRecoveryDiskType : undefined;
            resourceInputs["defaultTargetDiskEncryptionSetId"] = args ? args.defaultTargetDiskEncryptionSetId : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["managedDisks"] = args ? args.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = args ? args.multiVmGroupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["physicalServerCredentialName"] = args ? args.physicalServerCredentialName : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = args ? args.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultId"] = args ? args.recoveryVaultId : undefined;
            resourceInputs["sourceVmName"] = args ? args.sourceVmName : undefined;
            resourceInputs["targetAvailabilitySetId"] = args ? args.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticsStorageAccountId"] = args ? args.targetBootDiagnosticsStorageAccountId : undefined;
            resourceInputs["targetNetworkId"] = args ? args.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = args ? args.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetResourceGroupId"] = args ? args.targetResourceGroupId : undefined;
            resourceInputs["targetVmName"] = args ? args.targetVmName : undefined;
            resourceInputs["targetVmSize"] = args ? args.targetVmSize : undefined;
            resourceInputs["targetZone"] = args ? args.targetZone : undefined;
            resourceInputs["testNetworkId"] = args ? args.testNetworkId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmwareReplicatedVm.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VmwareReplicatedVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VmwareReplicatedVm(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VmwareReplicatedVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareReplicatedVm.__pulumiType;
    }
}
exports.VmwareReplicatedVm = VmwareReplicatedVm;
/** @internal */
VmwareReplicatedVm.__pulumiType = 'azure:siterecovery/vmwareReplicatedVm:VmwareReplicatedVm';
//# sourceMappingURL=vmwareReplicatedVm.js.map