"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperVReplicationPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Azure Site Recovery replication policy for HyperV within a Recovery Vault. Replication policies define the frequency at which recovery points are created and how long they are stored.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "East US",
 * });
 * const vault = new azure.recoveryservices.Vault("vault", {
 *     name: "example-recovery-vault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 * });
 * const policy = new azure.siterecovery.HyperVReplicationPolicy("policy", {
 *     name: "policy",
 *     recoveryVaultId: vault.id,
 *     recoveryPointRetentionInHours: 2,
 *     applicationConsistentSnapshotFrequencyInHours: 1,
 *     replicationIntervalInSeconds: 300,
 * });
 * ```
 *
 * ## Import
 *
 * Site Recovery Replication Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:siterecovery/hyperVReplicationPolicy:HyperVReplicationPolicy mypolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationPolicies/policy-name
 * ```
 */
class HyperVReplicationPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["applicationConsistentSnapshotFrequencyInHours"] = state ? state.applicationConsistentSnapshotFrequencyInHours : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryPointRetentionInHours"] = state ? state.recoveryPointRetentionInHours : undefined;
            resourceInputs["recoveryVaultId"] = state ? state.recoveryVaultId : undefined;
            resourceInputs["replicationIntervalInSeconds"] = state ? state.replicationIntervalInSeconds : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.applicationConsistentSnapshotFrequencyInHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationConsistentSnapshotFrequencyInHours'");
            }
            if ((!args || args.recoveryPointRetentionInHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryPointRetentionInHours'");
            }
            if ((!args || args.recoveryVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultId'");
            }
            if ((!args || args.replicationIntervalInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationIntervalInSeconds'");
            }
            resourceInputs["applicationConsistentSnapshotFrequencyInHours"] = args ? args.applicationConsistentSnapshotFrequencyInHours : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryPointRetentionInHours"] = args ? args.recoveryPointRetentionInHours : undefined;
            resourceInputs["recoveryVaultId"] = args ? args.recoveryVaultId : undefined;
            resourceInputs["replicationIntervalInSeconds"] = args ? args.replicationIntervalInSeconds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HyperVReplicationPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing HyperVReplicationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HyperVReplicationPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HyperVReplicationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HyperVReplicationPolicy.__pulumiType;
    }
}
exports.HyperVReplicationPolicy = HyperVReplicationPolicy;
/** @internal */
HyperVReplicationPolicy.__pulumiType = 'azure:siterecovery/hyperVReplicationPolicy:HyperVReplicationPolicy';
//# sourceMappingURL=hyperVReplicationPolicy.js.map