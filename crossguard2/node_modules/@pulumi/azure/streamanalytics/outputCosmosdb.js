"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputCosmosdb = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Stream Analytics Output to CosmosDB.
 *
 * ## Import
 *
 * Stream Analytics Outputs for CosmosDB can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:streamanalytics/outputCosmosdb:OutputCosmosdb example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
 * ```
 */
class OutputCosmosdb extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["containerName"] = state ? state.containerName : undefined;
            resourceInputs["cosmosdbAccountKey"] = state ? state.cosmosdbAccountKey : undefined;
            resourceInputs["cosmosdbSqlDatabaseId"] = state ? state.cosmosdbSqlDatabaseId : undefined;
            resourceInputs["documentId"] = state ? state.documentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitionKey"] = state ? state.partitionKey : undefined;
            resourceInputs["streamAnalyticsJobId"] = state ? state.streamAnalyticsJobId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if ((!args || args.cosmosdbAccountKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosdbAccountKey'");
            }
            if ((!args || args.cosmosdbSqlDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosdbSqlDatabaseId'");
            }
            if ((!args || args.streamAnalyticsJobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobId'");
            }
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["containerName"] = args ? args.containerName : undefined;
            resourceInputs["cosmosdbAccountKey"] = (args === null || args === void 0 ? void 0 : args.cosmosdbAccountKey) ? pulumi.secret(args.cosmosdbAccountKey) : undefined;
            resourceInputs["cosmosdbSqlDatabaseId"] = args ? args.cosmosdbSqlDatabaseId : undefined;
            resourceInputs["documentId"] = args ? args.documentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitionKey"] = args ? args.partitionKey : undefined;
            resourceInputs["streamAnalyticsJobId"] = args ? args.streamAnalyticsJobId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cosmosdbAccountKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OutputCosmosdb.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing OutputCosmosdb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OutputCosmosdb(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OutputCosmosdb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutputCosmosdb.__pulumiType;
    }
}
exports.OutputCosmosdb = OutputCosmosdb;
/** @internal */
OutputCosmosdb.__pulumiType = 'azure:streamanalytics/outputCosmosdb:OutputCosmosdb';
//# sourceMappingURL=outputCosmosdb.js.map