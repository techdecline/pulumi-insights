"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSeriesDatabaseConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Digital Twins Time Series Database Connection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleInstance = new azure.digitaltwins.Instance("example", {
 *     name: "example-DT",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
 *     name: "exampleEventHubNamespace",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: "Standard",
 * });
 * const exampleEventHub = new azure.eventhub.EventHub("example", {
 *     name: "exampleEventHub",
 *     namespaceName: exampleEventHubNamespace.name,
 *     resourceGroupName: example.name,
 *     partitionCount: 2,
 *     messageRetention: 7,
 * });
 * const exampleConsumerGroup = new azure.eventhub.ConsumerGroup("example", {
 *     name: "example-consumergroup",
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: example.name,
 * });
 * const exampleCluster = new azure.kusto.Cluster("example", {
 *     name: "examplekc",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     sku: {
 *         name: "Dev(No SLA)_Standard_D11_v2",
 *         capacity: 1,
 *     },
 * });
 * const exampleDatabase = new azure.kusto.Database("example", {
 *     name: "example-kusto-database",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     clusterName: exampleCluster.name,
 * });
 * const databaseContributor = new azure.authorization.Assignment("database_contributor", {
 *     scope: exampleDatabase.id,
 *     principalId: exampleInstance.identity.apply(identity => identity?.principalId),
 *     roleDefinitionName: "Contributor",
 * });
 * const eventhubDataOwner = new azure.authorization.Assignment("eventhub_data_owner", {
 *     scope: exampleEventHub.id,
 *     principalId: exampleInstance.identity.apply(identity => identity?.principalId),
 *     roleDefinitionName: "Azure Event Hubs Data Owner",
 * });
 * const exampleDatabasePrincipalAssignment = new azure.kusto.DatabasePrincipalAssignment("example", {
 *     name: "dataadmin",
 *     resourceGroupName: example.name,
 *     clusterName: exampleCluster.name,
 *     databaseName: exampleDatabase.name,
 *     tenantId: exampleInstance.identity.apply(identity => identity?.tenantId),
 *     principalId: exampleInstance.identity.apply(identity => identity?.principalId),
 *     principalType: "App",
 *     role: "Admin",
 * });
 * const exampleTimeSeriesDatabaseConnection = new azure.digitaltwins.TimeSeriesDatabaseConnection("example", {
 *     name: "example-connection",
 *     digitalTwinsId: exampleInstance.id,
 *     eventhubName: exampleEventHub.name,
 *     eventhubNamespaceId: exampleEventHubNamespace.id,
 *     eventhubNamespaceEndpointUri: pulumi.interpolate`sb://${exampleEventHubNamespace.name}.servicebus.windows.net`,
 *     eventhubConsumerGroupName: exampleConsumerGroup.name,
 *     kustoClusterId: exampleCluster.id,
 *     kustoClusterUri: exampleCluster.uri,
 *     kustoDatabaseName: exampleDatabase.name,
 *     kustoTableName: "exampleTable",
 * }, {
 *     dependsOn: [
 *         databaseContributor,
 *         eventhubDataOwner,
 *         exampleDatabasePrincipalAssignment,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Digital Twins Time Series Database Connections can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:digitaltwins/timeSeriesDatabaseConnection:TimeSeriesDatabaseConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DigitalTwins/digitalTwinsInstances/dt1/timeSeriesDatabaseConnections/connection1
 * ```
 */
class TimeSeriesDatabaseConnection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["digitalTwinsId"] = state ? state.digitalTwinsId : undefined;
            resourceInputs["eventhubConsumerGroupName"] = state ? state.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubName"] = state ? state.eventhubName : undefined;
            resourceInputs["eventhubNamespaceEndpointUri"] = state ? state.eventhubNamespaceEndpointUri : undefined;
            resourceInputs["eventhubNamespaceId"] = state ? state.eventhubNamespaceId : undefined;
            resourceInputs["kustoClusterId"] = state ? state.kustoClusterId : undefined;
            resourceInputs["kustoClusterUri"] = state ? state.kustoClusterUri : undefined;
            resourceInputs["kustoDatabaseName"] = state ? state.kustoDatabaseName : undefined;
            resourceInputs["kustoTableName"] = state ? state.kustoTableName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.digitalTwinsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'digitalTwinsId'");
            }
            if ((!args || args.eventhubName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubName'");
            }
            if ((!args || args.eventhubNamespaceEndpointUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubNamespaceEndpointUri'");
            }
            if ((!args || args.eventhubNamespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubNamespaceId'");
            }
            if ((!args || args.kustoClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kustoClusterId'");
            }
            if ((!args || args.kustoClusterUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kustoClusterUri'");
            }
            if ((!args || args.kustoDatabaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kustoDatabaseName'");
            }
            resourceInputs["digitalTwinsId"] = args ? args.digitalTwinsId : undefined;
            resourceInputs["eventhubConsumerGroupName"] = args ? args.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubName"] = args ? args.eventhubName : undefined;
            resourceInputs["eventhubNamespaceEndpointUri"] = args ? args.eventhubNamespaceEndpointUri : undefined;
            resourceInputs["eventhubNamespaceId"] = args ? args.eventhubNamespaceId : undefined;
            resourceInputs["kustoClusterId"] = args ? args.kustoClusterId : undefined;
            resourceInputs["kustoClusterUri"] = args ? args.kustoClusterUri : undefined;
            resourceInputs["kustoDatabaseName"] = args ? args.kustoDatabaseName : undefined;
            resourceInputs["kustoTableName"] = args ? args.kustoTableName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TimeSeriesDatabaseConnection.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing TimeSeriesDatabaseConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TimeSeriesDatabaseConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TimeSeriesDatabaseConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimeSeriesDatabaseConnection.__pulumiType;
    }
}
exports.TimeSeriesDatabaseConnection = TimeSeriesDatabaseConnection;
/** @internal */
TimeSeriesDatabaseConnection.__pulumiType = 'azure:digitaltwins/timeSeriesDatabaseConnection:TimeSeriesDatabaseConnection';
//# sourceMappingURL=timeSeriesDatabaseConnection.js.map