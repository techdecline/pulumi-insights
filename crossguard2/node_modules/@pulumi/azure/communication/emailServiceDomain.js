"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailServiceDomain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Email Communication Service Domain.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleEmailService = new azure.communication.EmailService("example", {
 *     name: "example-emailcommunicationservice",
 *     resourceGroupName: example.name,
 *     dataLocation: "United States",
 * });
 * const exampleEmailServiceDomain = new azure.communication.EmailServiceDomain("example", {
 *     name: "AzureManagedDomain",
 *     emailServiceId: exampleEmailService.id,
 *     domainManagement: "AzureManaged",
 * });
 * ```
 *
 * ## Import
 *
 * Communication Services can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:communication/emailServiceDomain:EmailServiceDomain example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Communication/emailServices/emailCommunicationService1/domains/domain1
 * ```
 */
class EmailServiceDomain extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["domainManagement"] = state ? state.domainManagement : undefined;
            resourceInputs["emailServiceId"] = state ? state.emailServiceId : undefined;
            resourceInputs["fromSenderDomain"] = state ? state.fromSenderDomain : undefined;
            resourceInputs["mailFromSenderDomain"] = state ? state.mailFromSenderDomain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userEngagementTrackingEnabled"] = state ? state.userEngagementTrackingEnabled : undefined;
            resourceInputs["verificationRecords"] = state ? state.verificationRecords : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainManagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainManagement'");
            }
            if ((!args || args.emailServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emailServiceId'");
            }
            resourceInputs["domainManagement"] = args ? args.domainManagement : undefined;
            resourceInputs["emailServiceId"] = args ? args.emailServiceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userEngagementTrackingEnabled"] = args ? args.userEngagementTrackingEnabled : undefined;
            resourceInputs["fromSenderDomain"] = undefined /*out*/;
            resourceInputs["mailFromSenderDomain"] = undefined /*out*/;
            resourceInputs["verificationRecords"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmailServiceDomain.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EmailServiceDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EmailServiceDomain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EmailServiceDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmailServiceDomain.__pulumiType;
    }
}
exports.EmailServiceDomain = EmailServiceDomain;
/** @internal */
EmailServiceDomain.__pulumiType = 'azure:communication/emailServiceDomain:EmailServiceDomain';
//# sourceMappingURL=emailServiceDomain.js.map