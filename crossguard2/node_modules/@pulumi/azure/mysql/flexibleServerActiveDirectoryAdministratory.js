"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlexibleServerActiveDirectoryAdministratory = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Active Directory administrator on a MySQL Flexible Server
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "exampleUAI",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleFlexibleServer = new azure.mysql.FlexibleServer("example", {
 *     name: "example-mysqlfs",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorLogin: "_admin_Terraform_892123456789312",
 *     administratorPassword: "QAZwsx123",
 *     skuName: "B_Standard_B1s",
 *     zone: "2",
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 * });
 * const exampleFlexibleServerActiveDirectoryAdministratory = new azure.mysql.FlexibleServerActiveDirectoryAdministratory("example", {
 *     serverId: exampleFlexibleServer.id,
 *     identityId: exampleUserAssignedIdentity.id,
 *     login: "sqladmin",
 *     objectId: current.then(current => current.clientId),
 *     tenantId: current.then(current => current.tenantId),
 * });
 * ```
 *
 * ## Import
 *
 * A MySQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforMySQL/flexibleServers/server1/administrators/ActiveDirectory
 * ```
 */
class FlexibleServerActiveDirectoryAdministratory extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.identityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityId'");
            }
            if ((!args || args.login === undefined) && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if ((!args || args.objectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["identityId"] = args ? args.identityId : undefined;
            resourceInputs["login"] = args ? args.login : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(FlexibleServerActiveDirectoryAdministratory.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FlexibleServerActiveDirectoryAdministratory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FlexibleServerActiveDirectoryAdministratory(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlexibleServerActiveDirectoryAdministratory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlexibleServerActiveDirectoryAdministratory.__pulumiType;
    }
}
exports.FlexibleServerActiveDirectoryAdministratory = FlexibleServerActiveDirectoryAdministratory;
/** @internal */
FlexibleServerActiveDirectoryAdministratory.__pulumiType = 'azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory';
//# sourceMappingURL=flexibleServerActiveDirectoryAdministratory.js.map