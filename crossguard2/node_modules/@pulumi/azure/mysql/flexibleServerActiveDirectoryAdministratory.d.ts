import * as pulumi from "@pulumi/pulumi";
/**
 * Manages an Active Directory administrator on a MySQL Flexible Server
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("example", {
 *     name: "exampleUAI",
 *     resourceGroupName: example.name,
 *     location: example.location,
 * });
 * const exampleFlexibleServer = new azure.mysql.FlexibleServer("example", {
 *     name: "example-mysqlfs",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     administratorLogin: "_admin_Terraform_892123456789312",
 *     administratorPassword: "QAZwsx123",
 *     skuName: "B_Standard_B1s",
 *     zone: "2",
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 * });
 * const exampleFlexibleServerActiveDirectoryAdministratory = new azure.mysql.FlexibleServerActiveDirectoryAdministratory("example", {
 *     serverId: exampleFlexibleServer.id,
 *     identityId: exampleUserAssignedIdentity.id,
 *     login: "sqladmin",
 *     objectId: current.then(current => current.clientId),
 *     tenantId: current.then(current => current.tenantId),
 * });
 * ```
 *
 * ## Import
 *
 * A MySQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforMySQL/flexibleServers/server1/administrators/ActiveDirectory
 * ```
 */
export declare class FlexibleServerActiveDirectoryAdministratory extends pulumi.CustomResource {
    /**
     * Get an existing FlexibleServerActiveDirectoryAdministratory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlexibleServerActiveDirectoryAdministratoryState, opts?: pulumi.CustomResourceOptions): FlexibleServerActiveDirectoryAdministratory;
    /**
     * Returns true if the given object is an instance of FlexibleServerActiveDirectoryAdministratory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FlexibleServerActiveDirectoryAdministratory;
    /**
     * The resource ID of the identity used for AAD Authentication.
     */
    readonly identityId: pulumi.Output<string>;
    /**
     * The login name of the principal to set as the server administrator
     */
    readonly login: pulumi.Output<string>;
    /**
     * The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     */
    readonly objectId: pulumi.Output<string>;
    /**
     * The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    readonly serverId: pulumi.Output<string>;
    /**
     * The Azure Tenant ID.
     */
    readonly tenantId: pulumi.Output<string>;
    /**
     * Create a FlexibleServerActiveDirectoryAdministratory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlexibleServerActiveDirectoryAdministratoryArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FlexibleServerActiveDirectoryAdministratory resources.
 */
export interface FlexibleServerActiveDirectoryAdministratoryState {
    /**
     * The resource ID of the identity used for AAD Authentication.
     */
    identityId?: pulumi.Input<string>;
    /**
     * The login name of the principal to set as the server administrator
     */
    login?: pulumi.Input<string>;
    /**
     * The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The Azure Tenant ID.
     */
    tenantId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a FlexibleServerActiveDirectoryAdministratory resource.
 */
export interface FlexibleServerActiveDirectoryAdministratoryArgs {
    /**
     * The resource ID of the identity used for AAD Authentication.
     */
    identityId: pulumi.Input<string>;
    /**
     * The login name of the principal to set as the server administrator
     */
    login: pulumi.Input<string>;
    /**
     * The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
     */
    objectId: pulumi.Input<string>;
    /**
     * The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
     */
    serverId: pulumi.Input<string>;
    /**
     * The Azure Tenant ID.
     */
    tenantId: pulumi.Input<string>;
}
