"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUpload = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the File Upload of an IoT Hub.
 *
 * > **NOTE:** File upload can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FileUpload` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleAccount = new azure.storage.Account("example", {
 *     name: "examplestorage",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleContainer = new azure.storage.Container("example", {
 *     name: "examplecontainer",
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "private",
 * });
 * const exampleIoTHub = new azure.iot.IoTHub("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: {
 *         name: "S1",
 *         capacity: 1,
 *     },
 * });
 * const exampleFileUpload = new azure.iot.FileUpload("example", {
 *     iothubId: exampleIoTHub.id,
 *     connectionString: exampleAccount.primaryBlobConnectionString,
 *     containerName: exampleContainer.name,
 * });
 * ```
 *
 * ## Import
 *
 * IoT Hub File Uploads can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:iot/fileUpload:FileUpload example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1
 * ```
 */
class FileUpload extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["containerName"] = state ? state.containerName : undefined;
            resourceInputs["defaultTtl"] = state ? state.defaultTtl : undefined;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
            resourceInputs["iothubId"] = state ? state.iothubId : undefined;
            resourceInputs["lockDuration"] = state ? state.lockDuration : undefined;
            resourceInputs["maxDeliveryCount"] = state ? state.maxDeliveryCount : undefined;
            resourceInputs["notificationsEnabled"] = state ? state.notificationsEnabled : undefined;
            resourceInputs["sasTtl"] = state ? state.sasTtl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.connectionString === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionString'");
            }
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if ((!args || args.iothubId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iothubId'");
            }
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["connectionString"] = (args === null || args === void 0 ? void 0 : args.connectionString) ? pulumi.secret(args.connectionString) : undefined;
            resourceInputs["containerName"] = args ? args.containerName : undefined;
            resourceInputs["defaultTtl"] = args ? args.defaultTtl : undefined;
            resourceInputs["identityId"] = args ? args.identityId : undefined;
            resourceInputs["iothubId"] = args ? args.iothubId : undefined;
            resourceInputs["lockDuration"] = args ? args.lockDuration : undefined;
            resourceInputs["maxDeliveryCount"] = args ? args.maxDeliveryCount : undefined;
            resourceInputs["notificationsEnabled"] = args ? args.notificationsEnabled : undefined;
            resourceInputs["sasTtl"] = args ? args.sasTtl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FileUpload.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FileUpload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FileUpload(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FileUpload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileUpload.__pulumiType;
    }
}
exports.FileUpload = FileUpload;
/** @internal */
FileUpload.__pulumiType = 'azure:iot/fileUpload:FileUpload';
//# sourceMappingURL=fileUpload.js.map