"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThreeTierVirtualInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an SAP Three Tier Virtual Instance with a new SAP System.
 *
 * > **Note:** Before using this resource, it's required to submit the request of registering the Resource Provider with Azure CLI `az provider register --namespace "Microsoft.Workloads"`. The Resource Provider can take a while to register, you can check the status by running `az provider show --namespace "Microsoft.Workloads" --query "registrationState"`. Once this outputs "Registered" the Resource Provider is available for use.
 *
 * ## Import
 *
 * SAP Three Tier Virtual Instances with new SAP Systems can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:workloadssap/threeTierVirtualInstance:ThreeTierVirtualInstance example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Workloads/sapVirtualInstances/vis1
 * ```
 */
class ThreeTierVirtualInstance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appLocation"] = state ? state.appLocation : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedResourceGroupName"] = state ? state.managedResourceGroupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sapFqdn"] = state ? state.sapFqdn : undefined;
            resourceInputs["sapProduct"] = state ? state.sapProduct : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threeTierConfiguration"] = state ? state.threeTierConfiguration : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.appLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appLocation'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sapFqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sapFqdn'");
            }
            if ((!args || args.sapProduct === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sapProduct'");
            }
            if ((!args || args.threeTierConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threeTierConfiguration'");
            }
            resourceInputs["appLocation"] = args ? args.appLocation : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedResourceGroupName"] = args ? args.managedResourceGroupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sapFqdn"] = args ? args.sapFqdn : undefined;
            resourceInputs["sapProduct"] = args ? args.sapProduct : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threeTierConfiguration"] = args ? args.threeTierConfiguration : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreeTierVirtualInstance.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ThreeTierVirtualInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ThreeTierVirtualInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ThreeTierVirtualInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreeTierVirtualInstance.__pulumiType;
    }
}
exports.ThreeTierVirtualInstance = ThreeTierVirtualInstance;
/** @internal */
ThreeTierVirtualInstance.__pulumiType = 'azure:workloadssap/threeTierVirtualInstance:ThreeTierVirtualInstance';
//# sourceMappingURL=threeTierVirtualInstance.js.map