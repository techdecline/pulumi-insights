import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Use this data source to access information about an existing Databricks Access Connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.databricks.getAccessConnector({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export declare function getAccessConnector(args: GetAccessConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessConnectorResult>;
/**
 * A collection of arguments for invoking getAccessConnector.
 */
export interface GetAccessConnectorArgs {
    /**
     * The name of this Databricks Access Connector.
     */
    name: string;
    /**
     * The name of the Resource Group where the Databricks Access Connector exists. Changing this forces a new Databricks Access Connector to be created.
     */
    resourceGroupName: string;
}
/**
 * A collection of values returned by getAccessConnector.
 */
export interface GetAccessConnectorResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A `identity` block as defined below.
     */
    readonly identities: outputs.databricks.GetAccessConnectorIdentity[];
    /**
     * The Azure Region where the Databricks Access Connector exists.
     */
    readonly location: string;
    readonly name: string;
    readonly resourceGroupName: string;
    /**
     * A mapping of tags assigned to the Databricks Access Connector.
     */
    readonly tags: {
        [key: string]: string;
    };
}
/**
 * Use this data source to access information about an existing Databricks Access Connector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = azure.databricks.getAccessConnector({
 *     name: "existing",
 *     resourceGroupName: "existing",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export declare function getAccessConnectorOutput(args: GetAccessConnectorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAccessConnectorResult>;
/**
 * A collection of arguments for invoking getAccessConnector.
 */
export interface GetAccessConnectorOutputArgs {
    /**
     * The name of this Databricks Access Connector.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Databricks Access Connector exists. Changing this forces a new Databricks Access Connector to be created.
     */
    resourceGroupName: pulumi.Input<string>;
}
