"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceRootDbfsCustomerManagedKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Customer Managed Key for the Databricks Workspaces Root Databricks File System(DBFS)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleWorkspace = new azure.databricks.Workspace("example", {
 *     name: "databricks-test",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     sku: "premium",
 *     customerManagedKeyEnabled: true,
 *     tags: {
 *         Environment: "Production",
 *     },
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "examplekeyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     purgeProtectionEnabled: true,
 *     softDeleteRetentionDays: 7,
 * });
 * const terraform = new azure.keyvault.AccessPolicy("terraform", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: exampleKeyVault.tenantId,
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "List",
 *         "Decrypt",
 *         "Sign",
 *         "GetRotationPolicy",
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("example", {
 *     name: "example-certificate",
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [terraform],
 * });
 * const databricks = new azure.keyvault.AccessPolicy("databricks", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: exampleWorkspace.storageAccountIdentities.apply(storageAccountIdentities => storageAccountIdentities[0].tenantId),
 *     objectId: exampleWorkspace.storageAccountIdentities.apply(storageAccountIdentities => storageAccountIdentities[0].principalId),
 *     keyPermissions: [
 *         "Create",
 *         "Delete",
 *         "Get",
 *         "Purge",
 *         "Recover",
 *         "Update",
 *         "List",
 *         "Decrypt",
 *         "Sign",
 *     ],
 * }, {
 *     dependsOn: [exampleWorkspace],
 * });
 * const exampleWorkspaceRootDbfsCustomerManagedKey = new azure.databricks.WorkspaceRootDbfsCustomerManagedKey("example", {
 *     workspaceId: exampleWorkspace.id,
 *     keyVaultKeyId: exampleKey.id,
 * }, {
 *     dependsOn: [databricks],
 * });
 * ```
 *
 * ## Example HCL Configurations
 *
 * * Databricks Workspace with Root Databricks File System Customer Managed Keys
 * * Databricks Workspace with Root Databricks File System Customer Managed Keys in a Different Subscription
 * * Databricks Workspace with Private Endpoint, Customer Managed Keys for Managed Services and Root Databricks File System Customer Managed Keys
 *
 * ## Import
 *
 * Databricks Workspace Root DBFS Customer Managed Key can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:databricks/workspaceRootDbfsCustomerManagedKey:WorkspaceRootDbfsCustomerManagedKey workspace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1
 * ```
 */
class WorkspaceRootDbfsCustomerManagedKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.keyVaultKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultKeyId'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure:databricks/workspaceCustomerManagedKey:WorkspaceCustomerManagedKey" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WorkspaceRootDbfsCustomerManagedKey.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing WorkspaceRootDbfsCustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkspaceRootDbfsCustomerManagedKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkspaceRootDbfsCustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceRootDbfsCustomerManagedKey.__pulumiType;
    }
}
exports.WorkspaceRootDbfsCustomerManagedKey = WorkspaceRootDbfsCustomerManagedKey;
/** @internal */
WorkspaceRootDbfsCustomerManagedKey.__pulumiType = 'azure:databricks/workspaceRootDbfsCustomerManagedKey:WorkspaceRootDbfsCustomerManagedKey';
//# sourceMappingURL=workspaceRootDbfsCustomerManagedKey.js.map