"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlexibleServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a PostgreSQL Flexible Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
 *     name: "example-vn",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("example", {
 *     name: "example-sn",
 *     resourceGroupName: example.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 *     serviceEndpoints: ["Microsoft.Storage"],
 *     delegations: [{
 *         name: "fs",
 *         serviceDelegation: {
 *             name: "Microsoft.DBforPostgreSQL/flexibleServers",
 *             actions: ["Microsoft.Network/virtualNetworks/subnets/join/action"],
 *         },
 *     }],
 * });
 * const exampleZone = new azure.privatedns.Zone("example", {
 *     name: "example.postgres.database.azure.com",
 *     resourceGroupName: example.name,
 * });
 * const exampleZoneVirtualNetworkLink = new azure.privatedns.ZoneVirtualNetworkLink("example", {
 *     name: "exampleVnetZone.com",
 *     privateDnsZoneName: exampleZone.name,
 *     virtualNetworkId: exampleVirtualNetwork.id,
 *     resourceGroupName: example.name,
 * }, {
 *     dependsOn: [exampleSubnet],
 * });
 * const exampleFlexibleServer = new azure.postgresql.FlexibleServer("example", {
 *     name: "example-psqlflexibleserver",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     version: "12",
 *     delegatedSubnetId: exampleSubnet.id,
 *     privateDnsZoneId: exampleZone.id,
 *     publicNetworkAccessEnabled: false,
 *     administratorLogin: "psqladmin",
 *     administratorPassword: "H@Sh1CoR3!",
 *     zone: "1",
 *     storageMb: 32768,
 *     storageTier: "P4",
 *     skuName: "B_Standard_B1ms",
 * }, {
 *     dependsOn: [exampleZoneVirtualNetworkLink],
 * });
 * ```
 *
 * ## `storageTier` defaults based on `storageMb`
 *
 * | `storageMb` | GiB   | TiB | Default | Supported `storageTier`'s           | Provisioned `IOPS`  |
 * |:------------:|:-----:|:---:|:-------:|:------------------------------------:|:-------------------:|
 * | 32768        | 32    |  -  | P4      | P4, P6, P10, P15, P20, P30, P40, P50 | 120                 |
 * | 65536        | 64    |  -  | P6      | P6, P10, P15, P20, P30, P40, P50     | 240                 |
 * | 131072       | 128   |  -  | P10     | P10, P15, P20, P30, P40, P50         | 500                 |
 * | 262144       | 256   |  -  | P15     | P15, P20, P30, P40, P50              | 1,100               |
 * | 524288       | 512   |  -  | P20     | P20, P30, P40, P50                   | 2,300               |
 * | 1048576      | 1024  |  1  | P30     | P30, P40, P50                        | 5,000               |
 * | 2097152      | 2048  |  2  | P40     | P40, P50                             | 7,500               |
 * | 4193280      | 4095  |  4  | P50     | P50                                  | 7,500               |
 * | 4194304      | 4096  |  4  | P50     | P50                                  | 7,500               |
 * | 8388608      | 8192  |  8  | P60     | P60, P70                             | 16,000              |
 * | 16777216     | 16384 |  16 | P70     | P70, P80                             | 18,000              |
 * | 33553408     | 32767 |  32 | P80     | P80                                  | 20,000              |
 *
 * > **Note:** Host Caching (ReadOnly and Read/Write) is supported on disk sizes less than 4194304 MiB. This means any disk that is provisioned up to 4193280 MiB can take advantage of Host Caching. Host caching is not supported for disk sizes larger than 4193280 MiB. For example, a P50 premium disk provisioned at 4193280 GiB can take advantage of Host caching while a P50 disk provisioned at 4194304 MiB cannot. Moving from a smaller disk size to a larger disk size, greater than 4193280 MiB, will cause the disk to lose the disk caching ability.
 *
 * ***
 *
 * ## Import
 *
 * PostgreSQL Flexible Servers can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:postgresql/flexibleServer:FlexibleServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/server1
 * ```
 */
class FlexibleServer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["administratorLogin"] = state ? state.administratorLogin : undefined;
            resourceInputs["administratorPassword"] = state ? state.administratorPassword : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["autoGrowEnabled"] = state ? state.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = state ? state.backupRetentionDays : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["customerManagedKey"] = state ? state.customerManagedKey : undefined;
            resourceInputs["delegatedSubnetId"] = state ? state.delegatedSubnetId : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = state ? state.geoRedundantBackupEnabled : undefined;
            resourceInputs["highAvailability"] = state ? state.highAvailability : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pointInTimeRestoreTimeInUtc"] = state ? state.pointInTimeRestoreTimeInUtc : undefined;
            resourceInputs["privateDnsZoneId"] = state ? state.privateDnsZoneId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["replicationRole"] = state ? state.replicationRole : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["sourceServerId"] = state ? state.sourceServerId : undefined;
            resourceInputs["storageMb"] = state ? state.storageMb : undefined;
            resourceInputs["storageTier"] = state ? state.storageTier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["administratorLogin"] = args ? args.administratorLogin : undefined;
            resourceInputs["administratorPassword"] = (args === null || args === void 0 ? void 0 : args.administratorPassword) ? pulumi.secret(args.administratorPassword) : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["autoGrowEnabled"] = args ? args.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = args ? args.backupRetentionDays : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["customerManagedKey"] = args ? args.customerManagedKey : undefined;
            resourceInputs["delegatedSubnetId"] = args ? args.delegatedSubnetId : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = args ? args.geoRedundantBackupEnabled : undefined;
            resourceInputs["highAvailability"] = args ? args.highAvailability : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pointInTimeRestoreTimeInUtc"] = args ? args.pointInTimeRestoreTimeInUtc : undefined;
            resourceInputs["privateDnsZoneId"] = args ? args.privateDnsZoneId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["replicationRole"] = args ? args.replicationRole : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["sourceServerId"] = args ? args.sourceServerId : undefined;
            resourceInputs["storageMb"] = args ? args.storageMb : undefined;
            resourceInputs["storageTier"] = args ? args.storageTier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FlexibleServer.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FlexibleServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FlexibleServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlexibleServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlexibleServer.__pulumiType;
    }
}
exports.FlexibleServer = FlexibleServer;
/** @internal */
FlexibleServer.__pulumiType = 'azure:postgresql/flexibleServer:FlexibleServer';
//# sourceMappingURL=flexibleServer.js.map