"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkRule = exports.ServerKey = exports.Server = exports.getServerOutput = exports.getServer = exports.getFlexibleServerOutput = exports.getFlexibleServer = exports.FlexibleServerVirtualEndpoint = exports.FlexibleServerFirewallRule = exports.FlexibleServerDatabase = exports.FlexibleServerConfiguration = exports.FlexibleServerActiveDirectoryAdministrator = exports.FlexibleServer = exports.FirewallRule = exports.Database = exports.Configuration = exports.ActiveDirectoryAdministrator = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.ActiveDirectoryAdministrator = null;
utilities.lazyLoad(exports, ["ActiveDirectoryAdministrator"], () => require("./activeDirectoryAdministrator"));
exports.Configuration = null;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));
exports.Database = null;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
exports.FirewallRule = null;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));
exports.FlexibleServer = null;
utilities.lazyLoad(exports, ["FlexibleServer"], () => require("./flexibleServer"));
exports.FlexibleServerActiveDirectoryAdministrator = null;
utilities.lazyLoad(exports, ["FlexibleServerActiveDirectoryAdministrator"], () => require("./flexibleServerActiveDirectoryAdministrator"));
exports.FlexibleServerConfiguration = null;
utilities.lazyLoad(exports, ["FlexibleServerConfiguration"], () => require("./flexibleServerConfiguration"));
exports.FlexibleServerDatabase = null;
utilities.lazyLoad(exports, ["FlexibleServerDatabase"], () => require("./flexibleServerDatabase"));
exports.FlexibleServerFirewallRule = null;
utilities.lazyLoad(exports, ["FlexibleServerFirewallRule"], () => require("./flexibleServerFirewallRule"));
exports.FlexibleServerVirtualEndpoint = null;
utilities.lazyLoad(exports, ["FlexibleServerVirtualEndpoint"], () => require("./flexibleServerVirtualEndpoint"));
exports.getFlexibleServer = null;
exports.getFlexibleServerOutput = null;
utilities.lazyLoad(exports, ["getFlexibleServer", "getFlexibleServerOutput"], () => require("./getFlexibleServer"));
exports.getServer = null;
exports.getServerOutput = null;
utilities.lazyLoad(exports, ["getServer", "getServerOutput"], () => require("./getServer"));
exports.Server = null;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));
exports.ServerKey = null;
utilities.lazyLoad(exports, ["ServerKey"], () => require("./serverKey"));
exports.VirtualNetworkRule = null;
utilities.lazyLoad(exports, ["VirtualNetworkRule"], () => require("./virtualNetworkRule"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:postgresql/activeDirectoryAdministrator:ActiveDirectoryAdministrator":
                return new exports.ActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:postgresql/configuration:Configuration":
                return new exports.Configuration(name, undefined, { urn });
            case "azure:postgresql/database:Database":
                return new exports.Database(name, undefined, { urn });
            case "azure:postgresql/firewallRule:FirewallRule":
                return new exports.FirewallRule(name, undefined, { urn });
            case "azure:postgresql/flexibleServer:FlexibleServer":
                return new exports.FlexibleServer(name, undefined, { urn });
            case "azure:postgresql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator":
                return new exports.FlexibleServerActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:postgresql/flexibleServerConfiguration:FlexibleServerConfiguration":
                return new exports.FlexibleServerConfiguration(name, undefined, { urn });
            case "azure:postgresql/flexibleServerDatabase:FlexibleServerDatabase":
                return new exports.FlexibleServerDatabase(name, undefined, { urn });
            case "azure:postgresql/flexibleServerFirewallRule:FlexibleServerFirewallRule":
                return new exports.FlexibleServerFirewallRule(name, undefined, { urn });
            case "azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint":
                return new exports.FlexibleServerVirtualEndpoint(name, undefined, { urn });
            case "azure:postgresql/server:Server":
                return new exports.Server(name, undefined, { urn });
            case "azure:postgresql/serverKey:ServerKey":
                return new exports.ServerKey(name, undefined, { urn });
            case "azure:postgresql/virtualNetworkRule:VirtualNetworkRule":
                return new exports.VirtualNetworkRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "postgresql/activeDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/configuration", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/database", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/firewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServer", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerActiveDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerFirewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerVirtualEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/server", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/serverKey", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/virtualNetworkRule", _module);
//# sourceMappingURL=index.js.map