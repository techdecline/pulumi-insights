"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlexibleServerVirtualEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows you to create a Virtual Endpoint associated with a Postgres Flexible Replica.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "East US",
 * });
 * const exampleFlexibleServer = new azure.postgresql.FlexibleServer("example", {
 *     name: "example",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     version: "16",
 *     publicNetworkAccessEnabled: false,
 *     administratorLogin: "psqladmin",
 *     administratorPassword: "H@Sh1CoR3!",
 *     zone: "1",
 *     storageMb: 32768,
 *     storageTier: "P30",
 *     skuName: "GP_Standard_D2ads_v5",
 * });
 * const exampleReplica = new azure.postgresql.FlexibleServer("example_replica", {
 *     name: "example-replica",
 *     resourceGroupName: exampleFlexibleServer.resourceGroupName,
 *     location: exampleFlexibleServer.location,
 *     createMode: "Replica",
 *     sourceServerId: exampleFlexibleServer.id,
 *     version: "16",
 *     publicNetworkAccessEnabled: false,
 *     zone: "1",
 *     storageMb: 32768,
 *     storageTier: "P30",
 *     skuName: "GP_Standard_D2ads_v5",
 * });
 * const exampleFlexibleServerVirtualEndpoint = new azure.postgresql.FlexibleServerVirtualEndpoint("example", {
 *     name: "example-endpoint-1",
 *     sourceServerId: exampleFlexibleServer.id,
 *     replicaServerId: exampleReplica.id,
 *     type: "ReadWrite",
 * });
 * ```
 *
 * > **Note:** If creating multiple replicas, an error can occur if virtual endpoints are created before all replicas have been completed. To avoid this error, use a `dependsOn` property on `azure.postgresql.FlexibleServerVirtualEndpoint` that references all Postgres Flexible Server Replicas.
 *
 * ## Import
 *
 * A PostgreSQL Flexible Virtual Endpoint can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforPostgreSQL/flexibleServers/server1/virtualEndpoints/endpoint1
 * ```
 */
class FlexibleServerVirtualEndpoint extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["replicaServerId"] = state ? state.replicaServerId : undefined;
            resourceInputs["sourceServerId"] = state ? state.sourceServerId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.replicaServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicaServerId'");
            }
            if ((!args || args.sourceServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceServerId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["replicaServerId"] = args ? args.replicaServerId : undefined;
            resourceInputs["sourceServerId"] = args ? args.sourceServerId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlexibleServerVirtualEndpoint.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FlexibleServerVirtualEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FlexibleServerVirtualEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlexibleServerVirtualEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlexibleServerVirtualEndpoint.__pulumiType;
    }
}
exports.FlexibleServerVirtualEndpoint = FlexibleServerVirtualEndpoint;
/** @internal */
FlexibleServerVirtualEndpoint.__pulumiType = 'azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint';
//# sourceMappingURL=flexibleServerVirtualEndpoint.js.map