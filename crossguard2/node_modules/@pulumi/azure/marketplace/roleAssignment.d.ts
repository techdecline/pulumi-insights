import * as pulumi from "@pulumi/pulumi";
export declare class RoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleAssignmentState, opts?: pulumi.CustomResourceOptions): RoleAssignment;
    /**
     * Returns true if the given object is an instance of RoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RoleAssignment;
    readonly condition: pulumi.Output<string | undefined>;
    readonly conditionVersion: pulumi.Output<string | undefined>;
    readonly delegatedManagedIdentityResourceId: pulumi.Output<string | undefined>;
    readonly description: pulumi.Output<string | undefined>;
    readonly name: pulumi.Output<string>;
    readonly principalId: pulumi.Output<string>;
    readonly principalType: pulumi.Output<string>;
    readonly roleDefinitionId: pulumi.Output<string | undefined>;
    readonly roleDefinitionName: pulumi.Output<string | undefined>;
    readonly skipServicePrincipalAadCheck: pulumi.Output<boolean | undefined>;
    /**
     * Create a RoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAssignmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RoleAssignment resources.
 */
export interface RoleAssignmentState {
    condition?: pulumi.Input<string>;
    conditionVersion?: pulumi.Input<string>;
    delegatedManagedIdentityResourceId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    principalId?: pulumi.Input<string>;
    principalType?: pulumi.Input<string>;
    roleDefinitionId?: pulumi.Input<string>;
    roleDefinitionName?: pulumi.Input<string>;
    skipServicePrincipalAadCheck?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a RoleAssignment resource.
 */
export interface RoleAssignmentArgs {
    condition?: pulumi.Input<string>;
    conditionVersion?: pulumi.Input<string>;
    delegatedManagedIdentityResourceId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    principalId: pulumi.Input<string>;
    roleDefinitionId?: pulumi.Input<string>;
    roleDefinitionName?: pulumi.Input<string>;
    skipServicePrincipalAadCheck?: pulumi.Input<boolean>;
}
