"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
class RoleAssignment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["conditionVersion"] = state ? state.conditionVersion : undefined;
            resourceInputs["delegatedManagedIdentityResourceId"] = state ? state.delegatedManagedIdentityResourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["roleDefinitionName"] = state ? state.roleDefinitionName : undefined;
            resourceInputs["skipServicePrincipalAadCheck"] = state ? state.skipServicePrincipalAadCheck : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["conditionVersion"] = args ? args.conditionVersion : undefined;
            resourceInputs["delegatedManagedIdentityResourceId"] = args ? args.delegatedManagedIdentityResourceId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["roleDefinitionName"] = args ? args.roleDefinitionName : undefined;
            resourceInputs["skipServicePrincipalAadCheck"] = args ? args.skipServicePrincipalAadCheck : undefined;
            resourceInputs["principalType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RoleAssignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleAssignment.__pulumiType;
    }
}
exports.RoleAssignment = RoleAssignment;
/** @internal */
RoleAssignment.__pulumiType = 'azure:marketplace/roleAssignment:RoleAssignment';
//# sourceMappingURL=roleAssignment.js.map