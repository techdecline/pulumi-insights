import * as pulumi from "@pulumi/pulumi";
/**
 * Manages a Global Schema within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.apimanagement.Service("example", {
 *     name: "example-apim",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     publisherName: "pub1",
 *     publisherEmail: "pub1@email.com",
 *     skuName: "Consumption_0",
 * });
 * const exampleGlobalSchema = new azure.apimanagement.GlobalSchema("example", {
 *     schemaId: "example-schema1",
 *     apiManagementName: exampleService.name,
 *     resourceGroupName: example.name,
 *     type: "xml",
 *     value: std.file({
 *         input: "api_management_api_schema.xml",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ## Import
 *
 * API Management API Schema's can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/globalSchema:GlobalSchema example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/schemas/schema1
 * ```
 */
export declare class GlobalSchema extends pulumi.CustomResource {
    /**
     * Get an existing GlobalSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalSchemaState, opts?: pulumi.CustomResourceOptions): GlobalSchema;
    /**
     * Returns true if the given object is an instance of GlobalSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GlobalSchema;
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    readonly apiManagementName: pulumi.Output<string>;
    /**
     * The description of the schema.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * A unique identifier for this Schema. Changing this forces a new resource to be created.
     */
    readonly schemaId: pulumi.Output<string>;
    /**
     * The content type of the Schema. Possible values are `xml` and `json`.
     */
    readonly type: pulumi.Output<string>;
    /**
     * The string defining the document representing the Schema.
     */
    readonly value: pulumi.Output<string>;
    /**
     * Create a GlobalSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalSchemaArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering GlobalSchema resources.
 */
export interface GlobalSchemaState {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * The description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A unique identifier for this Schema. Changing this forces a new resource to be created.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * The content type of the Schema. Possible values are `xml` and `json`.
     */
    type?: pulumi.Input<string>;
    /**
     * The string defining the document representing the Schema.
     */
    value?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a GlobalSchema resource.
 */
export interface GlobalSchemaArgs {
    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * The description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * A unique identifier for this Schema. Changing this forces a new resource to be created.
     */
    schemaId: pulumi.Input<string>;
    /**
     * The content type of the Schema. Possible values are `xml` and `json`.
     */
    type: pulumi.Input<string>;
    /**
     * The string defining the document representing the Schema.
     */
    value: pulumi.Input<string>;
}
