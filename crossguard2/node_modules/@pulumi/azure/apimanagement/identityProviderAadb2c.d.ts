import * as pulumi from "@pulumi/pulumi";
/**
 * Manages an API Management Azure AD B2C Identity Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.apimanagement.Service("example", {
 *     name: "example-apim",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     publisherName: "My Company",
 *     publisherEmail: "company@terraform.io",
 *     skuName: "Developer_1",
 * });
 * const exampleApplication = new azuread.Application("example", {displayName: "acctestam-example"});
 * const exampleApplicationPassword = new azuread.ApplicationPassword("example", {
 *     applicationObjectId: exampleApplication.objectId,
 *     endDateRelative: "36h",
 * });
 * const exampleIdentityProviderAadb2c = new azure.apimanagement.IdentityProviderAadb2c("example", {
 *     resourceGroupName: example.name,
 *     apiManagementName: exampleService.name,
 *     clientId: exampleApplication.applicationId,
 *     clientSecret: "P@55w0rD!",
 *     allowedTenant: "myb2ctenant.onmicrosoft.com",
 *     signinTenant: "myb2ctenant.onmicrosoft.com",
 *     authority: "myb2ctenant.b2clogin.com",
 *     signinPolicy: "B2C_1_Login",
 *     signupPolicy: "B2C_1_Signup",
 * }, {
 *     dependsOn: [exampleApplicationPassword],
 * });
 * ```
 *
 * ## Import
 *
 * API Management Azure AD B2C Identity Providers can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:apimanagement/identityProviderAadb2c:IdentityProviderAadb2c example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/service1/identityProviders/aadB2C
 * ```
 */
export declare class IdentityProviderAadb2c extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProviderAadb2c resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderAadb2cState, opts?: pulumi.CustomResourceOptions): IdentityProviderAadb2c;
    /**
     * Returns true if the given object is an instance of IdentityProviderAadb2c.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is IdentityProviderAadb2c;
    /**
     * The allowed AAD tenant, usually your B2C tenant domain.
     */
    readonly allowedTenant: pulumi.Output<string>;
    /**
     * The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
     */
    readonly apiManagementName: pulumi.Output<string>;
    /**
     * OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
     */
    readonly authority: pulumi.Output<string>;
    /**
     * Client ID of the Application in your B2C tenant.
     */
    readonly clientId: pulumi.Output<string>;
    /**
     * The client library to be used in the Azure AD B2C Identity Provider.
     */
    readonly clientLibrary: pulumi.Output<string | undefined>;
    /**
     * Client secret of the Application in your B2C tenant.
     */
    readonly clientSecret: pulumi.Output<string>;
    /**
     * Password reset Policy Name.
     */
    readonly passwordResetPolicy: pulumi.Output<string | undefined>;
    /**
     * Profile editing Policy Name.
     */
    readonly profileEditingPolicy: pulumi.Output<string | undefined>;
    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Signin Policy Name.
     */
    readonly signinPolicy: pulumi.Output<string>;
    /**
     * The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
     */
    readonly signinTenant: pulumi.Output<string>;
    /**
     * Signup Policy Name.
     */
    readonly signupPolicy: pulumi.Output<string>;
    /**
     * Create a IdentityProviderAadb2c resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderAadb2cArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering IdentityProviderAadb2c resources.
 */
export interface IdentityProviderAadb2cState {
    /**
     * The allowed AAD tenant, usually your B2C tenant domain.
     */
    allowedTenant?: pulumi.Input<string>;
    /**
     * The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
     */
    apiManagementName?: pulumi.Input<string>;
    /**
     * OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
     */
    authority?: pulumi.Input<string>;
    /**
     * Client ID of the Application in your B2C tenant.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client library to be used in the Azure AD B2C Identity Provider.
     */
    clientLibrary?: pulumi.Input<string>;
    /**
     * Client secret of the Application in your B2C tenant.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Password reset Policy Name.
     */
    passwordResetPolicy?: pulumi.Input<string>;
    /**
     * Profile editing Policy Name.
     */
    profileEditingPolicy?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Signin Policy Name.
     */
    signinPolicy?: pulumi.Input<string>;
    /**
     * The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
     */
    signinTenant?: pulumi.Input<string>;
    /**
     * Signup Policy Name.
     */
    signupPolicy?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a IdentityProviderAadb2c resource.
 */
export interface IdentityProviderAadb2cArgs {
    /**
     * The allowed AAD tenant, usually your B2C tenant domain.
     */
    allowedTenant: pulumi.Input<string>;
    /**
     * The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
     */
    apiManagementName: pulumi.Input<string>;
    /**
     * OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
     */
    authority: pulumi.Input<string>;
    /**
     * Client ID of the Application in your B2C tenant.
     */
    clientId: pulumi.Input<string>;
    /**
     * The client library to be used in the Azure AD B2C Identity Provider.
     */
    clientLibrary?: pulumi.Input<string>;
    /**
     * Client secret of the Application in your B2C tenant.
     */
    clientSecret: pulumi.Input<string>;
    /**
     * Password reset Policy Name.
     */
    passwordResetPolicy?: pulumi.Input<string>;
    /**
     * Profile editing Policy Name.
     */
    profileEditingPolicy?: pulumi.Input<string>;
    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Signin Policy Name.
     */
    signinPolicy: pulumi.Input<string>;
    /**
     * The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
     */
    signinTenant: pulumi.Input<string>;
    /**
     * Signup Policy Name.
     */
    signupPolicy: pulumi.Input<string>;
}
