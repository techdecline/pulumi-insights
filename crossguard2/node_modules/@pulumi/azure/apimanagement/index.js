"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamedValue = exports.Logger = exports.IdentityProviderTwitter = exports.IdentityProviderMicrosoft = exports.IdentityProviderGoogle = exports.IdentityProviderFacebook = exports.IdentityProviderAadb2c = exports.IdentityProviderAad = exports.GroupUser = exports.Group = exports.GlobalSchema = exports.getUserOutput = exports.getUser = exports.getSubscriptionOutput = exports.getSubscription = exports.getServiceOutput = exports.getService = exports.getProductOutput = exports.getProduct = exports.getGroupOutput = exports.getGroup = exports.getGatewayHostNameConfigurationOutput = exports.getGatewayHostNameConfiguration = exports.getGatewayOutput = exports.getGateway = exports.getApiVersionSetOutput = exports.getApiVersionSet = exports.getApiOutput = exports.getApi = exports.GatewayHostNameConfiguration = exports.GatewayCertificateAuthority = exports.GatewayApi = exports.Gateway = exports.EmailTemplate = exports.Diagnostic = exports.CustomDomain = exports.Certificate = exports.Backend = exports.AuthorizationServer = exports.ApiVersionSet = exports.ApiTagDescription = exports.ApiTag = exports.ApiSchema = exports.ApiRelease = exports.ApiPolicy = exports.ApiOperationTag = exports.ApiOperationPolicy = exports.ApiOperation = exports.ApiDiagnostic = exports.Api = void 0;
exports.User = exports.Tag = exports.Subscription = exports.Service = exports.RedisCache = exports.ProductTag = exports.ProductPolicy = exports.ProductGroup = exports.ProductApi = exports.Product = exports.PolicyFragment = exports.Policy = exports.OpenIdConnectProvider = exports.NotificationRecipientUser = exports.NotificationRecipientEmail = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Api = null;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));
exports.ApiDiagnostic = null;
utilities.lazyLoad(exports, ["ApiDiagnostic"], () => require("./apiDiagnostic"));
exports.ApiOperation = null;
utilities.lazyLoad(exports, ["ApiOperation"], () => require("./apiOperation"));
exports.ApiOperationPolicy = null;
utilities.lazyLoad(exports, ["ApiOperationPolicy"], () => require("./apiOperationPolicy"));
exports.ApiOperationTag = null;
utilities.lazyLoad(exports, ["ApiOperationTag"], () => require("./apiOperationTag"));
exports.ApiPolicy = null;
utilities.lazyLoad(exports, ["ApiPolicy"], () => require("./apiPolicy"));
exports.ApiRelease = null;
utilities.lazyLoad(exports, ["ApiRelease"], () => require("./apiRelease"));
exports.ApiSchema = null;
utilities.lazyLoad(exports, ["ApiSchema"], () => require("./apiSchema"));
exports.ApiTag = null;
utilities.lazyLoad(exports, ["ApiTag"], () => require("./apiTag"));
exports.ApiTagDescription = null;
utilities.lazyLoad(exports, ["ApiTagDescription"], () => require("./apiTagDescription"));
exports.ApiVersionSet = null;
utilities.lazyLoad(exports, ["ApiVersionSet"], () => require("./apiVersionSet"));
exports.AuthorizationServer = null;
utilities.lazyLoad(exports, ["AuthorizationServer"], () => require("./authorizationServer"));
exports.Backend = null;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));
exports.Certificate = null;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));
exports.CustomDomain = null;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));
exports.Diagnostic = null;
utilities.lazyLoad(exports, ["Diagnostic"], () => require("./diagnostic"));
exports.EmailTemplate = null;
utilities.lazyLoad(exports, ["EmailTemplate"], () => require("./emailTemplate"));
exports.Gateway = null;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));
exports.GatewayApi = null;
utilities.lazyLoad(exports, ["GatewayApi"], () => require("./gatewayApi"));
exports.GatewayCertificateAuthority = null;
utilities.lazyLoad(exports, ["GatewayCertificateAuthority"], () => require("./gatewayCertificateAuthority"));
exports.GatewayHostNameConfiguration = null;
utilities.lazyLoad(exports, ["GatewayHostNameConfiguration"], () => require("./gatewayHostNameConfiguration"));
exports.getApi = null;
exports.getApiOutput = null;
utilities.lazyLoad(exports, ["getApi", "getApiOutput"], () => require("./getApi"));
exports.getApiVersionSet = null;
exports.getApiVersionSetOutput = null;
utilities.lazyLoad(exports, ["getApiVersionSet", "getApiVersionSetOutput"], () => require("./getApiVersionSet"));
exports.getGateway = null;
exports.getGatewayOutput = null;
utilities.lazyLoad(exports, ["getGateway", "getGatewayOutput"], () => require("./getGateway"));
exports.getGatewayHostNameConfiguration = null;
exports.getGatewayHostNameConfigurationOutput = null;
utilities.lazyLoad(exports, ["getGatewayHostNameConfiguration", "getGatewayHostNameConfigurationOutput"], () => require("./getGatewayHostNameConfiguration"));
exports.getGroup = null;
exports.getGroupOutput = null;
utilities.lazyLoad(exports, ["getGroup", "getGroupOutput"], () => require("./getGroup"));
exports.getProduct = null;
exports.getProductOutput = null;
utilities.lazyLoad(exports, ["getProduct", "getProductOutput"], () => require("./getProduct"));
exports.getService = null;
exports.getServiceOutput = null;
utilities.lazyLoad(exports, ["getService", "getServiceOutput"], () => require("./getService"));
exports.getSubscription = null;
exports.getSubscriptionOutput = null;
utilities.lazyLoad(exports, ["getSubscription", "getSubscriptionOutput"], () => require("./getSubscription"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.GlobalSchema = null;
utilities.lazyLoad(exports, ["GlobalSchema"], () => require("./globalSchema"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.GroupUser = null;
utilities.lazyLoad(exports, ["GroupUser"], () => require("./groupUser"));
exports.IdentityProviderAad = null;
utilities.lazyLoad(exports, ["IdentityProviderAad"], () => require("./identityProviderAad"));
exports.IdentityProviderAadb2c = null;
utilities.lazyLoad(exports, ["IdentityProviderAadb2c"], () => require("./identityProviderAadb2c"));
exports.IdentityProviderFacebook = null;
utilities.lazyLoad(exports, ["IdentityProviderFacebook"], () => require("./identityProviderFacebook"));
exports.IdentityProviderGoogle = null;
utilities.lazyLoad(exports, ["IdentityProviderGoogle"], () => require("./identityProviderGoogle"));
exports.IdentityProviderMicrosoft = null;
utilities.lazyLoad(exports, ["IdentityProviderMicrosoft"], () => require("./identityProviderMicrosoft"));
exports.IdentityProviderTwitter = null;
utilities.lazyLoad(exports, ["IdentityProviderTwitter"], () => require("./identityProviderTwitter"));
exports.Logger = null;
utilities.lazyLoad(exports, ["Logger"], () => require("./logger"));
exports.NamedValue = null;
utilities.lazyLoad(exports, ["NamedValue"], () => require("./namedValue"));
exports.NotificationRecipientEmail = null;
utilities.lazyLoad(exports, ["NotificationRecipientEmail"], () => require("./notificationRecipientEmail"));
exports.NotificationRecipientUser = null;
utilities.lazyLoad(exports, ["NotificationRecipientUser"], () => require("./notificationRecipientUser"));
exports.OpenIdConnectProvider = null;
utilities.lazyLoad(exports, ["OpenIdConnectProvider"], () => require("./openIdConnectProvider"));
exports.Policy = null;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));
exports.PolicyFragment = null;
utilities.lazyLoad(exports, ["PolicyFragment"], () => require("./policyFragment"));
exports.Product = null;
utilities.lazyLoad(exports, ["Product"], () => require("./product"));
exports.ProductApi = null;
utilities.lazyLoad(exports, ["ProductApi"], () => require("./productApi"));
exports.ProductGroup = null;
utilities.lazyLoad(exports, ["ProductGroup"], () => require("./productGroup"));
exports.ProductPolicy = null;
utilities.lazyLoad(exports, ["ProductPolicy"], () => require("./productPolicy"));
exports.ProductTag = null;
utilities.lazyLoad(exports, ["ProductTag"], () => require("./productTag"));
exports.RedisCache = null;
utilities.lazyLoad(exports, ["RedisCache"], () => require("./redisCache"));
exports.Service = null;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
exports.Subscription = null;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));
exports.Tag = null;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:apimanagement/api:Api":
                return new exports.Api(name, undefined, { urn });
            case "azure:apimanagement/apiDiagnostic:ApiDiagnostic":
                return new exports.ApiDiagnostic(name, undefined, { urn });
            case "azure:apimanagement/apiOperation:ApiOperation":
                return new exports.ApiOperation(name, undefined, { urn });
            case "azure:apimanagement/apiOperationPolicy:ApiOperationPolicy":
                return new exports.ApiOperationPolicy(name, undefined, { urn });
            case "azure:apimanagement/apiOperationTag:ApiOperationTag":
                return new exports.ApiOperationTag(name, undefined, { urn });
            case "azure:apimanagement/apiPolicy:ApiPolicy":
                return new exports.ApiPolicy(name, undefined, { urn });
            case "azure:apimanagement/apiRelease:ApiRelease":
                return new exports.ApiRelease(name, undefined, { urn });
            case "azure:apimanagement/apiSchema:ApiSchema":
                return new exports.ApiSchema(name, undefined, { urn });
            case "azure:apimanagement/apiTag:ApiTag":
                return new exports.ApiTag(name, undefined, { urn });
            case "azure:apimanagement/apiTagDescription:ApiTagDescription":
                return new exports.ApiTagDescription(name, undefined, { urn });
            case "azure:apimanagement/apiVersionSet:ApiVersionSet":
                return new exports.ApiVersionSet(name, undefined, { urn });
            case "azure:apimanagement/authorizationServer:AuthorizationServer":
                return new exports.AuthorizationServer(name, undefined, { urn });
            case "azure:apimanagement/backend:Backend":
                return new exports.Backend(name, undefined, { urn });
            case "azure:apimanagement/certificate:Certificate":
                return new exports.Certificate(name, undefined, { urn });
            case "azure:apimanagement/customDomain:CustomDomain":
                return new exports.CustomDomain(name, undefined, { urn });
            case "azure:apimanagement/diagnostic:Diagnostic":
                return new exports.Diagnostic(name, undefined, { urn });
            case "azure:apimanagement/emailTemplate:EmailTemplate":
                return new exports.EmailTemplate(name, undefined, { urn });
            case "azure:apimanagement/gateway:Gateway":
                return new exports.Gateway(name, undefined, { urn });
            case "azure:apimanagement/gatewayApi:GatewayApi":
                return new exports.GatewayApi(name, undefined, { urn });
            case "azure:apimanagement/gatewayCertificateAuthority:GatewayCertificateAuthority":
                return new exports.GatewayCertificateAuthority(name, undefined, { urn });
            case "azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration":
                return new exports.GatewayHostNameConfiguration(name, undefined, { urn });
            case "azure:apimanagement/globalSchema:GlobalSchema":
                return new exports.GlobalSchema(name, undefined, { urn });
            case "azure:apimanagement/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "azure:apimanagement/groupUser:GroupUser":
                return new exports.GroupUser(name, undefined, { urn });
            case "azure:apimanagement/identityProviderAad:IdentityProviderAad":
                return new exports.IdentityProviderAad(name, undefined, { urn });
            case "azure:apimanagement/identityProviderAadb2c:IdentityProviderAadb2c":
                return new exports.IdentityProviderAadb2c(name, undefined, { urn });
            case "azure:apimanagement/identityProviderFacebook:IdentityProviderFacebook":
                return new exports.IdentityProviderFacebook(name, undefined, { urn });
            case "azure:apimanagement/identityProviderGoogle:IdentityProviderGoogle":
                return new exports.IdentityProviderGoogle(name, undefined, { urn });
            case "azure:apimanagement/identityProviderMicrosoft:IdentityProviderMicrosoft":
                return new exports.IdentityProviderMicrosoft(name, undefined, { urn });
            case "azure:apimanagement/identityProviderTwitter:IdentityProviderTwitter":
                return new exports.IdentityProviderTwitter(name, undefined, { urn });
            case "azure:apimanagement/logger:Logger":
                return new exports.Logger(name, undefined, { urn });
            case "azure:apimanagement/namedValue:NamedValue":
                return new exports.NamedValue(name, undefined, { urn });
            case "azure:apimanagement/notificationRecipientEmail:NotificationRecipientEmail":
                return new exports.NotificationRecipientEmail(name, undefined, { urn });
            case "azure:apimanagement/notificationRecipientUser:NotificationRecipientUser":
                return new exports.NotificationRecipientUser(name, undefined, { urn });
            case "azure:apimanagement/openIdConnectProvider:OpenIdConnectProvider":
                return new exports.OpenIdConnectProvider(name, undefined, { urn });
            case "azure:apimanagement/policy:Policy":
                return new exports.Policy(name, undefined, { urn });
            case "azure:apimanagement/policyFragment:PolicyFragment":
                return new exports.PolicyFragment(name, undefined, { urn });
            case "azure:apimanagement/product:Product":
                return new exports.Product(name, undefined, { urn });
            case "azure:apimanagement/productApi:ProductApi":
                return new exports.ProductApi(name, undefined, { urn });
            case "azure:apimanagement/productGroup:ProductGroup":
                return new exports.ProductGroup(name, undefined, { urn });
            case "azure:apimanagement/productPolicy:ProductPolicy":
                return new exports.ProductPolicy(name, undefined, { urn });
            case "azure:apimanagement/productTag:ProductTag":
                return new exports.ProductTag(name, undefined, { urn });
            case "azure:apimanagement/redisCache:RedisCache":
                return new exports.RedisCache(name, undefined, { urn });
            case "azure:apimanagement/service:Service":
                return new exports.Service(name, undefined, { urn });
            case "azure:apimanagement/subscription:Subscription":
                return new exports.Subscription(name, undefined, { urn });
            case "azure:apimanagement/tag:Tag":
                return new exports.Tag(name, undefined, { urn });
            case "azure:apimanagement/user:User":
                return new exports.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "apimanagement/api", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiDiagnostic", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperation", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperationPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperationTag", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiRelease", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiSchema", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiTag", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiTagDescription", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiVersionSet", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/authorizationServer", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/backend", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/customDomain", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/diagnostic", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/emailTemplate", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/gateway", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/gatewayApi", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/gatewayCertificateAuthority", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/gatewayHostNameConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/globalSchema", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/group", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/groupUser", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderAad", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderAadb2c", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderFacebook", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderGoogle", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderMicrosoft", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderTwitter", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/logger", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/namedValue", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/notificationRecipientEmail", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/notificationRecipientUser", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/openIdConnectProvider", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/policy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/policyFragment", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/product", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/productApi", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/productGroup", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/productPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/productTag", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/redisCache", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/service", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/subscription", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/tag", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/user", _module);
//# sourceMappingURL=index.js.map