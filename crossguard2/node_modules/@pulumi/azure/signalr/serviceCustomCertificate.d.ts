import * as pulumi from "@pulumi/pulumi";
/**
 * Manages an Azure SignalR Custom Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.signalr.Service("example", {
 *     name: "example-signalr",
 *     location: testAzurermResourceGroup.location,
 *     resourceGroupName: testAzurermResourceGroup.name,
 *     sku: {
 *         name: "Premium_P1",
 *         capacity: 1,
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "example-keyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     accessPolicies: [
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: current.then(current => current.objectId),
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: testAzurermSignalrService.identity[0].principalId,
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *     ],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("example", {
 *     name: "imported-cert",
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: std.filebase64({
 *             input: "certificate-to-import.pfx",
 *         }).then(invoke => invoke.result),
 *         password: "",
 *     },
 * });
 * const test = new azure.signalr.ServiceCustomCertificate("test", {
 *     name: "example-cert",
 *     signalrServiceId: exampleService.id,
 *     customCertificateId: exampleCertificate.id,
 * }, {
 *     dependsOn: [exampleAzurermKeyVaultAccessPolicy],
 * });
 * ```
 *
 * ## Import
 *
 * Custom Certificate for a SignalR service can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:signalr/serviceCustomCertificate:ServiceCustomCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customCertificates/cert1
 * ```
 */
export declare class ServiceCustomCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ServiceCustomCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceCustomCertificateState, opts?: pulumi.CustomResourceOptions): ServiceCustomCertificate;
    /**
     * Returns true if the given object is an instance of ServiceCustomCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServiceCustomCertificate;
    /**
     * The certificate version of the SignalR Custom Certificate service.
     */
    readonly certificateVersion: pulumi.Output<string>;
    /**
     * The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
     *
     * > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
     */
    readonly customCertificateId: pulumi.Output<string>;
    /**
     * The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     *
     * > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
     */
    readonly signalrServiceId: pulumi.Output<string>;
    /**
     * Create a ServiceCustomCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceCustomCertificateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ServiceCustomCertificate resources.
 */
export interface ServiceCustomCertificateState {
    /**
     * The certificate version of the SignalR Custom Certificate service.
     */
    certificateVersion?: pulumi.Input<string>;
    /**
     * The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
     *
     * > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
     */
    customCertificateId?: pulumi.Input<string>;
    /**
     * The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     *
     * > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
     */
    signalrServiceId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ServiceCustomCertificate resource.
 */
export interface ServiceCustomCertificateArgs {
    /**
     * The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
     *
     * > **Note:** Self assigned certificate is not supported and the provisioning status will fail.
     */
    customCertificateId: pulumi.Input<string>;
    /**
     * The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
     *
     * > **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
     */
    signalrServiceId: pulumi.Input<string>;
}
