"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceCustomDomain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure SignalR Custom Domain.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as std from "@pulumi/std";
 *
 * const current = azure.core.getClientConfig({});
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-resources",
 *     location: "West Europe",
 * });
 * const exampleService = new azure.signalr.Service("example", {
 *     name: "example-signalr",
 *     location: testAzurermResourceGroup.location,
 *     resourceGroupName: testAzurermResourceGroup.name,
 *     sku: {
 *         name: "Premium_P1",
 *         capacity: 1,
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("example", {
 *     name: "example-keyvault",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     accessPolicies: [
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: current.then(current => current.objectId),
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *         {
 *             tenantId: current.then(current => current.tenantId),
 *             objectId: testAzurermSignalrService.identity[0].principalId,
 *             certificatePermissions: [
 *                 "Create",
 *                 "Get",
 *                 "List",
 *             ],
 *             secretPermissions: [
 *                 "Get",
 *                 "List",
 *             ],
 *         },
 *     ],
 * });
 * const exampleCertificate = new azure.keyvault.Certificate("example", {
 *     name: "imported-cert",
 *     keyVaultId: exampleKeyVault.id,
 *     certificate: {
 *         contents: std.filebase64({
 *             input: "certificate-to-import.pfx",
 *         }).then(invoke => invoke.result),
 *         password: "",
 *     },
 * });
 * const test = new azure.signalr.ServiceCustomCertificate("test", {
 *     name: "example-cert",
 *     signalrServiceId: exampleService.id,
 *     customCertificateId: exampleCertificate.id,
 * }, {
 *     dependsOn: [exampleAzurermKeyVaultAccessPolicy],
 * });
 * const testServiceCustomDomain = new azure.signalr.ServiceCustomDomain("test", {
 *     name: "example-domain",
 *     signalrServiceId: testAzurermSignalrService.id,
 *     domainName: "tftest.com",
 *     signalrCustomCertificateId: test.id,
 * });
 * ```
 *
 * ## Import
 *
 * Custom Domain for a SignalR service can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:signalr/serviceCustomDomain:ServiceCustomDomain example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customDomains/customDomain1
 * ```
 */
class ServiceCustomDomain extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signalrCustomCertificateId"] = state ? state.signalrCustomCertificateId : undefined;
            resourceInputs["signalrServiceId"] = state ? state.signalrServiceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.signalrCustomCertificateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signalrCustomCertificateId'");
            }
            if ((!args || args.signalrServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signalrServiceId'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["signalrCustomCertificateId"] = args ? args.signalrCustomCertificateId : undefined;
            resourceInputs["signalrServiceId"] = args ? args.signalrServiceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceCustomDomain.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ServiceCustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServiceCustomDomain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServiceCustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceCustomDomain.__pulumiType;
    }
}
exports.ServiceCustomDomain = ServiceCustomDomain;
/** @internal */
ServiceCustomDomain.__pulumiType = 'azure:signalr/serviceCustomDomain:ServiceCustomDomain';
//# sourceMappingURL=serviceCustomDomain.js.map