import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages an Elastic SAN Volume resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleElasticSan = new azure.elasticsan.ElasticSan("example", {
 *     name: "example-es",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     baseSizeInTib: 1,
 *     sku: {
 *         name: "Premium_LRS",
 *     },
 * });
 * const exampleVolumeGroup = new azure.elasticsan.VolumeGroup("example", {
 *     name: "example-esvg",
 *     elasticSanId: exampleElasticSan.id,
 * });
 * const exampleVolume = new azure.elasticsan.Volume("example", {
 *     name: "example-esv",
 *     volumeGroupId: exampleVolumeGroup.id,
 *     sizeInGib: 1,
 * });
 * export const targetIqn = exampleVolume.targetIqn;
 * ```
 *
 * ## Example of creating an Elastic SAN Volume from a Disk Snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {
 *     name: "example-rg",
 *     location: "West Europe",
 * });
 * const exampleElasticSan = new azure.elasticsan.ElasticSan("example", {
 *     name: "example-es",
 *     resourceGroupName: example.name,
 *     location: example.location,
 *     baseSizeInTib: 1,
 *     sku: {
 *         name: "Premium_LRS",
 *     },
 * });
 * const exampleVolumeGroup = new azure.elasticsan.VolumeGroup("example", {
 *     name: "example-esvg",
 *     elasticSanId: exampleElasticSan.id,
 * });
 * const exampleManagedDisk = new azure.compute.ManagedDisk("example", {
 *     name: "example-disk",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     createOption: "Empty",
 *     storageAccountType: "Standard_LRS",
 *     diskSizeGb: 2,
 * });
 * const exampleSnapshot = new azure.compute.Snapshot("example", {
 *     name: "example-ss",
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     createOption: "Copy",
 *     sourceUri: exampleManagedDisk.id,
 * });
 * const example2 = new azure.elasticsan.Volume("example2", {
 *     name: "example-esv2",
 *     volumeGroupId: exampleVolumeGroup.id,
 *     sizeInGib: 2,
 *     createSource: {
 *         sourceType: "DiskSnapshot",
 *         sourceId: exampleSnapshot.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * An existing Elastic SAN Volume can be imported into Pulumi using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import azure:elasticsan/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ElasticSan/elasticSans/esan1/volumeGroups/vg1/volumes/vol1
 * ```
 */
export declare class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume;
    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Volume;
    /**
     * A `createSource` block as defined below.
     */
    readonly createSource: pulumi.Output<outputs.elasticsan.VolumeCreateSource | undefined>;
    /**
     * Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
     *
     * > **NOTE:** The size can only be increased. If `createSource` is specified, then the size must be equal to or greater than the source's size.
     */
    readonly sizeInGib: pulumi.Output<number>;
    /**
     * The iSCSI Target IQN of the Elastic SAN Volume.
     */
    readonly targetIqn: pulumi.Output<string>;
    /**
     * The iSCSI Target Portal Host Name of the Elastic SAN Volume.
     */
    readonly targetPortalHostname: pulumi.Output<string>;
    /**
     * The iSCSI Target Portal Port of the Elastic SAN Volume.
     */
    readonly targetPortalPort: pulumi.Output<number>;
    /**
     * Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
     */
    readonly volumeGroupId: pulumi.Output<string>;
    /**
     * The UUID of the Elastic SAN Volume.
     */
    readonly volumeId: pulumi.Output<string>;
    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * A `createSource` block as defined below.
     */
    createSource?: pulumi.Input<inputs.elasticsan.VolumeCreateSource>;
    /**
     * Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
     *
     * > **NOTE:** The size can only be increased. If `createSource` is specified, then the size must be equal to or greater than the source's size.
     */
    sizeInGib?: pulumi.Input<number>;
    /**
     * The iSCSI Target IQN of the Elastic SAN Volume.
     */
    targetIqn?: pulumi.Input<string>;
    /**
     * The iSCSI Target Portal Host Name of the Elastic SAN Volume.
     */
    targetPortalHostname?: pulumi.Input<string>;
    /**
     * The iSCSI Target Portal Port of the Elastic SAN Volume.
     */
    targetPortalPort?: pulumi.Input<number>;
    /**
     * Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
     */
    volumeGroupId?: pulumi.Input<string>;
    /**
     * The UUID of the Elastic SAN Volume.
     */
    volumeId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * A `createSource` block as defined below.
     */
    createSource?: pulumi.Input<inputs.elasticsan.VolumeCreateSource>;
    /**
     * Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
     *
     * > **NOTE:** The size can only be increased. If `createSource` is specified, then the size must be equal to or greater than the source's size.
     */
    sizeInGib: pulumi.Input<number>;
    /**
     * Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
     */
    volumeGroupId: pulumi.Input<string>;
}
