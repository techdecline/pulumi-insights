"use strict";
// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ------------------------------- WARNING -------------------------------------
// This file was programmatically generated. Do not edit unless you know what
// you're doing.
// ------------------------------- WARNING -------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopeAssignment = exports.ManagedNetworkPeeringPolicy = exports.ManagedNetworkGroup = exports.ManagedNetwork = void 0;
const policy_1 = require("@pulumi/policy");
const compliance_policy_manager_1 = require("@pulumi/compliance-policy-manager");
const v20190601preview_1 = require("@pulumi/azure-native/managednetwork/v20190601preview");
const v20190601preview_2 = require("@pulumi/azure-native/managednetwork/v20190601preview");
const v20190601preview_3 = require("@pulumi/azure-native/managednetwork/v20190601preview");
const v20190601preview_4 = require("@pulumi/azure-native/managednetwork/v20190601preview");
var ManagedNetwork;
(function (ManagedNetwork) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ManagedNetwork).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    ManagedNetwork.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetwork-v20190601preview-managednetwork-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ManagedNetwork).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20190601preview_1.ManagedNetwork, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure ManagedNetwork shouldn't use an unstable API (managednetwork.v20190601preview.ManagedNetwork). A compatible replacement can be found at 'managednetwork.ManagedNetwork'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetwork"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(ManagedNetwork || (ManagedNetwork = {}));
exports.ManagedNetwork = ManagedNetwork;
var ManagedNetworkGroup;
(function (ManagedNetworkGroup) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ManagedNetworkGroup).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    ManagedNetworkGroup.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetwork-v20190601preview-managednetworkgroup-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ManagedNetworkGroup).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20190601preview_2.ManagedNetworkGroup, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure ManagedNetworkGroup shouldn't use an unstable API (managednetwork.v20190601preview.ManagedNetworkGroup). A compatible replacement can be found at 'managednetwork.ManagedNetworkGroup'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetwork"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(ManagedNetworkGroup || (ManagedNetworkGroup = {}));
exports.ManagedNetworkGroup = ManagedNetworkGroup;
var ManagedNetworkPeeringPolicy;
(function (ManagedNetworkPeeringPolicy) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ManagedNetworkPeeringPolicy).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    ManagedNetworkPeeringPolicy.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetwork-v20190601preview-managednetworkpeeringpolicy-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ManagedNetworkPeeringPolicy).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20190601preview_3.ManagedNetworkPeeringPolicy, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure ManagedNetworkPeeringPolicy shouldn't use an unstable API (managednetwork.v20190601preview.ManagedNetworkPeeringPolicy). A compatible replacement can be found at 'managednetwork.ManagedNetworkPeeringPolicy'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetwork"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(ManagedNetworkPeeringPolicy || (ManagedNetworkPeeringPolicy = {}));
exports.ManagedNetworkPeeringPolicy = ManagedNetworkPeeringPolicy;
var ScopeAssignment;
(function (ScopeAssignment) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ScopeAssignment).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    ScopeAssignment.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetwork-v20190601preview-scopeassignment-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetwork.v20190601preview.ScopeAssignment).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20190601preview_4.ScopeAssignment, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure ScopeAssignment shouldn't use an unstable API (managednetwork.v20190601preview.ScopeAssignment). A compatible replacement can be found at 'managednetwork.ScopeAssignment'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetwork"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(ScopeAssignment || (ScopeAssignment = {}));
exports.ScopeAssignment = ScopeAssignment;
