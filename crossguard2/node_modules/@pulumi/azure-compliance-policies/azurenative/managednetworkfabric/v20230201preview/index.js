"use strict";
// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ------------------------------- WARNING -------------------------------------
// This file was programmatically generated. Do not edit unless you know what
// you're doing.
// ------------------------------- WARNING -------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutePolicy = exports.NetworkToNetworkInterconnect = exports.NetworkRack = exports.NetworkInterface = exports.NetworkFabricController = exports.NetworkFabric = exports.NetworkDevice = exports.L3IsolationDomain = exports.L2IsolationDomain = exports.IpPrefix = exports.IpExtendedCommunity = exports.IpCommunity = exports.InternalNetwork = exports.ExternalNetwork = exports.AccessControlList = void 0;
const policy_1 = require("@pulumi/policy");
const compliance_policy_manager_1 = require("@pulumi/compliance-policy-manager");
const v20230201preview_1 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_2 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_3 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_4 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_5 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_6 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_7 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_8 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_9 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_10 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_11 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_12 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_13 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_14 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
const v20230201preview_15 = require("@pulumi/azure-native/managednetworkfabric/v20230201preview");
var AccessControlList;
(function (AccessControlList) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.AccessControlList).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    AccessControlList.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-accesscontrollist-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.AccessControlList).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_1.AccessControlList, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure AccessControlList shouldn't use an unstable API (managednetworkfabric.v20230201preview.AccessControlList). A compatible replacement can be found at 'managednetworkfabric.AccessControlList'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(AccessControlList || (AccessControlList = {}));
exports.AccessControlList = AccessControlList;
var ExternalNetwork;
(function (ExternalNetwork) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.ExternalNetwork).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    ExternalNetwork.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-externalnetwork-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.ExternalNetwork).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_2.ExternalNetwork, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure ExternalNetwork shouldn't use an unstable API (managednetworkfabric.v20230201preview.ExternalNetwork). A compatible replacement can be found at 'managednetworkfabric.ExternalNetwork'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(ExternalNetwork || (ExternalNetwork = {}));
exports.ExternalNetwork = ExternalNetwork;
var InternalNetwork;
(function (InternalNetwork) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.InternalNetwork).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    InternalNetwork.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-internalnetwork-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.InternalNetwork).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_3.InternalNetwork, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure InternalNetwork shouldn't use an unstable API (managednetworkfabric.v20230201preview.InternalNetwork). A compatible replacement can be found at 'managednetworkfabric.InternalNetwork'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(InternalNetwork || (InternalNetwork = {}));
exports.InternalNetwork = InternalNetwork;
var IpCommunity;
(function (IpCommunity) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.IpCommunity).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    IpCommunity.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-ipcommunity-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.IpCommunity).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_4.IpCommunity, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure IpCommunity shouldn't use an unstable API (managednetworkfabric.v20230201preview.IpCommunity). A compatible replacement can be found at 'managednetworkfabric.IpCommunity'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(IpCommunity || (IpCommunity = {}));
exports.IpCommunity = IpCommunity;
var IpExtendedCommunity;
(function (IpExtendedCommunity) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.IpExtendedCommunity).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    IpExtendedCommunity.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-ipextendedcommunity-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.IpExtendedCommunity).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_5.IpExtendedCommunity, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure IpExtendedCommunity shouldn't use an unstable API (managednetworkfabric.v20230201preview.IpExtendedCommunity). A compatible replacement can be found at 'managednetworkfabric.IpExtendedCommunity'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(IpExtendedCommunity || (IpExtendedCommunity = {}));
exports.IpExtendedCommunity = IpExtendedCommunity;
var IpPrefix;
(function (IpPrefix) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.IpPrefix).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    IpPrefix.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-ipprefix-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.IpPrefix).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_6.IpPrefix, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure IpPrefix shouldn't use an unstable API (managednetworkfabric.v20230201preview.IpPrefix). A compatible replacement can be found at 'managednetworkfabric.IpPrefix'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(IpPrefix || (IpPrefix = {}));
exports.IpPrefix = IpPrefix;
var L2IsolationDomain;
(function (L2IsolationDomain) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.L2IsolationDomain).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    L2IsolationDomain.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-l2isolationdomain-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.L2IsolationDomain).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_7.L2IsolationDomain, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure L2IsolationDomain shouldn't use an unstable API (managednetworkfabric.v20230201preview.L2IsolationDomain). A compatible replacement can be found at 'managednetworkfabric.L2IsolationDomain'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(L2IsolationDomain || (L2IsolationDomain = {}));
exports.L2IsolationDomain = L2IsolationDomain;
var L3IsolationDomain;
(function (L3IsolationDomain) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.L3IsolationDomain).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    L3IsolationDomain.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-l3isolationdomain-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.L3IsolationDomain).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_8.L3IsolationDomain, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure L3IsolationDomain shouldn't use an unstable API (managednetworkfabric.v20230201preview.L3IsolationDomain). A compatible replacement can be found at 'managednetworkfabric.L3IsolationDomain'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(L3IsolationDomain || (L3IsolationDomain = {}));
exports.L3IsolationDomain = L3IsolationDomain;
var NetworkDevice;
(function (NetworkDevice) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkDevice).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NetworkDevice.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-networkdevice-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkDevice).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_9.NetworkDevice, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NetworkDevice shouldn't use an unstable API (managednetworkfabric.v20230201preview.NetworkDevice). A compatible replacement can be found at 'managednetworkfabric.NetworkDevice'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NetworkDevice || (NetworkDevice = {}));
exports.NetworkDevice = NetworkDevice;
var NetworkFabric;
(function (NetworkFabric) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkFabric).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NetworkFabric.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-networkfabric-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkFabric).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_10.NetworkFabric, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NetworkFabric shouldn't use an unstable API (managednetworkfabric.v20230201preview.NetworkFabric). A compatible replacement can be found at 'managednetworkfabric.NetworkFabric'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NetworkFabric || (NetworkFabric = {}));
exports.NetworkFabric = NetworkFabric;
var NetworkFabricController;
(function (NetworkFabricController) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkFabricController).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NetworkFabricController.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-networkfabriccontroller-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkFabricController).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_11.NetworkFabricController, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NetworkFabricController shouldn't use an unstable API (managednetworkfabric.v20230201preview.NetworkFabricController). A compatible replacement can be found at 'managednetworkfabric.NetworkFabricController'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NetworkFabricController || (NetworkFabricController = {}));
exports.NetworkFabricController = NetworkFabricController;
var NetworkInterface;
(function (NetworkInterface) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkInterface).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NetworkInterface.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-networkinterface-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkInterface).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_12.NetworkInterface, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NetworkInterface shouldn't use an unstable API (managednetworkfabric.v20230201preview.NetworkInterface). A compatible replacement can be found at 'managednetworkfabric.NetworkInterface'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NetworkInterface || (NetworkInterface = {}));
exports.NetworkInterface = NetworkInterface;
var NetworkRack;
(function (NetworkRack) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkRack).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NetworkRack.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-networkrack-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkRack).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_13.NetworkRack, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NetworkRack shouldn't use an unstable API (managednetworkfabric.v20230201preview.NetworkRack). A compatible replacement can be found at 'managednetworkfabric.NetworkRack'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NetworkRack || (NetworkRack = {}));
exports.NetworkRack = NetworkRack;
var NetworkToNetworkInterconnect;
(function (NetworkToNetworkInterconnect) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkToNetworkInterconnect).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NetworkToNetworkInterconnect.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-networktonetworkinterconnect-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.NetworkToNetworkInterconnect).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_14.NetworkToNetworkInterconnect, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NetworkToNetworkInterconnect shouldn't use an unstable API (managednetworkfabric.v20230201preview.NetworkToNetworkInterconnect). A compatible replacement can be found at 'managednetworkfabric.NetworkToNetworkInterconnect'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NetworkToNetworkInterconnect || (NetworkToNetworkInterconnect = {}));
exports.NetworkToNetworkInterconnect = NetworkToNetworkInterconnect;
var RoutePolicy;
(function (RoutePolicy) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.RoutePolicy).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    RoutePolicy.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-managednetworkfabric-v20230201preview-routepolicy-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (managednetworkfabric.v20230201preview.RoutePolicy).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230201preview_15.RoutePolicy, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure RoutePolicy shouldn't use an unstable API (managednetworkfabric.v20230201preview.RoutePolicy). A compatible replacement can be found at 'managednetworkfabric.RoutePolicy'.");
            }),
        },
        vendors: ["azure"],
        services: ["managednetworkfabric"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(RoutePolicy || (RoutePolicy = {}));
exports.RoutePolicy = RoutePolicy;
