"use strict";
// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ------------------------------- WARNING -------------------------------------
// This file was programmatically generated. Do not edit unless you know what
// you're doing.
// ------------------------------- WARNING -------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zone = exports.RecordSet = exports.PrivateResolverVirtualNetworkLink = exports.OutboundEndpoint = exports.NspProfile = exports.NspLink = exports.NspAssociation = exports.NspAccessRule = exports.NetworkSecurityPerimeter = exports.InboundEndpoint = exports.ForwardingRule = exports.DnssecConfig = exports.DnsSecurityRule = exports.DnsResolverPolicyVirtualNetworkLink = exports.DnsResolverPolicy = exports.DnsResolverDomainList = exports.DnsResolver = exports.DnsForwardingRuleset = void 0;
const policy_1 = require("@pulumi/policy");
const compliance_policy_manager_1 = require("@pulumi/compliance-policy-manager");
const v20230701preview_1 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_2 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_3 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_4 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_5 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_6 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_7 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_8 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_9 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_10 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_11 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_12 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_13 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_14 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_15 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_16 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_17 = require("@pulumi/azure-native/network/v20230701preview");
const v20230701preview_18 = require("@pulumi/azure-native/network/v20230701preview");
var DnsForwardingRuleset;
(function (DnsForwardingRuleset) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsForwardingRuleset).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    DnsForwardingRuleset.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-dnsforwardingruleset-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsForwardingRuleset).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_1.DnsForwardingRuleset, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure DnsForwardingRuleset shouldn't use an unstable API (network.v20230701preview.DnsForwardingRuleset). A compatible replacement can be found at 'network.DnsForwardingRuleset'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(DnsForwardingRuleset || (DnsForwardingRuleset = {}));
exports.DnsForwardingRuleset = DnsForwardingRuleset;
var DnsResolver;
(function (DnsResolver) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolver).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    DnsResolver.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-dnsresolver-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolver).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_2.DnsResolver, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure DnsResolver shouldn't use an unstable API (network.v20230701preview.DnsResolver). A compatible replacement can be found at 'network.DnsResolver'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(DnsResolver || (DnsResolver = {}));
exports.DnsResolver = DnsResolver;
var DnsResolverDomainList;
(function (DnsResolverDomainList) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolverDomainList).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    DnsResolverDomainList.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-dnsresolverdomainlist-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolverDomainList).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_3.DnsResolverDomainList, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure DnsResolverDomainList shouldn't use an unstable API (network.v20230701preview.DnsResolverDomainList). A compatible replacement can be found at 'network.DnsResolverDomainList'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(DnsResolverDomainList || (DnsResolverDomainList = {}));
exports.DnsResolverDomainList = DnsResolverDomainList;
var DnsResolverPolicy;
(function (DnsResolverPolicy) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolverPolicy).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    DnsResolverPolicy.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-dnsresolverpolicy-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolverPolicy).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_4.DnsResolverPolicy, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure DnsResolverPolicy shouldn't use an unstable API (network.v20230701preview.DnsResolverPolicy). A compatible replacement can be found at 'network.DnsResolverPolicy'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(DnsResolverPolicy || (DnsResolverPolicy = {}));
exports.DnsResolverPolicy = DnsResolverPolicy;
var DnsResolverPolicyVirtualNetworkLink;
(function (DnsResolverPolicyVirtualNetworkLink) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolverPolicyVirtualNetworkLink).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    DnsResolverPolicyVirtualNetworkLink.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-dnsresolverpolicyvirtualnetworklink-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsResolverPolicyVirtualNetworkLink).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_5.DnsResolverPolicyVirtualNetworkLink, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure DnsResolverPolicyVirtualNetworkLink shouldn't use an unstable API (network.v20230701preview.DnsResolverPolicyVirtualNetworkLink). A compatible replacement can be found at 'network.DnsResolverPolicyVirtualNetworkLink'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(DnsResolverPolicyVirtualNetworkLink || (DnsResolverPolicyVirtualNetworkLink = {}));
exports.DnsResolverPolicyVirtualNetworkLink = DnsResolverPolicyVirtualNetworkLink;
var DnsSecurityRule;
(function (DnsSecurityRule) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsSecurityRule).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    DnsSecurityRule.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-dnssecurityrule-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnsSecurityRule).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_6.DnsSecurityRule, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure DnsSecurityRule shouldn't use an unstable API (network.v20230701preview.DnsSecurityRule). A compatible replacement can be found at 'network.DnsSecurityRule'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(DnsSecurityRule || (DnsSecurityRule = {}));
exports.DnsSecurityRule = DnsSecurityRule;
var DnssecConfig;
(function (DnssecConfig) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnssecConfig).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    DnssecConfig.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-dnssecconfig-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.DnssecConfig).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_7.DnssecConfig, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure DnssecConfig shouldn't use an unstable API (network.v20230701preview.DnssecConfig).");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(DnssecConfig || (DnssecConfig = {}));
exports.DnssecConfig = DnssecConfig;
var ForwardingRule;
(function (ForwardingRule) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.ForwardingRule).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    ForwardingRule.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-forwardingrule-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.ForwardingRule).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_8.ForwardingRule, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure ForwardingRule shouldn't use an unstable API (network.v20230701preview.ForwardingRule). A compatible replacement can be found at 'network.ForwardingRule'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(ForwardingRule || (ForwardingRule = {}));
exports.ForwardingRule = ForwardingRule;
var InboundEndpoint;
(function (InboundEndpoint) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.InboundEndpoint).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    InboundEndpoint.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-inboundendpoint-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.InboundEndpoint).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_9.InboundEndpoint, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure InboundEndpoint shouldn't use an unstable API (network.v20230701preview.InboundEndpoint). A compatible replacement can be found at 'network.InboundEndpoint'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(InboundEndpoint || (InboundEndpoint = {}));
exports.InboundEndpoint = InboundEndpoint;
var NetworkSecurityPerimeter;
(function (NetworkSecurityPerimeter) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NetworkSecurityPerimeter).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NetworkSecurityPerimeter.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-networksecurityperimeter-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NetworkSecurityPerimeter).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_10.NetworkSecurityPerimeter, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NetworkSecurityPerimeter shouldn't use an unstable API (network.v20230701preview.NetworkSecurityPerimeter). A compatible replacement can be found at 'network.NetworkSecurityPerimeter'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NetworkSecurityPerimeter || (NetworkSecurityPerimeter = {}));
exports.NetworkSecurityPerimeter = NetworkSecurityPerimeter;
var NspAccessRule;
(function (NspAccessRule) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspAccessRule).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NspAccessRule.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-nspaccessrule-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspAccessRule).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_11.NspAccessRule, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NspAccessRule shouldn't use an unstable API (network.v20230701preview.NspAccessRule). A compatible replacement can be found at 'network.NspAccessRule'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NspAccessRule || (NspAccessRule = {}));
exports.NspAccessRule = NspAccessRule;
var NspAssociation;
(function (NspAssociation) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspAssociation).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NspAssociation.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-nspassociation-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspAssociation).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_12.NspAssociation, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NspAssociation shouldn't use an unstable API (network.v20230701preview.NspAssociation). A compatible replacement can be found at 'network.NspAssociation'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NspAssociation || (NspAssociation = {}));
exports.NspAssociation = NspAssociation;
var NspLink;
(function (NspLink) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspLink).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NspLink.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-nsplink-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspLink).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_13.NspLink, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NspLink shouldn't use an unstable API (network.v20230701preview.NspLink). A compatible replacement can be found at 'network.NspLink'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NspLink || (NspLink = {}));
exports.NspLink = NspLink;
var NspProfile;
(function (NspProfile) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspProfile).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NspProfile.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-nspprofile-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.NspProfile).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_14.NspProfile, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NspProfile shouldn't use an unstable API (network.v20230701preview.NspProfile). A compatible replacement can be found at 'network.NspProfile'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NspProfile || (NspProfile = {}));
exports.NspProfile = NspProfile;
var OutboundEndpoint;
(function (OutboundEndpoint) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.OutboundEndpoint).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    OutboundEndpoint.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-outboundendpoint-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.OutboundEndpoint).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_15.OutboundEndpoint, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure OutboundEndpoint shouldn't use an unstable API (network.v20230701preview.OutboundEndpoint). A compatible replacement can be found at 'network.OutboundEndpoint'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(OutboundEndpoint || (OutboundEndpoint = {}));
exports.OutboundEndpoint = OutboundEndpoint;
var PrivateResolverVirtualNetworkLink;
(function (PrivateResolverVirtualNetworkLink) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.PrivateResolverVirtualNetworkLink).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    PrivateResolverVirtualNetworkLink.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-privateresolvervirtualnetworklink-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.PrivateResolverVirtualNetworkLink).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_16.PrivateResolverVirtualNetworkLink, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure PrivateResolverVirtualNetworkLink shouldn't use an unstable API (network.v20230701preview.PrivateResolverVirtualNetworkLink). A compatible replacement can be found at 'network.PrivateResolverVirtualNetworkLink'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(PrivateResolverVirtualNetworkLink || (PrivateResolverVirtualNetworkLink = {}));
exports.PrivateResolverVirtualNetworkLink = PrivateResolverVirtualNetworkLink;
var RecordSet;
(function (RecordSet) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.RecordSet).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    RecordSet.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-recordset-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.RecordSet).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_17.RecordSet, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure RecordSet shouldn't use an unstable API (network.v20230701preview.RecordSet). A compatible replacement can be found at 'network.RecordSet'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(RecordSet || (RecordSet = {}));
exports.RecordSet = RecordSet;
var Zone;
(function (Zone) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.Zone).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Zone.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-network-v20230701preview-zone-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (network.v20230701preview.Zone).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20230701preview_18.Zone, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Zone shouldn't use an unstable API (network.v20230701preview.Zone). A compatible replacement can be found at 'network.Zone'.");
            }),
        },
        vendors: ["azure"],
        services: ["network"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Zone || (Zone = {}));
exports.Zone = Zone;
