"use strict";
// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ------------------------------- WARNING -------------------------------------
// This file was programmatically generated. Do not edit unless you know what
// you're doing.
// ------------------------------- WARNING -------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeQuotaRule = exports.VolumeGroup = exports.Volume = exports.Subvolume = exports.SnapshotPolicy = exports.Snapshot = exports.Pool = exports.BackupVault = exports.BackupPolicy = exports.Backup = exports.Account = void 0;
const policy_1 = require("@pulumi/policy");
const compliance_policy_manager_1 = require("@pulumi/compliance-policy-manager");
const v20240501preview_1 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_2 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_3 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_4 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_5 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_6 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_7 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_8 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_9 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_10 = require("@pulumi/azure-native/netapp/v20240501preview");
const v20240501preview_11 = require("@pulumi/azure-native/netapp/v20240501preview");
var Account;
(function (Account) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Account).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Account.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-account-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Account).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_1.Account, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Account shouldn't use an unstable API (netapp.v20240501preview.Account). A compatible replacement can be found at 'netapp.Account'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Account || (Account = {}));
exports.Account = Account;
var Backup;
(function (Backup) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Backup).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Backup.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-backup-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Backup).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_2.Backup, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Backup shouldn't use an unstable API (netapp.v20240501preview.Backup). A compatible replacement can be found at 'netapp.v20240701.Backup'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Backup || (Backup = {}));
exports.Backup = Backup;
var BackupPolicy;
(function (BackupPolicy) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.BackupPolicy).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    BackupPolicy.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-backuppolicy-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.BackupPolicy).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_3.BackupPolicy, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure BackupPolicy shouldn't use an unstable API (netapp.v20240501preview.BackupPolicy). A compatible replacement can be found at 'netapp.BackupPolicy'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(BackupPolicy || (BackupPolicy = {}));
exports.BackupPolicy = BackupPolicy;
var BackupVault;
(function (BackupVault) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.BackupVault).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    BackupVault.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-backupvault-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.BackupVault).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_4.BackupVault, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure BackupVault shouldn't use an unstable API (netapp.v20240501preview.BackupVault). A compatible replacement can be found at 'netapp.BackupVault'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(BackupVault || (BackupVault = {}));
exports.BackupVault = BackupVault;
var Pool;
(function (Pool) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Pool).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Pool.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-pool-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Pool).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_5.Pool, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Pool shouldn't use an unstable API (netapp.v20240501preview.Pool). A compatible replacement can be found at 'netapp.Pool'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Pool || (Pool = {}));
exports.Pool = Pool;
var Snapshot;
(function (Snapshot) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Snapshot).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Snapshot.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-snapshot-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Snapshot).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_6.Snapshot, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Snapshot shouldn't use an unstable API (netapp.v20240501preview.Snapshot). A compatible replacement can be found at 'netapp.Snapshot'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Snapshot || (Snapshot = {}));
exports.Snapshot = Snapshot;
var SnapshotPolicy;
(function (SnapshotPolicy) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.SnapshotPolicy).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    SnapshotPolicy.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-snapshotpolicy-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.SnapshotPolicy).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_7.SnapshotPolicy, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure SnapshotPolicy shouldn't use an unstable API (netapp.v20240501preview.SnapshotPolicy). A compatible replacement can be found at 'netapp.SnapshotPolicy'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(SnapshotPolicy || (SnapshotPolicy = {}));
exports.SnapshotPolicy = SnapshotPolicy;
var Subvolume;
(function (Subvolume) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Subvolume).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Subvolume.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-subvolume-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Subvolume).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_8.Subvolume, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Subvolume shouldn't use an unstable API (netapp.v20240501preview.Subvolume). A compatible replacement can be found at 'netapp.Subvolume'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Subvolume || (Subvolume = {}));
exports.Subvolume = Subvolume;
var Volume;
(function (Volume) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Volume).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Volume.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-volume-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.Volume).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_9.Volume, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Volume shouldn't use an unstable API (netapp.v20240501preview.Volume). A compatible replacement can be found at 'netapp.Volume'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Volume || (Volume = {}));
exports.Volume = Volume;
var VolumeGroup;
(function (VolumeGroup) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.VolumeGroup).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    VolumeGroup.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-volumegroup-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.VolumeGroup).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_10.VolumeGroup, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure VolumeGroup shouldn't use an unstable API (netapp.v20240501preview.VolumeGroup). A compatible replacement can be found at 'netapp.VolumeGroup'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(VolumeGroup || (VolumeGroup = {}));
exports.VolumeGroup = VolumeGroup;
var VolumeQuotaRule;
(function (VolumeQuotaRule) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.VolumeQuotaRule).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    VolumeQuotaRule.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-netapp-v20240501preview-volumequotarule-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (netapp.v20240501preview.VolumeQuotaRule).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20240501preview_11.VolumeQuotaRule, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure VolumeQuotaRule shouldn't use an unstable API (netapp.v20240501preview.VolumeQuotaRule). A compatible replacement can be found at 'netapp.VolumeQuotaRule'.");
            }),
        },
        vendors: ["azure"],
        services: ["netapp"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(VolumeQuotaRule || (VolumeQuotaRule = {}));
exports.VolumeQuotaRule = VolumeQuotaRule;
