"use strict";
// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ------------------------------- WARNING -------------------------------------
// This file was programmatically generated. Do not edit unless you know what
// you're doing.
// ------------------------------- WARNING -------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivateEndpointConnection = exports.NotificationHubAuthorizationRule = exports.NotificationHub = exports.NamespaceAuthorizationRule = exports.Namespace = void 0;
const policy_1 = require("@pulumi/policy");
const compliance_policy_manager_1 = require("@pulumi/compliance-policy-manager");
const v20231001preview_1 = require("@pulumi/azure-native/notificationhubs/v20231001preview");
const v20231001preview_2 = require("@pulumi/azure-native/notificationhubs/v20231001preview");
const v20231001preview_3 = require("@pulumi/azure-native/notificationhubs/v20231001preview");
const v20231001preview_4 = require("@pulumi/azure-native/notificationhubs/v20231001preview");
const v20231001preview_5 = require("@pulumi/azure-native/notificationhubs/v20231001preview");
var Namespace;
(function (Namespace) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.Namespace).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    Namespace.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-notificationhubs-v20231001preview-namespace-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.Namespace).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20231001preview_1.Namespace, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure Namespace shouldn't use an unstable API (notificationhubs.v20231001preview.Namespace). A compatible replacement can be found at 'notificationhubs.Namespace'.");
            }),
        },
        vendors: ["azure"],
        services: ["notificationhubs"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(Namespace || (Namespace = {}));
exports.Namespace = Namespace;
var NamespaceAuthorizationRule;
(function (NamespaceAuthorizationRule) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.NamespaceAuthorizationRule).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NamespaceAuthorizationRule.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-notificationhubs-v20231001preview-namespaceauthorizationrule-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.NamespaceAuthorizationRule).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20231001preview_2.NamespaceAuthorizationRule, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NamespaceAuthorizationRule shouldn't use an unstable API (notificationhubs.v20231001preview.NamespaceAuthorizationRule). A compatible replacement can be found at 'notificationhubs.NamespaceAuthorizationRule'.");
            }),
        },
        vendors: ["azure"],
        services: ["notificationhubs"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NamespaceAuthorizationRule || (NamespaceAuthorizationRule = {}));
exports.NamespaceAuthorizationRule = NamespaceAuthorizationRule;
var NotificationHub;
(function (NotificationHub) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.NotificationHub).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NotificationHub.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-notificationhubs-v20231001preview-notificationhub-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.NotificationHub).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20231001preview_3.NotificationHub, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NotificationHub shouldn't use an unstable API (notificationhubs.v20231001preview.NotificationHub). A compatible replacement can be found at 'notificationhubs.NotificationHub'.");
            }),
        },
        vendors: ["azure"],
        services: ["notificationhubs"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NotificationHub || (NotificationHub = {}));
exports.NotificationHub = NotificationHub;
var NotificationHubAuthorizationRule;
(function (NotificationHubAuthorizationRule) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.NotificationHubAuthorizationRule).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    NotificationHubAuthorizationRule.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-notificationhubs-v20231001preview-notificationhubauthorizationrule-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.NotificationHubAuthorizationRule).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20231001preview_4.NotificationHubAuthorizationRule, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure NotificationHubAuthorizationRule shouldn't use an unstable API (notificationhubs.v20231001preview.NotificationHubAuthorizationRule). A compatible replacement can be found at 'notificationhubs.NotificationHubAuthorizationRule'.");
            }),
        },
        vendors: ["azure"],
        services: ["notificationhubs"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(NotificationHubAuthorizationRule || (NotificationHubAuthorizationRule = {}));
exports.NotificationHubAuthorizationRule = NotificationHubAuthorizationRule;
var PrivateEndpointConnection;
(function (PrivateEndpointConnection) {
    /**
     * Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.PrivateEndpointConnection).
     *
     * @severity medium
     * @frameworks none
     * @topics api, preview, unstable
     * @link https://learn.microsoft.com/en-us/rest/api/azure/
     */
    PrivateEndpointConnection.disallowPreviewResource = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azurenative-notificationhubs-v20231001preview-privateendpointconnection-disallow-preview-resource",
            description: "Disallow the use of non-stable (Preview) Azure resouces (notificationhubs.v20231001preview.PrivateEndpointConnection).",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(v20231001preview_5.PrivateEndpointConnection, (_, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                reportViolation("Azure PrivateEndpointConnection shouldn't use an unstable API (notificationhubs.v20231001preview.PrivateEndpointConnection). A compatible replacement can be found at 'notificationhubs.PrivateEndpointConnection'.");
            }),
        },
        vendors: ["azure"],
        services: ["notificationhubs"],
        severity: "medium",
        topics: ["api", "unstable", "preview"],
    });
})(PrivateEndpointConnection || (PrivateEndpointConnection = {}));
exports.PrivateEndpointConnection = PrivateEndpointConnection;
