"use strict";
// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ------------------------------- WARNING -------------------------------------
// This file was programmatically generated. Do not edit unless you know what
// you're doing.
// ------------------------------- WARNING -------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedDisk = exports.LinuxVirtualMachine = void 0;
const policy_1 = require("@pulumi/policy");
const compliance_policy_manager_1 = require("@pulumi/compliance-policy-manager");
const compute_1 = require("@pulumi/azure/compute");
const compute_2 = require("@pulumi/azure/compute");
var LinuxVirtualMachine;
(function (LinuxVirtualMachine) {
    /**
     * Authentication to Linux machines should require SSH keys.
     *
     * @severity high
     * @frameworks iso27001, pcidss
     * @topics authentication, security
     * @link https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed
     */
    LinuxVirtualMachine.disallowPasswordAuthentication = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azure-compute-linuxvirtualmachine-disallow-password-authentication",
            description: "Authentication to Linux machines should require SSH keys.",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(compute_1.LinuxVirtualMachine, (virtualmachine, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                if (!virtualmachine.disablePasswordAuthentication) {
                    reportViolation("Authentication to Linux machines should require SSH keys.");
                }
            }),
        },
        vendors: ["azure"],
        services: ["compute"],
        severity: "high",
        topics: ["security", "authentication"],
        frameworks: ["pcidss", "iso27001"],
    });
})(LinuxVirtualMachine || (LinuxVirtualMachine = {}));
exports.LinuxVirtualMachine = LinuxVirtualMachine;
var ManagedDisk;
(function (ManagedDisk) {
    /**
     * Checks that Disks are encrypted.
     *
     * @severity high
     * @frameworks iso27001, pcidss
     * @topics encryption, storage
     * @link https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption-overview
     */
    ManagedDisk.disallowUnencryptedManagedDisk = compliance_policy_manager_1.policyManager.registerPolicy({
        resourceValidationPolicy: {
            name: "azure-compute-manageddisk-disallow-unencrypted-managed-disk",
            description: "Checks that Disks are encrypted.",
            configSchema: compliance_policy_manager_1.policyManager.policyConfigSchema,
            enforcementLevel: "advisory",
            validateResource: (0, policy_1.validateResourceOfType)(compute_2.ManagedDisk, (disk, args, reportViolation) => {
                if (!compliance_policy_manager_1.policyManager.shouldEvalPolicy(args)) {
                    return;
                }
                if (disk.encryptionSettings === undefined) {
                    reportViolation("A Disk is currently not encrypted.");
                }
            }),
        },
        vendors: ["azure"],
        services: ["compute"],
        severity: "high",
        topics: ["storage", "encryption"],
        frameworks: ["pcidss", "iso27001"],
    });
})(ManagedDisk || (ManagedDisk = {}));
exports.ManagedDisk = ManagedDisk;
