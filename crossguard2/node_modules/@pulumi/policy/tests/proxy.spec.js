"use strict";
// Copyright 2016-2019, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const proxy_1 = require("../proxy");
function assertThrowsUnknownValue(f, unknownTypeSentinel, path) {
    try {
        f();
    }
    catch (e) {
        if (e instanceof proxy_1.UnknownValueError) {
            assert.strictEqual(e.unknownTypeSentinel, unknownTypeSentinel);
            assert.deepStrictEqual(e.props, path);
            return;
        }
        assert.fail(`threw something that is not an UnknownValueError: ${e}`);
    }
    assert.fail("didn't throw an error");
}
describe("proxy", () => {
    it("returns values at properties that are not unknown", () => {
        assert.strictEqual(proxy_1.unknownCheckingProxy({}).foo, undefined);
        assert.strictEqual(proxy_1.unknownCheckingProxy({ foo: "bar" }).foo, "bar");
        assert.strictEqual(proxy_1.unknownCheckingProxy({ foo: { bar: "baz" } }).foo.bar, "baz");
        assert.strictEqual(proxy_1.unknownCheckingProxy([]).foo, undefined);
        assert.strictEqual(proxy_1.unknownCheckingProxy([])[1], undefined);
        assert.strictEqual(proxy_1.unknownCheckingProxy(99).foo, undefined);
        assert.strictEqual(proxy_1.unknownCheckingProxy(99)[1], undefined);
        assert.strictEqual(proxy_1.unknownCheckingProxy("foo").foo, undefined);
        assert.strictEqual(proxy_1.unknownCheckingProxy("foo")[1], "o");
        assert.strictEqual(proxy_1.unknownCheckingProxy(undefined), undefined);
        assert.throws(() => proxy_1.unknownCheckingProxy(undefined).foo);
        assert.throws(() => proxy_1.unknownCheckingProxy(undefined)[1]);
        assert.strictEqual(proxy_1.unknownCheckingProxy(null), null);
        assert.throws(() => proxy_1.unknownCheckingProxy(null).foo);
        assert.throws(() => proxy_1.unknownCheckingProxy(null)[1]);
    });
    it("throws for properties that are unknown", () => {
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: proxy_1.unknownBooleanValue }).foo;
        }, proxy_1.unknownBooleanValue, ["foo"]);
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: proxy_1.unknownNumberValue }).foo;
        }, proxy_1.unknownNumberValue, ["foo"]);
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: proxy_1.unknownStringValue }).foo;
        }, proxy_1.unknownStringValue, ["foo"]);
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: proxy_1.unknownArrayValue }).foo;
        }, proxy_1.unknownArrayValue, ["foo"]);
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: proxy_1.unknownAssetValue }).foo;
        }, proxy_1.unknownAssetValue, ["foo"]);
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: proxy_1.unknownArchiveValue }).foo;
        }, proxy_1.unknownArchiveValue, ["foo"]);
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: proxy_1.unknownObjectValue }).foo;
        }, proxy_1.unknownObjectValue, ["foo"]);
    });
    it("throws for nested properties that are unknown", () => {
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: { bar: proxy_1.unknownBooleanValue } }).foo.bar;
        }, proxy_1.unknownBooleanValue, ["foo", "bar"]);
        assertThrowsUnknownValue(() => {
            return proxy_1.unknownCheckingProxy({ foo: [proxy_1.unknownBooleanValue] }).foo[0];
        }, proxy_1.unknownBooleanValue, ["foo", "0"]);
        assertThrowsUnknownValue(() => {
            const props = proxy_1.unknownCheckingProxy({ foo: [true, proxy_1.unknownBooleanValue, false] });
            let count = 0;
            for (const item of props.foo) {
                count++;
            }
        }, proxy_1.unknownBooleanValue, ["foo", "1"]);
        assertThrowsUnknownValue(() => {
            const props = proxy_1.unknownCheckingProxy({ foo: [true, proxy_1.unknownBooleanValue, false] });
            let count = 0;
            props.foo.forEach(() => {
                count++;
            });
        }, proxy_1.unknownBooleanValue, ["foo", "1"]);
    });
});
