"use strict";
// Copyright 2016-2019, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const protoutil_1 = require("../protoutil");
const analyzerproto = require("@pulumi/pulumi/proto/analyzer_pb.js");
//
// This collection of tests exists as an insurance policy against the untyped JS code generated by
// the analyzer PB definitions. Our goal here is basically to make sure that we're not calling the
// wrong functions/methods when we're serializing the PB structs, as this causes a very bad user
// experience (among other things, malformatted PB messages and exceptions in serialization can
// cause gRPC to hang for a long time with no indication there was an error).
//
describe("mapEnforcementLevel", () => {
    it("works, basically", () => {
        assert.strictEqual(protoutil_1.mapEnforcementLevel("advisory"), analyzerproto.EnforcementLevel.ADVISORY);
        assert.strictEqual(protoutil_1.mapEnforcementLevel("mandatory"), analyzerproto.EnforcementLevel.MANDATORY);
        assert.strictEqual(protoutil_1.mapEnforcementLevel("remediate"), analyzerproto.EnforcementLevel.REMEDIATE);
        assert.strictEqual(protoutil_1.mapEnforcementLevel("disabled"), analyzerproto.EnforcementLevel.DISABLED);
        assert.throws(() => protoutil_1.mapEnforcementLevel("invalidEnforcementLevel"));
    });
});
describe("makeAnalyzerInfo", () => {
    it("does not throw for reasonable policy packs", () => {
        assert.doesNotThrow(() => protoutil_1.makeAnalyzerInfo("testRules", "1.0.0", "advisory", []));
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzerInfo("testRules", "1.0.0", "advisory", [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "mandatory",
                    validateResource: (args, reportViolation) => { return; },
                },
            ]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzerInfo("testRules", "1.0.0", "advisory", [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "remediate",
                    validateResource: (args, reportViolation) => { return; },
                    remediateResource: (args) => { return; },
                },
            ]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzerInfo("testRules", "1.0.0", "advisory", [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "remediate",
                    remediateResource: (args) => { return; },
                },
            ]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzerInfo("testRules", "1.0.0", "advisory", [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "mandatory",
                    configSchema: {
                        properties: {
                            foo: { type: "string" },
                        },
                    },
                    validateResource: (args, reportViolation) => { return; },
                },
            ]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzerInfo("testRules", "1.0.0", "advisory", [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "disabled",
                    validateResource: (args, reportViolation) => { return; },
                },
            ]);
        });
    });
    it("throws for invalid enforcementLevel", () => {
        assert.throws(() => {
            protoutil_1.makeAnalyzerInfo("testRules", "1.0.0", "advisory", [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "invalidEnforcementLevel",
                    validateResource: (args, reportViolation) => { return; },
                },
            ]);
        });
    });
});
describe("makeAnalyzeResponse", () => {
    it("does not throw for reasonable diagnostic responses", () => {
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzeResponse([]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: "mandatory",
                },
            ]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: "mandatory",
                    urn: "foo",
                },
            ]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: "disabled",
                },
            ]);
        });
    });
    it("throws for invalid enforcementLevel", () => {
        assert.throws(() => {
            protoutil_1.makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: "invalidEnforcementLevel",
                },
            ]);
        });
    });
});
describe("makeRemediateResponse", () => {
    it("does not throw for reasonable remediation responses", () => {
        assert.doesNotThrow(() => {
            protoutil_1.makeRemediateResponse([]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeRemediateResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    properties: {
                        "foo": "bar",
                        "zed": 33,
                        "zap": [99, 66, 11],
                    },
                },
            ]);
        });
        assert.doesNotThrow(() => {
            protoutil_1.makeRemediateResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    diagnostic: "A warning was issued; remediate not performed.",
                },
            ]);
        });
    });
    it("throws for missing properties OR diagnostic", () => {
        assert.throws(() => {
            protoutil_1.makeRemediateResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                },
            ]);
        });
    });
});
describe("normalizeConfig", () => {
    it("works as expected", () => {
        const tests = [
            {
                config: {},
                expected: {},
            },
            {
                config: { policy: "advisory" },
                expected: { policy: { enforcementLevel: "advisory" } },
            },
            {
                config: { policy: { enforcementLevel: "advisory" } },
                expected: { policy: { enforcementLevel: "advisory" } },
            },
            {
                config: { policy: { foo: "bar" } },
                expected: { policy: { properties: { foo: "bar" } } },
            },
            {
                config: { policy: { enforcementLevel: "advisory", foo: "bar" } },
                expected: { policy: { enforcementLevel: "advisory", properties: { foo: "bar" } } },
            },
        ];
        for (const test of tests) {
            assert.deepStrictEqual(protoutil_1.normalizeConfig(test.config), test.expected);
        }
    });
});
