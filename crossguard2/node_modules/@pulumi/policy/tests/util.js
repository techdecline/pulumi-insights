"use strict";
// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runStackPolicy = exports.runResourceRemediation = exports.runResourcePolicy = exports.asyncTest = void 0;
// A helper function for wrapping some of the boilerplate goo necessary to interface between Mocha's asynchronous
// testing and our TypeScript async tests.
/** @internal */
function asyncTest(test) {
    return (done) => {
        const go = () => __awaiter(this, void 0, void 0, function* () {
            let caught;
            try {
                yield test();
            }
            catch (err) {
                caught = err;
            }
            finally {
                done(caught);
            }
        });
        go();
    };
}
exports.asyncTest = asyncTest;
// runResourcePolicy will run some basic checks for a policy's metadata, and then
// execute its rules with the provided type and properties.
/** @internal */
function runResourcePolicy(resPolicy, args) {
    return __awaiter(this, void 0, void 0, function* () {
        const violations = [];
        const report = (message, urn) => {
            violations.push(Object.assign({ message: message }, urn && { urn }));
        };
        const validations = Array.isArray(resPolicy.validateResource)
            ? resPolicy.validateResource
            : [resPolicy.validateResource];
        for (const validation of validations) {
            if (validation) {
                yield Promise.resolve(validation(args, report));
            }
        }
        return violations;
    });
}
exports.runResourcePolicy = runResourcePolicy;
// runResourceRemediation will run some basic checks for a policy's metadata, and then
// execute its remediations with the provided type and properties, returning the results.
/** @internal */
function runResourceRemediation(resPolicy, args) {
    return __awaiter(this, void 0, void 0, function* () {
        if (resPolicy.remediateResource) {
            const result = yield Promise.resolve(resPolicy.remediateResource(args));
            if (result) {
                return result;
            }
        }
        return undefined;
    });
}
exports.runResourceRemediation = runResourceRemediation;
// runStackPolicy will run some basic checks for a policy's metadata, and then
// execute its rules with the provided type and properties.
/** @internal */
function runStackPolicy(stackPolicy, args) {
    return __awaiter(this, void 0, void 0, function* () {
        const violations = [];
        const report = (message, urn) => {
            violations.push(Object.assign({ message: message }, urn && { urn }));
        };
        yield Promise.resolve(stackPolicy.validateStack(args, report));
        return violations;
    });
}
exports.runStackPolicy = runStackPolicy;
