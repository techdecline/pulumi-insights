import { AzureKeyCredential } from '@azure/core-auth';
import { AzureSASCredential } from '@azure/core-auth';
import { CommonClientOptions } from '@azure/core-client';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-client';
import { SASCredential } from '@azure/core-auth';
import { TokenCredential } from '@azure/core-auth';

/** Schema of common properties of all chat events */
export declare interface AcsChatEventBase {
    /** The communication identifier of the target user */
    recipientCommunicationIdentifier: CommunicationIdentifierModel;
    /** The transaction id will be used as co-relation vector */
    transactionId: string;
    /** The chat thread id */
    threadId: string;
}

/** Schema of common properties of all thread-level chat events */
export declare interface AcsChatEventInThreadBase {
    /** The transaction id will be used as co-relation vector */
    transactionId: string;
    /** The chat thread id */
    threadId: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageDeleted event. */
export declare type AcsChatMessageDeletedEventData = AcsChatMessageEventBase & {
    /** The time at which the message was deleted */
    deleteTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageDeletedInThread event. */
export declare type AcsChatMessageDeletedInThreadEventData = AcsChatMessageEventInThreadBase & {
    /** The time at which the message was deleted */
    deleteTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageEdited event. */
export declare type AcsChatMessageEditedEventData = AcsChatMessageEventBase & {
    /** The body of the chat message */
    messageBody: string;
    /** The chat message metadata */
    metadata: {
        [propertyName: string]: string;
    };
    /** The time at which the message was edited */
    editTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageEditedInThread event. */
export declare type AcsChatMessageEditedInThreadEventData = AcsChatMessageEventInThreadBase & {
    /** The body of the chat message */
    messageBody: string;
    /** The chat message metadata */
    metadata: {
        [propertyName: string]: string;
    };
    /** The time at which the message was edited */
    editTime: string;
};

/** Schema of common properties of all chat message events */
export declare type AcsChatMessageEventBase = AcsChatEventBase & {
    /** The chat message id */
    messageId: string;
    /** The communication identifier of the sender */
    senderCommunicationIdentifier: CommunicationIdentifierModel;
    /** The display name of the sender */
    senderDisplayName: string;
    /** The original compose time of the message */
    composeTime: string;
    /** The type of the message */
    type: string;
    /** The version of the message */
    version: number;
};

/** Schema of common properties of all thread-level chat message events */
export declare type AcsChatMessageEventInThreadBase = AcsChatEventInThreadBase & {
    /** The chat message id */
    messageId: string;
    /** The communication identifier of the sender */
    senderCommunicationIdentifier: CommunicationIdentifierModel;
    /** The display name of the sender */
    senderDisplayName: string;
    /** The original compose time of the message */
    composeTime: string;
    /** The type of the message */
    type: string;
    /** The version of the message */
    version: number;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageReceived event. */
export declare type AcsChatMessageReceivedEventData = AcsChatMessageEventBase & {
    /** The body of the chat message */
    messageBody: string;
    /** The chat message metadata */
    metadata: {
        [propertyName: string]: string;
    };
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageReceivedInThread event. */
export declare type AcsChatMessageReceivedInThreadEventData = AcsChatMessageEventInThreadBase & {
    /** The body of the chat message */
    messageBody: string;
    /** The chat message metadata */
    metadata: {
        [propertyName: string]: string;
    };
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadParticipantAdded event. */
export declare type AcsChatParticipantAddedToThreadEventData = AcsChatEventInThreadBase & {
    /** The time at which the user was added to the thread */
    time: string;
    /** The communication identifier of the user who added the user */
    addedByCommunicationIdentifier: CommunicationIdentifierModel;
    /** The details of the user who was added */
    participantAdded: AcsChatThreadParticipant;
    /** The version of the thread */
    version: number;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatParticipantAddedToThreadWithUser event. */
export declare type AcsChatParticipantAddedToThreadWithUserEventData = AcsChatThreadEventBase & {
    /** The time at which the user was added to the thread */
    time: string;
    /** The communication identifier of the user who added the user */
    addedByCommunicationIdentifier: CommunicationIdentifierModel;
    /** The details of the user who was added */
    participantAdded: AcsChatThreadParticipant;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadParticipantRemoved event. */
export declare type AcsChatParticipantRemovedFromThreadEventData = AcsChatEventInThreadBase & {
    /** The time at which the user was removed to the thread */
    time: string;
    /** The communication identifier of the user who removed the user */
    removedByCommunicationIdentifier: CommunicationIdentifierModel;
    /** The details of the user who was removed */
    participantRemoved: AcsChatThreadParticipant;
    /** The version of the thread */
    version: number;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser event. */
export declare type AcsChatParticipantRemovedFromThreadWithUserEventData = AcsChatThreadEventBase & {
    /** The time at which the user was removed to the thread */
    time: string;
    /** The communication identifier of the user who removed the user */
    removedByCommunicationIdentifier: CommunicationIdentifierModel;
    /** The details of the user who was removed */
    participantRemoved: AcsChatThreadParticipant;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadCreatedWithUser event. */
export declare type AcsChatThreadCreatedWithUserEventData = AcsChatThreadEventBase & {
    /** The communication identifier of the user who created the thread */
    createdByCommunicationIdentifier: CommunicationIdentifierModel;
    /** The thread properties */
    properties: {
        [propertyName: string]: any;
    };
    /** The list of properties of participants who are part of the thread */
    participants: AcsChatThreadParticipant[];
};

/** Schema of common properties of all chat thread events */
export declare type AcsChatThreadEventBase = AcsChatEventBase & {
    /** The original creation time of the thread */
    createTime: string;
    /** The version of the thread */
    version: number;
};

/** Schema of the chat thread participant */
export declare interface AcsChatThreadParticipant {
    /** The name of the user */
    displayName: string;
    /** The communication identifier of the user */
    participantCommunicationIdentifier: CommunicationIdentifierModel;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser event. */
export declare type AcsChatThreadPropertiesUpdatedPerUserEventData = AcsChatThreadEventBase & {
    /** The communication identifier of the user who updated the thread properties */
    editedByCommunicationIdentifier: CommunicationIdentifierModel;
    /** The time at which the properties of the thread were updated */
    editTime: string;
    /** The updated thread properties */
    properties: {
        [propertyName: string]: any;
    };
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadWithUserDeleted event. */
export declare type AcsChatThreadWithUserDeletedEventData = AcsChatThreadEventBase & {
    /** The communication identifier of the user who deleted the thread */
    deletedByCommunicationIdentifier: CommunicationIdentifierModel;
    /** The deletion time of the thread */
    deleteTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.EmailDeliveryReportReceived event. */
export declare interface AcsEmailDeliveryReportReceivedEventData {
    /** The Sender Email Address */
    sender: string;
    /** The recipient Email Address */
    recipient: string;
    /** The Id of the email been sent */
    messageId: string;
    /** The status of the email. Any value other than Delivered is considered failed. */
    status: AcsEmailDeliveryReportStatus;
    /** Detailed information about the status if any */
    deliveryStatusDetails: AcsEmailDeliveryReportStatusDetails;
    /** The time at which the email delivery report received timestamp */
    deliveryAttemptTimestamp: string;
}

/**
 * Defines values for AcsEmailDeliveryReportStatus. \
 * {@link KnownAcsEmailDeliveryReportStatus} can be used interchangeably with AcsEmailDeliveryReportStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bounced**: Hard bounce detected while sending the email \
 * **Delivered**: The email was delivered \
 * **Failed**: The email failed to be delivered \
 * **FilteredSpam**: The message was identified spam and was rejected or blocked (not quarantined). \
 * **Quarantined**: The message was quarantined (as spam, bulk mail, or phishing). For more information, see Quarantined email messages in EOP (EXCHANGE ONLINE PROTECTION). \
 * **Suppressed**: The email was suppressed
 */
export declare type AcsEmailDeliveryReportStatus = string;

/** Detailed information about the status if any */
export declare interface AcsEmailDeliveryReportStatusDetails {
    /** Detailed status message */
    statusMessage: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.EmailEngagementTrackingReportReceived event. */
export declare interface AcsEmailEngagementTrackingReportReceivedEventData {
    /** The Sender Email Address */
    sender: string;
    /** The Recipient Email Address */
    recipient: string;
    /** The Id of the email that has been sent */
    messageId: string;
    /** The time at which the user interacted with the email */
    userActionTimestamp: string;
    /** The context of the type of engagement user had with email */
    engagementContext: string;
    /** The user agent interacting with the email */
    userAgent: string;
    /** The type of engagement user have with email */
    engagement: AcsUserEngagement;
}

/** Custom Context of Incoming Call */
export declare interface AcsIncomingCallCustomContext {
    /** Sip Headers for incoming call */
    sipHeaders: {
        [propertyName: string]: string;
    };
    /** Voip Headers for incoming call */
    voipHeaders: {
        [propertyName: string]: string;
    };
}

/** Schema of the Data property of an EventGridEvent for an Microsoft.Communication.IncomingCall event */
export declare interface AcsIncomingCallEventData {
    /** The communication identifier of the target user. */
    toCommunicationIdentifier: CommunicationIdentifierModel;
    /** The communication identifier of the user who initiated the call. */
    fromCommunicationIdentifier: CommunicationIdentifierModel;
    /** The Id of the server call */
    serverCallId: string;
    /** Display name of caller. */
    callerDisplayName: string;
    /** Custom Context of Incoming Call */
    customContext: AcsIncomingCallCustomContext;
    /** Signed incoming call context. */
    incomingCallContext: string;
    /** CorrelationId (CallId). */
    correlationId: string;
}

/** Schema for all properties of  Recording Chunk Information. */
export declare interface AcsRecordingChunkInfo {
    /** The documentId of the recording chunk */
    documentId: string;
    /** The index of the recording chunk */
    index: number;
    /** The reason for ending the recording chunk */
    endReason: string;
    /** The location of the metadata for this chunk */
    metadataLocation: string;
    /** The location of the content for this chunk */
    contentLocation: string;
    /** The location to delete all chunk storage */
    deleteLocation: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RecordingFileStatusUpdated event. */
export declare interface AcsRecordingFileStatusUpdatedEventData {
    /** The details of recording storage information */
    recordingStorageInfo: AcsRecordingStorageInfo;
    /** The time at which the recording started */
    recordingStartTime: string;
    /** The recording duration in milliseconds */
    recordingDurationMs: number;
    /** The recording content type- AudioVideo, or Audio */
    recordingContentType: RecordingContentType;
    /** The recording  channel type - Mixed, Unmixed */
    recordingChannelType: RecordingChannelType;
    /** The recording format type - Mp4, Mp3, Wav */
    recordingFormatType: RecordingFormatType;
    /** The reason for ending recording session */
    sessionEndReason: string;
}

/** Schema for all properties of Recording Storage Information. */
export declare interface AcsRecordingStorageInfo {
    /** List of details of recording chunks information */
    recordingChunks: AcsRecordingChunkInfo[];
}

/** Router Channel Configuration */
export declare interface AcsRouterChannelConfiguration {
    /** Channel ID for Router Job */
    channelId: string;
    /** Capacity Cost Per Job for Router Job */
    capacityCostPerJob: number;
    /** Max Number of Jobs for Router Job */
    maxNumberOfJobs: number;
}

/** Router Communication Error */
export declare interface AcsRouterCommunicationError {
    /** Router Communication Error Code */
    code: string;
    /** Router Communication Error Message */
    message: string;
    /** Router Communication Error Target */
    target: string;
    /** Router Communication Inner Error */
    innererror: AcsRouterCommunicationError;
    /** List of Router Communication Errors */
    details: AcsRouterCommunicationError[];
}

/** Schema of common properties of all Router events */
export declare interface AcsRouterEventData {
    /** Router Event Job ID */
    jobId: string;
    /** Router Event Channel Reference */
    channelReference: string;
    /** Router Event Channel ID */
    channelId: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobCancelled event */
export declare type AcsRouterJobCancelledEventData = AcsRouterJobEventData & {
    /** Router Job Note */
    note: string;
    /** Router Job Disposition Code */
    dispositionCode: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobClassificationFailed event */
export declare type AcsRouterJobClassificationFailedEventData = AcsRouterJobEventData & {
    /** Router Job Classification Policy Id */
    classificationPolicyId: string;
    /** Router Job Classification Failed Errors */
    errors: AcsRouterCommunicationError[];
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobClassified event */
export declare type AcsRouterJobClassifiedEventData = AcsRouterJobEventData & {
    /** Router Job Queue Info */
    queueDetails: AcsRouterQueueDetails;
    /** Router Job Classification Policy Id */
    classificationPolicyId: string;
    /** Router Job Priority */
    priority: number;
    /** Router Job Attached Worker Selector */
    attachedWorkerSelectors: AcsRouterWorkerSelector[];
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobClosed event */
export declare type AcsRouterJobClosedEventData = AcsRouterJobEventData & {
    /** Router Job Closed Assignment Id */
    assignmentId: string;
    /** Router Job Closed Worker Id */
    workerId: string;
    /** Router Job Closed Disposition Code */
    dispositionCode: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobCompleted event */
export declare type AcsRouterJobCompletedEventData = AcsRouterJobEventData & {
    /** Router Job Completed Assignment Id */
    assignmentId: string;
    /** Router Job Completed Worker Id */
    workerId: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobDeleted event */
export declare type AcsRouterJobDeletedEventData = AcsRouterJobEventData & {};

/** Schema of common properties of all Router Job events */
export declare type AcsRouterJobEventData = AcsRouterEventData & {
    /** Router Job events Queue Id */
    queueId: string;
    /** Router Job events Labels */
    labels: {
        [propertyName: string]: string;
    };
    /** Router Jobs events Tags */
    tags: {
        [propertyName: string]: string;
    };
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobExceptionTriggered event */
export declare type AcsRouterJobExceptionTriggeredEventData = AcsRouterJobEventData & {
    /** Router Job Exception Triggered Rule Key */
    ruleKey: string;
    /** Router Job Exception Triggered Rule Id */
    exceptionRuleId: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobQueued event */
export declare type AcsRouterJobQueuedEventData = AcsRouterJobEventData & {
    /** Router Job Priority */
    priority: number;
    /** Router Job Queued Attached Worker Selector */
    attachedWorkerSelectors: AcsRouterWorkerSelector[];
    /** Router Job Queued Requested Worker Selector */
    requestedWorkerSelectors: AcsRouterWorkerSelector[];
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobReceived event */
export declare type AcsRouterJobReceivedEventData = AcsRouterJobEventData & {
    /** Router Job Received Job Status */
    jobStatus?: AcsRouterJobStatus;
    /** Router Job Classification Policy Id */
    classificationPolicyId?: string;
    /** Router Job Priority */
    priority?: number;
    /** Router Job Received Requested Worker Selectors */
    requestedWorkerSelectors?: AcsRouterWorkerSelector[];
    /** Router Job Received Scheduled Time in UTC */
    scheduledOn?: string;
    /** Unavailable For Matching for Router Job Received */
    unavailableForMatching: boolean;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobSchedulingFailed event */
export declare type AcsRouterJobSchedulingFailedEventData = AcsRouterJobEventData & {
    /** Router Job Priority */
    priority: number;
    /** Router Job Scheduling Failed Attached Worker Selector Expired */
    expiredAttachedWorkerSelectors: AcsRouterWorkerSelector[];
    /** Router Job Scheduling Failed Requested Worker Selector Expired */
    expiredRequestedWorkerSelectors: AcsRouterWorkerSelector[];
    /** Router Job Scheduling Failed Scheduled Time in UTC */
    scheduledOn: string;
    /** Router Job Scheduling Failed Reason */
    failureReason: string;
};

/**
 * Defines values for AcsRouterJobStatus. \
 * {@link KnownAcsRouterJobStatus} can be used interchangeably with AcsRouterJobStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PendingClassification** \
 * **Queued** \
 * **Assigned** \
 * **Completed** \
 * **Closed** \
 * **Cancelled** \
 * **ClassificationFailed** \
 * **Created** \
 * **PendingSchedule** \
 * **Scheduled** \
 * **ScheduleFailed** \
 * **WaitingForActivation**
 */
export declare type AcsRouterJobStatus = string;

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobUnassigned event */
export declare type AcsRouterJobUnassignedEventData = AcsRouterJobEventData & {
    /** Router Job Unassigned Assignment Id */
    assignmentId: string;
    /** Router Job Unassigned Worker Id */
    workerId: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobWaitingForActivation event */
export declare type AcsRouterJobWaitingForActivationEventData = AcsRouterJobEventData & {
    /** Router Job Waiting For Activation Priority */
    priority?: number;
    /** Router Job Waiting For Activation Worker Selector Expired */
    expiredAttachedWorkerSelectors?: AcsRouterWorkerSelector[];
    /** Router Job Waiting For Activation Requested Worker Selector Expired */
    expiredRequestedWorkerSelectors?: AcsRouterWorkerSelector[];
    /** Router Job Waiting For Activation Scheduled Time in UTC */
    scheduledOn?: string;
    /** Router Job Waiting For Activation Unavailable For Matching */
    unavailableForMatching: boolean;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobWorkerSelectorsExpired event */
export declare type AcsRouterJobWorkerSelectorsExpiredEventData = AcsRouterJobEventData & {
    /** Router Job Worker Selectors Expired Requested Worker Selectors */
    expiredRequestedWorkerSelectors: AcsRouterWorkerSelector[];
    /** Router Job Worker Selectors Expired Attached Worker Selectors */
    expiredAttachedWorkerSelectors: AcsRouterWorkerSelector[];
};

/**
 * Defines values for AcsRouterLabelOperator. \
 * {@link KnownAcsRouterLabelOperator} can be used interchangeably with AcsRouterLabelOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equal**: = \
 * **NotEqual**: != \
 * **Greater**: > \
 * **Less**: < \
 * **GreaterThanOrEqual**: >= \
 * **LessThanOrEqual**: <=
 */
export declare type AcsRouterLabelOperator = string;

/** Router Queue Details */
export declare interface AcsRouterQueueDetails {
    /** Router Queue Id */
    id: string;
    /** Router Queue Name */
    name: string;
    /** Router Queue Labels */
    labels: {
        [propertyName: string]: string;
    };
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerDeleted event */
export declare type AcsRouterWorkerDeletedEventData = AcsRouterWorkerEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerDeregistered event */
export declare interface AcsRouterWorkerDeregisteredEventData {
    /** Router Worker Deregistered Worker Id */
    workerId: string;
}

/** Schema of common properties of all Router Worker events */
export declare type AcsRouterWorkerEventData = AcsRouterEventData & {
    /** Router Worker events Worker Id */
    workerId: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerOfferAccepted event */
export declare type AcsRouterWorkerOfferAcceptedEventData = AcsRouterWorkerEventData & {
    /** Router Worker Offer Accepted Queue Id */
    queueId: string;
    /** Router Worker Offer Accepted Offer Id */
    offerId: string;
    /** Router Worker Offer Accepted Assignment Id */
    assignmentId: string;
    /** Router Worker Offer Accepted Job Priority */
    jobPriority: number;
    /** Router Worker Offer Accepted Worker Labels */
    workerLabels: {
        [propertyName: string]: string;
    };
    /** Router Worker Offer Accepted Worker Tags */
    workerTags: {
        [propertyName: string]: string;
    };
    /** Router Worker Offer Accepted Job Labels */
    jobLabels: {
        [propertyName: string]: string;
    };
    /** Router Worker Offer Accepted Job Tags */
    jobTags: {
        [propertyName: string]: string;
    };
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerOfferDeclined event */
export declare type AcsRouterWorkerOfferDeclinedEventData = AcsRouterWorkerEventData & {
    /** Router Worker Offer Declined Queue Id */
    queueId: string;
    /** Router Worker Offer Declined Offer Id */
    offerId: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerOfferExpired event */
export declare type AcsRouterWorkerOfferExpiredEventData = AcsRouterWorkerEventData & {
    /** Router Worker Offer Expired Queue Id */
    queueId: string;
    /** Router Worker Offer Expired Offer Id */
    offerId: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerOfferIssued event */
export declare type AcsRouterWorkerOfferIssuedEventData = AcsRouterWorkerEventData & {
    /** Router Worker Offer Issued Queue Id */
    queueId: string;
    /** Router Worker Offer Issued Offer Id */
    offerId: string;
    /** Router Worker Offer Issued Job Priority */
    jobPriority: number;
    /** Router Worker Offer Issued Worker Labels */
    workerLabels: {
        [propertyName: string]: string;
    };
    /** Router Worker Offer Issued Time in UTC */
    offeredOn: string;
    /** Router Worker Offer Issued Expiration Time in UTC */
    expiresOn: string;
    /** Router Worker Offer Issued Worker Tags */
    workerTags: {
        [propertyName: string]: string;
    };
    /** Router Worker Offer Issued Job Labels */
    jobLabels: {
        [propertyName: string]: string;
    };
    /** Router Worker Offer Issued Job Tags */
    jobTags: {
        [propertyName: string]: string;
    };
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerOfferRevoked event */
export declare type AcsRouterWorkerOfferRevokedEventData = AcsRouterWorkerEventData & {
    /** Router Worker Offer Revoked Queue Id */
    queueId: string;
    /** Router Worker Offer Revoked Offer Id */
    offerId: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerRegistered event */
export declare interface AcsRouterWorkerRegisteredEventData {
    /** Router Worker Registered Worker Id */
    workerId: string;
    /** Router Worker Registered Queue Info */
    queueAssignments: AcsRouterQueueDetails[];
    /** Router Worker Registered Channel Configuration */
    channelConfigurations: AcsRouterChannelConfiguration[];
    /** Router Worker Register Total Capacity */
    totalCapacity: number;
    /** Router Worker Registered Labels */
    labels: {
        [propertyName: string]: string;
    };
    /** Router Worker Registered Tags */
    tags: {
        [propertyName: string]: string;
    };
}

/** Router Job Worker Selector */
export declare interface AcsRouterWorkerSelector {
    /** Router Job Worker Selector Key */
    key: string;
    /** Router Job Worker Selector Label Operator */
    labelOperator: AcsRouterLabelOperator;
    /** Router Job Worker Selector Value */
    labelValue: any;
    /** Router Job Worker Selector Time to Live in Seconds */
    ttlSeconds: number;
    /** Router Job Worker Selector State */
    state: AcsRouterWorkerSelectorState;
    /** Router Job Worker Selector Expiration Time */
    expirationTime: string;
}

/**
 * Defines values for AcsRouterWorkerSelectorState. \
 * {@link KnownAcsRouterWorkerSelectorState} can be used interchangeably with AcsRouterWorkerSelectorState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **active**: Router Job Worker Selector is Active \
 * **expired**: Router Job Worker Selector has Expire
 */
export declare type AcsRouterWorkerSelectorState = string;

/** Schema for details of a delivery attempt */
export declare interface AcsSmsDeliveryAttempt {
    /** TimeStamp when delivery was attempted */
    timestamp: string;
    /** Number of segments that were successfully delivered */
    segmentsSucceeded: number;
    /** Number of segments whose delivery failed */
    segmentsFailed: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSDeliveryReportReceived event. */
export declare type AcsSmsDeliveryReportReceivedEventData = AcsSmsEventBase & {
    /** Status of Delivery */
    deliveryStatus: string;
    /** Details about Delivery Status */
    deliveryStatusDetails: string;
    /** List of details of delivery attempts made */
    deliveryAttempts: AcsSmsDeliveryAttempt[];
    /** The time at which the SMS delivery report was received */
    receivedTimestamp: string;
    /** Customer Content */
    tag: string;
};

/** Schema of common properties of all SMS events */
export declare interface AcsSmsEventBase {
    /** The identity of the SMS message */
    messageId: string;
    /** The identity of SMS message sender */
    from: string;
    /** The identity of SMS message receiver */
    to: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSReceived event. */
export declare type AcsSmsReceivedEventData = AcsSmsEventBase & {
    /** The SMS content */
    message: string;
    /** The time at which the SMS was received */
    receivedTimestamp: string;
};

/** Schema of the Data property of an EventGridEvent for an Microsoft.Communication.UserDisconnected event. */
export declare interface AcsUserDisconnectedEventData {
    /** The communication identifier of the user who was disconnected */
    userCommunicationIdentifier: CommunicationIdentifierModel;
}

/**
 * Defines values for AcsUserEngagement. \
 * {@link KnownAcsUserEngagement} can be used interchangeably with AcsUserEngagement,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **view** \
 * **click**
 */
export declare type AcsUserEngagement = string;

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APICreated event. */
export declare interface ApiManagementApiCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APIDeleted event. */
export declare interface ApiManagementApiDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APIReleaseCreated event. */
export declare interface ApiManagementApiReleaseCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APIReleaseDeleted event. */
export declare interface ApiManagementApiReleaseDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APIReleaseUpdated event. */
export declare interface ApiManagementApiReleaseUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APIUpdated event. */
export declare interface ApiManagementApiUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayAPIAdded event. */
export declare interface ApiManagementGatewayApiAddedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/apis/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayAPIRemoved event. */
export declare interface ApiManagementGatewayApiRemovedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/apis/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayCertificateAuthorityCreated event. */
export declare interface ApiManagementGatewayCertificateAuthorityCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayCertificateAuthorityDeleted event. */
export declare interface ApiManagementGatewayCertificateAuthorityDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayCertificateAuthorityUpdated event. */
export declare interface ApiManagementGatewayCertificateAuthorityUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayCreated event. */
export declare interface ApiManagementGatewayCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayDeleted event. */
export declare interface ApiManagementGatewayDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayHostnameConfigurationCreated event. */
export declare interface ApiManagementGatewayHostnameConfigurationCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayHostnameConfigurationDeleted event. */
export declare interface ApiManagementGatewayHostnameConfigurationDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayHostnameConfigurationUpdated event. */
export declare interface ApiManagementGatewayHostnameConfigurationUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayUpdated event. */
export declare interface ApiManagementGatewayUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.ProductCreated event. */
export declare interface ApiManagementProductCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.ProductDeleted event. */
export declare interface ApiManagementProductDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.ProductUpdated event. */
export declare interface ApiManagementProductUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.SubscriptionCreated event. */
export declare interface ApiManagementSubscriptionCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.SubscriptionDeleted event. */
export declare interface ApiManagementSubscriptionDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.SubscriptionUpdated event. */
export declare interface ApiManagementSubscriptionUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.UserCreated event. */
export declare interface ApiManagementUserCreatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.UserDeleted event. */
export declare interface ApiManagementUserDeletedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.UserUpdated event. */
export declare interface ApiManagementUserUpdatedEventData {
    /** The fully qualified ID of the resource that the compliance state change is for, including the resource name and resource type. Uses the format, `/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>` */
    resourceUri: string;
}

/**
 * Defines values for AppAction. \
 * {@link KnownAppAction} can be used interchangeably with AppAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Restarted**: Web app was restarted. \
 * **Stopped**: Web app was stopped. \
 * **ChangedAppSettings**: There was an operation to change app setting on the web app. \
 * **Started**: The job has started. \
 * **Completed**: The job has completed. \
 * **Failed**: The job has failed to complete.
 */
export declare type AppAction = string;

/** Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.KeyValueDeleted event. */
export declare interface AppConfigurationKeyValueDeletedEventData {
    /** The key used to identify the key-value that was deleted. */
    key: string;
    /** The label, if any, used to identify the key-value that was deleted. */
    label: string;
    /** The etag representing the key-value that was deleted. */
    etag: string;
    /** The sync token representing the server state after the event. */
    syncToken: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.KeyValueModified event. */
export declare interface AppConfigurationKeyValueModifiedEventData {
    /** The key used to identify the key-value that was modified. */
    key: string;
    /** The label, if any, used to identify the key-value that was modified. */
    label: string;
    /** The etag representing the new state of the key-value. */
    etag: string;
    /** The sync token representing the server state after the event. */
    syncToken: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.SnapshotCreated event. */
export declare type AppConfigurationSnapshotCreatedEventData = AppConfigurationSnapshotEventData & {};

/** Schema of common properties of snapshot events */
export declare interface AppConfigurationSnapshotEventData {
    /** The name of the snapshot. */
    name: string;
    /** The etag representing the new state of the snapshot. */
    etag: string;
    /** The sync token representing the server state after the event. */
    syncToken: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.SnapshotModified event. */
export declare type AppConfigurationSnapshotModifiedEventData = AppConfigurationSnapshotEventData & {};

/** Detail of action on the app. */
export declare interface AppEventTypeDetail {
    /** Type of action of the operation. */
    action: AppAction;
}

/**
 * Defines values for AppServicePlanAction. \
 * {@link KnownAppServicePlanAction} can be used interchangeably with AppServicePlanAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Updated**: App Service plan is being updated.
 */
export declare type AppServicePlanAction = string;

/** Detail of action on the app service plan. */
export declare interface AppServicePlanEventTypeDetail {
    /** Kind of environment where app service plan is. */
    stampKind: StampKind;
    /** Type of action on the app service plan. */
    action: AppServicePlanAction;
    /** Asynchronous operation status of the operation on the app service plan. */
    status: AsyncStatus;
}

/**
 * Defines values for AsyncStatus. \
 * {@link KnownAsyncStatus} can be used interchangeably with AsyncStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Started**: Async operation has started. \
 * **Completed**: Async operation has completed. \
 * **Failed**: Async operation failed to complete.
 */
export declare type AsyncStatus = string;

export { AzureKeyCredential }

export { AzureSASCredential }

/**
 * An event in the Cloud Event 1.0 schema.
 */
export declare interface CloudEvent<T> {
    /**
     * Type of event related to the originating occurrence.
     */
    type: string;
    /**
     * Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
     */
    source: string;
    /**
     * An identifier for the event. The combination of id and source must be unique for each distinct event.
     */
    id: string;
    /**
     * The time the event was generated.
     */
    time?: Date;
    /**
     * Identifies the schema that data adheres to.
     */
    dataschema?: string;
    /**
     * Content type of data value.
     */
    datacontenttype?: string;
    /**
     * Event data specific to the event type.
     */
    data?: T;
    /**
     * This describes the subject of the event in the context of the event producer (identified by source).
     */
    subject?: string;
    /**
     * Additional context attributes for the event. The Cloud Event specification refers to these as "extension attributes".
     */
    extensionAttributes?: Record<string, unknown>;
}

/**
 * Options for the send events operation, when the input schema is cloud event.
 */
export declare interface CloudEventSendOptions extends SendOptions {
    /**
     * The name of the channel to send the event to (only valid for Partner Namespaces and Topics).
     */
    channelName?: string;
}

/**
 * Defines values for CommunicationCloudEnvironmentModel. \
 * {@link KnownCommunicationCloudEnvironmentModel} can be used interchangeably with CommunicationCloudEnvironmentModel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **public** \
 * **dod** \
 * **gcch**
 */
export declare type CommunicationCloudEnvironmentModel = string;

/** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */
export declare interface CommunicationIdentifierModel {
    /** Raw Id of the identifier. Optional in requests, required in responses. */
    rawId: string;
    /** The communication user. */
    communicationUser?: CommunicationUserIdentifierModel;
    /** The phone number. */
    phoneNumber?: PhoneNumberIdentifierModel;
    /** The Microsoft Teams user. */
    microsoftTeamsUser?: MicrosoftTeamsUserIdentifierModel;
}

/** A user that got created with an Azure Communication Services resource. */
export declare interface CommunicationUserIdentifierModel {
    /** The Id of the communication user. */
    id: string;
}

/** The content of the event request message. */
export declare interface ContainerRegistryArtifactEventData {
    /** The event ID. */
    id: string;
    /** The time at which the event occurred. */
    timestamp: string;
    /** The action that encompasses the provided event. */
    action: string;
    /** The location of the event. */
    location: string;
    /** The target of the event. */
    target: ContainerRegistryArtifactEventTarget;
    /** The connected registry information if the event is generated by a connected registry. */
    connectedRegistry: ContainerRegistryEventConnectedRegistry;
}

/** The target of the event. */
export declare interface ContainerRegistryArtifactEventTarget {
    /** The MIME type of the artifact. */
    mediaType: string;
    /** The size in bytes of the artifact. */
    size: number;
    /** The digest of the artifact. */
    digest: string;
    /** The repository name of the artifact. */
    repository: string;
    /** The tag of the artifact. */
    tag: string;
    /** The name of the artifact. */
    name: string;
    /** The version of the artifact. */
    version: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted event. */
export declare type ContainerRegistryChartDeletedEventData = ContainerRegistryArtifactEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartPushed event. */
export declare type ContainerRegistryChartPushedEventData = ContainerRegistryArtifactEventData & {};

/** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
export declare interface ContainerRegistryEventActor {
    /** The subject or username associated with the request context that generated the event. */
    name: string;
}

/** The connected registry information if the event is generated by a connected registry. */
export declare interface ContainerRegistryEventConnectedRegistry {
    /** The name of the connected registry that generated this event. */
    name: string;
}

/** The content of the event request message. */
export declare interface ContainerRegistryEventData {
    /** The event ID. */
    id: string;
    /** The time at which the event occurred. */
    timestamp: string;
    /** The action that encompasses the provided event. */
    action: string;
    /** The location of the event. */
    location: string;
    /** The target of the event. */
    target: ContainerRegistryEventTarget;
    /** The request that generated the event. */
    request: ContainerRegistryEventRequest;
    /** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
    actor: ContainerRegistryEventActor;
    /** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
    source: ContainerRegistryEventSource;
    /** The connected registry information if the event is generated by a connected registry. */
    connectedRegistry: ContainerRegistryEventConnectedRegistry;
}

/** The request that generated the event. */
export declare interface ContainerRegistryEventRequest {
    /** The ID of the request that initiated the event. */
    id: string;
    /** The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request. */
    addr: string;
    /** The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests. */
    host: string;
    /** The request method that generated the event. */
    method: string;
    /** The user agent header of the request. */
    useragent: string;
}

/** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
export declare interface ContainerRegistryEventSource {
    /** The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port. */
    addr: string;
    /** The running instance of an application. Changes after each restart. */
    instanceID: string;
}

/** The target of the event. */
export declare interface ContainerRegistryEventTarget {
    /** The MIME type of the referenced object. */
    mediaType: string;
    /** The number of bytes of the content. Same as Length field. */
    size: number;
    /** The digest of the content, as defined by the Registry V2 HTTP API Specification. */
    digest: string;
    /** The number of bytes of the content. Same as Size field. */
    length: number;
    /** The repository name. */
    repository: string;
    /** The direct URL to the content. */
    url: string;
    /** The tag name. */
    tag: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImageDeleted event. */
export declare type ContainerRegistryImageDeletedEventData = ContainerRegistryEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImagePushed event. */
export declare type ContainerRegistryImagePushedEventData = ContainerRegistryEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerService.ClusterSupportEnded event */
export declare type ContainerServiceClusterSupportEndedEventData = ContainerServiceClusterSupportEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerService.ClusterSupportEnding event */
export declare type ContainerServiceClusterSupportEndingEventData = ContainerServiceClusterSupportEventData & {};

/** Schema of common properties of cluster support events */
export declare interface ContainerServiceClusterSupportEventData {
    /** The Kubernetes version of the ManagedCluster resource */
    kubernetesVersion: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerService.NewKubernetesVersionAvailable event */
export declare interface ContainerServiceNewKubernetesVersionAvailableEventData {
    /** The highest PATCH Kubernetes version for the highest MINOR version supported by ManagedCluster resource */
    latestSupportedKubernetesVersion: string;
    /** The highest PATCH Kubernetes version for the MINOR version considered stable for the ManagedCluster resource */
    latestStableKubernetesVersion: string;
    /** The highest PATCH Kubernetes version for the lowest applicable MINOR version available for the ManagedCluster resource */
    lowestMinorKubernetesVersion: string;
    /** The highest PATCH Kubernetes version considered preview for the ManagedCluster resource. There might not be any version in preview at the time of publishing the event */
    latestPreviewKubernetesVersion: string;
}

/** Schema of common properties of node pool rolling events */
export declare interface ContainerServiceNodePoolRollingEventData {
    /** The name of the node pool in the ManagedCluster resource */
    nodePoolName: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerService.NodePoolRollingFailed event */
export declare type ContainerServiceNodePoolRollingFailedEventData = ContainerServiceNodePoolRollingEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerService.NodePoolRollingStarted event */
export declare type ContainerServiceNodePoolRollingStartedEventData = ContainerServiceNodePoolRollingEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerService.NodePoolRollingSucceeded event */
export declare type ContainerServiceNodePoolRollingSucceededEventData = ContainerServiceNodePoolRollingEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.DataBox.CopyCompleted event. */
export declare interface DataBoxCopyCompletedEventData {
    /** Serial Number of the device associated with the event. The list is comma separated if more than one serial number is associated. */
    serialNumber: string;
    /** Name of the current Stage */
    stageName: DataBoxStageName;
    /** The time at which the stage happened. */
    stageTime: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.DataBox.CopyStarted event. */
export declare interface DataBoxCopyStartedEventData {
    /** Serial Number of the device associated with the event. The list is comma separated if more than one serial number is associated. */
    serialNumber: string;
    /** Name of the current Stage */
    stageName: DataBoxStageName;
    /** The time at which the stage happened. */
    stageTime: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.DataBox.OrderCompleted event. */
export declare interface DataBoxOrderCompletedEventData {
    /** Serial Number of the device associated with the event. The list is comma separated if more than one serial number is associated. */
    serialNumber: string;
    /** Name of the current Stage */
    stageName: DataBoxStageName;
    /** The time at which the stage happened. */
    stageTime: string;
}

/**
 * Defines values for DataBoxStageName. \
 * {@link KnownDataBoxStageName} can be used interchangeably with DataBoxStageName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CopyStarted**: Copy has started \
 * **CopyCompleted**: Copy has completed \
 * **OrderCompleted**: Order has been completed
 */
export declare type DataBoxStageName = string;

/** Schema of the Data property of an EventGridEvent for a device connection state event (DeviceConnected, DeviceDisconnected). */
export declare interface DeviceConnectionStateEvent {
    /** The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '. */
    deviceId: string;
    /** The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '. */
    moduleId: string;
    /** Name of the IoT Hub where the device was created or deleted. */
    hubName: string;
    /** Information about the device connection state event. */
    deviceConnectionStateEventInfo: DeviceConnectionStateEventInfo;
}

/** Information about the device connection state event. */
export declare interface DeviceConnectionStateEventInfo {
    /** Sequence number is string representation of a hexadecimal number. string compare can be used to identify the larger number because both in ASCII and HEX numbers come after alphabets. If you are converting the string to hex, then the number is a 256 bit number. */
    sequenceNumber: string;
}

/** Schema of the Data property of an EventGridEvent for a device life cycle event (DeviceCreated, DeviceDeleted). */
export declare interface DeviceLifeCycleEvent {
    /** The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '. */
    deviceId: string;
    /** Name of the IoT Hub where the device was created or deleted. */
    hubName: string;
    /** Information about the device twin, which is the cloud representation of application device metadata. */
    twin: DeviceTwinInfo;
}

/** Schema of the Data property of an EventGridEvent for a device telemetry event (DeviceTelemetry). */
export declare interface DeviceTelemetryEvent {
    /** The content of the message from the device. */
    body: any;
    /** Application properties are user-defined strings that can be added to the message. These fields are optional. */
    properties: {
        [propertyName: string]: string;
    };
    /** System properties help identify contents and source of the messages. */
    systemProperties: {
        [propertyName: string]: string;
    };
}

/** A portion of the properties that can be written only by the application back-end, and read by the device. */
export declare interface DeviceTwin {
    /** Metadata information for the properties JSON document. */
    metadata: DeviceTwinMetadata;
    /** Version of device twin properties. */
    version: number;
}

/** Information about the device twin, which is the cloud representation of application device metadata. */
export declare interface DeviceTwinInfo {
    /** Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority. */
    authenticationType: string;
    /** Count of cloud to device messages sent to this device. */
    cloudToDeviceMessageCount: number;
    /** Whether the device is connected or disconnected. */
    connectionState: string;
    /** The unique identifier of the device twin. */
    deviceId: string;
    /** A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per device twin. */
    etag: string;
    /** The ISO8601 timestamp of the last activity. */
    lastActivityTime: string;
    /** Properties JSON element. */
    properties: DeviceTwinInfoProperties;
    /** Whether the device twin is enabled or disabled. */
    status: string;
    /** The ISO8601 timestamp of the last device twin status update. */
    statusUpdateTime: string;
    /** An integer that is incremented by one each time the device twin is updated. */
    version: number;
    /** The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate. */
    x509Thumbprint: DeviceTwinInfoX509Thumbprint;
}

/** Properties JSON element. */
export declare interface DeviceTwinInfoProperties {
    /** A portion of the properties that can be written only by the application back-end, and read by the device. */
    desired?: DeviceTwin;
    /** A portion of the properties that can be written only by the device, and read by the application back-end. */
    reported?: DeviceTwin;
}

/** The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate. */
export declare interface DeviceTwinInfoX509Thumbprint {
    /** Primary thumbprint for the x509 certificate. */
    primaryThumbprint?: string;
    /** Secondary thumbprint for the x509 certificate. */
    secondaryThumbprint?: string;
}

/** Metadata information for the properties JSON document. */
export declare interface DeviceTwinMetadata {
    /** The ISO8601 timestamp of the last time the properties were updated. */
    lastUpdated: string;
}

/**
 * EventGridDeserializer is used to aid in processing events delivered by EventGrid. It can deserialize a JSON encoded payload
 * of either a single event or batch of events as well as be used to convert the result of `JSON.parse` into an
 * `EventGridEvent` or `CloudEvent` like object.
 *
 * Unlike normal JSON deseralization, EventGridDeserializer does some additional conversions:
 *
 * - The consumer parses the event time property into a `Date` object, for ease of use.
 * - When deserializing an event in the CloudEvent schema, if the event contains binary data, it is base64 decoded
 *   and returned as an instance of the `Uint8Array` type.
 */
export declare class EventGridDeserializer {
    /**
     * Deserializes events encoded in the Event Grid schema.
     *
     * @param encodedEvents - the JSON encoded representation of either a single event or an array of
     * events, encoded in the Event Grid Schema.
     */
    deserializeEventGridEvents(encodedEvents: string): Promise<EventGridEvent<unknown>[]>;
    /**
     * Deserializes events encoded in the Event Grid schema.
     *
     * @param encodedEvents - an object representing a single event, encoded in the Event Grid schema.
     */
    deserializeEventGridEvents(encodedEvents: Record<string, unknown>): Promise<EventGridEvent<unknown>[]>;
    /**
     * Deserializes events encoded in the Cloud Events 1.0 schema.
     *
     * @param encodedEvents - the JSON encoded representation of either a single event or an array of
     * events, encoded in the Cloud Events 1.0 Schema.
     */
    deserializeCloudEvents(encodedEvents: string): Promise<CloudEvent<unknown>[]>;
    /**
     * Deserializes events encoded in the Cloud Events 1.0 schema.
     *
     * @param encodedEvents - an object representing a single event, encoded in the Cloud Events 1.0 schema.
     */
    deserializeCloudEvents(encodedEvents: Record<string, unknown>): Promise<CloudEvent<unknown>[]>;
}

/**
 * An event in the in the Event Grid Schema.
 */
export declare interface EventGridEvent<T> {
    /**
     * The type of the event.
     */
    eventType: string;
    /**
     * The time the event was generated.
     */
    eventTime: Date;
    /**
     * An unique identifier for the event.
     */
    id: string;
    /**
     * The resource path of the event source.
     */
    topic?: string;
    /**
     * A resource path relative to the topic path.
     */
    subject: string;
    /**
     * The schema version of the data object.
     */
    dataVersion: string;
    /**
     * Event data specific to the event type.
     */
    data: T;
}

/** Event data for Microsoft.EventGrid.MQTTClientCreatedOrUpdated event. */
export declare type EventGridMqttClientCreatedOrUpdatedEventData = EventGridMqttClientEventData & {
    /** Configured state of the client. The value could be Enabled or Disabled */
    state: EventGridMqttClientState;
    /** Time the client resource is created based on the provider's UTC time. */
    createdOn: string;
    /** Time the client resource is last updated based on the provider's UTC time. If the client resource was never updated, this value is identical to the value of the 'createdOn' property. */
    updatedOn: string;
    /** The key-value attributes that are assigned to the client resource. */
    attributes: {
        [propertyName: string]: string;
    };
};

/** Event data for Microsoft.EventGrid.MQTTClientDeleted event. */
export declare type EventGridMqttClientDeletedEventData = EventGridMqttClientEventData & {};

/**
 * Defines values for EventGridMqttClientDisconnectionReason. \
 * {@link KnownEventGridMqttClientDisconnectionReason} can be used interchangeably with EventGridMqttClientDisconnectionReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ClientAuthenticationError**: The client got disconnected for any authentication reasons (for example, certificate expired, client got disabled, or client configuration changed). \
 * **ClientAuthorizationError**: The client got disconnected for any authorization reasons (for example, because of a change in the configuration of topic spaces, permission bindings, or client groups). \
 * **ClientError**: The client sent a bad request or used one of the unsupported features that resulted in a connection termination by the service. \
 * **ClientInitiatedDisconnect**: The client initiates a graceful disconnect through a DISCONNECT packet for MQTT or a close frame for MQTT over WebSocket. \
 * **ConnectionLost**: The client-server connection is lost. (EXCHANGE ONLINE PROTECTION). \
 * **IpForbidden**: The client's IP address is blocked by IP filter or Private links configuration. \
 * **QuotaExceeded**: The client exceeded one or more of the throttling limits that resulted in a connection termination by the service. \
 * **ServerError**: The connection got terminated due to an unexpected server error. \
 * **ServerInitiatedDisconnect**: The server initiates a graceful disconnect for any operational reason. \
 * **SessionOverflow**: The client's queue for unacknowledged QoS1 messages reached its limit, which resulted in a connection termination by the server. \
 * **SessionTakenOver**: The client reconnected with the same authentication name, which resulted in the termination of the previous connection.
 */
export declare type EventGridMqttClientDisconnectionReason = string;

/** Schema of the Data property of an EventGridEvent for MQTT Client state changes. */
export declare interface EventGridMqttClientEventData {
    /** Unique identifier for the MQTT client that the client presents to the service for authentication. This case-sensitive string can be up to 128 characters long, and supports UTF-8 characters. */
    clientAuthenticationName: string;
    /** Name of the client resource in the Event Grid namespace. */
    clientName: string;
    /** Name of the Event Grid namespace where the MQTT client was created or updated. */
    namespaceName: string;
}

/** Event data for Microsoft.EventGrid.MQTTClientSessionConnected event. */
export declare type EventGridMqttClientSessionConnectedEventData = EventGridMqttClientEventData & {
    /** Unique identifier for the MQTT client's session. This case-sensitive string can be up to 128 characters long, and supports UTF-8 characters. */
    clientSessionName: string;
    /** A number that helps indicate order of MQTT client session connected or disconnected events. Latest event will have a sequence number that is higher than the previous event. */
    sequenceNumber: number;
};

/** Event data for Microsoft.EventGrid.MQTTClientSessionDisconnected event. */
export declare type EventGridMqttClientSessionDisconnectedEventData = EventGridMqttClientEventData & {
    /** Unique identifier for the MQTT client's session. This case-sensitive string can be up to 128 characters long, and supports UTF-8 characters. */
    clientSessionName: string;
    /** A number that helps indicate order of MQTT client session connected or disconnected events. Latest event will have a sequence number that is higher than the previous event. */
    sequenceNumber: number;
    /** Reason for the disconnection of the MQTT client's session. The value could be one of the values in the disconnection reasons table. */
    disconnectionReason: EventGridMqttClientDisconnectionReason;
};

/**
 * Defines values for EventGridMqttClientState. \
 * {@link KnownEventGridMqttClientState} can be used interchangeably with EventGridMqttClientState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type EventGridMqttClientState = string;

/**
 * Client class for publishing events to the Event Grid Service.
 */
export declare class EventGridPublisherClient<T extends InputSchema> {
    /**
     * The URL to the Event Grid endpoint.
     */
    readonly endpointUrl: string;
    /**
     * The version of the Even Grid service.
     */
    readonly apiVersion: string;
    /**
     * The AutoRest generated client for the EventGrid dataplane.
     */
    private readonly client;
    /**
     * The schema that will be used when sending events.
     */
    private readonly inputSchema;
    /**
     * Creates an instance of EventGridPublisherClient which sends events using the Event Grid Schema.
     *
     * Example usage:
     * ```ts
     * import { EventGridPublisherClient, AzureKeyCredential } from "@azure/eventgrid";
     *
     * const client = new EventGridPublisherClient(
     *    "<service endpoint>",
     *    "EventGrid",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     *
     * @param endpointUrl - The URL to the Event Grid endpoint, e.g. https://eg-topic.westus2-1.eventgrid.azure.net/api/events.
     * @param inputSchema - The schema that the Event Grid endpoint is configured to accept. One of "EventGrid", "CloudEvent", or "Custom".
     * @param credential - Used to authenticate requests to the service.
     * @param options - Used to configure the Event Grid Client.
     */
    constructor(endpointUrl: string, inputSchema: T, credential: KeyCredential | SASCredential | TokenCredential, options?: EventGridPublisherClientOptions);
    /**
     * Sends events to a topic.
     *
     * @param events - The events to send. The events should be in the schema used when constructing the client.
     * @param options - Options to control the underlying operation.
     */
    send(events: InputSchemaToInputTypeMap[T][], options?: InputSchemaToOptionsTypeMap[T]): Promise<void>;
}

/**
 * Options for the Event Grid Client.
 */
export declare type EventGridPublisherClientOptions = CommonClientOptions;

/** Schema of the Data property of an EventGridEvent for a Microsoft.EventHub.CaptureFileCreated event. */
export declare interface EventHubCaptureFileCreatedEventData {
    /** The path to the capture file. */
    fileUrl: string;
    /** The file type of the capture file. */
    fileType: string;
    /** The shard ID. */
    partitionId: string;
    /** The file size. */
    sizeInBytes: number;
    /** The number of events in the file. */
    eventCount: number;
    /** The smallest sequence number from the queue. */
    firstSequenceNumber: number;
    /** The last sequence number from the queue. */
    lastSequenceNumber: number;
    /** The first time from the queue. */
    firstEnqueueTime: string;
    /** The last time from the queue. */
    lastEnqueueTime: string;
}

/**
 * Generate a shared access signature, which allows a client to send events to an Event Grid Topic or Domain for a limited period of time. This
 * function may only be called when the EventGridPublisherClient was constructed with a KeyCredential instance.
 *
 * @param endpointUrl - The endpoint for the topic or domain you wish to generate a shared access signature for.
 * @param credential - The credential to use when generating the shared access signatrue.
 * @param expiresOn - The time at which the shared access signature is no longer valid.
 * @param options - Options to control how the signature is generated.
 */
export declare function generateSharedAccessSignature(endpointUrl: string, credential: KeyCredential, expiresOnUtc: Date, options?: GenerateSharedAccessSignatureOptions): Promise<string>;

export declare interface GenerateSharedAccessSignatureOptions {
    /**
     * The API Version to include in the signature. If not provided, the default
     * API version will be used.
     */
    apiVersion?: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.HealthcareApis.DicomImageCreated event. */
export declare interface HealthcareDicomImageCreatedEventData {
    /** Data partition name */
    partitionName: string;
    /** Unique identifier for the Study */
    imageStudyInstanceUid: string;
    /** Unique identifier for the Series */
    imageSeriesInstanceUid: string;
    /** Unique identifier for the DICOM Image */
    imageSopInstanceUid: string;
    /** Domain name of the DICOM account for this image. */
    serviceHostName: string;
    /** Sequence number of the DICOM Service within Azure Health Data Services. It is unique for every image creation and deletion within the service. */
    sequenceNumber: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.HealthcareApis.DicomImageDeleted event. */
export declare interface HealthcareDicomImageDeletedEventData {
    /** Data partition name */
    partitionName: string;
    /** Unique identifier for the Study */
    imageStudyInstanceUid: string;
    /** Unique identifier for the Series */
    imageSeriesInstanceUid: string;
    /** Unique identifier for the DICOM Image */
    imageSopInstanceUid: string;
    /** Host name of the DICOM account for this image. */
    serviceHostName: string;
    /** Sequence number of the DICOM Service within Azure Health Data Services. It is unique for every image creation and deletion within the service. */
    sequenceNumber: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.HealthcareApis.DicomImageUpdated event. */
export declare interface HealthcareDicomImageUpdatedEventData {
    /** Data partition name */
    partitionName: string;
    /** Unique identifier for the Study */
    imageStudyInstanceUid: string;
    /** Unique identifier for the Series */
    imageSeriesInstanceUid: string;
    /** Unique identifier for the DICOM Image */
    imageSopInstanceUid: string;
    /** Domain name of the DICOM account for this image. */
    serviceHostName: string;
    /** Sequence number of the DICOM Service within Azure Health Data Services. It is unique for every image creation, updation and deletion within the service. */
    sequenceNumber: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.HealthcareApis.FhirResourceCreated event. */
export declare interface HealthcareFhirResourceCreatedEventData {
    /** Type of HL7 FHIR resource. */
    resourceType: HealthcareFhirResourceType;
    /** Domain name of FHIR account for this resource. */
    resourceFhirAccount: string;
    /** Id of HL7 FHIR resource. */
    resourceFhirId: string;
    /** VersionId of HL7 FHIR resource. It changes when the resource is created, updated, or deleted(soft-deletion). */
    resourceVersionId: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.HealthcareApis.FhirResourceDeleted event. */
export declare interface HealthcareFhirResourceDeletedEventData {
    /** Type of HL7 FHIR resource. */
    resourceType: HealthcareFhirResourceType;
    /** Domain name of FHIR account for this resource. */
    resourceFhirAccount: string;
    /** Id of HL7 FHIR resource. */
    resourceFhirId: string;
    /** VersionId of HL7 FHIR resource. It changes when the resource is created, updated, or deleted(soft-deletion). */
    resourceVersionId: number;
}

/**
 * Defines values for HealthcareFhirResourceType. \
 * {@link KnownHealthcareFhirResourceType} can be used interchangeably with HealthcareFhirResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Account**: The FHIR resource type defined in STU3 and R4. \
 * **ActivityDefinition**: The FHIR resource type defined in STU3 and R4. \
 * **AdverseEvent**: The FHIR resource type defined in STU3 and R4. \
 * **AllergyIntolerance**: The FHIR resource type defined in STU3 and R4. \
 * **Appointment**: The FHIR resource type defined in STU3 and R4. \
 * **AppointmentResponse**: The FHIR resource type defined in STU3 and R4. \
 * **AuditEvent**: The FHIR resource type defined in STU3 and R4. \
 * **Basic**: The FHIR resource type defined in STU3 and R4. \
 * **Binary**: The FHIR resource type defined in STU3 and R4. \
 * **BiologicallyDerivedProduct**: The FHIR resource type defined in R4. \
 * **BodySite**: The FHIR resource type defined in STU3. \
 * **BodyStructure**: The FHIR resource type defined in R4. \
 * **Bundle**: The FHIR resource type defined in STU3 and R4. \
 * **CapabilityStatement**: The FHIR resource type defined in STU3 and R4. \
 * **CarePlan**: The FHIR resource type defined in STU3 and R4. \
 * **CareTeam**: The FHIR resource type defined in STU3 and R4. \
 * **CatalogEntry**: The FHIR resource type defined in R4. \
 * **ChargeItem**: The FHIR resource type defined in STU3 and R4. \
 * **ChargeItemDefinition**: The FHIR resource type defined in R4. \
 * **Claim**: The FHIR resource type defined in STU3 and R4. \
 * **ClaimResponse**: The FHIR resource type defined in STU3 and R4. \
 * **ClinicalImpression**: The FHIR resource type defined in STU3 and R4. \
 * **CodeSystem**: The FHIR resource type defined in STU3 and R4. \
 * **Communication**: The FHIR resource type defined in STU3 and R4. \
 * **CommunicationRequest**: The FHIR resource type defined in STU3 and R4. \
 * **CompartmentDefinition**: The FHIR resource type defined in STU3 and R4. \
 * **Composition**: The FHIR resource type defined in STU3 and R4. \
 * **ConceptMap**: The FHIR resource type defined in STU3 and R4. \
 * **Condition**: The FHIR resource type defined in STU3 and R4. \
 * **Consent**: The FHIR resource type defined in STU3 and R4. \
 * **Contract**: The FHIR resource type defined in STU3 and R4. \
 * **Coverage**: The FHIR resource type defined in STU3 and R4. \
 * **CoverageEligibilityRequest**: The FHIR resource type defined in R4. \
 * **CoverageEligibilityResponse**: The FHIR resource type defined in R4. \
 * **DataElement**: The FHIR resource type defined in STU3. \
 * **DetectedIssue**: The FHIR resource type defined in STU3 and R4. \
 * **Device**: The FHIR resource type defined in STU3 and R4. \
 * **DeviceComponent**: The FHIR resource type defined in STU3. \
 * **DeviceDefinition**: The FHIR resource type defined in R4. \
 * **DeviceMetric**: The FHIR resource type defined in STU3 and R4. \
 * **DeviceRequest**: The FHIR resource type defined in STU3 and R4. \
 * **DeviceUseStatement**: The FHIR resource type defined in STU3 and R4. \
 * **DiagnosticReport**: The FHIR resource type defined in STU3 and R4. \
 * **DocumentManifest**: The FHIR resource type defined in STU3 and R4. \
 * **DocumentReference**: The FHIR resource type defined in STU3 and R4. \
 * **DomainResource**: The FHIR resource type defined in STU3 and R4. \
 * **EffectEvidenceSynthesis**: The FHIR resource type defined in R4. \
 * **EligibilityRequest**: The FHIR resource type defined in STU3. \
 * **EligibilityResponse**: The FHIR resource type defined in STU3. \
 * **Encounter**: The FHIR resource type defined in STU3 and R4. \
 * **Endpoint**: The FHIR resource type defined in STU3 and R4. \
 * **EnrollmentRequest**: The FHIR resource type defined in STU3 and R4. \
 * **EnrollmentResponse**: The FHIR resource type defined in STU3 and R4. \
 * **EpisodeOfCare**: The FHIR resource type defined in STU3 and R4. \
 * **EventDefinition**: The FHIR resource type defined in R4. \
 * **Evidence**: The FHIR resource type defined in R4. \
 * **EvidenceVariable**: The FHIR resource type defined in R4. \
 * **ExampleScenario**: The FHIR resource type defined in R4. \
 * **ExpansionProfile**: The FHIR resource type defined in STU3. \
 * **ExplanationOfBenefit**: The FHIR resource type defined in STU3 and R4. \
 * **FamilyMemberHistory**: The FHIR resource type defined in STU3 and R4. \
 * **Flag**: The FHIR resource type defined in STU3 and R4. \
 * **Goal**: The FHIR resource type defined in STU3 and R4. \
 * **GraphDefinition**: The FHIR resource type defined in STU3 and R4. \
 * **Group**: The FHIR resource type defined in STU3 and R4. \
 * **GuidanceResponse**: The FHIR resource type defined in STU3 and R4. \
 * **HealthcareService**: The FHIR resource type defined in STU3 and R4. \
 * **ImagingManifest**: The FHIR resource type defined in STU3. \
 * **ImagingStudy**: The FHIR resource type defined in STU3 and R4. \
 * **Immunization**: The FHIR resource type defined in STU3 and R4. \
 * **ImmunizationEvaluation**: The FHIR resource type defined in R4. \
 * **ImmunizationRecommendation**: The FHIR resource type defined in STU3 and R4. \
 * **ImplementationGuide**: The FHIR resource type defined in STU3 and R4. \
 * **InsurancePlan**: The FHIR resource type defined in R4. \
 * **Invoice**: The FHIR resource type defined in R4. \
 * **Library**: The FHIR resource type defined in STU3 and R4. \
 * **Linkage**: The FHIR resource type defined in STU3 and R4. \
 * **List**: The FHIR resource type defined in STU3 and R4. \
 * **Location**: The FHIR resource type defined in STU3 and R4. \
 * **Measure**: The FHIR resource type defined in STU3 and R4. \
 * **MeasureReport**: The FHIR resource type defined in STU3 and R4. \
 * **Media**: The FHIR resource type defined in STU3 and R4. \
 * **Medication**: The FHIR resource type defined in STU3 and R4. \
 * **MedicationAdministration**: The FHIR resource type defined in STU3 and R4. \
 * **MedicationDispense**: The FHIR resource type defined in STU3 and R4. \
 * **MedicationKnowledge**: The FHIR resource type defined in R4. \
 * **MedicationRequest**: The FHIR resource type defined in STU3 and R4. \
 * **MedicationStatement**: The FHIR resource type defined in STU3 and R4. \
 * **MedicinalProduct**: The FHIR resource type defined in R4. \
 * **MedicinalProductAuthorization**: The FHIR resource type defined in R4. \
 * **MedicinalProductContraindication**: The FHIR resource type defined in R4. \
 * **MedicinalProductIndication**: The FHIR resource type defined in R4. \
 * **MedicinalProductIngredient**: The FHIR resource type defined in R4. \
 * **MedicinalProductInteraction**: The FHIR resource type defined in R4. \
 * **MedicinalProductManufactured**: The FHIR resource type defined in R4. \
 * **MedicinalProductPackaged**: The FHIR resource type defined in R4. \
 * **MedicinalProductPharmaceutical**: The FHIR resource type defined in R4. \
 * **MedicinalProductUndesirableEffect**: The FHIR resource type defined in R4. \
 * **MessageDefinition**: The FHIR resource type defined in STU3 and R4. \
 * **MessageHeader**: The FHIR resource type defined in STU3 and R4. \
 * **MolecularSequence**: The FHIR resource type defined in R4. \
 * **NamingSystem**: The FHIR resource type defined in STU3 and R4. \
 * **NutritionOrder**: The FHIR resource type defined in STU3 and R4. \
 * **Observation**: The FHIR resource type defined in STU3 and R4. \
 * **ObservationDefinition**: The FHIR resource type defined in R4. \
 * **OperationDefinition**: The FHIR resource type defined in STU3 and R4. \
 * **OperationOutcome**: The FHIR resource type defined in STU3 and R4. \
 * **Organization**: The FHIR resource type defined in STU3 and R4. \
 * **OrganizationAffiliation**: The FHIR resource type defined in R4. \
 * **Parameters**: The FHIR resource type defined in STU3 and R4. \
 * **Patient**: The FHIR resource type defined in STU3 and R4. \
 * **PaymentNotice**: The FHIR resource type defined in STU3 and R4. \
 * **PaymentReconciliation**: The FHIR resource type defined in STU3 and R4. \
 * **Person**: The FHIR resource type defined in STU3 and R4. \
 * **PlanDefinition**: The FHIR resource type defined in STU3 and R4. \
 * **Practitioner**: The FHIR resource type defined in STU3 and R4. \
 * **PractitionerRole**: The FHIR resource type defined in STU3 and R4. \
 * **Procedure**: The FHIR resource type defined in STU3 and R4. \
 * **ProcedureRequest**: The FHIR resource type defined in STU3. \
 * **ProcessRequest**: The FHIR resource type defined in STU3. \
 * **ProcessResponse**: The FHIR resource type defined in STU3. \
 * **Provenance**: The FHIR resource type defined in STU3 and R4. \
 * **Questionnaire**: The FHIR resource type defined in STU3 and R4. \
 * **QuestionnaireResponse**: The FHIR resource type defined in STU3 and R4. \
 * **ReferralRequest**: The FHIR resource type defined in STU3. \
 * **RelatedPerson**: The FHIR resource type defined in STU3 and R4. \
 * **RequestGroup**: The FHIR resource type defined in STU3 and R4. \
 * **ResearchDefinition**: The FHIR resource type defined in R4. \
 * **ResearchElementDefinition**: The FHIR resource type defined in R4. \
 * **ResearchStudy**: The FHIR resource type defined in STU3 and R4. \
 * **ResearchSubject**: The FHIR resource type defined in STU3 and R4. \
 * **Resource**: The FHIR resource type defined in STU3 and R4. \
 * **RiskAssessment**: The FHIR resource type defined in STU3 and R4. \
 * **RiskEvidenceSynthesis**: The FHIR resource type defined in R4. \
 * **Schedule**: The FHIR resource type defined in STU3 and R4. \
 * **SearchParameter**: The FHIR resource type defined in STU3 and R4. \
 * **Sequence**: The FHIR resource type defined in STU3. \
 * **ServiceDefinition**: The FHIR resource type defined in STU3. \
 * **ServiceRequest**: The FHIR resource type defined in R4. \
 * **Slot**: The FHIR resource type defined in STU3 and R4. \
 * **Specimen**: The FHIR resource type defined in STU3 and R4. \
 * **SpecimenDefinition**: The FHIR resource type defined in R4. \
 * **StructureDefinition**: The FHIR resource type defined in STU3 and R4. \
 * **StructureMap**: The FHIR resource type defined in STU3 and R4. \
 * **Subscription**: The FHIR resource type defined in STU3 and R4. \
 * **Substance**: The FHIR resource type defined in STU3 and R4. \
 * **SubstanceNucleicAcid**: The FHIR resource type defined in R4. \
 * **SubstancePolymer**: The FHIR resource type defined in R4. \
 * **SubstanceProtein**: The FHIR resource type defined in R4. \
 * **SubstanceReferenceInformation**: The FHIR resource type defined in R4. \
 * **SubstanceSourceMaterial**: The FHIR resource type defined in R4. \
 * **SubstanceSpecification**: The FHIR resource type defined in R4. \
 * **SupplyDelivery**: The FHIR resource type defined in STU3 and R4. \
 * **SupplyRequest**: The FHIR resource type defined in STU3 and R4. \
 * **Task**: The FHIR resource type defined in STU3 and R4. \
 * **TerminologyCapabilities**: The FHIR resource type defined in R4. \
 * **TestReport**: The FHIR resource type defined in STU3 and R4. \
 * **TestScript**: The FHIR resource type defined in STU3 and R4. \
 * **ValueSet**: The FHIR resource type defined in STU3 and R4. \
 * **VerificationResult**: The FHIR resource type defined in R4. \
 * **VisionPrescription**: The FHIR resource type defined in STU3 and R4.
 */
export declare type HealthcareFhirResourceType = string;

/** Schema of the Data property of an EventGridEvent for a Microsoft.HealthcareApis.FhirResourceUpdated event. */
export declare interface HealthcareFhirResourceUpdatedEventData {
    /** Type of HL7 FHIR resource. */
    resourceType: HealthcareFhirResourceType;
    /** Domain name of FHIR account for this resource. */
    resourceFhirAccount: string;
    /** Id of HL7 FHIR resource. */
    resourceFhirId: string;
    /** VersionId of HL7 FHIR resource. It changes when the resource is created, updated, or deleted(soft-deletion). */
    resourceVersionId: number;
}

/**
 * Allowed schema types, to be used when constructing the EventGridPublisherClient.
 */
export declare type InputSchema = keyof InputSchemaToInputTypeMap;

/**
 * A map of input schema names to shapes of the input for the send method on EventGridPublisherClient.
 */
export declare interface InputSchemaToInputTypeMap {
    /**
     * The shape of the input to `send` when the client is configured to send events using the Event Grid schema.
     */
    EventGrid: SendEventGridEventInput<unknown>;
    /**
     * The shape of the input to `send` when the client is configured to send events using the Cloud Event schema.
     */
    CloudEvent: SendCloudEventInput<unknown>;
    /**
     * The shape of the input to `send` when the client is configured to send events using a custom schema.
     */
    Custom: Record<string, unknown>;
}

/**
 * A map of input schema names to shapes of the options bag for the send method on EventGridPublisherClient.
 */
export declare interface InputSchemaToOptionsTypeMap {
    /**
     * The shape of the options parameter for `send` when the client is configured to send events using the Event Grid schema.
     */
    EventGrid: SendOptions;
    /**
     * The shape of the options parameter for `send` when the client is configured to send events using the Cloud Event schema.
     */
    CloudEvent: CloudEventSendOptions;
    /**
     * The shape of the options parameter for `send` when the client is configured to send events using a custom schema.
     */
    Custom: SendOptions;
}

/** Event data for Microsoft.Devices.DeviceConnected event. */
export declare type IotHubDeviceConnectedEventData = DeviceConnectionStateEvent & {};

/** Event data for Microsoft.Devices.DeviceCreated event. */
export declare type IotHubDeviceCreatedEventData = DeviceLifeCycleEvent & {};

/** Event data for Microsoft.Devices.DeviceDeleted event. */
export declare type IotHubDeviceDeletedEventData = DeviceLifeCycleEvent & {};

/** Event data for Microsoft.Devices.DeviceDisconnected event. */
export declare type IotHubDeviceDisconnectedEventData = DeviceConnectionStateEvent & {};

/** Event data for Microsoft.Devices.DeviceTelemetry event. */
export declare type IotHubDeviceTelemetryEventData = DeviceTelemetryEvent & {};

/**
 * iSystemEvent returns "true" when a given event is a system event of a given type. When using
 * TypeScript, this function acts as a custom type guard and allows the TypeScript compiler to
 * identify the underlying data
 *
 * @param eventType - The type of system event to check for, e.g., "Microsoft.AppConfiguration.KeyValueDeleted"
 * @param event - The event to test.
 */
export declare function isSystemEvent<T extends KnownSystemEventTypes>(eventType: T, event: EventGridEvent<unknown>): event is EventGridEvent<SystemEventNameToEventData[T]>;

/**
 * iSystemEvent returns "true" when a given event is a system event of a given type. When using
 * TypeScript, this function acts as a custom type guard and allows the TypeScript compiler to
 * identify the underlying data
 *
 * @param eventType - The type of system event to check for, e.g., "Microsoft.AppConfiguration.KeyValueDeleted"
 * @param event - The event to test.
 */
export declare function isSystemEvent<T extends KnownSystemEventTypes>(eventType: T, event: CloudEvent<unknown>): event is CloudEvent<SystemEventNameToEventData[T]>;

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.VaultAccessPolicyChanged event. */
export declare interface KeyVaultAccessPolicyChangedEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateExpired event. */
export declare interface KeyVaultCertificateExpiredEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateNearExpiry event. */
export declare interface KeyVaultCertificateNearExpiryEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateNewVersionCreated event. */
export declare interface KeyVaultCertificateNewVersionCreatedEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyExpired event. */
export declare interface KeyVaultKeyExpiredEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNearExpiry event. */
export declare interface KeyVaultKeyNearExpiryEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNewVersionCreated event. */
export declare interface KeyVaultKeyNewVersionCreatedEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretExpired event. */
export declare interface KeyVaultSecretExpiredEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretNearExpiry event. */
export declare interface KeyVaultSecretNearExpiryEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretNewVersionCreated event. */
export declare interface KeyVaultSecretNewVersionCreatedEventData {
    /** The id of the object that triggered this event. */
    id: string;
    /** Key vault name of the object that triggered this event. */
    vaultName: string;
    /** The type of the object that triggered this event */
    objectType: string;
    /** The name of the object that triggered this event */
    objectName: string;
    /** The version of the object that triggered this event */
    version: string;
    /** Not before date of the object that triggered this event */
    nbf: number;
    /** The expiration date of the object that triggered this event */
    exp: number;
}

/** Known values of {@link AcsRouterJobStatus} that the service accepts. */
export declare const enum KnownAcsRouterJobStatus {
    PendingClassification = "PendingClassification",
    Queued = "Queued",
    Assigned = "Assigned",
    Completed = "Completed",
    Closed = "Closed",
    Cancelled = "Cancelled",
    ClassificationFailed = "ClassificationFailed",
    Created = "Created",
    PendingSchedule = "PendingSchedule",
    Scheduled = "Scheduled",
    ScheduleFailed = "ScheduleFailed",
    WaitingForActivation = "WaitingForActivation"
}

/** Known values of {@link AcsRouterLabelOperator} that the service accepts. */
export declare const enum KnownAcsRouterLabelOperator {
    /** = */
    Equal = "Equal",
    /** != */
    NotEqual = "NotEqual",
    /** > */
    Greater = "Greater",
    /** < */
    Less = "Less",
    /** >= */
    GreaterThanOrEqual = "GreaterThanOrEqual",
    /** <= */
    LessThanOrEqual = "LessThanOrEqual"
}

/** Known values of {@link AcsRouterWorkerSelectorState} that the service accepts. */
export declare const enum KnownAcsRouterWorkerSelectorState {
    /** Router Job Worker Selector is Active */
    Active = "active",
    /** Router Job Worker Selector has Expire */
    Expired = "expired"
}

/** Known values of {@link AppAction} that the service accepts. */
export declare const enum KnownAppAction {
    /** Web app was restarted. */
    Restarted = "Restarted",
    /** Web app was stopped. */
    Stopped = "Stopped",
    /** There was an operation to change app setting on the web app. */
    ChangedAppSettings = "ChangedAppSettings",
    /** The job has started. */
    Started = "Started",
    /** The job has completed. */
    Completed = "Completed",
    /** The job has failed to complete. */
    Failed = "Failed"
}

/** Known values of {@link AppServicePlanAction} that the service accepts. */
export declare const enum KnownAppServicePlanAction {
    /** App Service plan is being updated. */
    Updated = "Updated"
}

/** Known values of {@link AsyncStatus} that the service accepts. */
export declare const enum KnownAsyncStatus {
    /** Async operation has started. */
    Started = "Started",
    /** Async operation has completed. */
    Completed = "Completed",
    /** Async operation failed to complete. */
    Failed = "Failed"
}

/** Known values of {@link EventGridMqttClientDisconnectionReason} that the service accepts. */
export declare const enum KnownEventGridMqttClientDisconnectionReason {
    /** The client got disconnected for any authentication reasons (for example, certificate expired, client got disabled, or client configuration changed). */
    ClientAuthenticationError = "ClientAuthenticationError",
    /** The client got disconnected for any authorization reasons (for example, because of a change in the configuration of topic spaces, permission bindings, or client groups). */
    ClientAuthorizationError = "ClientAuthorizationError",
    /** The client sent a bad request or used one of the unsupported features that resulted in a connection termination by the service. */
    ClientError = "ClientError",
    /** The client initiates a graceful disconnect through a DISCONNECT packet for MQTT or a close frame for MQTT over WebSocket. */
    ClientInitiatedDisconnect = "ClientInitiatedDisconnect",
    /** The client-server connection is lost. (EXCHANGE ONLINE PROTECTION). */
    ConnectionLost = "ConnectionLost",
    /** The client's IP address is blocked by IP filter or Private links configuration. */
    IpForbidden = "IpForbidden",
    /** The client exceeded one or more of the throttling limits that resulted in a connection termination by the service. */
    QuotaExceeded = "QuotaExceeded",
    /** The connection got terminated due to an unexpected server error. */
    ServerError = "ServerError",
    /** The server initiates a graceful disconnect for any operational reason. */
    ServerInitiatedDisconnect = "ServerInitiatedDisconnect",
    /** The client's queue for unacknowledged QoS1 messages reached its limit, which resulted in a connection termination by the server. */
    SessionOverflow = "SessionOverflow",
    /** The client reconnected with the same authentication name, which resulted in the termination of the previous connection. */
    SessionTakenOver = "SessionTakenOver"
}

/** Known values of {@link EventGridMqttClientState} that the service accepts. */
export declare const enum KnownEventGridMqttClientState {
    Enabled = "Enabled",
    Disabled = "Disabled"
}

/** Known values of {@link StampKind} that the service accepts. */
export declare const enum KnownStampKind {
    /** App Service Plan is running on a public stamp. */
    Public = "Public",
    /** App Service Plan is running on an App Service Environment V1. */
    AseV1 = "AseV1",
    /** App Service Plan is running on an App Service Environment V2. */
    AseV2 = "AseV2"
}

/**
 * The Event Types for all System Events. These may be used with `isSystemEvent` to determine if an
 * event is a system event of a given type.
 */
export declare type KnownSystemEventTypes = keyof SystemEventNameToEventData;

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.DatasetDriftDetected event. */
export declare interface MachineLearningServicesDatasetDriftDetectedEventData {
    /** The ID of the data drift monitor that triggered the event. */
    dataDriftId: string;
    /** The name of the data drift monitor that triggered the event. */
    dataDriftName: string;
    /** The ID of the Run that detected data drift. */
    runId: string;
    /** The ID of the base Dataset used to detect drift. */
    baseDatasetId: string;
    /** The ID of the target Dataset used to detect drift. */
    targetDatasetId: string;
    /** The coefficient result that triggered the event. */
    driftCoefficient: number;
    /** The start time of the target dataset time series that resulted in drift detection. */
    startTime: string;
    /** The end time of the target dataset time series that resulted in drift detection. */
    endTime: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.ModelDeployed event. */
export declare interface MachineLearningServicesModelDeployedEventData {
    /** The name of the deployed service. */
    serviceName: string;
    /** The compute type (e.g. ACI, AKS) of the deployed service. */
    serviceComputeType: string;
    /** A common separated list of model IDs. The IDs of the models deployed in the service. */
    modelIds: string;
    /** The tags of the deployed service. */
    serviceTags: any;
    /** The properties of the deployed service. */
    serviceProperties: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.ModelRegistered event. */
export declare interface MachineLearningServicesModelRegisteredEventData {
    /** The name of the model that was registered. */
    modelName: string;
    /** The version of the model that was registered. */
    modelVersion: string;
    /** The tags of the model that was registered. */
    modelTags: any;
    /** The properties of the model that was registered. */
    modelProperties: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunCompleted event. */
export declare interface MachineLearningServicesRunCompletedEventData {
    /** The ID of the experiment that the run belongs to. */
    experimentId: string;
    /** The name of the experiment that the run belongs to. */
    experimentName: string;
    /** The ID of the Run that was completed. */
    runId: string;
    /** The Run Type of the completed Run. */
    runType: string;
    /** The tags of the completed Run. */
    runTags: any;
    /** The properties of the completed Run. */
    runProperties: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunStatusChanged event. */
export declare interface MachineLearningServicesRunStatusChangedEventData {
    /** The ID of the experiment that the Machine Learning Run belongs to. */
    experimentId: string;
    /** The name of the experiment that the Machine Learning Run belongs to. */
    experimentName: string;
    /** The ID of the Machine Learning Run. */
    runId: string;
    /** The Run Type of the Machine Learning Run. */
    runType: string;
    /** The tags of the Machine Learning Run. */
    runTags: any;
    /** The properties of the Machine Learning Run. */
    runProperties: any;
    /** The status of the Machine Learning Run. */
    runStatus: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceEntered event. */
export declare type MapsGeofenceEnteredEventData = MapsGeofenceEvent & {};

/** Schema of the Data property of an EventGridEvent for a Geofence event (GeofenceEntered, GeofenceExited, GeofenceResult). */
export declare interface MapsGeofenceEvent {
    /** Lists of the geometry ID of the geofence which is expired relative to the user time in the request. */
    expiredGeofenceGeometryId: string[];
    /** Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence. */
    geometries: MapsGeofenceGeometry[];
    /** Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request. */
    invalidPeriodGeofenceGeometryId: string[];
    /** True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber. */
    isEventPublished: boolean;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceExited event. */
export declare type MapsGeofenceExitedEventData = MapsGeofenceEvent & {};

/** The geofence geometry. */
export declare interface MapsGeofenceGeometry {
    /** ID of the device. */
    deviceId: string;
    /** Distance from the coordinate to the closest border of the geofence. Positive means the coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border,then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence. */
    distance: number;
    /** The unique ID for the geofence geometry. */
    geometryId: string;
    /** Latitude of the nearest point of the geometry. */
    nearestLat: number;
    /** Longitude of the nearest point of the geometry. */
    nearestLon: number;
    /** The unique id returned from user upload service when uploading a geofence. Will not be included in geofencing post API. */
    udId: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceResult event. */
export declare type MapsGeofenceResultEventData = MapsGeofenceEvent & {};

/** Job canceled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobCanceled event. */
export declare type MediaJobCanceledEventData = MediaJobStateChangeEventData & {
    /** Gets the Job outputs. */
    outputs: MediaJobOutputUnion[];
};

/** Job canceling event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobCanceling event. */
export declare type MediaJobCancelingEventData = MediaJobStateChangeEventData & {};

/** Details of JobOutput errors. */
export declare interface MediaJobError {
    /**
     * Error code describing the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code: MediaJobErrorCode;
    /**
     * A human-readable language-dependent representation of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message: string;
    /**
     * Helps with categorization of errors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category: MediaJobErrorCategory;
    /**
     * Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly retry: MediaJobRetry;
    /**
     * An array of details about specific errors that led to this reported error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details: MediaJobErrorDetail[];
}

/** Defines values for MediaJobErrorCategory. */
export declare type MediaJobErrorCategory = "Service" | "Download" | "Upload" | "Configuration" | "Content" | "Account";

/** Defines values for MediaJobErrorCode. */
export declare type MediaJobErrorCode = "ServiceError" | "ServiceTransientError" | "DownloadNotAccessible" | "DownloadTransientError" | "UploadNotAccessible" | "UploadTransientError" | "ConfigurationUnsupported" | "ContentMalformed" | "ContentUnsupported" | "IdentityUnsupported";

/** Details of JobOutput errors. */
export declare interface MediaJobErrorDetail {
    /**
     * Code describing the error detail.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code: string;
    /**
     * A human-readable representation of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message: string;
}

/** Job error state event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobErrored event. */
export declare type MediaJobErroredEventData = MediaJobStateChangeEventData & {
    /** Gets the Job outputs. */
    outputs: MediaJobOutputUnion[];
};

/** Job finished event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobFinished event. */
export declare type MediaJobFinishedEventData = MediaJobStateChangeEventData & {
    /** Gets the Job outputs. */
    outputs: MediaJobOutputUnion[];
};

/** The event data for a Job output. */
export declare interface MediaJobOutput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobOutputAsset";
    /** Gets the Job output error. */
    error?: MediaJobError;
    /** Gets the Job output label. */
    label?: string;
    /** Gets the Job output progress. */
    progress: number;
    /** Gets the Job output state. */
    state: MediaJobState;
}

/** The event data for a Job output asset. */
export declare type MediaJobOutputAsset = MediaJobOutput & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobOutputAsset";
    /** Gets the Job output asset name. */
    assetName: string;
};

/** Job output canceled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputCanceled event. */
export declare type MediaJobOutputCanceledEventData = MediaJobOutputStateChangeEventData & {};

/** Job output canceling event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputCanceling event. */
export declare type MediaJobOutputCancelingEventData = MediaJobOutputStateChangeEventData & {};

/** Job output error event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputErrored event. */
export declare type MediaJobOutputErroredEventData = MediaJobOutputStateChangeEventData & {};

/** Job output finished event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputFinished event. */
export declare type MediaJobOutputFinishedEventData = MediaJobOutputStateChangeEventData & {};

/** Job output processing event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputProcessing event. */
export declare type MediaJobOutputProcessingEventData = MediaJobOutputStateChangeEventData & {};

/** Job Output Progress Event Data. Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobOutputProgress event. */
export declare interface MediaJobOutputProgressEventData {
    /** Gets the Job output label. */
    label: string;
    /** Gets the Job output progress. */
    progress: number;
    /** Gets the Job correlation data. */
    jobCorrelationData: {
        [propertyName: string]: string;
    };
}

/** Job output scheduled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputScheduled event. */
export declare type MediaJobOutputScheduledEventData = MediaJobOutputStateChangeEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobOutputStateChange event. */
export declare interface MediaJobOutputStateChangeEventData {
    /**
     * The previous state of the Job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousState: MediaJobState;
    /** Gets the output. */
    output: MediaJobOutputUnion;
    /** Gets the Job correlation data. */
    jobCorrelationData: {
        [propertyName: string]: string;
    };
}

export declare type MediaJobOutputUnion = MediaJobOutput | MediaJobOutputAsset;

/** Job processing event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobProcessing event. */
export declare type MediaJobProcessingEventData = MediaJobStateChangeEventData & {};

/** Defines values for MediaJobRetry. */
export declare type MediaJobRetry = "DoNotRetry" | "MayRetry";

/** Job scheduled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobScheduled event. */
export declare type MediaJobScheduledEventData = MediaJobStateChangeEventData & {};

/** Defines values for MediaJobState. */
export declare type MediaJobState = "Canceled" | "Canceling" | "Error" | "Finished" | "Processing" | "Queued" | "Scheduled";

/** Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobStateChange event. */
export declare interface MediaJobStateChangeEventData {
    /**
     * The previous state of the Job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousState: MediaJobState;
    /**
     * The new state of the Job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state: MediaJobState;
    /** Gets the Job correlation data. */
    correlationData: {
        [propertyName: string]: string;
    };
}

/** Channel Archive heartbeat event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventChannelArchiveHeartbeat event. */
export declare interface MediaLiveEventChannelArchiveHeartbeatEventData {
    /**
     * Gets the channel latency in ms.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly channelLatencyMs: string;
    /**
     * Gets the latency result code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latencyResultCode: string;
}

/** Encoder connection rejected event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventConnectionRejected event. */
export declare interface MediaLiveEventConnectionRejectedEventData {
    /**
     * Gets the ingest URL provided by the live event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingestUrl: string;
    /**
     * Gets the stream Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly streamId: string;
    /**
     * Gets the remote IP.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderIp: string;
    /**
     * Gets the remote port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderPort: string;
    /**
     * Gets the result code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resultCode: string;
}

/** Encoder connect event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventEncoderConnected event. */
export declare interface MediaLiveEventEncoderConnectedEventData {
    /**
     * Gets the ingest URL provided by the live event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingestUrl: string;
    /**
     * Gets the stream Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly streamId: string;
    /**
     * Gets the remote IP.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderIp: string;
    /**
     * Gets the remote port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderPort: string;
}

/** Encoder disconnected event data. Schema of the Data property of an EventGridEvent for a Microsoft.Media.LiveEventEncoderDisconnected event. */
export declare interface MediaLiveEventEncoderDisconnectedEventData {
    /**
     * Gets the ingest URL provided by the live event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingestUrl: string;
    /**
     * Gets the stream Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly streamId: string;
    /**
     * Gets the remote IP.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderIp: string;
    /**
     * Gets the remote port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderPort: string;
    /**
     * Gets the result code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resultCode: string;
}

/** Ingest fragment dropped event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingDataChunkDropped event. */
export declare interface MediaLiveEventIncomingDataChunkDroppedEventData {
    /**
     * Gets the timestamp of the data chunk dropped.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp: string;
    /**
     * Gets the type of the track (Audio / Video).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackType: string;
    /**
     * Gets the bitrate of the track.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bitrate: number;
    /**
     * Gets the timescale of the Timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timescale: string;
    /**
     * Gets the result code for fragment drop operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resultCode: string;
    /**
     * Gets the name of the track for which fragment is dropped.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackName: string;
}

/** Encoder connect event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamReceived event. */
export declare interface MediaLiveEventIncomingStreamReceivedEventData {
    /**
     * Gets the ingest URL provided by the live event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingestUrl: string;
    /**
     * Gets the type of the track (Audio / Video).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackType: string;
    /**
     * Gets the track name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackName: string;
    /**
     * Gets the bitrate of the track.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bitrate: number;
    /**
     * Gets the remote IP.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderIp: string;
    /**
     * Gets the remote port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encoderPort: string;
    /**
     * Gets the first timestamp of the data chunk received.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp: string;
    /**
     * Gets the duration of the first data chunk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly duration: string;
    /**
     * Gets the timescale in which timestamp is represented.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timescale: string;
}

/** Incoming streams out of sync event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamsOutOfSync event. */
export declare interface MediaLiveEventIncomingStreamsOutOfSyncEventData {
    /**
     * Gets the minimum last timestamp received.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minLastTimestamp: string;
    /**
     * Gets the type of stream with minimum last timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly typeOfStreamWithMinLastTimestamp: string;
    /**
     * Gets the maximum timestamp among all the tracks (audio or video).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxLastTimestamp: string;
    /**
     * Gets the type of stream with maximum last timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly typeOfStreamWithMaxLastTimestamp: string;
    /**
     * Gets the timescale in which "MinLastTimestamp" is represented.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timescaleOfMinLastTimestamp: string;
    /**
     * Gets the timescale in which "MaxLastTimestamp" is represented.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timescaleOfMaxLastTimestamp: string;
}

/** Incoming video stream out of sync event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync event. */
export declare interface MediaLiveEventIncomingVideoStreamsOutOfSyncEventData {
    /**
     * Gets the first timestamp received for one of the quality levels.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly firstTimestamp: string;
    /**
     * Gets the duration of the data chunk with first timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly firstDuration: string;
    /**
     * Gets the timestamp received for some other quality levels.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondTimestamp: string;
    /**
     * Gets the duration of the data chunk with second timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondDuration: string;
    /**
     * Gets the timescale in which both the timestamps and durations are represented.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timescale: string;
}

/** Ingest heartbeat event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIngestHeartbeat event. */
export declare interface MediaLiveEventIngestHeartbeatEventData {
    /**
     * Gets the type of the track (Audio / Video).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackType: string;
    /**
     * Gets the track name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackName: string;
    /**
     * Gets the Live Transcription language.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transcriptionLanguage: string;
    /**
     * Gets the Live Transcription state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transcriptionState: string;
    /**
     * Gets the bitrate of the track.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bitrate: number;
    /**
     * Gets the incoming bitrate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly incomingBitrate: number;
    /**
     * Gets the track ingest drift value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingestDriftValue: string;
    /**
     * Gets the arrival UTC time of the last fragment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastFragmentArrivalTime: string;
    /**
     * Gets the last timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastTimestamp: string;
    /**
     * Gets the timescale of the last timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timescale: string;
    /**
     * Gets the fragment Overlap count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly overlapCount: number;
    /**
     * Gets the fragment Discontinuity count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly discontinuityCount: number;
    /**
     * Gets Non increasing count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nonincreasingCount: number;
    /**
     * Gets a value indicating whether unexpected bitrate is present or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unexpectedBitrate: boolean;
    /**
     * Gets the state of the live event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state: string;
    /**
     * Gets a value indicating whether preview is healthy or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly healthy: boolean;
}

/** Ingest track discontinuity detected event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventTrackDiscontinuityDetected event. */
export declare interface MediaLiveEventTrackDiscontinuityDetectedEventData {
    /**
     * Gets the type of the track (Audio / Video).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackType: string;
    /**
     * Gets the track name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackName: string;
    /**
     * Gets the bitrate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bitrate: number;
    /**
     * Gets the timestamp of the previous fragment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousTimestamp: string;
    /**
     * Gets the timestamp of the current fragment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly newTimestamp: string;
    /**
     * Gets the timescale in which both timestamps and discontinuity gap are represented.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timescale: string;
    /**
     * Gets the discontinuity gap between PreviousTimestamp and NewTimestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly discontinuityGap: string;
}

/** A Microsoft Teams user. */
export declare interface MicrosoftTeamsUserIdentifierModel {
    /** The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. */
    userId: string;
    /** True if the Microsoft Teams user is anonymous. By default false if missing. */
    isAnonymous?: boolean;
    /** The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. */
    cloud?: CommunicationCloudEnvironmentModel;
}

/** A phone number. */
export declare interface PhoneNumberIdentifierModel {
    /** The phone number in E.164 format. */
    value: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateChanged event. */
export declare interface PolicyInsightsPolicyStateChangedEventData {
    /** The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. */
    timestamp: string;
    /** The resource ID of the policy assignment. */
    policyAssignmentId: string;
    /** The resource ID of the policy definition. */
    policyDefinitionId: string;
    /** The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. */
    policyDefinitionReferenceId: string;
    /** The compliance state of the resource with respect to the policy assignment. */
    complianceState: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The compliance reason code. May be empty. */
    complianceReasonCode: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateCreated event. */
export declare interface PolicyInsightsPolicyStateCreatedEventData {
    /** The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. */
    timestamp: string;
    /** The resource ID of the policy assignment. */
    policyAssignmentId: string;
    /** The resource ID of the policy definition. */
    policyDefinitionId: string;
    /** The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. */
    policyDefinitionReferenceId: string;
    /** The compliance state of the resource with respect to the policy assignment. */
    complianceState: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The compliance reason code. May be empty. */
    complianceReasonCode: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateDeleted event. */
export declare interface PolicyInsightsPolicyStateDeletedEventData {
    /** The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. */
    timestamp: string;
    /** The resource ID of the policy assignment. */
    policyAssignmentId: string;
    /** The resource ID of the policy definition. */
    policyDefinitionId: string;
    /** The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. */
    policyDefinitionReferenceId: string;
    /** The compliance state of the resource with respect to the policy assignment. */
    complianceState: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The compliance reason code. May be empty. */
    complianceReasonCode: string;
}

/**
 * Defines values for RecordingChannelType. \
 * {@link KnownRecordingChannelType} can be used interchangeably with RecordingChannelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Mixed** \
 * **Unmixed**
 */
export declare type RecordingChannelType = string;

/**
 * Defines values for RecordingContentType. \
 * {@link KnownRecordingContentType} can be used interchangeably with RecordingContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AudioVideo** \
 * **Audio**
 */
export declare type RecordingContentType = string;

/**
 * Defines values for RecordingFormatType. \
 * {@link KnownRecordingFormatType} can be used interchangeably with RecordingFormatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Wav** \
 * **Mp3** \
 * **Mp4**
 */
export declare type RecordingFormatType = string;

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionCancel event. This is raised when a resource action operation is canceled. */
export declare interface ResourceActionCancelEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionFailure event. This is raised when a resource action operation fails. */
export declare interface ResourceActionFailureEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionSuccess event. This is raised when a resource action operation succeeds. */
export declare interface ResourceActionSuccessEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** The details of the authorization for the resource. */
export declare interface ResourceAuthorization {
    /** The scope of the authorization. */
    scope: string;
    /** The action being requested. */
    action: string;
    /** The evidence for the authorization. */
    evidence: {
        [propertyName: string]: string;
    };
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteCancel event. This is raised when a resource delete operation is canceled. */
export declare interface ResourceDeleteCancelEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteFailure event. This is raised when a resource delete operation fails. */
export declare interface ResourceDeleteFailureEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteSuccess event. This is raised when a resource delete operation succeeds. */
export declare interface ResourceDeleteSuccessEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** The details of the HTTP request. */
export declare interface ResourceHttpRequest {
    /** The client request ID. */
    clientRequestId: string;
    /** The client IP address. */
    clientIpAddress: string;
    /** The request method. */
    method: string;
    /** The url used in the request. */
    url: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ResourceNotifications.HealthResources.ResourceAnnotated event. */
export declare type ResourceNotificationsHealthResourcesAnnotatedEventData = ResourceNotificationsResourceUpdatedEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ResourceNotifications.HealthResources.AvailabilityStatusChanged event. */
export declare type ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData = ResourceNotificationsResourceUpdatedEventData & {};

/** details of operational info */
export declare interface ResourceNotificationsOperationalDetails {
    /** Date and Time when resource was updated */
    resourceEventTime: string;
}

/** Describes the schema of the properties under resource info which are common across all ARN system topic events */
export declare interface ResourceNotificationsResourceUpdatedDetails {
    /** id of the resource for which the event is being emitted */
    id: string;
    /** name of the resource for which the event is being emitted */
    name: string;
    /** the type of the resource for which the event is being emitted */
    type: string;
    /** the location of the resource for which the event is being emitted */
    location: string;
    /** the tags on the resource for which the event is being emitted */
    tags: string;
    /** properties in the payload of the resource for which the event is being emitted */
    properties: {
        [propertyName: string]: any;
    };
}

/** Describes the schema of the common properties across all ARN system topic events */
export declare interface ResourceNotificationsResourceUpdatedEventData {
    /** resourceInfo details for update event */
    resourceDetails: ResourceNotificationsResourceUpdatedDetails;
    /** details about operational info */
    operationalDetails: ResourceNotificationsOperationalDetails;
    /** api version of the resource properties bag */
    apiVersion: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteCancel event. This is raised when a resource create or update operation is canceled. */
export declare interface ResourceWriteCancelEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteFailure event. This is raised when a resource create or update operation fails. */
export declare interface ResourceWriteFailureEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteSuccess event. This is raised when a resource create or update operation succeeds. */
export declare interface ResourceWriteSuccessEventData {
    /** The tenant ID of the resource. */
    tenantId: string;
    /** The subscription ID of the resource. */
    subscriptionId: string;
    /** The resource group of the resource. */
    resourceGroup: string;
    /** The resource provider performing the operation. */
    resourceProvider: string;
    /** The URI of the resource in the operation. */
    resourceUri: string;
    /** The operation that was performed. */
    operationName: string;
    /** The status of the operation. */
    status: string;
    /** The requested authorization for the operation. */
    authorization: ResourceAuthorization;
    /** The properties of the claims. */
    claims: {
        [propertyName: string]: string;
    };
    /** An operation ID used for troubleshooting. */
    correlationId: string;
    /** The details of the operation. */
    httpRequest: ResourceHttpRequest;
}

/**
 * * The shape of the input for EventGridProducerClient#sendCloudEvents
 */
export declare interface SendCloudEventInput<T> {
    /**
     * Type of event related to the originating occurrence.
     */
    type: string;
    /**
     * Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
     */
    source: string;
    /**
     * An identifier for the event. The combination of id and source must be unique for each distinct event. If an ID is not provided,
     * a random UUID will be generated and used.
     */
    id?: string;
    /**
     * The time the event was generated. If not provided, the current time will be used.
     */
    time?: Date;
    /**
     * Identifies the schema that data adheres to.
     */
    dataschema?: string;
    /**
     * Content type of data value.
     */
    datacontenttype?: string;
    /**
     * Event data specific to the event type.
     */
    data?: T;
    /**
     * This describes the subject of the event in the context of the event producer (identified by source).
     */
    subject?: string;
    /**
     * Additional context attributes for the event. The Cloud Event specification refers to these as "extension attributes".
     */
    extensionAttributes?: Record<string, unknown>;
}

/**
 * The shape of the input for EventGridProducerClient#sendEventGridEvents
 */
export declare interface SendEventGridEventInput<T> {
    /**
     * The type of the event.
     */
    eventType: string;
    /**
     * The time the event was generated. If not provided, the current time will be used.
     */
    eventTime?: Date;
    /**
     * An unique identifier for the event. If an ID is not provided, a random UUID will be generated
     * and used.
     */
    id?: string;
    /**
     * The resource path of the event source.
     */
    topic?: string;
    /**
     * A resource path relative to the topic path.
     */
    subject: string;
    /**
     * The schema version of the data object.
     */
    dataVersion: string;
    /**
     * Event data specific to the event type.
     */
    data: T;
}

/**
 * Options for the send events operation.
 */
export declare type SendOptions = OperationOptions;

/** Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners event. */
export declare interface ServiceBusActiveMessagesAvailableWithNoListenersEventData {
    /** The namespace name of the Microsoft.ServiceBus resource. */
    namespaceName: string;
    /** The endpoint of the Microsoft.ServiceBus resource. */
    requestUri: string;
    /** The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'. */
    entityType: string;
    /** The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null. */
    queueName: string;
    /** The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null. */
    topicName: string;
    /** The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null. */
    subscriptionName: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListeners event. */
export declare interface ServiceBusDeadletterMessagesAvailableWithNoListenersEventData {
    /** The namespace name of the Microsoft.ServiceBus resource. */
    namespaceName: string;
    /** The endpoint of the Microsoft.ServiceBus resource. */
    requestUri: string;
    /** The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'. */
    entityType: string;
    /** The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null. */
    queueName: string;
    /** The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null. */
    topicName: string;
    /** The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null. */
    subscriptionName: string;
}

/**
 * Defines values for StampKind. \
 * {@link KnownStampKind} can be used interchangeably with StampKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Public**: App Service Plan is running on a public stamp. \
 * **AseV1**: App Service Plan is running on an App Service Environment V1. \
 * **AseV2**: App Service Plan is running on an App Service Environment V2.
 */
export declare type StampKind = string;

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.AsyncOperationInitiated event. */
export declare interface StorageAsyncOperationInitiatedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the Storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
    contentType: string;
    /** The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. */
    contentLength: number;
    /** The type of blob. */
    blobType: string;
    /** The path to the blob. */
    url: string;
    /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobCreated event. */
export declare interface StorageBlobCreatedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the Storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The etag of the blob at the time this event was triggered. */
    eTag: string;
    /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
    contentType: string;
    /** The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. */
    contentLength: number;
    /** The offset of the blob in bytes. */
    contentOffset: number;
    /** The type of blob. */
    blobType: string;
    /** The path to the blob. */
    url: string;
    /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobDeleted event. */
export declare interface StorageBlobDeletedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the Storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
    contentType: string;
    /** The type of blob. */
    blobType: string;
    /** The path to the blob. */
    url: string;
    /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for an Microsoft.Storage.BlobInventoryPolicyCompleted event. */
export declare interface StorageBlobInventoryPolicyCompletedEventData {
    /** The time at which inventory policy was scheduled. */
    scheduleDateTime: string;
    /** The account name for which inventory policy is registered. */
    accountName: string;
    /** The rule name for inventory policy. */
    ruleName: string;
    /** The status of inventory run, it can be Succeeded/PartiallySucceeded/Failed. */
    policyRunStatus: string;
    /** The status message for inventory run. */
    policyRunStatusMessage: string;
    /** The policy run id for inventory run. */
    policyRunId: string;
    /** The blob URL for manifest file for inventory run. */
    manifestBlobUrl: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobRenamed event. */
export declare interface StorageBlobRenamedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The path to the blob that was renamed. */
    sourceUrl: string;
    /** The new path to the blob after the rename operation. */
    destinationUrl: string;
    /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobTierChanged event. */
export declare interface StorageBlobTierChangedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the Storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
    contentType: string;
    /** The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. */
    contentLength: number;
    /** The type of blob. */
    blobType: string;
    /** The path to the blob. */
    url: string;
    /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryCreated event. */
export declare interface StorageDirectoryCreatedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The etag of the directory at the time this event was triggered. */
    eTag: string;
    /** The path to the directory. */
    url: string;
    /** An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryDeleted event. */
export declare interface StorageDirectoryDeletedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The path to the deleted directory. */
    url: string;
    /** Is this event for a recursive delete operation. */
    recursive: string;
    /** An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryRenamed event. */
export declare interface StorageDirectoryRenamedEventData {
    /** The name of the API/operation that triggered this event. */
    api: string;
    /** A request id provided by the client of the storage API operation that triggered this event. */
    clientRequestId: string;
    /** The request id generated by the storage service for the storage API operation that triggered this event. */
    requestId: string;
    /** The path to the directory that was renamed. */
    sourceUrl: string;
    /** The new path to the directory after the rename operation. */
    destinationUrl: string;
    /** An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. */
    sequencer: string;
    /** The identity of the requester that triggered this event. */
    identity: string;
    /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
    storageDiagnostics: any;
}

/** Execution statistics of a specific policy action in a Blob Management cycle. */
export declare interface StorageLifecyclePolicyActionSummaryDetail {
    /** Total number of objects to be acted on by this action. */
    totalObjectsCount: number;
    /** Number of success operations of this action. */
    successCount: number;
    /** Error messages of this action if any. */
    errorList: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.LifecyclePolicyCompleted event. */
export declare interface StorageLifecyclePolicyCompletedEventData {
    /** The time the policy task was scheduled. */
    scheduleTime: string;
    /** Execution statistics of a specific policy action in a Blob Management cycle. */
    deleteSummary: StorageLifecyclePolicyActionSummaryDetail;
    /** Execution statistics of a specific policy action in a Blob Management cycle. */
    tierToCoolSummary: StorageLifecyclePolicyActionSummaryDetail;
    /** Execution statistics of a specific policy action in a Blob Management cycle. */
    tierToArchiveSummary: StorageLifecyclePolicyActionSummaryDetail;
}

/** Schema of the Data property of an EventGridEvent for an Microsoft.Storage.StorageTaskCompleted event. */
export declare interface StorageTaskCompletedEventData {
    /** The status for a storage task. */
    status: StorageTaskCompletedStatus;
    /** The time at which a storage task was completed. */
    completedDateTime: string;
    /** The execution id for a storage task. */
    taskExecutionId: string;
    /** The task name for a storage task. */
    taskName: string;
    /** The summary report blob url for a storage task */
    summaryReportBlobUrl: string;
}

/**
 * Defines values for StorageTaskCompletedStatus. \
 * {@link KnownStorageTaskCompletedStatus} can be used interchangeably with StorageTaskCompletedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed**
 */
export declare type StorageTaskCompletedStatus = string;

/** Schema of the Data property of an EventGridEvent for an Microsoft.Storage.StorageTaskQueued event. */
export declare interface StorageTaskQueuedEventData {
    /** The time at which a storage task was queued. */
    queuedDateTime: string;
    /** The execution id for a storage task. */
    taskExecutionId: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.EventGrid.SubscriptionDeletedEvent event. */
export declare interface SubscriptionDeletedEventData {
    /**
     * The Azure resource ID of the deleted event subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventSubscriptionId: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.EventGrid.SubscriptionValidationEvent event. */
export declare interface SubscriptionValidationEventData {
    /**
     * The validation code sent by Azure Event Grid to validate an event subscription. To complete the validation handshake, the subscriber must either respond with this validation code as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validationCode: string;
    /**
     * The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview). To complete the validation handshake, the subscriber must either respond with the validationCode as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validationUrl: string;
}

/**
 * A mapping of event type names to event data type interfaces.
 */
export declare interface SystemEventNameToEventData {
    /** An interface for the event data of a "Microsoft.ApiManagement.UserCreated" event. */
    "Microsoft.ApiManagement.UserCreated": ApiManagementUserCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.UserUpdated" event. */
    "Microsoft.ApiManagement.UserUpdated": ApiManagementUserUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.UserDeleted" event. */
    "Microsoft.ApiManagement.UserDeleted": ApiManagementUserDeletedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.SubscriptionCreated" event. */
    "Microsoft.ApiManagement.SubscriptionCreated": ApiManagementSubscriptionCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.SubscriptionUpdated" event. */
    "Microsoft.ApiManagement.SubscriptionUpdated": ApiManagementSubscriptionUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.SubscriptionDeleted" event. */
    "Microsoft.ApiManagement.SubscriptionDeleted": ApiManagementSubscriptionDeletedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.ProductCreated" event. */
    "Microsoft.ApiManagement.ProductCreated": ApiManagementProductCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.ProductUpdated" event. */
    "Microsoft.ApiManagement.ProductUpdated": ApiManagementProductUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.ProductDeleted" event. */
    "Microsoft.ApiManagement.ProductDeleted": ApiManagementProductDeletedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.APICreated" event. */
    "Microsoft.ApiManagement.APICreated": ApiManagementApiCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.APIUpdated" event. */
    "Microsoft.ApiManagement.APIUpdated": ApiManagementApiUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.APIDeleted" event. */
    "Microsoft.ApiManagement.APIDeleted": ApiManagementApiDeletedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.APIReleaseCreated" event. */
    "Microsoft.ApiManagement.APIReleaseCreated": ApiManagementApiReleaseCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.APIReleaseUpdated" event. */
    "Microsoft.ApiManagement.APIReleaseUpdated": ApiManagementApiReleaseUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.APIReleaseDeleted" event. */
    "Microsoft.ApiManagement.APIReleaseDeleted": ApiManagementApiReleaseDeletedEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatMessageReceived" event. */
    "Microsoft.Communication.ChatMessageReceived": AcsChatMessageReceivedEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatMessageReceivedInThread" event. */
    "Microsoft.Communication.ChatMessageReceivedInThread": AcsChatMessageReceivedInThreadEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatMessageEdited" event. */
    "Microsoft.Communication.ChatMessageEdited": AcsChatMessageEditedEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatMessageEditedInThread" event. */
    "Microsoft.Communication.ChatMessageEditedInThread": AcsChatMessageEditedInThreadEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatMessageDeleted" event. */
    "Microsoft.Communication.ChatMessageDeleted": AcsChatMessageDeletedEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatMessageDeletedInThread" event. */
    "Microsoft.Communication.ChatMessageDeletedInThread": AcsChatMessageDeletedInThreadEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatThreadCreatedWithUser" event. */
    "Microsoft.Communication.ChatThreadCreatedWithUser": AcsChatThreadCreatedWithUserEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatThreadWithUserDeleted" event. */
    "Microsoft.Communication.ChatThreadWithUserDeleted": AcsChatThreadWithUserDeletedEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser" event. */
    "Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser": AcsChatThreadPropertiesUpdatedPerUserEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatThreadParticipantAdded" event. */
    "Microsoft.Communication.ChatThreadParticipantAdded": AcsChatParticipantAddedToThreadEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatParticipantAddedToThreadWithUser" event. */
    "Microsoft.Communication.ChatParticipantAddedToThreadWithUser": AcsChatParticipantAddedToThreadWithUserEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatThreadParticipantRemoved" event. */
    "Microsoft.Communication.ChatThreadParticipantRemoved": AcsChatParticipantRemovedFromThreadEventData;
    /** An interface for the event data of a "Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser" event. */
    "Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser": AcsChatParticipantRemovedFromThreadWithUserEventData;
    /** An interface for the event data of a "Microsoft.Communication.RecordingFileStatusUpdated" event. */
    "Microsoft.Communication.RecordingFileStatusUpdated": AcsRecordingFileStatusUpdatedEventData;
    /** An interface for the event data of a "Microsoft.Communication.SMSDeliveryReportReceived" event. */
    "Microsoft.Communication.SMSDeliveryReportReceived": AcsSmsDeliveryReportReceivedEventData;
    /** An interface for the event data of a "Microsoft.Communication.SMSReceived" event. */
    "Microsoft.Communication.SMSReceived": AcsSmsReceivedEventData;
    /** An interface for the event data of a "Microsoft.Communication.UserDisconnected" event. */
    "Microsoft.Communication.UserDisconnected": AcsUserDisconnectedEventData;
    /** An interface for the event data of a "Microsoft.ContainerService.NewKubernetesVersionAvailable" event. */
    "Microsoft.ContainerService.NewKubernetesVersionAvailable": ContainerServiceNewKubernetesVersionAvailableEventData;
    /** An interface for the event data of a "Microsoft.AppConfiguration.KeyValueDeleted" event. */
    "Microsoft.AppConfiguration.KeyValueDeleted": AppConfigurationKeyValueDeletedEventData;
    /** An interface for the event data of a "Microsoft.AppConfiguration.KeyValueModified" event. */
    "Microsoft.AppConfiguration.KeyValueModified": AppConfigurationKeyValueModifiedEventData;
    /** An interface for the event data of a "Microsoft.ContainerRegistry.ImagePushed" event. */
    "Microsoft.ContainerRegistry.ImagePushed": ContainerRegistryImagePushedEventData;
    /** An interface for the event data of a "Microsoft.ContainerRegistry.ImageDeleted" event. */
    "Microsoft.ContainerRegistry.ImageDeleted": ContainerRegistryImageDeletedEventData;
    /** An interface for the event data of a "Microsoft.ContainerRegistry.ChartDeleted" event. */
    "Microsoft.ContainerRegistry.ChartDeleted": ContainerRegistryChartDeletedEventData;
    /** An interface for the event data of a "Microsoft.ContainerRegistry.ChartPushed" event. */
    "Microsoft.ContainerRegistry.ChartPushed": ContainerRegistryChartPushedEventData;
    /** An interface for the event data of a "Microsoft.Devices.DeviceCreated" event. */
    "Microsoft.Devices.DeviceCreated": IotHubDeviceCreatedEventData;
    /** An interface for the event data of a "Microsoft.Devices.DeviceDeleted" event. */
    "Microsoft.Devices.DeviceDeleted": IotHubDeviceDeletedEventData;
    /** An interface for the event data of a "Microsoft.Devices.DeviceConnected" event. */
    "Microsoft.Devices.DeviceConnected": IotHubDeviceConnectedEventData;
    /** An interface for the event data of a "Microsoft.Devices.DeviceDisconnected" event. */
    "Microsoft.Devices.DeviceDisconnected": IotHubDeviceDisconnectedEventData;
    /** An interface for the event data of a "Microsoft.Devices.DeviceTelemetry" event. */
    "Microsoft.Devices.DeviceTelemetry": IotHubDeviceTelemetryEventData;
    /** An interface for the event data of a "Microsoft.EventGrid.SubscriptionValidationEvent" event. */
    "Microsoft.EventGrid.SubscriptionValidationEvent": SubscriptionValidationEventData;
    /** An interface for the event data of a "Microsoft.EventGrid.SubscriptionDeletedEvent" event. */
    "Microsoft.EventGrid.SubscriptionDeletedEvent": SubscriptionDeletedEventData;
    /** An interface for the event data of a "Microsoft.EventHub.CaptureFileCreated" event. */
    "Microsoft.EventHub.CaptureFileCreated": EventHubCaptureFileCreatedEventData;
    /** An interface for the event data of a "Microsoft.HealthcareApis.DicomImageCreated" event. */
    "Microsoft.HealthcareApis.DicomImageCreated": HealthcareDicomImageCreatedEventData;
    /** An interface for the event data of a "Microsoft.HealthcareApis.DicomImageDeleted" event. */
    "Microsoft.HealthcareApis.DicomImageDeleted": HealthcareDicomImageDeletedEventData;
    /** An interface for the event data of a "Microsoft.HealthcareApis.FhirResourceCreated" event. */
    "Microsoft.HealthcareApis.FhirResourceCreated": HealthcareFhirResourceCreatedEventData;
    /** An interface for the event data of a "Microsoft.HealthcareApis.FhirUpdatedCreated" event. */
    "Microsoft.HealthcareApis.FhirUpdatedCreated": HealthcareFhirResourceUpdatedEventData;
    /** An interface for the event data of a "Microsoft.HealthcareApis.FhirDeletedCreated" event. */
    "Microsoft.HealthcareApis.FhirDeletedCreated": HealthcareFhirResourceDeletedEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.CertificateNewVersionCreated" event. */
    "Microsoft.KeyVault.CertificateNewVersionCreated": KeyVaultCertificateNewVersionCreatedEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.CertificateNearExpiry" event. */
    "Microsoft.KeyVault.CertificateNearExpiry": KeyVaultCertificateNearExpiryEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.CertificateExpired" event. */
    "Microsoft.KeyVault.CertificateExpired": KeyVaultCertificateExpiredEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.KeyNewVersionCreated" event. */
    "Microsoft.KeyVault.KeyNewVersionCreated": KeyVaultKeyNewVersionCreatedEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.KeyNearExpiry" event. */
    "Microsoft.KeyVault.KeyNearExpiry": KeyVaultKeyNearExpiryEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.KeyExpired" event. */
    "Microsoft.KeyVault.KeyExpired": KeyVaultKeyExpiredEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.SecretNewVersionCreated" event. */
    "Microsoft.KeyVault.SecretNewVersionCreated": KeyVaultSecretNewVersionCreatedEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.SecretNearExpiry" event. */
    "Microsoft.KeyVault.SecretNearExpiry": KeyVaultSecretNearExpiryEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.SecretExpired" event. */
    "Microsoft.KeyVault.SecretExpired": KeyVaultSecretExpiredEventData;
    /** An interface for the event data of a "Microsoft.KeyVault.VaultAccessPolicyChanged" event. */
    "Microsoft.KeyVault.VaultAccessPolicyChanged": KeyVaultAccessPolicyChangedEventData;
    /** An interface for the event data of a "Microsoft.MachineLearningServices.DatasetDriftDetected" event. */
    "Microsoft.MachineLearningServices.DatasetDriftDetected": MachineLearningServicesDatasetDriftDetectedEventData;
    /** An interface for the event data of a "Microsoft.MachineLearningServices.ModelDeployed" event. */
    "Microsoft.MachineLearningServices.ModelDeployed": MachineLearningServicesModelDeployedEventData;
    /** An interface for the event data of a "Microsoft.MachineLearningServices.ModelRegistered" event. */
    "Microsoft.MachineLearningServices.ModelRegistered": MachineLearningServicesModelRegisteredEventData;
    /** An interface for the event data of a "Microsoft.MachineLearningServices.RunCompleted" event. */
    "Microsoft.MachineLearningServices.RunCompleted": MachineLearningServicesRunCompletedEventData;
    /** An interface for the event data of a "Microsoft.MachineLearningServices.RunStatusChanged" event. */
    "Microsoft.MachineLearningServices.RunStatusChanged": MachineLearningServicesRunStatusChangedEventData;
    /** An interface for the event data of a "Microsoft.Maps.GeofenceEntered" event. */
    "Microsoft.Maps.GeofenceEntered": MapsGeofenceEnteredEventData;
    /** An interface for the event data of a "Microsoft.Maps.GeofenceExited" event. */
    "Microsoft.Maps.GeofenceExited": MapsGeofenceExitedEventData;
    /** An interface for the event data of a "Microsoft.Maps.GeofenceResult" event. */
    "Microsoft.Maps.GeofenceResult": MapsGeofenceResultEventData;
    /** An interface for the event data of a "Microsoft.Media.JobStateChange" event. */
    "Microsoft.Media.JobStateChange": MediaJobStateChangeEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputStateChange" event. */
    "Microsoft.Media.JobOutputStateChange": MediaJobOutputStateChangeEventData;
    /** An interface for the event data of a "Microsoft.Media.JobScheduled" event. */
    "Microsoft.Media.JobScheduled": MediaJobScheduledEventData;
    /** An interface for the event data of a "Microsoft.Media.JobProcessing" event. */
    "Microsoft.Media.JobProcessing": MediaJobProcessingEventData;
    /** An interface for the event data of a "Microsoft.Media.JobCanceling" event. */
    "Microsoft.Media.JobCanceling": MediaJobCancelingEventData;
    /** An interface for the event data of a "Microsoft.Media.JobFinished" event. */
    "Microsoft.Media.JobFinished": MediaJobFinishedEventData;
    /** An interface for the event data of a "Microsoft.Media.JobCanceled" event. */
    "Microsoft.Media.JobCanceled": MediaJobCanceledEventData;
    /** An interface for the event data of a "Microsoft.Media.JobErrored" event. */
    "Microsoft.Media.JobErrored": MediaJobErroredEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputCanceled" event. */
    "Microsoft.Media.JobOutputCanceled": MediaJobOutputCanceledEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputCanceling" event. */
    "Microsoft.Media.JobOutputCanceling": MediaJobOutputCancelingEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputErrored" event. */
    "Microsoft.Media.JobOutputErrored": MediaJobOutputErroredEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputFinished" event. */
    "Microsoft.Media.JobOutputFinished": MediaJobOutputFinishedEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputProcessing" event. */
    "Microsoft.Media.JobOutputProcessing": MediaJobOutputProcessingEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputScheduled" event. */
    "Microsoft.Media.JobOutputScheduled": MediaJobOutputScheduledEventData;
    /** An interface for the event data of a "Microsoft.Media.JobOutputProgress" event. */
    "Microsoft.Media.JobOutputProgress": MediaJobOutputProgressEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventEncoderConnected" event. */
    "Microsoft.Media.LiveEventEncoderConnected": MediaLiveEventEncoderConnectedEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventChannelArchiveHeartbeat" event. */
    "Microsoft.Media.LiveEventChannelArchiveHeartbeat": MediaLiveEventChannelArchiveHeartbeatEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventConnectionRejected" event. */
    "Microsoft.Media.LiveEventConnectionRejected": MediaLiveEventConnectionRejectedEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventEncoderDisconnected" event. */
    "Microsoft.Media.LiveEventEncoderDisconnected": MediaLiveEventEncoderDisconnectedEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventIncomingStreamReceived" event. */
    "Microsoft.Media.LiveEventIncomingStreamReceived": MediaLiveEventIncomingStreamReceivedEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventIncomingStreamsOutOfSync" event. */
    "Microsoft.Media.LiveEventIncomingStreamsOutOfSync": MediaLiveEventIncomingStreamsOutOfSyncEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync" event. */
    "Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync": MediaLiveEventIncomingVideoStreamsOutOfSyncEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventIncomingDataChunkDropped" event. */
    "Microsoft.Media.LiveEventIncomingDataChunkDropped": MediaLiveEventIncomingDataChunkDroppedEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventIngestHeartbeat" event. */
    "Microsoft.Media.LiveEventIngestHeartbeat": MediaLiveEventIngestHeartbeatEventData;
    /** An interface for the event data of a "Microsoft.Media.LiveEventTrackDiscontinuityDetected" event. */
    "Microsoft.Media.LiveEventTrackDiscontinuityDetected": MediaLiveEventTrackDiscontinuityDetectedEventData;
    /** An interface for the event data of a "Microsoft.PolicyInsights.PolicyStateChanged" event. */
    "Microsoft.PolicyInsights.PolicyStateChanged ": PolicyInsightsPolicyStateChangedEventData;
    /** An interface for the event data of a " Microsoft.PolicyInsights.PolicyStateCreated" event. */
    "Microsoft.PolicyInsights.PolicyStateCreated": PolicyInsightsPolicyStateCreatedEventData;
    /** An interface for the event data of a "Microsoft.PolicyInsights.PolicyStateDeleted" event. */
    "Microsoft.PolicyInsights.PolicyStateDeleted": PolicyInsightsPolicyStateDeletedEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceDeleteSuccess" event. */
    "Microsoft.Resources.ResourceWriteSuccess": ResourceWriteSuccessEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceWriteFailure" event. */
    "Microsoft.Resources.ResourceWriteFailure": ResourceWriteFailureEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceWriteCancel" event. */
    "Microsoft.Resources.ResourceWriteCancel": ResourceWriteCancelEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceDeleteSuccess" event. */
    "Microsoft.Resources.ResourceDeleteSuccess": ResourceDeleteSuccessEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceDeleteFailure" event. */
    "Microsoft.Resources.ResourceDeleteFailure": ResourceDeleteFailureEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceDeleteCancel" event. */
    "Microsoft.Resources.ResourceDeleteCancel": ResourceDeleteCancelEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceActionSuccess" event. */
    "Microsoft.Resources.ResourceActionSuccess": ResourceActionSuccessEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceActionFailure" event. */
    "Microsoft.Resources.ResourceActionFailure": ResourceActionFailureEventData;
    /** An interface for the event data of a "Microsoft.Resources.ResourceActionCancel" event. */
    "Microsoft.Resources.ResourceActionCancel": ResourceActionCancelEventData;
    /** An interface for the event data of a "Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners" event. */
    "Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners": ServiceBusActiveMessagesAvailableWithNoListenersEventData;
    /** An interface for the event data of a "Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListeners" event. */
    "Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListeners": ServiceBusDeadletterMessagesAvailableWithNoListenersEventData;
    /** An interface for the event data of a "Microsoft.Storage.AsyncOperationInitiated" event. */
    "Microsoft.Storage.AsyncOperationInitiated": StorageAsyncOperationInitiatedEventData;
    /** An interface for the event data of a "Microsoft.Storage.BlobCreated" event. */
    "Microsoft.Storage.BlobCreated": StorageBlobCreatedEventData;
    /** An interface for the event data of a "Microsoft.Storage.BlobDeleted" event. */
    "Microsoft.Storage.BlobDeleted": StorageBlobDeletedEventData;
    /** An interface for the event data of a "Microsoft.Storage.BlobInventoryPolicyCompleted" event. */
    "Microsoft.Storage.BlobInventoryPolicyCompleted": StorageBlobInventoryPolicyCompletedEventData;
    /** An interface for the event data of a "Microsoft.Storage.BlobTierChanged" event. */
    "Microsoft.Storage.BlobTierChanged": StorageBlobTierChangedEventData;
    /** An interface for the event data of a "Microsoft.Storage.BlobRenamed" event. */
    "Microsoft.Storage.BlobRenamed": StorageBlobRenamedEventData;
    /** An interface for the event data of a "Microsoft.Storage.DirectoryCreated" event. */
    "Microsoft.Storage.DirectoryCreated": StorageDirectoryCreatedEventData;
    /** An interface for the event data of a "Microsoft.Storage.DirectoryDeleted" event. */
    "Microsoft.Storage.DirectoryDeleted": StorageDirectoryDeletedEventData;
    /** An interface for the event data of a "Microsoft.Storage.DirectoryRenamed" event. */
    "Microsoft.Storage.DirectoryRenamed": StorageDirectoryRenamedEventData;
    /** An interface for the event data of a "Microsoft.Storage.LifecyclePolicyCompleted" event. */
    "Microsoft.Storage.LifecyclePolicyCompleted": StorageLifecyclePolicyCompletedEventData;
    /** An interface for the event data of a "Microsoft.Web.AppUpdated" event. */
    "Microsoft.Web.AppUpdated": WebAppUpdatedEventData;
    /** An interface for the event data of a "Microsoft.Web.BackupOperationStarted" event. */
    "Microsoft.Web.BackupOperationStarted": WebBackupOperationStartedEventData;
    /** An interface for the event data of a "Microsoft.Web.BackupOperationCompleted" event. */
    "Microsoft.Web.BackupOperationCompleted": WebBackupOperationCompletedEventData;
    /** An interface for the event data of a "Microsoft.Web.BackupOperationFailed" event. */
    "Microsoft.Web.BackupOperationFailed": WebBackupOperationFailedEventData;
    /** An interface for the event data of a "Microsoft.Web.RestoreOperationStarted" event. */
    "Microsoft.Web.RestoreOperationStarted": WebRestoreOperationStartedEventData;
    /** An interface for the event data of a "Microsoft.Web.RestoreOperationCompleted" event. */
    "Microsoft.Web.RestoreOperationCompleted": WebRestoreOperationCompletedEventData;
    /** An interface for the event data of a "Microsoft.Web.RestoreOperationFailed" event. */
    "Microsoft.Web.RestoreOperationFailed": WebRestoreOperationFailedEventData;
    /** An interface for the event data of a "Microsoft.Web.SlotSwapStarted" event. */
    "Microsoft.Web.SlotSwapStarted": WebSlotSwapStartedEventData;
    /** An interface for the event data of a "Microsoft.Web.SlotSwapCompleted" event. */
    "Microsoft.Web.SlotSwapCompleted": WebSlotSwapCompletedEventData;
    /** An interface for the event data of a "Microsoft.Web.SlotSwapFailed" event. */
    "Microsoft.Web.SlotSwapFailed": WebSlotSwapFailedEventData;
    /** An interface for the event data of a "Microsoft.Web.SlotSwapWithPreviewStarted" event. */
    "Microsoft.Web.SlotSwapWithPreviewStarted": WebSlotSwapWithPreviewStartedEventData;
    /** An interface for the event data of a "Microsoft.Web.SlotSwapWithPreviewCancelled" event. */
    "Microsoft.Web.SlotSwapWithPreviewCancelled": WebSlotSwapWithPreviewCancelledEventData;
    /** An interface for the event data of a "Microsoft.Web.AppServicePlanUpdated" event. */
    "Microsoft.Web.AppServicePlanUpdated": WebAppServicePlanUpdatedEventData;
    /** An interface for the event data of a "Microsoft.Storage.StorageTaskQueued" event. */
    "Microsoft.Storage.StorageTaskQueued": StorageTaskQueuedEventData;
    /** An interface for the event data of a "Microsoft.Storage.StorageTaskCompleted" event. */
    "Microsoft.Storage.StorageTaskCompleted": StorageTaskCompletedEventData;
    /** An interface for the event data of a "Microsoft.DataBox.CopyStarted" event. */
    "Microsoft.DataBox.CopyStarted": DataBoxCopyStartedEventData;
    /** An interface for the event data of a "Microsoft.DataBox.CopyCompleted" event. */
    "Microsoft.DataBox.CopyCompleted": DataBoxCopyCompletedEventData;
    /** An interface for the event data of a "Microsoft.DataBox.OrderCompleted" event. */
    "Microsoft.DataBox.OrderCompleted": DataBoxOrderCompletedEventData;
    /** An interface for the event data of a "Microsoft.Communication.IncomingCall" event. */
    "Microsoft.Communication.IncomingCall": AcsIncomingCallEventData;
    /** An interface for the event data of a "Microsoft.Communication.EmailDeliveryReportReceived" event. */
    "Microsoft.Communication.EmailDeliveryReportReceived": AcsEmailDeliveryReportReceivedEventData;
    /** An interface for the event data of a "Microsoft.Communication.EmailEngagementTrackingReportReceived" event. */
    "Microsoft.Communication.EmailEngagementTrackingReportReceived": AcsEmailEngagementTrackingReportReceivedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayCreated" event. */
    "Microsoft.ApiManagement.GatewayCreated": ApiManagementGatewayCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayUpdated" event. */
    "Microsoft.ApiManagement.GatewayUpdated": ApiManagementGatewayUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayDeleted" event. */
    "Microsoft.ApiManagement.GatewayDeleted": ApiManagementGatewayDeletedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayHostnameConfigurationCreated" event. */
    "Microsoft.ApiManagement.GatewayHostnameConfigurationCreated": ApiManagementGatewayHostnameConfigurationCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayHostnameConfigurationUpdated" event. */
    "Microsoft.ApiManagement.GatewayHostnameConfigurationUpdated": ApiManagementGatewayHostnameConfigurationUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayHostnameConfigurationDeleted" event. */
    "Microsoft.ApiManagement.GatewayHostnameConfigurationDeleted": ApiManagementGatewayHostnameConfigurationDeletedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayCertificateAuthorityCreated" event. */
    "Microsoft.ApiManagement.GatewayCertificateAuthorityCreated": ApiManagementGatewayCertificateAuthorityCreatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayCertificateAuthorityUpdated" event. */
    "Microsoft.ApiManagement.GatewayCertificateAuthorityUpdated": ApiManagementGatewayCertificateAuthorityUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayCertificateAuthorityDeleted" event. */
    "Microsoft.ApiManagement.GatewayCertificateAuthorityDeleted": ApiManagementGatewayCertificateAuthorityDeletedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayAPIAdded" event. */
    "Microsoft.ApiManagement.GatewayAPIAdded": ApiManagementGatewayApiAddedEventData;
    /** An interface for the event data of a "Microsoft.ApiManagement.GatewayAPIRemoved" event. */
    "Microsoft.ApiManagement.GatewayAPIRemoved": ApiManagementGatewayApiRemovedEventData;
    /** An interface for the event data of a "Microsoft.HealthcareApis.DicomImageUpdated" event. */
    "Microsoft.HealthcareApis.DicomImageUpdated": HealthcareDicomImageUpdatedEventData;
    /** An interface for the event data of a "Microsoft.ContainerService.ClusterSupportEnded" event. */
    "Microsoft.ContainerService.ClusterSupportEnded": ContainerServiceClusterSupportEndedEventData;
    /** An interface for the event data of a "Microsoft.ContainerService.ClusterSupportEnding" event. */
    "Microsoft.ContainerService.ClusterSupportEnding": ContainerServiceClusterSupportEndingEventData;
    /** An interface for the event data of a "Microsoft.ContainerService.NodePoolRollingStarted" event. */
    "Microsoft.ContainerService.NodePoolRollingStarted": ContainerServiceNodePoolRollingStartedEventData;
    /** An interface for the event data of a "Microsoft.ContainerService.NodePoolRollingSucceeded" event. */
    "Microsoft.ContainerService.NodePoolRollingSucceeded": ContainerServiceNodePoolRollingSucceededEventData;
    /** An interface for the event data of a "Microsoft.ContainerService.NodePoolRollingFailed" event. */
    "Microsoft.ContainerService.NodePoolRollingFailed": ContainerServiceNodePoolRollingFailedEventData;
    /** An interface for the event data of a "Microsoft.EventGrid.MQTTClientCreatedOrUpdated" event. */
    "Microsoft.EventGrid.MQTTClientCreatedOrUpdated": EventGridMqttClientCreatedOrUpdatedEventData;
    /** An interface for the event data of a "Microsoft.EventGrid.MQTTClientDeleted" event. */
    "Microsoft.EventGrid.MQTTClientDeleted": EventGridMqttClientDeletedEventData;
    /** An interface for the event data of a "Microsoft.EventGrid.MQTTClientSessionConnected" event. */
    "Microsoft.EventGrid.MQTTClientSessionConnected": EventGridMqttClientSessionConnectedEventData;
    /** An interface for the event data of a "Microsoft.EventGrid.MQTTClientSessionDisconnected" event. */
    "Microsoft.EventGrid.MQTTClientSessionDisconnected": EventGridMqttClientSessionDisconnectedEventData;
    /** An interface for the event data of a "Microsoft.AppConfiguration.SnapshotCreated" event. */
    "Microsoft.AppConfiguration.SnapshotCreated": AppConfigurationSnapshotCreatedEventData;
    /** An interface for the event data of a "Microsoft.AppConfiguration.SnapshotModified" event. */
    "Microsoft.AppConfiguration.SnapshotModified": AppConfigurationSnapshotModifiedEventData;
    /** An interface for the event data of a "Microsoft.ResourceNotifications.HealthResources.AvailabilityStatusChanged" event. */
    "Microsoft.ResourceNotifications.HealthResources.AvailabilityStatusChanged": ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData;
    /** An interface for the event data of a "Microsoft.ResourceNotifications.HealthResources.ResourceAnnotated" event. */
    "Microsoft.ResourceNotifications.HealthResources.ResourceAnnotated": ResourceNotificationsHealthResourcesAnnotatedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerDeregistered" event. */
    "Microsoft.Communication.RouterWorkerDeregistered": AcsRouterWorkerDeregisteredEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerRegistered" event. */
    "Microsoft.Communication.RouterWorkerRegistered": AcsRouterWorkerRegisteredEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobCancelled" event. */
    "Microsoft.Communication.RouterJobCancelled": AcsRouterJobCancelledEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobClassificationFailed" event. */
    "Microsoft.Communication.RouterJobClassificationFailed": AcsRouterJobClassificationFailedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobClassified" event. */
    "Microsoft.Communication.RouterJobClassified": AcsRouterJobClassifiedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobClosed" event. */
    "Microsoft.Communication.RouterJobClosed": AcsRouterJobClosedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobCompleted" event. */
    "Microsoft.Communication.RouterJobCompleted": AcsRouterJobCompletedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobDeleted" event. */
    "Microsoft.Communication.RouterJobDeleted": AcsRouterJobDeletedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobExceptionTriggered" event. */
    "Microsoft.Communication.RouterJobExceptionTriggered": AcsRouterJobExceptionTriggeredEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobQueued" event. */
    "Microsoft.Communication.RouterJobQueued": AcsRouterJobQueuedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobReceived" event. */
    "Microsoft.Communication.RouterJobReceived": AcsRouterJobReceivedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobSchedulingFailed" event. */
    "Microsoft.Communication.RouterJobSchedulingFailed": AcsRouterJobSchedulingFailedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobUnassigned" event. */
    "Microsoft.Communication.RouterJobUnassigned": AcsRouterJobUnassignedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobWaitingForActivation" event. */
    "Microsoft.Communication.RouterJobWaitingForActivation": AcsRouterJobWaitingForActivationEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterJobWorkerSelectorsExpire" event. */
    "Microsoft.Communication.RouterJobWorkerSelectorsExpire": AcsRouterJobWorkerSelectorsExpiredEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerDeleted" event. */
    "Microsoft.Communication.RouterWorkerDeleted": AcsRouterWorkerDeletedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerOfferAccepted" event. */
    "Microsoft.Communication.RouterWorkerOfferAccepted": AcsRouterWorkerOfferAcceptedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerOfferDeclined" event. */
    "Microsoft.Communication.RouterWorkerOfferDeclined": AcsRouterWorkerOfferDeclinedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerOfferExpired" event. */
    "Microsoft.Communication.RouterWorkerOfferExpired": AcsRouterWorkerOfferExpiredEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerOfferIssued" event. */
    "Microsoft.Communication.RouterWorkerOfferIssued": AcsRouterWorkerOfferIssuedEventData;
    /** An interface for the event data of a "Microsoft.Communication.RouterWorkerOfferRevoked" event. */
    "Microsoft.Communication.RouterWorkerOfferRevoked": AcsRouterWorkerOfferRevokedEventData;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppServicePlanUpdated event. */
export declare interface WebAppServicePlanUpdatedEventData {
    /** Detail of action on the app service plan. */
    appServicePlanEventTypeDetail: AppServicePlanEventTypeDetail;
    /** sku of app service plan. */
    sku: WebAppServicePlanUpdatedEventDataSku;
    /** name of the app service plan that had this event. */
    name: string;
    /** The client request id generated by the app service for the app service plan API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the app service plan API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the app service plan API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** sku of app service plan. */
export declare interface WebAppServicePlanUpdatedEventDataSku {
    /** name of app service plan sku. */
    name?: string;
    /** tier of app service plan sku. */
    tier?: string;
    /** size of app service plan sku. */
    size?: string;
    /** family of app service plan sku. */
    family?: string;
    /** capacity of app service plan sku. */
    capacity?: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppUpdated event. */
export declare interface WebAppUpdatedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationCompleted event. */
export declare interface WebBackupOperationCompletedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationFailed event. */
export declare interface WebBackupOperationFailedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationStarted event. */
export declare interface WebBackupOperationStartedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationCompleted event. */
export declare interface WebRestoreOperationCompletedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationFailed event. */
export declare interface WebRestoreOperationFailedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationStarted event. */
export declare interface WebRestoreOperationStartedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapCompleted event. */
export declare interface WebSlotSwapCompletedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapFailed event. */
export declare interface WebSlotSwapFailedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapStarted event. */
export declare interface WebSlotSwapStartedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewCancelled event. */
export declare interface WebSlotSwapWithPreviewCancelledEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewStarted event. */
export declare interface WebSlotSwapWithPreviewStartedEventData {
    /** Detail of action on the app. */
    appEventTypeDetail: AppEventTypeDetail;
    /** name of the web site that had this event. */
    name: string;
    /** The client request id generated by the app service for the site API operation that triggered this event. */
    clientRequestId: string;
    /** The correlation request id generated by the app service for the site API operation that triggered this event. */
    correlationRequestId: string;
    /** The request id generated by the app service for the site API operation that triggered this event. */
    requestId: string;
    /** HTTP request URL of this operation. */
    address: string;
    /** HTTP verb of this operation. */
    verb: string;
}

export { }
